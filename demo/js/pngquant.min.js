// The Module object: Our interface to the outside world. We import
// and export values on it. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to check if Module already exists (e.g. case 3 above).
// Substitution will be replaced with actual code on later stage of the build,
// this way Closure Compiler will not mangle it (e.g. case 4. above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module = typeof Module !== 'undefined' ? Module : {};

// --pre-jses are emitted after the Module integration code, so that they can
// refer to Module (if they choose; they can also define Module)
/**
 * Facade for pngquant lib which handles mounting of input file and exposing output file
 * @param  {object}   file     Arraybuffer of image data[png]
 * @param  {object}   options  command line options to be passed to pngquant exec
 * @param  {function} printF   Custom print function to handle stdout logs
 * @return {object}            Object containing processed png image data in `data` key
 */

function pngquant(file, options, printF) {
	/* Wrapper around pngquant exec */

	// This is to handle the case when we call the function without any argument in order to save it
	// from google clojure compiler which removes this :p
	if(typeof file === 'undefined')
		return;

	var stdout = "";
	var stderr = "";

	/* Default arguments to append -new.png to input file name */
	var args = ['--ext','-new.png'];

	/* Create command line options to passed using input `options` object */
	for (var key in options) {
		if (!options.hasOwnProperty(key)) continue;
		/* Prepend -- to option key name */
		if (options[key]) {
			args.push("--" + key);
			args.push(options[key]);
		}
	}

	/**
	 * We'll mount input file at MEMFS at input.png to ease up the things since
	 * only 1 image will be processed at a time
	 */
	args.push("/input.png");

	/* Creating top level module which will be used by pngqauntjs */
	var Module = {
		"print": printF,
		"printErr": printF,

		/* Mounting input file at input.png at root location */
		"preRun": [function() {
			FS.writeFile("/input.png", file, {
				encoding: "binary"
			});
		}],
		"arguments": args,
		"ENVIRONMENT": "SHELL" // maximum compatibility?
	};



// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
var key;
for (key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

Module['arguments'] = [];
Module['thisProgram'] = './this.program';
Module['quit'] = function(status, toThrow) {
  throw toThrow;
};
Module['preRun'] = [];
Module['postRun'] = [];

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('Module[\'ENVIRONMENT\'] value is not valid. must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  var nodeFS;
  var nodePath;

  Module['read'] = function shell_read(filename, binary) {
    var ret;
    ret = tryParseAsDataURI(filename);
    if (!ret) {
      if (!nodeFS) nodeFS = require('fs');
      if (!nodePath) nodePath = require('path');
      filename = nodePath['normalize'](filename);
      ret = nodeFS['readFileSync'](filename);
    }
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  if (process['argv'].length > 1) {
    Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });
  // Currently node will swallow unhandled rejections, but this behavior is
  // deprecated, and in the future it will exit with error status.
  process['on']('unhandledRejection', function(reason, p) {
    Module['printErr']('node.js exiting due to unhandled promise rejection');
    process['exit'](1);
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
} else
if (ENVIRONMENT_IS_SHELL) {
  if (typeof read != 'undefined') {
    Module['read'] = function shell_read(f) {
      var data = tryParseAsDataURI(f);
      if (data) {
        return intArrayToString(data);
      }
      return read(f);
    };
  }

  Module['readBinary'] = function readBinary(f) {
    var data;
    data = tryParseAsDataURI(f);
    if (data) {
      return data;
    }
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof quit === 'function') {
    Module['quit'] = function(status, toThrow) {
      quit(status);
    }
  }
} else
if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function shell_read(url) {
    try {
      var xhr = new XMLHttpRequest();
      xhr.open('GET', url, false);
      xhr.send(null);
      return xhr.responseText;
    } catch (err) {
      var data = tryParseAsDataURI(url);
      if (data) {
        return intArrayToString(data);
      }
      throw err;
    }
  };

  if (ENVIRONMENT_IS_WORKER) {
    Module['readBinary'] = function readBinary(url) {
      try {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, false);
        xhr.responseType = 'arraybuffer';
        xhr.send(null);
        return new Uint8Array(xhr.response);
      } catch (err) {
        var data = tryParseAsDataURI(url);
        if (data) {
          return data;
        }
        throw err;
      }
    };
  }

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
        return;
      }
      var data = tryParseAsDataURI(url);
      if (data) {
        onload(data.buffer);
        return;
      }
      onerror();
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  Module['setWindowTitle'] = function(title) { document.title = title };
} else
{
  throw new Error('not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)');
}

// console.log is checked first, as 'print' on the web will open a print dialogue
// printErr is preferable to console.warn (works better in shells)
// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.
Module['print'] = typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null);
Module['printErr'] = typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || Module['print']);

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Merge back in the overrides
for (key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

var STACK_ALIGN = 16;

// stack management, and other functionality that is provided by the compiled code,
// should not be used before it is ready
stackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {
  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');
};

function staticAlloc(size) {
  assert(!staticSealed);
  var ret = STATICTOP;
  STATICTOP = (STATICTOP + size + 15) & -16;
  return ret;
}

function dynamicAlloc(size) {
  assert(DYNAMICTOP_PTR);
  var ret = HEAP32[DYNAMICTOP_PTR>>2];
  var end = (ret + size + 15) & -16;
  HEAP32[DYNAMICTOP_PTR>>2] = end;
  if (end >= TOTAL_MEMORY) {
    var success = enlargeMemory();
    if (!success) {
      HEAP32[DYNAMICTOP_PTR>>2] = ret;
      return 0;
    }
  }
  return ret;
}

function alignMemory(size, factor) {
  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default
  var ret = size = Math.ceil(size / factor) * factor;
  return ret;
}

function getNativeTypeSize(type) {
  switch (type) {
    case 'i1': case 'i8': return 1;
    case 'i16': return 2;
    case 'i32': return 4;
    case 'i64': return 8;
    case 'float': return 4;
    case 'double': return 8;
    default: {
      if (type[type.length-1] === '*') {
        return 4; // A pointer
      } else if (type[0] === 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 === 0);
        return bits / 8;
      } else {
        return 0;
      }
    }
  }
}

function warnOnce(text) {
  if (!warnOnce.shown) warnOnce.shown = {};
  if (!warnOnce.shown[text]) {
    warnOnce.shown[text] = 1;
    Module.printErr(text);
  }
}



var jsCallStartIndex = 1;
var functionPointers = new Array(0);

// 'sig' parameter is only used on LLVM wasm backend
function addFunction(func, sig) {
  if (typeof sig === 'undefined') {
    Module.printErr('warning: addFunction(): You should provide a wasm function signature string as a second argument. This is not necessary for asm.js and asm2wasm, but is required for the LLVM wasm backend, so it is recommended for full portability.');
  }
  var base = 0;
  for (var i = base; i < base + 0; i++) {
    if (!functionPointers[i]) {
      functionPointers[i] = func;
      return jsCallStartIndex + i;
    }
  }
  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
}

function removeFunction(index) {
  functionPointers[index-jsCallStartIndex] = null;
}

var funcWrappers = {};

function getFuncWrapper(func, sig) {
  if (!func) return; // on null pointer, return undefined
  assert(sig);
  if (!funcWrappers[sig]) {
    funcWrappers[sig] = {};
  }
  var sigCache = funcWrappers[sig];
  if (!sigCache[func]) {
    // optimize away arguments usage in common cases
    if (sig.length === 1) {
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func);
      };
    } else if (sig.length === 2) {
      sigCache[func] = function dynCall_wrapper(arg) {
        return dynCall(sig, func, [arg]);
      };
    } else {
      // general case
      sigCache[func] = function dynCall_wrapper() {
        return dynCall(sig, func, Array.prototype.slice.call(arguments));
      };
    }
  }
  return sigCache[func];
}


function makeBigInt(low, high, unsigned) {
  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));
}

function dynCall(sig, ptr, args) {
  if (args && args.length) {
    assert(args.length == sig.length-1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
  } else {
    assert(sig.length == 1);
    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
    return Module['dynCall_' + sig].call(null, ptr);
  }
}


function getCompilerSetting(name) {
  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';
}

var Runtime = {
  // FIXME backwards compatibility layer for ports. Support some Runtime.*
  //       for now, fix it there, then remove it from here. That way we
  //       can minimize any period of breakage.
  dynCall: dynCall, // for SDL2 port
  // helpful errors
  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove "Runtime."') },
};

// The address globals begin at. Very low in memory, for code size and optimization opportunities.
// Above 0 is static memory, starting with globals.
// Then the stack.
// Then 'dynamic' memory for sbrk.
var GLOBAL_BASE = 8;



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html



//========================================
// Runtime essentials
//========================================

var ABORT = 0; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

/** @type {function(*, string=)} */
function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');
  return func;
}

var JSfuncs = {
  // Helpers for cwrap -- it can't refer to Runtime directly because it might
  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
  // out what the minified function name is.
  'stackSave': function() {
    stackSave()
  },
  'stackRestore': function() {
    stackRestore()
  },
  // type conversion from js to c
  'arrayToC' : function(arr) {
    var ret = stackAlloc(arr.length);
    writeArrayToMemory(arr, ret);
    return ret;
  },
  'stringToC' : function(str) {
    var ret = 0;
    if (str !== null && str !== undefined && str !== 0) { // null string
      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
      var len = (str.length << 2) + 1;
      ret = stackAlloc(len);
      stringToUTF8(str, ret, len);
    }
    return ret;
  }
};

// For fast lookup of conversion functions
var toC = {
  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']
};

// C calling interface.
function ccall (ident, returnType, argTypes, args, opts) {
  var func = getCFunc(ident);
  var cArgs = [];
  var stack = 0;
  assert(returnType !== 'array', 'Return type should not be "array".');
  if (args) {
    for (var i = 0; i < args.length; i++) {
      var converter = toC[argTypes[i]];
      if (converter) {
        if (stack === 0) stack = stackSave();
        cArgs[i] = converter(args[i]);
      } else {
        cArgs[i] = args[i];
      }
    }
  }
  var ret = func.apply(null, cArgs);
  if (returnType === 'string') ret = Pointer_stringify(ret);
  else if (returnType === 'boolean') ret = Boolean(ret);
  if (stack !== 0) {
    stackRestore(stack);
  }
  return ret;
}

function cwrap (ident, returnType, argTypes) {
  argTypes = argTypes || [];
  var cfunc = getCFunc(ident);
  // When the function takes numbers and returns a number, we can just return
  // the original function
  var numericArgs = argTypes.every(function(type){ return type === 'number'});
  var numericRet = returnType !== 'string';
  if (numericRet && numericArgs) {
    return cfunc;
  }
  return function() {
    return ccall(ident, returnType, argTypes, arguments);
  }
}

/** @type {function(number, number, string, boolean=)} */
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}

/** @type {function(number, string, boolean=)} */
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for getValue: ' + type);
    }
  return null;
}

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var stop;
    ptr = ret;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return staticAlloc(size);
  if (!runtimeInitialized) return dynamicAlloc(size);
  return _malloc(size);
}

/** @type {function(number, number=)} */
function Pointer_stringify(ptr, length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return UTF8ToString(ptr);
}

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}

function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}

// Allocate heap space for a JS string, and write it there.
// It is the responsibility of the caller to free() that memory.
function allocateUTF8(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = _malloc(size);
  if (ret) stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

// Allocate stack space for a JS string, and write it there.
function allocateUTF8OnStack(str) {
  var size = lengthBytesUTF8(str) + 1;
  var ret = stackAlloc(size);
  stringToUTF8Array(str, HEAP8, ret, size);
  return ret;
}

function demangle(func) {
  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  var regex =
    /__Z[\w\d_]+/g;
  return text.replace(regex,
    function(x) {
      var y = demangle(x);
      return x === y ? x : (x + ' [' + y + ']');
    });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}

// Memory management

var PAGE_SIZE = 16384;
var WASM_PAGE_SIZE = 65536;
var ASMJS_PAGE_SIZE = 16777216;
var MIN_TOTAL_MEMORY = 16777216;

function alignUp(x, multiple) {
  if (x % multiple > 0) {
    x += multiple - (x % multiple);
  }
  return x;
}

var HEAP,
/** @type {ArrayBuffer} */
  buffer,
/** @type {Int8Array} */
  HEAP8,
/** @type {Uint8Array} */
  HEAPU8,
/** @type {Int16Array} */
  HEAP16,
/** @type {Uint16Array} */
  HEAPU16,
/** @type {Int32Array} */
  HEAP32,
/** @type {Uint32Array} */
  HEAPU32,
/** @type {Float32Array} */
  HEAPF32,
/** @type {Float64Array} */
  HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or (4) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 67108864;
if (TOTAL_MEMORY < TOTAL_STACK) Module.printErr('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  // Use a WebAssembly memory where available
  {
    buffer = new ArrayBuffer(TOTAL_MEMORY);
  }
  assert(buffer.byteLength === TOTAL_MEMORY);
  Module['buffer'] = buffer;
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Module['dynCall_v'](func);
      } else {
        Module['dynCall_vi'](func, callback.arg);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
/** @deprecated */
function writeStringToMemory(string, buffer, dontAddNull) {
  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var /** @type {number} */ lastChar, /** @type {number} */ end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}

function writeArrayToMemory(array, buffer) {
  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')
  HEAP8.set(array, buffer);
}

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_round = Math.round;
var Math_min = Math.min;
var Math_max = Math.max;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;






// Prefix of data URIs emitted by SINGLE_FILE and related options.
var dataURIPrefix = 'data:application/octet-stream;base64,';

// Indicates whether filename is a base64 data URI.
function isDataURI(filename) {
  return String.prototype.startsWith ?
      filename.startsWith(dataURIPrefix) :
      filename.indexOf(dataURIPrefix) === 0;
}





// === Body ===

var ASM_CONSTS = [];





STATIC_BASE = GLOBAL_BASE;

STATICTOP = STATIC_BASE + 34336;
/* global initializers */  __ATINIT__.push();


memoryInitializer = "data:application/octet-stream;base64,";





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


  function ___lock() {}

  
    

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up; up--) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.length which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.length : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) {
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          try {
            var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
            transaction.onerror = function(e) {
              callback(this.error);
              e.preventDefault();
            };
  
            var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
            var index = store.index('timestamp');
  
            index.openKeyCursor().onsuccess = function(event) {
              var cursor = event.target.result;
  
              if (!cursor) {
                return callback(null, { type: 'remote', db: db, entries: entries });
              }
  
              entries[cursor.primaryKey] = { timestamp: cursor.key };
  
              cursor.continue();
            };
          } catch (e) {
            return callback(e);
          }
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
        var flags = process["binding"]("constants");
        // Node.js 4 compatibility: it has no namespaces for constants
        if (flags["fs"]) {
          flags = flags["fs"];
        }
        NODEFS.flagsForNodeMap = {
          "1024": flags["O_APPEND"],
          "64": flags["O_CREAT"],
          "128": flags["O_EXCL"],
          "0": flags["O_RDONLY"],
          "2": flags["O_RDWR"],
          "4096": flags["O_SYNC"],
          "512": flags["O_TRUNC"],
          "1": flags["O_WRONLY"]
        };
      },bufferFrom:function (arrayBuffer) {
        // Node.js < 4.5 compatibility: Buffer.from does not support ArrayBuffer
        // Buffer.from before 4.5 was just a method inherited from Uint8Array
        // Buffer.alloc has been added with Buffer.from together, so check it instead
        return Buffer.alloc ? Buffer.from(arrayBuffer) : new Buffer(arrayBuffer);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // Node.js on Windows never represents permission bit 'x', so
            // propagate read bits to execute bits
            stat.mode = stat.mode | ((stat.mode & 292) >> 2);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsForNode:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        var newFlags = 0;
        for (var k in NODEFS.flagsForNodeMap) {
          if (flags & k) {
            newFlags |= NODEFS.flagsForNodeMap[k];
            flags ^= k;
          }
        }
  
        if (!flags) {
          return newFlags;
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsForNode(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // Node.js < 6 compatibility: node errors on 0 length reads
          if (length === 0) return 0;
          try {
            return fs.readSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },write:function (stream, buffer, offset, length, position) {
          try {
            return fs.writeSync(stream.nfd, NODEFS.bufferFrom(buffer.buffer), offset, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          var entries = ['.', '..'];
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:{},streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdirTree:function (path, mode) {
        var dirs = path.split('/');
        var d = '';
        for (var i = 0; i < dirs.length; ++i) {
          if (!dirs[i]) continue;
          d += '/' + dirs[i];
          try {
            FS.mkdir(d, mode);
          } catch(e) {
            if (e.errno != ERRNO_CODES.EEXIST) throw e;
          }
        }
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
        stream.fd = null;
      },isClosed:function (stream) {
        return stream.fd === null;
      },llseek:function (stream, offset, whence) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = typeof position !== 'undefined';
        if (!seeking) {
          position = stream.position;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (FS.isClosed(stream)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        var stream = FS.open(path, opts.flags, opts.mode);
        if (typeof data === 'string') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
        } else if (ArrayBuffer.isView(data)) {
          FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
        } else {
          throw new Error('Unsupported data type');
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (lookup.node === null) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto')['randomBytes'](1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          // Node.js compatibility: assigning on this.stack fails on Node 4 (but fixed on Node 8)
          if (this.stack) Object.defineProperty(this, "stack", { value: (new Error).stack, writable: true });
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall10(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // unlink
      var path = SYSCALLS.getStr();
      FS.unlink(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit
      var offset = offset_low;
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall38(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rename
      var old_path = SYSCALLS.getStr(), new_path = SYSCALLS.getStr();
      FS.rename(old_path, new_path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21509:
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21510:
        case 21511:
        case 21512:
        case 21506:
        case 21507:
        case 21508: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        case 21523: {
          // TODO: in theory we should write to the winsize struct that gets
          // passed in, but for now musl doesn't read anything on it
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21524: {
          // TODO: technically, this ioctl call should change the window size.
          // but, since emscripten doesn't have any concept of a terminal window
          // yet, we'll just silently throw it away as we do TIOCGWINSZ
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
   
  
   
  
     

  function ___unlock() {}

  function ___wait() {}

  function _abort() {
      Module['abort']();
    }

   

   

  
  
   
  
   function _longjmp(env, value) {
      Module['setThrew'](env, value || 1);
      throw 'longjmp';
    }function _emscripten_longjmp(env, value) {
      _longjmp(env, value);
    }



   

  var _llvm_fabs_f32=Math_abs;

  var _llvm_fabs_f64=Math_abs;

  var _llvm_floor_f64=Math_floor;

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      stackRestore(ret);
    }

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }


  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 

   

   


   

FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
DYNAMICTOP_PTR = staticAlloc(4);

STACK_BASE = STACKTOP = alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

var ASSERTIONS = true;

/** @type {function(string, boolean=, number=)} */
function intArrayFromString(stringy, dontAddNull, length) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      if (ASSERTIONS) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      }
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}


// Copied from https://github.com/strophe/strophejs/blob/e06d027/src/polyfills.js#L149

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

/**
 * Decodes a base64 string.
 * @param {String} input The string to decode.
 */
var decodeBase64 = typeof atob === 'function' ? atob : function (input) {
  var keyStr = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';

  var output = '';
  var chr1, chr2, chr3;
  var enc1, enc2, enc3, enc4;
  var i = 0;
  // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
  input = input.replace(/[^A-Za-z0-9\+\/\=]/g, '');
  do {
    enc1 = keyStr.indexOf(input.charAt(i++));
    enc2 = keyStr.indexOf(input.charAt(i++));
    enc3 = keyStr.indexOf(input.charAt(i++));
    enc4 = keyStr.indexOf(input.charAt(i++));

    chr1 = (enc1 << 2) | (enc2 >> 4);
    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
    chr3 = ((enc3 & 3) << 6) | enc4;

    output = output + String.fromCharCode(chr1);

    if (enc3 !== 64) {
      output = output + String.fromCharCode(chr2);
    }
    if (enc4 !== 64) {
      output = output + String.fromCharCode(chr3);
    }
  } while (i < input.length);
  return output;
};

// Converts a string of base64 into a byte array.
// Throws error on invalid input.
function intArrayFromBase64(s) {
  if (typeof ENVIRONMENT_IS_NODE === 'boolean' && ENVIRONMENT_IS_NODE) {
    var buf;
    try {
      buf = Buffer.from(s, 'base64');
    } catch (_) {
      buf = new Buffer(s, 'base64');
    }
    return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength);
  }

  try {
    var decoded = decodeBase64(s);
    var bytes = new Uint8Array(decoded.length);
    for (var i = 0 ; i < decoded.length ; ++i) {
      bytes[i] = decoded.charCodeAt(i);
    }
    return bytes;
  } catch (_) {
    throw new Error('Converting base64 string to bytes failed.');
  }
}

// If filename is a base64 data URI, parses and returns data (Buffer on node,
// Uint8Array otherwise). If filename is not a base64 data URI, returns undefined.
function tryParseAsDataURI(filename) {
  if (!isDataURI(filename)) {
    return;
  }

  return intArrayFromBase64(filename.slice(dataURIPrefix.length));
}



function nullFunc_idi(x) { Module["printErr"]("Invalid function pointer called with signature 'idi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vid(x) { Module["printErr"]("Invalid function pointer called with signature 'vid'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_idi(index,a1,a2) {
  try {
    return Module["dynCall_idi"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiii(index,a1,a2,a3,a4) {
  try {
    return Module["dynCall_iiiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_iiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    return Module["dynCall_iiiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vid(index,a1,a2) {
  try {
    Module["dynCall_vid"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    Module["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_idi": nullFunc_idi, "nullFunc_ii": nullFunc_ii, "nullFunc_iii": nullFunc_iii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iiiii": nullFunc_iiiii, "nullFunc_iiiiiiiiii": nullFunc_iiiiiiiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vid": nullFunc_vid, "nullFunc_vii": nullFunc_vii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiii": nullFunc_viiii, "invoke_idi": invoke_idi, "invoke_ii": invoke_ii, "invoke_iii": invoke_iii, "invoke_iiii": invoke_iiii, "invoke_iiiii": invoke_iiiii, "invoke_iiiiiiiiii": invoke_iiiiiiiiii, "invoke_vi": invoke_vi, "invoke_vid": invoke_vid, "invoke_vii": invoke_vii, "invoke_viii": invoke_viii, "invoke_viiii": invoke_viiii, "___lock": ___lock, "___setErrNo": ___setErrNo, "___syscall10": ___syscall10, "___syscall140": ___syscall140, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall221": ___syscall221, "___syscall38": ___syscall38, "___syscall5": ___syscall5, "___syscall54": ___syscall54, "___syscall6": ___syscall6, "___unlock": ___unlock, "___wait": ___wait, "_abort": _abort, "_emscripten_longjmp": _emscripten_longjmp, "_emscripten_memcpy_big": _emscripten_memcpy_big, "_llvm_fabs_f32": _llvm_fabs_f32, "_llvm_fabs_f64": _llvm_fabs_f64, "_llvm_floor_f64": _llvm_floor_f64, "_llvm_stackrestore": _llvm_stackrestore, "_llvm_stacksave": _llvm_stacksave, "_longjmp": _longjmp, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX };
// EMSCRIPTEN_START_ASM
var asm = (/** @suppress {uselessCode} */ function(global, env, buffer) {
'almost asm';


  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);

  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntS = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_idi=env.nullFunc_idi;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iiiii=env.nullFunc_iiiii;
  var nullFunc_iiiiiiiiii=env.nullFunc_iiiiiiiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vid=env.nullFunc_vid;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_idi=env.invoke_idi;
  var invoke_ii=env.invoke_ii;
  var invoke_iii=env.invoke_iii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iiiii=env.invoke_iiiii;
  var invoke_iiiiiiiiii=env.invoke_iiiiiiiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vid=env.invoke_vid;
  var invoke_vii=env.invoke_vii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiii=env.invoke_viiii;
  var ___lock=env.___lock;
  var ___setErrNo=env.___setErrNo;
  var ___syscall10=env.___syscall10;
  var ___syscall140=env.___syscall140;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall221=env.___syscall221;
  var ___syscall38=env.___syscall38;
  var ___syscall5=env.___syscall5;
  var ___syscall54=env.___syscall54;
  var ___syscall6=env.___syscall6;
  var ___unlock=env.___unlock;
  var ___wait=env.___wait;
  var _abort=env._abort;
  var _emscripten_longjmp=env._emscripten_longjmp;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var _llvm_fabs_f32=env._llvm_fabs_f32;
  var _llvm_fabs_f64=env._llvm_fabs_f64;
  var _llvm_floor_f64=env._llvm_floor_f64;
  var _llvm_stackrestore=env._llvm_stackrestore;
  var _llvm_stacksave=env._llvm_stacksave;
  var _longjmp=env._longjmp;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _main($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $2 = sp;
 dest=$2; stop=dest+72|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $3 = ((($2)) + 52|0);
 HEAPF32[$3>>2] = 1.0;
 $4 = (_pngquant_parse_options($0,$1,$2)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = (_pngquant_main($2)|0);
 $$0 = $6;
 STACKTOP = sp;return ($$0|0);
}
function _pngquant_main($0) {
 $0 = $0|0;
 var $$0 = 0, $$0131 = 0, $$0137165 = 0, $$0138$lcssa180182 = 0, $$0138164 = 0, $$014$i$i = 0, $$0140$lcssa179183 = 0, $$0141$lcssa178184 = 0, $$0141162 = 0, $$0143$lcssa177 = 0, $$0143$lcssa177185 = 0, $$0143161 = 0, $$0145169 = 0, $$1$ph = 0, $$1132$ph = 0, $$1134 = 0, $$1139 = 0, $$1142 = 0, $$1144 = 0, $$1156 = 0;
 var $$133$i = 0, $$135$i = 0, $$166$i = 0.0, $$2 = 0, $$2$i = 0, $$3$ph$i = 0, $$5$i = 0, $$7$i = 0, $$byval_copy = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$i$pre$i$pre = 0, $$pre32$i$pre$i$pre = 0, $$sroa$0$0$$sroa_idx$i$i = 0, $$sroa$01$0$$sroa_idx$i$i = 0, $$sroa$01$0$copyload$i$i = 0, $$sroa$2$0$$sroa_idx$i$i = 0, $$sroa$3$0$$sroa_idx$i$i = 0, $$sroa$4$0$$sroa_idx$i$i = 0, $$sroa$42$0$$sroa_idx$i$i = 0;
 var $$sroa$42$0$copyload$i$i = 0, $$sroa$5$0$$sroa_idx$i$i = 0, $$sroa$5$0$copyload$i$i = 0, $$sroa$6$0$$sroa_idx$i$i = 0, $$sroa$6$0$copyload$i$i = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0.0, $228 = 0, $229 = 0.0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0.0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0.0, $286 = 0.0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0.0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0;
 var $99 = 0, $brmerge$not$i = 0, $exitcond$i$i = 0, $exitcond$i$i160 = 0, $exitcond$i$i186 = 0, $exitcond$i76$i = 0, $not$or$cond3$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i151 = 0, $phitmp$i = 0.0, $spec$select$i = 0, $spec$select70$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0;
 var $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer49 = 0, $vararg_buffer55 = 0, $vararg_buffer7 = 0, $vararg_ptr36 = 0, $vararg_ptr46 = 0, $vararg_ptr47 = 0, $vararg_ptr48 = 0, $vararg_ptr52 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0, $vararg_ptr58 = 0;
 var dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1904|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1904|0);
 $$byval_copy = sp + 1892|0;
 $vararg_buffer55 = sp + 1800|0;
 $vararg_buffer49 = sp + 1784|0;
 $vararg_buffer43 = sp + 1768|0;
 $vararg_buffer40 = sp + 1760|0;
 $vararg_buffer37 = sp + 1752|0;
 $vararg_buffer33 = sp + 1736|0;
 $vararg_buffer30 = sp + 1728|0;
 $vararg_buffer28 = sp + 1720|0;
 $vararg_buffer26 = sp + 1712|0;
 $vararg_buffer24 = sp + 1704|0;
 $vararg_buffer22 = sp + 1696|0;
 $vararg_buffer19 = sp + 1688|0;
 $vararg_buffer16 = sp + 1680|0;
 $vararg_buffer13 = sp + 1672|0;
 $vararg_buffer10 = sp + 1664|0;
 $vararg_buffer7 = sp + 1656|0;
 $vararg_buffer4 = sp + 1648|0;
 $vararg_buffer1 = sp + 1640|0;
 $vararg_buffer = sp + 1632|0;
 $1 = sp + 1888|0;
 $2 = sp + 1432|0;
 $3 = sp + 200|0;
 $4 = sp + 1884|0;
 $5 = sp + 1880|0;
 $6 = sp;
 $7 = sp + 1808|0;
 $8 = ((($0)) + 66|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if (!($10)) {
  (_puts(14566)|0);
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $11 = ((($0)) + 67|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12<<24>>24)==(0);
 if (!($13)) {
  $14 = HEAP32[2490]|0;
  HEAP32[$vararg_buffer>>2] = 14566;
  (_fprintf($14,14589,$vararg_buffer)|0);
  _rwpng_version_info($14);
  (_fputc(10,$14)|0);
  (_fwrite(14638,1379,1,$14)|0);
  $$2 = 1;
  STACKTOP = sp;return ($$2|0);
 }
 $15 = ((($0)) + 65|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)==(0);
 if (!($17)) {
  $18 = HEAP32[2457]|0;
  HEAP32[$vararg_buffer1>>2] = 14566;
  (_fprintf($18,14589,$vararg_buffer1)|0);
  _rwpng_version_info($18);
  (_fputc(10,$18)|0);
  (_fwrite(14638,1379,1,$18)|0);
  $$2 = 0;
  STACKTOP = sp;return ($$2|0);
 }
 $19 = (_liq_attr_create()|0);
 HEAP32[$0>>2] = $19;
 $20 = ($19|0)==(0|0);
 if ($20) {
  $21 = HEAP32[2490]|0;
  (_fwrite(16018,44,1,$21)|0);
  $$2 = 18;
  STACKTOP = sp;return ($$2|0);
 }
 $22 = ((($0)) + 68|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = ($23<<24>>24)==(0);
 if (!($24)) {
  _liq_set_log_callback($19,10,0);
  $25 = ((($0)) + 8|0);
  HEAP32[$25>>2] = 10;
 }
 $26 = ((($0)) + 16|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 L20: do {
  if (!($28)) {
   $29 = HEAP32[$0>>2]|0;
   $30 = ((($0)) + 60|0);
   $31 = (_strtol($27,$5,10)|0);
   $32 = HEAP32[$5>>2]|0;
   $33 = ($32|0)==($27|0);
   L22: do {
    if ($33) {
     label = 20;
    } else {
     $34 = HEAP8[$32>>0]|0;
     $35 = ($34<<24>>24)==(0);
     $36 = ($31|0)<(0);
     $or$cond$i = $36 & $35;
     do {
      if ($or$cond$i) {
       $37 = (0 - ($31))|0;
       $$133$i = 0;$$135$i = $37;
      } else {
       if ($35) {
        $38 = ($31*9)|0;
        $39 = (($38|0) / 10)&-1;
        $$133$i = $39;$$135$i = $31;
        break;
       }
       $40 = ($34<<24>>24)==(45);
       if ($40) {
        $41 = ((($32)) + 1|0);
        $42 = HEAP8[$41>>0]|0;
        $43 = ($42<<24>>24)==(0);
        if ($43) {
         $$133$i = $31;$$135$i = 100;
         break;
        }
       }
       $44 = (_strtol($32,$5,10)|0);
       $45 = HEAP32[$5>>2]|0;
       $46 = ($32|0)!=($45|0);
       $47 = ($44|0)<(1);
       $48 = (0 - ($44))|0;
       $not$or$cond3$i = $47 & $46;
       if ($not$or$cond3$i) {
        $$133$i = $31;$$135$i = $48;
       } else {
        label = 20;
        break L22;
       }
      }
     } while(0);
     $49 = ($$133$i|0)>(0);
     $50 = $49&1;
     HEAP8[$30>>0] = $50;
     $51 = (_liq_set_quality($29,$$133$i,$$135$i)|0);
     $52 = ($51|0)==(0);
     if ($52) {
      break L20;
     }
    }
   } while(0);
   if ((label|0) == 20) {
   }
   $53 = HEAP32[2490]|0;
   (_fwrite(16063,82,1,$53)|0);
   $$2 = 4;
   STACKTOP = sp;return ($$2|0);
  }
 } while(0);
 $54 = ((($0)) + 63|0);
 $55 = HEAP8[$54>>0]|0;
 $56 = ($55<<24>>24)==(0);
 if (!($56)) {
  $57 = HEAP32[$0>>2]|0;
  (_liq_set_min_opacity($57,238)|0);
  $58 = HEAP32[2490]|0;
  (_fwrite(16146,48,1,$58)|0);
 }
 $59 = ((($0)) + 64|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = ($60<<24>>24)==(0);
 if (!($61)) {
  $62 = HEAP32[$0>>2]|0;
  _liq_set_last_index_transparent($62,1);
 }
 $63 = ((($0)) + 44|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64>>>0)>(9);
 if ($65) {
  $66 = ((($0)) + 59|0);
  HEAP8[$66>>0] = 1;
  $67 = ($64|0)==(11);
  if ($67) {
   $68 = ((($0)) + 52|0);
   HEAPF32[$68>>2] = 0.0;
   HEAP32[$63>>2] = 10;
   $71 = 10;
   label = 31;
  } else {
   $71 = $64;
   label = 31;
  }
 } else {
  $69 = ($64|0)==(0);
  if (!($69)) {
   $71 = $64;
   label = 31;
  }
 }
 if ((label|0) == 31) {
  $70 = HEAP32[$0>>2]|0;
  $72 = (_liq_set_speed($70,$71)|0);
  $73 = ($72|0)==(0);
  if (!($73)) {
   $74 = HEAP32[2490]|0;
   (_fwrite(16195,48,1,$74)|0);
   $$2 = 4;
   STACKTOP = sp;return ($$2|0);
  }
 }
 $75 = ((($0)) + 40|0);
 $76 = HEAP32[$75>>2]|0;
 $77 = ($76|0)==(0);
 if (!($77)) {
  $78 = HEAP32[$0>>2]|0;
  $79 = (_liq_set_max_colors($78,$76)|0);
  $80 = ($79|0)==(0);
  if (!($80)) {
   $81 = HEAP32[2490]|0;
   (_fwrite(16244,44,1,$81)|0);
   $$2 = 4;
   STACKTOP = sp;return ($$2|0);
  }
 }
 $82 = ((($0)) + 48|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($83|0)==(0);
 if (!($84)) {
  $85 = HEAP32[$0>>2]|0;
  $86 = (_liq_set_min_posterization($85,$83)|0);
  $87 = ($86|0)==(0);
  if (!($87)) {
   $88 = HEAP32[2490]|0;
   (_fwrite(16289,53,1,$88)|0);
   $$2 = 4;
   STACKTOP = sp;return ($$2|0);
  }
 }
 $89 = ((($0)) + 20|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ($90|0)==(0|0);
 if ($91) {
  $96 = ((($0)) + 52|0);
  $97 = +HEAPF32[$96>>2];
  $98 = $97 > 0.0;
  $99 = $98 ? 16402 : 16411;
  HEAP32[$89>>2] = $99;
  $$phi$trans$insert = ((($0)) + 24|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $100 = ($$pre|0)==(0|0);
  if (!($100)) {
   $101 = ((($0)) + 36|0);
   $102 = HEAP32[$101>>2]|0;
   $103 = ($102|0)==(1);
   if (!($103)) {
    $104 = HEAP32[2490]|0;
    (_fwrite(16420,133,1,$104)|0);
    $$2 = 4;
    STACKTOP = sp;return ($$2|0);
   }
  }
 } else {
  $92 = ((($0)) + 24|0);
  $93 = HEAP32[$92>>2]|0;
  $94 = ($93|0)==(0|0);
  if (!($94)) {
   $95 = HEAP32[2490]|0;
   (_fwrite(16343,58,1,$95)|0);
   $$2 = 4;
   STACKTOP = sp;return ($$2|0);
  }
 }
 $105 = ((($0)) + 57|0);
 $106 = HEAP8[$105>>0]|0;
 $107 = ($106<<24>>24)==(0);
 if (!($107)) {
  $108 = ((($0)) + 56|0);
  $109 = HEAP8[$108>>0]|0;
  $110 = ($109<<24>>24)==(0);
  if ($110) {
   $111 = ((($0)) + 36|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = ($112|0)==(1);
   if (!($113)) {
    $114 = HEAP32[2490]|0;
    (_fwrite(16554,169,1,$114)|0);
    $$2 = 4;
    STACKTOP = sp;return ($$2|0);
   }
  }
 }
 $115 = ((($0)) + 28|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ($116|0)==(0|0);
 L79: do {
  if (!($117)) {
   _memset(($6|0),0,200)|0;
   $118 = HEAP32[$0>>2]|0;
   $119 = ((($0)) + 4|0);
   $120 = (_read_image($118,$116,0,$6,$119,1,1,0)|0);
   $121 = ($120|0)==(0);
   do {
    if ($121) {
     $124 = HEAP32[$0>>2]|0;
     $125 = HEAP32[$119>>2]|0;
     $126 = (_liq_quantize_image($124,$125)|0);
     $127 = (_liq_get_palette($126)|0);
     $128 = ($127|0)==(0|0);
     if ($128) {
      $129 = HEAP32[2490]|0;
      $130 = HEAP32[$115>>2]|0;
      HEAP32[$vararg_buffer7>>2] = $130;
      (_fprintf($129,16751,$vararg_buffer7)|0);
      break;
     }
     $131 = HEAP32[$127>>2]|0;
     $132 = ($131|0)==(0);
     if (!($132)) {
      $$0145169 = 0;
      while(1) {
       $133 = HEAP32[$119>>2]|0;
       $134 = (((($127)) + 4|0) + ($$0145169<<2)|0);
       ;HEAP8[$$byval_copy>>0]=HEAP8[$134>>0]|0;HEAP8[$$byval_copy+1>>0]=HEAP8[$134+1>>0]|0;HEAP8[$$byval_copy+2>>0]=HEAP8[$134+2>>0]|0;HEAP8[$$byval_copy+3>>0]=HEAP8[$134+3>>0]|0;
       (_liq_image_add_fixed_color($133,$$byval_copy)|0);
       $135 = (($$0145169) + 1)|0;
       $136 = HEAP32[$127>>2]|0;
       $137 = ($135>>>0)<($136>>>0);
       if ($137) {
        $$0145169 = $135;
       } else {
        break;
       }
      }
     }
     _liq_result_destroy($126);
     break L79;
    } else {
     $122 = HEAP32[2490]|0;
     $123 = HEAP32[$115>>2]|0;
     HEAP32[$vararg_buffer4>>2] = $123;
     (_fprintf($122,16724,$vararg_buffer4)|0);
    }
   } while(0);
   $$2 = 4;
   STACKTOP = sp;return ($$2|0);
  }
 } while(0);
 $138 = ((($0)) + 36|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = ($139|0)==(0);
 $141 = ((($0)) + 56|0);
 if ($140) {
  $142 = HEAP8[$141>>0]|0;
  $143 = ($142<<24>>24)==(0);
  if ($143) {
   $144 = HEAP32[2490]|0;
   (_fwrite(16790,26,1,$144)|0);
   $145 = HEAP8[$22>>0]|0;
   $146 = ($145<<24>>24)==(0);
   if (!($146)) {
    HEAP32[$vararg_buffer10>>2] = 14566;
    (_fprintf($144,14589,$vararg_buffer10)|0);
    _rwpng_version_info($144);
    (_fputc(10,$144)|0);
   }
   (_fwrite(14638,1379,1,$144)|0);
   $$2 = 1;
   STACKTOP = sp;return ($$2|0);
  } else {
   $$0138$lcssa180182 = 0;$$0140$lcssa179183 = 0;$$0141$lcssa178184 = 0;$$0143$lcssa177185 = 0;
  }
 } else {
  $147 = ((($0)) + 32|0);
  $148 = ((($7)) + 24|0);
  $149 = ((($7)) + 57|0);
  $150 = ((($7)) + 61|0);
  $151 = ((($7)) + 20|0);
  $152 = ((($7)) + 58|0);
  $153 = ((($7)) + 56|0);
  $154 = ((($7)) + 62|0);
  $155 = ((($7)) + 68|0);
  $156 = ((($7)) + 60|0);
  $157 = ((($2)) + 164|0);
  $158 = ((($2)) + 188|0);
  $159 = HEAP32[2490]|0;
  $160 = ((($2)) + 168|0);
  $161 = ((($7)) + 4|0);
  $162 = ((($7)) + 52|0);
  $163 = ((($2)) + 192|0);
  $164 = ((($3)) + 156|0);
  $165 = ((($3)) + 160|0);
  $166 = ((($3)) + 176|0);
  $167 = ((($3)) + 1224|0);
  $168 = ((($3)) + 188|0);
  $169 = ((($3)) + 184|0);
  $170 = ((($3)) + 196|0);
  $171 = ((($7)) + 59|0);
  $172 = ((($3)) + 1228|0);
  $173 = ((($2)) + 184|0);
  $174 = ((($3)) + 192|0);
  $175 = ((($3)) + 164|0);
  $176 = ((($3)) + 168|0);
  $$0137165 = 0;$$0138164 = 0;$$0141162 = 0;$$0143161 = 0;
  while(1) {
   $178 = HEAP8[$141>>0]|0;
   $179 = ($178<<24>>24)==(0);
   if ($179) {
    $180 = HEAP32[$147>>2]|0;
    $181 = (($180) + ($$0137165<<2)|0);
    $182 = HEAP32[$181>>2]|0;
    $190 = $182;
   } else {
    $190 = 16817;
   }
   dest=$7; src=$0; stop=dest+72|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
   $183 = HEAP32[$0>>2]|0;
   $184 = (_liq_attr_copy($183)|0);
   HEAP32[$7>>2] = $184;
   $185 = HEAP32[$148>>2]|0;
   $186 = HEAP8[$149>>0]|0;
   $187 = ($186<<24>>24)==(0);
   do {
    if ($187) {
     $188 = ($185|0)==(0|0);
     L110: do {
      if ($188) {
       $189 = HEAP32[$151>>2]|0;
       $191 = (_strlen($190)|0);
       $192 = (_strlen($189)|0);
       $193 = (($191) + 5)|0;
       $194 = (($193) + ($192))|0;
       $195 = (_malloc($194)|0);
       $196 = ($195|0)==(0|0);
       if ($196) {
        $$0 = 0;$$0131 = 0;
        break;
       }
       (_strncpy($195,$190,$191)|0);
       $197 = (($195) + ($191)|0);
       $198 = ((($197)) + -4|0);
       $199 = (_strncmp($198,16823,4)|0);
       $200 = ($199|0)==(0);
       do {
        if (!($200)) {
         $201 = (_strncmp($198,16828,4)|0);
         $202 = ($201|0)==(0);
         if ($202) {
          break;
         }
         (_strcpy($197,$189)|0);
         $$0 = $195;$$0131 = $195;
         break L110;
        }
       } while(0);
       (_strcpy($198,$189)|0);
       $$0 = $195;$$0131 = $195;
      } else {
       $$0 = 0;$$0131 = $185;
      }
     } while(0);
     $203 = HEAP8[$152>>0]|0;
     $204 = ($203<<24>>24)==(0);
     if (!($204)) {
      $$1$ph = $$0;$$1132$ph = $$0131;
      label = 78;
      break;
     }
     $205 = (_fopen($$0131,16833)|0);
     $206 = ($205|0)==(0|0);
     if ($206) {
      $$1$ph = $$0;$$1132$ph = $$0131;
      label = 78;
      break;
     }
     (_fclose($205)|0);
     HEAP32[$vararg_buffer13>>2] = $$0131;
     (_fprintf($159,16836,$vararg_buffer13)|0);
     $$1134 = 15;$$1156 = $$0;
    } else {
     $$1$ph = 0;$$1132$ph = $185;
     label = 78;
    }
   } while(0);
   if ((label|0) == 78) {
    label = 0;
    HEAP32[$vararg_buffer16>>2] = $190;
    _verbose_printf($7,16875,$vararg_buffer16);
    HEAP32[$1>>2] = 0;
    _memset(($2|0),0,200)|0;
    $207 = HEAP8[$150>>0]|0;
    $208 = ($207<<24>>24)==(0);
    do {
     if ($208) {
      $209 = HEAP8[$149>>0]|0;
      $210 = ($209<<24>>24)==(0);
      if ($210) {
       $220 = 0;
       break;
      }
      $211 = HEAP8[$156>>0]|0;
      $212 = ($211<<24>>24)!=(0);
      $220 = $212;
     } else {
      $220 = 1;
     }
    } while(0);
    $213 = HEAP32[$7>>2]|0;
    $214 = HEAP8[$153>>0]|0;
    $215 = $214&255;
    $216 = HEAP8[$154>>0]|0;
    $217 = ($216<<24>>24)!=(0);
    $218 = HEAP8[$155>>0]|0;
    $219 = ($218<<24>>24)!=(0);
    $221 = (_read_image($213,$190,$215,$2,$1,$220,$217,$219)|0);
    _memset(($3|0),0,1232)|0;
    $222 = ($221|0)==(0);
    L126: do {
     if ($222) {
      $223 = HEAP32[$157>>2]|0;
      $224 = (($223) + 1023)|0;
      $225 = $224 >>> 10;
      HEAP32[$vararg_buffer19>>2] = $225;
      _verbose_printf($7,16879,$vararg_buffer19);
      $226 = HEAP32[$158>>2]|0;
      L128: do {
       switch ($226|0) {
       case 2:  {
        _verbose_printf($7,16897,$vararg_buffer22);
        break;
       }
       case 4:  {
        _verbose_printf($7,16963,$vararg_buffer24);
        break;
       }
       case 3:  {
        _verbose_printf($7,17029,$vararg_buffer26);
        break;
       }
       case 6:  {
        break;
       }
       case 1:  {
        _verbose_printf($7,17079,$vararg_buffer28);
        break;
       }
       default: {
        $227 = +HEAPF64[$160>>3];
        $228 = $227 != 0.45455000000000001;
        if (!($228)) {
         break L128;
        }
        $229 = 1.0 / $227;
        HEAPF64[$vararg_buffer30>>3] = $229;
        _verbose_printf($7,17113,$vararg_buffer30);
       }
       }
      } while(0);
      $230 = HEAP32[$161>>2]|0;
      $231 = ($230|0)==(0|0);
      $232 = HEAP32[$1>>2]|0;
      $233 = $231 ? $232 : $230;
      $234 = HEAP32[$7>>2]|0;
      $235 = (_liq_image_quantize($233,$234,$4)|0);
      switch ($235|0) {
      case 0:  {
       $236 = HEAP32[$4>>2]|0;
       (_liq_set_output_gamma($236,0.45455000000000001)|0);
       $237 = HEAP32[$4>>2]|0;
       $238 = +HEAPF32[$162>>2];
       (_liq_set_dithering_level($237,$238)|0);
       $239 = HEAP32[$4>>2]|0;
       $240 = HEAP32[$163>>2]|0;
       $241 = (_liq_image_get_width($232)|0);
       HEAP32[$164>>2] = $241;
       $242 = (_liq_image_get_height($232)|0);
       HEAP32[$165>>2] = $242;
       $243 = (+_liq_get_output_gamma($239));
       HEAPF64[$166>>3] = $243;
       HEAP32[$167>>2] = $240;
       $244 = HEAP32[$165>>2]|0;
       $245 = HEAP32[$164>>2]|0;
       $246 = Math_imul($245, $244)|0;
       $247 = (_malloc($246)|0);
       HEAP32[$168>>2] = $247;
       $248 = $244 << 2;
       $249 = (_malloc($248)|0);
       HEAP32[$169>>2] = $249;
       $250 = ($247|0)==(0|0);
       $251 = ($249|0)==(0|0);
       $or$cond$i$i = $250 | $251;
       do {
        if ($or$cond$i$i) {
         $$166$i = 90.0;$$2$i = 17;
        } else {
         $252 = ($244|0)==(0);
         do {
          if (!($252)) {
           HEAP32[$249>>2] = $247;
           $exitcond$i76$i = ($244|0)==(1);
           if ($exitcond$i76$i) {
            break;
           }
           $253 = (($247) + ($245)|0);
           $254 = ((($249)) + 4|0);
           HEAP32[$254>>2] = $253;
           $exitcond$i$i160 = ($244|0)==(2);
           if ($exitcond$i$i160) {
            break;
           }
           $255 = $245 << 1;
           $256 = (($247) + ($255)|0);
           $257 = ((($249)) + 8|0);
           HEAP32[$257>>2] = $256;
           $exitcond$i$i186 = ($244|0)==(3);
           if ($exitcond$i$i186) {
            break;
           }
           $259 = 3;
           while(1) {
            $$pre$i$pre$i$pre = HEAP32[$168>>2]|0;
            $$pre32$i$pre$i$pre = HEAP32[$169>>2]|0;
            $258 = Math_imul($259, $245)|0;
            $260 = (($$pre$i$pre$i$pre) + ($258)|0);
            $261 = (($$pre32$i$pre$i$pre) + ($259<<2)|0);
            HEAP32[$261>>2] = $260;
            $262 = (($259) + 1)|0;
            $exitcond$i$i = ($262|0)==($244|0);
            if ($exitcond$i$i) {
             break;
            } else {
             $259 = $262;
            }
           }
          }
         } while(0);
         $263 = (_liq_get_palette($239)|0);
         $264 = HEAP32[$263>>2]|0;
         HEAP32[$170>>2] = $264;
         $265 = HEAP32[$4>>2]|0;
         $266 = HEAP32[$169>>2]|0;
         $267 = (_liq_write_remapped_image_rows($265,$232,$266)|0);
         $268 = ($267|0)==(0);
         $spec$select$i = $268 ? 0 : 17;
         $269 = HEAP32[$4>>2]|0;
         $270 = (_liq_get_palette($269)|0);
         $271 = HEAP32[$270>>2]|0;
         HEAP32[$170>>2] = $271;
         $272 = ($271|0)==(0);
         if (!($272)) {
          $$014$i$i = 0;
          while(1) {
           $$sroa$01$0$$sroa_idx$i$i = (((($270)) + 4|0) + ($$014$i$i<<2)|0);
           $$sroa$01$0$copyload$i$i = HEAP8[$$sroa$01$0$$sroa_idx$i$i>>0]|0;
           $$sroa$42$0$$sroa_idx$i$i = (((((($270)) + 4|0) + ($$014$i$i<<2)|0)) + 1|0);
           $$sroa$42$0$copyload$i$i = HEAP8[$$sroa$42$0$$sroa_idx$i$i>>0]|0;
           $$sroa$5$0$$sroa_idx$i$i = (((((($270)) + 4|0) + ($$014$i$i<<2)|0)) + 2|0);
           $$sroa$5$0$copyload$i$i = HEAP8[$$sroa$5$0$$sroa_idx$i$i>>0]|0;
           $$sroa$6$0$$sroa_idx$i$i = (((((($270)) + 4|0) + ($$014$i$i<<2)|0)) + 3|0);
           $$sroa$6$0$copyload$i$i = HEAP8[$$sroa$6$0$$sroa_idx$i$i>>0]|0;
           $$sroa$0$0$$sroa_idx$i$i = (((($3)) + 200|0) + ($$014$i$i<<2)|0);
           HEAP8[$$sroa$0$0$$sroa_idx$i$i>>0] = $$sroa$01$0$copyload$i$i;
           $$sroa$2$0$$sroa_idx$i$i = (((((($3)) + 200|0) + ($$014$i$i<<2)|0)) + 1|0);
           HEAP8[$$sroa$2$0$$sroa_idx$i$i>>0] = $$sroa$42$0$copyload$i$i;
           $$sroa$3$0$$sroa_idx$i$i = (((((($3)) + 200|0) + ($$014$i$i<<2)|0)) + 2|0);
           HEAP8[$$sroa$3$0$$sroa_idx$i$i>>0] = $$sroa$5$0$copyload$i$i;
           $$sroa$4$0$$sroa_idx$i$i = (((((($3)) + 200|0) + ($$014$i$i<<2)|0)) + 3|0);
           HEAP8[$$sroa$4$0$$sroa_idx$i$i>>0] = $$sroa$6$0$copyload$i$i;
           $273 = (($$014$i$i) + 1)|0;
           $274 = HEAP32[$270>>2]|0;
           $275 = ($273>>>0)<($274>>>0);
           if ($275) {
            $$014$i$i = $273;
           } else {
            break;
           }
          }
         }
         $276 = HEAP32[$4>>2]|0;
         $277 = (+_liq_get_quantization_error($276));
         $278 = !($277 >= 0.0);
         if ($278) {
          $$166$i = 90.0;$$2$i = $spec$select$i;
          break;
         }
         $279 = HEAP32[$4>>2]|0;
         $280 = (_liq_get_quantization_quality($279)|0);
         HEAPF64[$vararg_buffer33>>3] = $277;
         $vararg_ptr36 = ((($vararg_buffer33)) + 8|0);
         HEAP32[$vararg_ptr36>>2] = $280;
         _verbose_printf($7,17161,$vararg_buffer33);
         $phitmp$i = (+($280|0));
         $$166$i = $phitmp$i;$$2$i = $spec$select$i;
        }
       } while(0);
       $281 = HEAP32[$4>>2]|0;
       _liq_result_destroy($281);
       $282 = ($$2$i|0)==(0);
       if (!($282)) {
        $$5$i = $$2$i;
        label = 111;
        break L126;
       }
       $283 = HEAP8[$150>>0]|0;
       $284 = ($283<<24>>24)==(0);
       if (!($284)) {
        $285 = $$166$i / 100.0;
        $286 = (+Math_pow((+$285),1.5));
        $287 = HEAP32[$157>>2]|0;
        $288 = (($287) + -1)|0;
        $289 = (+($288>>>0));
        $290 = $286 < 0.5;
        $291 = $290 ? 0.5 : $286;
        $292 = $291 * $289;
        $293 = (~~(($292))>>>0);
        HEAP32[$175>>2] = $293;
       }
       $294 = HEAP8[$171>>0]|0;
       HEAP8[$172>>0] = $294;
       $295 = HEAP32[$173>>2]|0;
       HEAP32[$174>>2] = $295;
       HEAP32[$173>>2] = 0;
       $296 = (_write_image($3,0,$$1132$ph,$7)|0);
       switch ($296|0) {
       case 98:  {
        $297 = HEAP32[$175>>2]|0;
        $298 = $297 >>> 10;
        HEAP32[$vararg_buffer37>>2] = $298;
        _verbose_printf($7,17208,$vararg_buffer37);
        $$5$i = 98;
        label = 111;
        break L126;
        break;
       }
       case 0:  {
        break;
       }
       default: {
        $$5$i = $296;
        label = 111;
        break L126;
       }
       }
       $299 = HEAP32[$176>>2]|0;
       $300 = ($299|0)==(0);
       if ($300) {
        $$7$i = 0;
        break L126;
       }
       $301 = (($299) + 999)|0;
       $302 = (($301|0) / 1000)&-1;
       HEAP32[$vararg_buffer40>>2] = $302;
       _verbose_printf($7,17247,$vararg_buffer40);
       $$7$i = 0;
       break L126;
       break;
      }
      case 99:  {
       $$3$ph$i = $235;
       break;
      }
      default: {
       $$3$ph$i = 4;
      }
      }
      $$5$i = $$3$ph$i;
      label = 111;
     } else {
      $$5$i = $221;
      label = 111;
     }
    } while(0);
    do {
     if ((label|0) == 111) {
      label = 0;
      $303 = HEAP8[$149>>0]|0;
      $304 = ($303<<24>>24)!=(0);
      $brmerge$not$i = $220 & $304;
      $305 = $$5$i | 1;
      $306 = ($305|0)==(99);
      $or$cond$i151 = $306 & $brmerge$not$i;
      if (!($or$cond$i151)) {
       $$7$i = $$5$i;
       break;
      }
      $307 = (_write_image(0,$2,$$1132$ph,$7)|0);
      $308 = ($307|0)==(0);
      $spec$select70$i = $308 ? $$5$i : $307;
      $$7$i = $spec$select70$i;
     }
    } while(0);
    $309 = HEAP32[$1>>2]|0;
    $310 = ($309|0)==(0|0);
    if (!($310)) {
     _liq_image_destroy($309);
    }
    _rwpng_free_image24($2);
    _rwpng_free_image8($3);
    $$1134 = $$7$i;$$1156 = $$1$ph;
   }
   _free($$1156);
   $311 = HEAP32[$7>>2]|0;
   _liq_attr_destroy($311);
   $312 = ($$1134|0)==(0);
   do {
    if ($312) {
     $$1139 = $$0138164;$$1142 = $$0141162;$$1144 = $$0143161;
    } else {
     $313 = $$1134 | 1;
     $314 = ($313|0)==(99);
     if ($314) {
      $315 = (($$0141162) + 1)|0;
      $$1139 = $$1134;$$1142 = $315;$$1144 = $$0143161;
      break;
     } else {
      $316 = (($$0143161) + 1)|0;
      $$1139 = $$1134;$$1142 = $$0141162;$$1144 = $316;
      break;
     }
    }
   } while(0);
   $317 = (($$0137165) + 1)|0;
   $318 = HEAP32[$138>>2]|0;
   $319 = ($317>>>0)<($318>>>0);
   if ($319) {
    $$0137165 = $317;$$0138164 = $$1139;$$0141162 = $$1142;$$0143161 = $$1144;
   } else {
    break;
   }
  }
  $177 = ($$1144|0)==(0);
  if ($177) {
   $$0143$lcssa177 = 0;
  } else {
   $320 = ($$0137165|0)==(0);
   $321 = $320 ? 32252 : 17288;
   $322 = ($$1144|0)==(1);
   $323 = $322 ? 32252 : 17288;
   HEAP32[$vararg_buffer43>>2] = $$1144;
   $vararg_ptr46 = ((($vararg_buffer43)) + 4|0);
   HEAP32[$vararg_ptr46>>2] = $323;
   $vararg_ptr47 = ((($vararg_buffer43)) + 8|0);
   HEAP32[$vararg_ptr47>>2] = $317;
   $vararg_ptr48 = ((($vararg_buffer43)) + 12|0);
   HEAP32[$vararg_ptr48>>2] = $321;
   _verbose_printf($0,17290,$vararg_buffer43);
   $$0143$lcssa177 = $$1144;
  }
  $324 = ($$1142|0)==(0);
  if ($324) {
   $$0138$lcssa180182 = $$1139;$$0140$lcssa179183 = $317;$$0141$lcssa178184 = 0;$$0143$lcssa177185 = $$0143$lcssa177;
  } else {
   $325 = ($$0137165|0)==(0);
   $326 = $325 ? 32252 : 17288;
   $327 = ($$1142|0)==(1);
   $328 = $327 ? 32252 : 17288;
   HEAP32[$vararg_buffer49>>2] = $$1142;
   $vararg_ptr52 = ((($vararg_buffer49)) + 4|0);
   HEAP32[$vararg_ptr52>>2] = $328;
   $vararg_ptr53 = ((($vararg_buffer49)) + 8|0);
   HEAP32[$vararg_ptr53>>2] = $317;
   $vararg_ptr54 = ((($vararg_buffer49)) + 12|0);
   HEAP32[$vararg_ptr54>>2] = $326;
   _verbose_printf($0,17358,$vararg_buffer49);
   $$0138$lcssa180182 = $$1139;$$0140$lcssa179183 = $317;$$0141$lcssa178184 = $$1142;$$0143$lcssa177185 = $$0143$lcssa177;
  }
 }
 $329 = $$0141$lcssa178184 | $$0143$lcssa177185;
 $330 = ($329|0)==(0);
 if ($330) {
  $331 = ($$0140$lcssa179183|0)==(1);
  $332 = $331 ? 32252 : 17288;
  HEAP32[$vararg_buffer55>>2] = $$0140$lcssa179183;
  $vararg_ptr58 = ((($vararg_buffer55)) + 4|0);
  HEAP32[$vararg_ptr58>>2] = $332;
  _verbose_printf($0,17405,$vararg_buffer55);
 }
 $333 = ((($0)) + 4|0);
 $334 = HEAP32[$333>>2]|0;
 $335 = ($334|0)==(0|0);
 if (!($335)) {
  _liq_image_destroy($334);
 }
 $336 = HEAP32[$0>>2]|0;
 _liq_attr_destroy($336);
 $$2 = $$0138$lcssa180182;
 STACKTOP = sp;return ($$2|0);
}
function _log_callback($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $3 = HEAP32[2490]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_fprintf($3,17738,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _read_image($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0$i = 0, $$1 = 0, $$mux = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $8 = 0, $9 = 0, $brmerge = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $8 = ($2|0)!=(0);
 do {
  if ($8) {
   $9 = HEAP32[2522]|0;
   $10 = $6&1;
   $11 = $7&1;
   $12 = (_rwpng_read_image24($9,$3,$10,$11)|0);
   $19 = $12;
  } else {
   $13 = (_fopen($1,16833)|0);
   $14 = ($13|0)==(0|0);
   if (!($14)) {
    $16 = $6&1;
    $17 = $7&1;
    $18 = (_rwpng_read_image24($13,$3,$16,$17)|0);
    (_fclose($13)|0);
    $19 = $18;
    break;
   }
   $15 = HEAP32[2490]|0;
   HEAP32[$vararg_buffer>>2] = $1;
   (_fprintf($15,17657,$vararg_buffer)|0);
   $$1 = 2;
   STACKTOP = sp;return ($$1|0);
  }
 } while(0);
 $20 = ($19|0)==(0);
 if (!($20)) {
  $21 = HEAP32[2490]|0;
  if ($8) {
   $25 = 17694;
  } else {
   $22 = (_strrchr($1,47)|0);
   $23 = ($22|0)==(0|0);
   $24 = ((($22)) + 1|0);
   $$0$i = $23 ? $1 : $24;
   $25 = $$0$i;
  }
  HEAP32[$vararg_buffer1>>2] = $25;
  (_fprintf($21,17705,$vararg_buffer1)|0);
  $$1 = $19;
  STACKTOP = sp;return ($$1|0);
 }
 $26 = ((($3)) + 176|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ((($3)) + 156|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($3)) + 160|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = ((($3)) + 168|0);
 $33 = +HEAPF64[$32>>3];
 $34 = (_liq_image_create_rgba_rows($0,$27,$29,$31,$33)|0);
 HEAP32[$4>>2] = $34;
 $35 = ($34|0)==(0|0);
 $brmerge = $35 | $5;
 $$mux = $35 ? 17 : 0;
 if ($brmerge) {
  $$1 = $$mux;
  STACKTOP = sp;return ($$1|0);
 }
 $36 = (_liq_image_set_memory_ownership($34,12)|0);
 $37 = ($36|0)==(0);
 if (!($37)) {
  $$1 = 17;
  STACKTOP = sp;return ($$1|0);
 }
 HEAP32[$26>>2] = 0;
 $38 = ((($3)) + 180|0);
 HEAP32[$38>>2] = 0;
 $$1 = 0;
 STACKTOP = sp;return ($$1|0);
}
function _verbose_printf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $$alloca_mul = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 HEAP32[$2>>2] = $varargs;
 $6 = (_vsnprintf(0,0,$1,$2)|0);
 $7 = (($6) + 1)|0;
 $8 = (_llvm_stacksave()|0);
 $$alloca_mul = $7;
 $9 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 HEAP32[$2>>2] = $varargs;
 (_vsnprintf($9,$7,$1,$2)|0);
 $10 = HEAP32[$3>>2]|0;
 $11 = HEAP32[$0>>2]|0;
 $12 = ((($0)) + 12|0);
 $13 = HEAP32[$12>>2]|0;
 FUNCTION_TABLE_viii[$10 & 127]($11,$9,$13);
 _llvm_stackrestore(($8|0));
 STACKTOP = sp;return;
}
function _write_image($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$i42 = 0, $$0$i43 = 0, $$039 = 0, $$039$ph = 0, $$03946 = 0, $$040 = 0, $$040$ph = 0, $$04045 = 0, $$041 = 0, $$1$ph = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_ptr16 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = ((($3)) + 57|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 do {
  if ($6) {
   $11 = (_strlen($2)|0);
   $12 = (($11) + 5)|0;
   $13 = (_malloc($12)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $$041 = 17;
    STACKTOP = sp;return ($$041|0);
   }
   (_strcpy($13,$2)|0);
   $15 = (($13) + ($11)|0);
   ;HEAP8[$15>>0]=HEAP8[17498>>0]|0;HEAP8[$15+1>>0]=HEAP8[17498+1>>0]|0;HEAP8[$15+2>>0]=HEAP8[17498+2>>0]|0;HEAP8[$15+3>>0]=HEAP8[17498+3>>0]|0;HEAP8[$15+4>>0]=HEAP8[17498+4>>0]|0;
   $16 = (_fopen($13,17503)|0);
   $17 = ($16|0)==(0|0);
   if ($17) {
    $18 = HEAP32[2490]|0;
    HEAP32[$vararg_buffer3>>2] = $13;
    (_fprintf($18,17506,$vararg_buffer3)|0);
    _free($13);
    $$041 = 16;
    STACKTOP = sp;return ($$041|0);
   }
   $19 = ($0|0)==(0|0);
   if ($19) {
    $25 = (_strrchr($2,47)|0);
    $26 = ($25|0)==(0|0);
    $27 = ((($25)) + 1|0);
    $$0$i43 = $26 ? $2 : $27;
    HEAP32[$vararg_buffer10>>2] = $$0$i43;
    _verbose_printf($3,17576,$vararg_buffer10);
    $$039$ph = $13;$$040$ph = $16;
    label = 12;
    break;
   } else {
    $20 = ((($0)) + 196|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (_strrchr($2,47)|0);
    $23 = ($22|0)==(0|0);
    $24 = ((($22)) + 1|0);
    $$0$i42 = $23 ? $2 : $24;
    HEAP32[$vararg_buffer6>>2] = $21;
    $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
    HEAP32[$vararg_ptr9>>2] = $$0$i42;
    _verbose_printf($3,17545,$vararg_buffer6);
    $$039 = $13;$$040 = $16;
    label = 11;
    break;
   }
  } else {
   $7 = HEAP32[2457]|0;
   $8 = ($0|0)==(0|0);
   if ($8) {
    _verbose_printf($3,17462,$vararg_buffer1);
    $$039$ph = 0;$$040$ph = $7;
    label = 12;
    break;
   } else {
    $9 = ((($0)) + 196|0);
    $10 = HEAP32[$9>>2]|0;
    HEAP32[$vararg_buffer>>2] = $10;
    _verbose_printf($3,17427,$vararg_buffer);
    $$039 = 0;$$040 = $7;
    label = 11;
    break;
   }
  }
 } while(0);
 if ((label|0) == 11) {
  $28 = (_rwpng_write_image8($$040,$0)|0);
  $$0 = $28;$$03946 = $$039;$$04045 = $$040;
 }
 else if ((label|0) == 12) {
  $29 = (_rwpng_write_image24($$040$ph,$1)|0);
  $$0 = $29;$$03946 = $$039$ph;$$04045 = $$040$ph;
 }
 $30 = HEAP8[$4>>0]|0;
 $31 = ($30<<24>>24)==(0);
 if ($31) {
  (_fclose($$04045)|0);
  $32 = ($$0|0)==(0);
  if ($32) {
   $33 = (_rename($$03946,$2)|0);
   $34 = ($33|0)==(0);
   if ($34) {
    _free($$03946);
    $$041 = 0;
    STACKTOP = sp;return ($$041|0);
   } else {
    $$1$ph = 16;
   }
  } else {
   $$1$ph = $$0;
  }
  (_unlink($$03946)|0);
  $$2 = $$1$ph;
 } else {
  $$2 = $$0;
 }
 _free($$03946);
 switch ($$2|0) {
 case 0: case 98:  {
  $$041 = $$2;
  STACKTOP = sp;return ($$041|0);
  break;
 }
 default: {
 }
 }
 $35 = HEAP32[2490]|0;
 $36 = HEAP8[$4>>0]|0;
 $37 = ($36<<24>>24)==(0);
 $38 = $37 ? $2 : 17608;
 HEAP32[$vararg_buffer13>>2] = $38;
 $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
 HEAP32[$vararg_ptr16>>2] = $$2;
 (_fprintf($35,17615,$vararg_buffer13)|0);
 $$041 = $$2;
 STACKTOP = sp;return ($$041|0);
}
function _pngquant_parse_options($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01921$i = 0, $$060 = 0, $$1 = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer22 = 0, $vararg_buffer26 = 0, $vararg_buffer30 = 0, $vararg_buffer34 = 0, $vararg_buffer38 = 0, $vararg_buffer42 = 0;
 var $vararg_buffer46 = 0, $vararg_buffer50 = 0, $vararg_buffer54 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr29 = 0, $vararg_ptr33 = 0, $vararg_ptr37 = 0, $vararg_ptr41 = 0, $vararg_ptr45 = 0, $vararg_ptr49 = 0, $vararg_ptr5 = 0, $vararg_ptr53 = 0, $vararg_ptr57 = 0, $vararg_ptr9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $vararg_buffer54 = sp + 112|0;
 $vararg_buffer50 = sp + 104|0;
 $vararg_buffer46 = sp + 96|0;
 $vararg_buffer42 = sp + 88|0;
 $vararg_buffer38 = sp + 80|0;
 $vararg_buffer34 = sp + 72|0;
 $vararg_buffer30 = sp + 64|0;
 $vararg_buffer26 = sp + 56|0;
 $vararg_buffer22 = sp + 48|0;
 $vararg_buffer18 = sp + 40|0;
 $vararg_buffer14 = sp + 32|0;
 $vararg_buffer10 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 120|0;
 $4 = ($0>>>0)>(1);
 L1: do {
  if ($4) {
   $5 = HEAP32[2490]|0;
   $$01921$i = 1;
   while(1) {
    $6 = (($1) + ($$01921$i<<2)|0);
    $7 = HEAP32[$6>>2]|0;
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==(45);
    do {
     if ($9) {
      $10 = ((($7)) + 1|0);
      $11 = HEAP8[$10>>0]|0;
      $12 = ($11<<24>>24)==(45);
      if ($12) {
       break L1;
      }
      $13 = (_strcmp(17742,$7)|0);
      $14 = ($13|0)==(0);
      if ($14) {
       HEAP32[$vararg_buffer>>2] = 17742;
       $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
       HEAP32[$vararg_ptr1>>2] = 17799;
       (_fprintf($5,17746,$vararg_buffer)|0);
       HEAP32[$6>>2] = (17799);
       $15 = 17799;
      } else {
       $15 = $7;
      }
      $16 = (_strcmp(17809,$15)|0);
      $17 = ($16|0)==(0);
      if ($17) {
       HEAP32[$vararg_buffer2>>2] = 17809;
       $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
       HEAP32[$vararg_ptr5>>2] = 17815;
       (_fprintf($5,17746,$vararg_buffer2)|0);
       HEAP32[$6>>2] = (17815);
       $20 = 17815;
      } else {
       $20 = $15;
      }
      $21 = (_strcmp(17825,$20)|0);
      $22 = ($21|0)==(0);
      if ($22) {
       HEAP32[$vararg_buffer6>>2] = 17825;
       $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
       HEAP32[$vararg_ptr9>>2] = 17799;
       (_fprintf($5,17746,$vararg_buffer6)|0);
       HEAP32[$6>>2] = (17799);
       $23 = 17799;
      } else {
       $23 = $20;
      }
      $24 = (_strcmp(17832,$23)|0);
      $25 = ($24|0)==(0);
      if ($25) {
       HEAP32[$vararg_buffer10>>2] = 17832;
       $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
       HEAP32[$vararg_ptr13>>2] = 17815;
       (_fprintf($5,17746,$vararg_buffer10)|0);
       HEAP32[$6>>2] = (17815);
       $26 = 17815;
      } else {
       $26 = $23;
      }
      $27 = (_strcmp(17841,$26)|0);
      $28 = ($27|0)==(0);
      if ($28) {
       HEAP32[$vararg_buffer14>>2] = 17841;
       $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
       HEAP32[$vararg_ptr17>>2] = 17815;
       (_fprintf($5,17746,$vararg_buffer14)|0);
       HEAP32[$6>>2] = (17815);
       $29 = 17815;
      } else {
       $29 = $26;
      }
      $30 = (_strcmp(17850,$29)|0);
      $31 = ($30|0)==(0);
      if ($31) {
       HEAP32[$vararg_buffer18>>2] = 17850;
       $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
       HEAP32[$vararg_ptr21>>2] = 17857;
       (_fprintf($5,17746,$vararg_buffer18)|0);
       HEAP32[$6>>2] = (17857);
       $32 = 17857;
      } else {
       $32 = $29;
      }
      $33 = (_strcmp(17865,$32)|0);
      $34 = ($33|0)==(0);
      if ($34) {
       HEAP32[$vararg_buffer22>>2] = 17865;
       $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
       HEAP32[$vararg_ptr25>>2] = 17874;
       (_fprintf($5,17746,$vararg_buffer22)|0);
       HEAP32[$6>>2] = (17874);
       $35 = 17874;
      } else {
       $35 = $32;
      }
      $36 = (_strcmp(17885,$35)|0);
      $37 = ($36|0)==(0);
      if ($37) {
       HEAP32[$vararg_buffer26>>2] = 17885;
       $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
       HEAP32[$vararg_ptr29>>2] = 17894;
       (_fprintf($5,17746,$vararg_buffer26)|0);
       HEAP32[$6>>2] = (17894);
       $38 = 17894;
      } else {
       $38 = $35;
      }
      $39 = (_strcmp(17904,$38)|0);
      $40 = ($39|0)==(0);
      if ($40) {
       HEAP32[$vararg_buffer30>>2] = 17904;
       $vararg_ptr33 = ((($vararg_buffer30)) + 4|0);
       HEAP32[$vararg_ptr33>>2] = 17911;
       (_fprintf($5,17746,$vararg_buffer30)|0);
       HEAP32[$6>>2] = (17911);
       $41 = 17911;
      } else {
       $41 = $38;
      }
      $42 = (_strcmp(17919,$41)|0);
      $43 = ($42|0)==(0);
      if ($43) {
       HEAP32[$vararg_buffer34>>2] = 17919;
       $vararg_ptr37 = ((($vararg_buffer34)) + 4|0);
       HEAP32[$vararg_ptr37>>2] = 17911;
       (_fprintf($5,17746,$vararg_buffer34)|0);
       HEAP32[$6>>2] = (17911);
       $44 = 17911;
      } else {
       $44 = $41;
      }
      $45 = (_strcmp(17930,$44)|0);
      $46 = ($45|0)==(0);
      if ($46) {
       HEAP32[$vararg_buffer38>>2] = 17930;
       $vararg_ptr41 = ((($vararg_buffer38)) + 4|0);
       HEAP32[$vararg_ptr41>>2] = 17894;
       (_fprintf($5,17746,$vararg_buffer38)|0);
       HEAP32[$6>>2] = (17894);
       $47 = 17894;
      } else {
       $47 = $44;
      }
      $48 = (_strcmp(17939,$47)|0);
      $49 = ($48|0)==(0);
      if ($49) {
       HEAP32[$vararg_buffer42>>2] = 17939;
       $vararg_ptr45 = ((($vararg_buffer42)) + 4|0);
       HEAP32[$vararg_ptr45>>2] = 17945;
       (_fprintf($5,17746,$vararg_buffer42)|0);
       HEAP32[$6>>2] = (17945);
       $50 = 17945;
      } else {
       $50 = $47;
      }
      $51 = (_strcmp(17952,$50)|0);
      $52 = ($51|0)==(0);
      if ($52) {
       HEAP32[$vararg_buffer46>>2] = 17952;
       $vararg_ptr49 = ((($vararg_buffer46)) + 4|0);
       HEAP32[$vararg_ptr49>>2] = 17961;
       (_fprintf($5,17746,$vararg_buffer46)|0);
       HEAP32[$6>>2] = (17961);
       $53 = 17961;
      } else {
       $53 = $50;
      }
      $54 = (_strcmp(17971,$53)|0);
      $55 = ($54|0)==(0);
      if ($55) {
       HEAP32[$vararg_buffer50>>2] = 17971;
       $vararg_ptr53 = ((($vararg_buffer50)) + 4|0);
       HEAP32[$vararg_ptr53>>2] = 17976;
       (_fprintf($5,17746,$vararg_buffer50)|0);
       HEAP32[$6>>2] = (17976);
       $56 = 17976;
      } else {
       $56 = $53;
      }
      $57 = (_strcmp(17982,$56)|0);
      $58 = ($57|0)==(0);
      if (!($58)) {
       break;
      }
      HEAP32[$vararg_buffer54>>2] = 17982;
      $vararg_ptr57 = ((($vararg_buffer54)) + 4|0);
      HEAP32[$vararg_ptr57>>2] = 17989;
      (_fprintf($5,17746,$vararg_buffer54)|0);
      HEAP32[$6>>2] = (17989);
     }
    } while(0);
    $18 = (($$01921$i) + 1)|0;
    $19 = ($18>>>0)<($0>>>0);
    if ($19) {
     $$01921$i = $18;
    } else {
     break;
    }
   }
  }
 } while(0);
 $59 = ((($2)) + 68|0);
 $60 = ((($2)) + 52|0);
 $61 = ((($2)) + 58|0);
 $62 = ((($2)) + 20|0);
 $63 = ((($2)) + 24|0);
 $64 = ((($2)) + 63|0);
 $65 = ((($2)) + 64|0);
 $66 = ((($2)) + 61|0);
 $67 = ((($2)) + 44|0);
 $68 = ((($2)) + 16|0);
 $69 = ((($2)) + 48|0);
 $70 = ((($2)) + 62|0);
 $71 = ((($2)) + 28|0);
 $72 = ((($2)) + 65|0);
 $73 = ((($2)) + 66|0);
 $74 = ((($2)) + 57|0);
 L53: while(1) {
  $75 = (_getopt_long($0,$1,17997,8,0)|0);
  L55: do {
   switch ($75|0) {
   case -1:  {
    label = 64;
    break L53;
    break;
   }
   case 118:  {
    HEAP8[$59>>0] = 1;
    break;
   }
   case 113:  {
    HEAP8[$59>>0] = 0;
    break;
   }
   case 1:  {
    $76 = HEAP32[8042]|0;
    $77 = ($76|0)==(0|0);
    if ($77) {
     $80 = 1.0;
    } else {
     $78 = (+_atof($76));
     $80 = $78;
    }
    $79 = $80;
    HEAPF32[$60>>2] = $79;
    $81 = $79 < 0.0;
    $82 = $79 > 1.0;
    $or$cond = $81 | $82;
    if ($or$cond) {
     label = 44;
     break L53;
    }
    break;
   }
   case 2:  {
    HEAPF32[$60>>2] = 0.0;
    break;
   }
   case 102:  {
    HEAP8[$61>>0] = 1;
    break;
   }
   case 4:  {
    HEAP8[$61>>0] = 0;
    break;
   }
   case 3:  {
    $84 = HEAP32[8042]|0;
    HEAP32[$62>>2] = $84;
    break;
   }
   case 111:  {
    $85 = HEAP32[$63>>2]|0;
    $86 = ($85|0)==(0|0);
    if (!($86)) {
     label = 50;
     break L53;
    }
    $88 = HEAP32[8042]|0;
    $89 = (_strcmp($88,18088)|0);
    $90 = ($89|0)==(0);
    if ($90) {
     HEAP8[$74>>0] = 1;
     break L55;
    } else {
     $91 = $88;
     HEAP32[$63>>2] = $91;
     break L55;
    }
    break;
   }
   case 5:  {
    HEAP8[$64>>0] = 1;
    break;
   }
   case 6:  {
    HEAP8[$65>>0] = 1;
    break;
   }
   case 9:  {
    HEAP8[$66>>0] = 1;
    break;
   }
   case 115:  {
    $92 = HEAP32[8042]|0;
    $93 = (_atoi($92)|0);
    HEAP32[$67>>2] = $93;
    break;
   }
   case 81:  {
    $94 = HEAP32[8042]|0;
    HEAP32[$68>>2] = $94;
    break;
   }
   case 8:  {
    $95 = HEAP32[8042]|0;
    $96 = (_atoi($95)|0);
    HEAP32[$69>>2] = $96;
    break;
   }
   case 10:  {
    HEAP8[$70>>0] = 1;
    break;
   }
   case 7:  {
    $97 = HEAP32[8042]|0;
    HEAP32[$71>>2] = $97;
    break;
   }
   case 104:  {
    HEAP8[$72>>0] = 1;
    break;
   }
   case 86:  {
    HEAP8[$73>>0] = 1;
    break;
   }
   default: {
    $$0 = 4;
    label = 75;
    break L53;
   }
   }
  } while(0);
 }
 if ((label|0) == 44) {
  $83 = HEAP32[2490]|0;
  (_fwrite(18009,39,1,$83)|0);
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 50) {
  $87 = HEAP32[2490]|0;
  (_fwrite(18049,38,1,$87)|0);
  $$0 = 4;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 64) {
  $98 = HEAP32[2456]|0;
  $99 = ($98|0)<($0|0);
  if (!($99)) {
   $124 = ($98|0)<(2);
   if (!($124)) {
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $125 = ((($2)) + 67|0);
   HEAP8[$125>>0] = 1;
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $100 = (($1) + ($98<<2)|0);
  $101 = HEAP32[$100>>2]|0;
  $102 = (_strtoul($101,$3,10)|0);
  $103 = HEAP32[$3>>2]|0;
  $104 = HEAP32[$100>>2]|0;
  $105 = ($103|0)==($104|0);
  if ($105) {
   $$060 = $98;
  } else {
   $106 = HEAP8[$103>>0]|0;
   $107 = ($106<<24>>24)==(0);
   if ($107) {
    $108 = (($98) + 1)|0;
    $109 = ((($2)) + 40|0);
    HEAP32[$109>>2] = $102;
    $$060 = $108;
   } else {
    $$060 = $98;
   }
  }
  $110 = ($$060|0)==($0|0);
  $$pre = (($0) + -1)|0;
  if ($110) {
   label = 71;
  } else {
   $111 = ($$060|0)==($$pre|0);
   if ($111) {
    $112 = (($1) + ($$060<<2)|0);
    $113 = HEAP32[$112>>2]|0;
    $114 = (_strcmp($113,18088)|0);
    $115 = ($114|0)==(0);
    if ($115) {
     label = 71;
    } else {
     $$1 = $$060;
    }
   } else {
    $$1 = $$060;
   }
  }
  if ((label|0) == 71) {
   $116 = ((($2)) + 56|0);
   HEAP8[$116>>0] = 1;
   $117 = HEAP32[$63>>2]|0;
   $118 = ($117|0)==(0|0);
   $119 = $118&1;
   HEAP8[$74>>0] = $119;
   $$1 = $$pre;
  }
  $120 = (($0) - ($$1))|0;
  $121 = ((($2)) + 36|0);
  HEAP32[$121>>2] = $120;
  $122 = (($1) + ($$1<<2)|0);
  $123 = ((($2)) + 32|0);
  HEAP32[$123>>2] = $122;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 else if ((label|0) == 75) {
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _rwpng_version_info($0) {
 $0 = $0|0;
 var $1 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = (_png_get_header_ver(0)|0);
 HEAP32[$vararg_buffer>>2] = $1;
 (_fprintf($0,18226,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _rwpng_free_image24($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 176|0);
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 HEAP32[$1>>2] = 0;
 $3 = ((($0)) + 180|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 HEAP32[$3>>2] = 0;
 $5 = ((($0)) + 184|0);
 $6 = HEAP32[$5>>2]|0;
 _rwpng_free_chunks($6);
 HEAP32[$5>>2] = 0;
 return;
}
function _rwpng_free_chunks($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 } else {
  $2 = HEAP32[$0>>2]|0;
  _rwpng_free_chunks($2);
  $3 = ((($0)) + 4|0);
  $4 = HEAP32[$3>>2]|0;
  _free($4);
  _free($0);
  return;
 }
}
function _rwpng_free_image8($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 188|0);
 $2 = HEAP32[$1>>2]|0;
 _free($2);
 HEAP32[$1>>2] = 0;
 $3 = ((($0)) + 184|0);
 $4 = HEAP32[$3>>2]|0;
 _free($4);
 HEAP32[$3>>2] = 0;
 $5 = ((($0)) + 192|0);
 $6 = HEAP32[$5>>2]|0;
 _rwpng_free_chunks($6);
 HEAP32[$5>>2] = 0;
 return;
}
function _rwpng_read_image24($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_rwpng_read_image24_libpng($0,$1,$2,$3)|0);
 return ($4|0);
}
function _rwpng_read_image24_libpng($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$reg2mem142$0 = 0, $$01$i$reg2mem$0 = 0, $$017$i$reg2mem144$0 = 0, $$1$reg2mem$0 = 0, $$reg2mem146$0 = 0.0, $$reg2mem148$0 = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond = 0, $cond155 = 0, $cond156 = 0, $cond157 = 0, $cond158 = 0, $cond159 = 0, $cond160 = 0, $cond161 = 0, $cond162 = 0, $cond163 = 0, $cond164 = 0, $cond165 = 0, $cond166 = 0, $cond167 = 0, $cond168 = 0, $cond169 = 0, $cond170 = 0, $cond171 = 0, $cond172 = 0;
 var $cond173 = 0, $cond174 = 0, $cond175 = 0, $cond176 = 0, $cond177 = 0, $cond178 = 0, $cond179 = 0, $cond180 = 0, $cond181 = 0, $cond182 = 0, $cond183 = 0, $exitcond$i = 0, $or$cond = 0, $vararg_buffer = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp + 8|0;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $4 = sp + 36|0;
 $5 = sp + 32|0;
 $6 = sp + 28|0;
 $7 = sp + 24|0;
 $8 = sp + 16|0;
 $9 = sp;
 HEAP32[$4>>2] = 0;
 HEAP32[$5>>2] = 0;
 $10 = ($3|0)==(0);
 $11 = $10 ? 12 : 11;
 __THREW__ = 0;
 $12 = (invoke_iiiii(13,(18292|0),($1|0),(14|0),($11|0))|0);
 $13 = __THREW__; __THREW__ = 0;
 if ((($13|0) != 0) & ((threwValue|0) != 0)) { $14 = _testSetjmp(HEAP32[$13>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($14|0) == 0) { _longjmp($13|0, threwValue|0); } tempRet0 = (threwValue); } else { $14 = -1; };
 $15 = tempRet0;
 $cond = ($14|0)==(1);
 do {
  if ($cond) {
   $$reg2mem148$0 = $15;
  } else {
   HEAP32[$4>>2] = $12;
   $16 = ($12|0)==(0|0);
   if ($16) {
    $$1$reg2mem$0 = 24;
    _free(_setjmpTable|0);
    STACKTOP = sp;return ($$1$reg2mem$0|0);
   }
   __THREW__ = 0;
   $17 = (invoke_ii(15,($12|0))|0);
   $18 = __THREW__; __THREW__ = 0;
   if ((($18|0) != 0) & ((threwValue|0) != 0)) { $19 = _testSetjmp(HEAP32[$18>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($19|0) == 0) { _longjmp($18|0, threwValue|0); } tempRet0 = (threwValue); } else { $19 = -1; };
   $20 = tempRet0;
   $cond155 = ($19|0)==(1);
   if ($cond155) {
    $$reg2mem148$0 = $20;
   } else {
    HEAP32[$5>>2] = $17;
    $21 = ($17|0)==(0|0);
    if (!($21)) {
     _setjmpTable = _saveSetjmp($1,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
     __THREW__ = 0;
     $25 = __THREW__; __THREW__ = 0;
     if ((($25|0) != 0) & ((threwValue|0) != 0)) { $26 = _testSetjmp(HEAP32[$25>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($26|0) == 0) { _longjmp($25|0, threwValue|0); } tempRet0 = (threwValue); } else { $26 = -1; };
     $27 = tempRet0;
     $cond156 = ($26|0)==(1);
     if ($cond156) {
      $$reg2mem148$0 = $27;
      break;
     }
     $$reg2mem148$0 = 0;
     break;
    }
    __THREW__ = 0;
    invoke_viii(16,($4|0),(0|0),(0|0));
    $22 = __THREW__; __THREW__ = 0;
    if ((($22|0) != 0) & ((threwValue|0) != 0)) { $23 = _testSetjmp(HEAP32[$22>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($23|0) == 0) { _longjmp($22|0, threwValue|0); } tempRet0 = (threwValue); } else { $23 = -1; };
    $24 = tempRet0;
    $cond157 = ($23|0)==(1);
    if ($cond157) {
     $$reg2mem148$0 = $24;
    } else {
     $$1$reg2mem$0 = 24;
     _free(_setjmpTable|0);
     STACKTOP = sp;return ($$1$reg2mem$0|0);
    }
   }
  }
 } while(0);
 L13: while(1) {
  $28 = ($$reg2mem148$0|0)==(0);
  if (!($28)) {
   __THREW__ = 0;
   invoke_viii(16,($4|0),($5|0),(0|0));
   $29 = __THREW__; __THREW__ = 0;
   if ((($29|0) != 0) & ((threwValue|0) != 0)) { $30 = _testSetjmp(HEAP32[$29>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($30|0) == 0) { _longjmp($29|0, threwValue|0); } tempRet0 = (threwValue); } else { $30 = -1; };
   $31 = tempRet0;
   $cond158 = ($30|0)==(1);
   if ($cond158) {
    $$reg2mem148$0 = $31;
    continue;
   } else {
    label = 11;
    break;
   }
  }
  $32 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_iiii(17,($32|0),4,3)|0);
  $33 = __THREW__; __THREW__ = 0;
  if ((($33|0) != 0) & ((threwValue|0) != 0)) { $34 = _testSetjmp(HEAP32[$33>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($34|0) == 0) { _longjmp($33|0, threwValue|0); } tempRet0 = (threwValue); } else { $34 = -1; };
  $35 = tempRet0;
  $cond159 = ($34|0)==(1);
  if ($cond159) {
   $$reg2mem148$0 = $35;
   continue;
  }
  $36 = ($2|0)==(0);
  if ($36) {
   $37 = HEAP32[$4>>2]|0;
   __THREW__ = 0;
   invoke_viiii(18,($37|0),2,(18299|0),4);
   $38 = __THREW__; __THREW__ = 0;
   if ((($38|0) != 0) & ((threwValue|0) != 0)) { $39 = _testSetjmp(HEAP32[$38>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($39|0) == 0) { _longjmp($38|0, threwValue|0); } tempRet0 = (threwValue); } else { $39 = -1; };
   $40 = tempRet0;
   $cond182 = ($39|0)==(1);
   if ($cond182) {
    $$reg2mem148$0 = $40;
    continue;
   }
   $41 = HEAP32[$4>>2]|0;
   $42 = ((($1)) + 184|0);
   __THREW__ = 0;
   invoke_viii(19,($41|0),($42|0),(20|0));
   $43 = __THREW__; __THREW__ = 0;
   if ((($43|0) != 0) & ((threwValue|0) != 0)) { $44 = _testSetjmp(HEAP32[$43>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($44|0) == 0) { _longjmp($43|0, threwValue|0); } tempRet0 = (threwValue); } else { $44 = -1; };
   $45 = tempRet0;
   $cond183 = ($44|0)==(1);
   if ($cond183) {
    $$reg2mem148$0 = $45;
    continue;
   }
  }
  HEAP32[$8>>2] = $0;
  $46 = ((($8)) + 4|0);
  HEAP32[$46>>2] = 0;
  $47 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  invoke_viii(21,($47|0),($8|0),(22|0));
  $48 = __THREW__; __THREW__ = 0;
  if ((($48|0) != 0) & ((threwValue|0) != 0)) { $49 = _testSetjmp(HEAP32[$48>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($49|0) == 0) { _longjmp($48|0, threwValue|0); } tempRet0 = (threwValue); } else { $49 = -1; };
  $50 = tempRet0;
  $cond160 = ($49|0)==(1);
  if ($cond160) {
   $$reg2mem148$0 = $50;
   continue;
  }
  $51 = HEAP32[$4>>2]|0;
  $52 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  invoke_vii(23,($51|0),($52|0));
  $53 = __THREW__; __THREW__ = 0;
  if ((($53|0) != 0) & ((threwValue|0) != 0)) { $54 = _testSetjmp(HEAP32[$53>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($54|0) == 0) { _longjmp($53|0, threwValue|0); } tempRet0 = (threwValue); } else { $54 = -1; };
  $55 = tempRet0;
  $cond161 = ($54|0)==(1);
  if ($cond161) {
   $$reg2mem148$0 = $55;
   continue;
  }
  $56 = HEAP32[$4>>2]|0;
  $57 = HEAP32[$5>>2]|0;
  $58 = ((($1)) + 156|0);
  $59 = ((($1)) + 160|0);
  __THREW__ = 0;
  (invoke_iiiiiiiiii(24,($56|0),($57|0),($58|0),($59|0),($7|0),($6|0),(0|0),(0|0),(0|0))|0);
  $60 = __THREW__; __THREW__ = 0;
  if ((($60|0) != 0) & ((threwValue|0) != 0)) { $61 = _testSetjmp(HEAP32[$60>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($61|0) == 0) { _longjmp($60|0, threwValue|0); } tempRet0 = (threwValue); } else { $61 = -1; };
  $62 = tempRet0;
  $cond162 = ($61|0)==(1);
  if ($cond162) {
   $$reg2mem148$0 = $62;
   continue;
  }
  $63 = HEAP32[$6>>2]|0;
  $64 = $63 & 4;
  $65 = ($64|0)==(0);
  if ($65) {
   $66 = HEAP32[$4>>2]|0;
   __THREW__ = 0;
   invoke_vi(25,($66|0));
   $67 = __THREW__; __THREW__ = 0;
   if ((($67|0) != 0) & ((threwValue|0) != 0)) { $68 = _testSetjmp(HEAP32[$67>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($68|0) == 0) { _longjmp($67|0, threwValue|0); } tempRet0 = (threwValue); } else { $68 = -1; };
   $69 = tempRet0;
   $cond180 = ($68|0)==(1);
   if ($cond180) {
    $$reg2mem148$0 = $69;
    continue;
   }
   $70 = HEAP32[$4>>2]|0;
   __THREW__ = 0;
   invoke_viii(26,($70|0),65535,1);
   $71 = __THREW__; __THREW__ = 0;
   if ((($71|0) != 0) & ((threwValue|0) != 0)) { $72 = _testSetjmp(HEAP32[$71>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($72|0) == 0) { _longjmp($71|0, threwValue|0); } tempRet0 = (threwValue); } else { $72 = -1; };
   $73 = tempRet0;
   $cond181 = ($72|0)==(1);
   if ($cond181) {
    $$reg2mem148$0 = $73;
    continue;
   }
  }
  $74 = HEAP32[$7>>2]|0;
  $75 = ($74|0)==(16);
  if ($75) {
   $76 = HEAP32[$4>>2]|0;
   __THREW__ = 0;
   invoke_vi(27,($76|0));
   $77 = __THREW__; __THREW__ = 0;
   if ((($77|0) != 0) & ((threwValue|0) != 0)) { $78 = _testSetjmp(HEAP32[$77>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($78|0) == 0) { _longjmp($77|0, threwValue|0); } tempRet0 = (threwValue); } else { $78 = -1; };
   $79 = tempRet0;
   $cond179 = ($78|0)==(1);
   if ($cond179) {
    $$reg2mem148$0 = $79;
    continue;
   }
  }
  $80 = HEAP32[$6>>2]|0;
  $81 = $80 & 2;
  $82 = ($81|0)==(0);
  if ($82) {
   $83 = HEAP32[$4>>2]|0;
   __THREW__ = 0;
   invoke_vi(28,($83|0));
   $84 = __THREW__; __THREW__ = 0;
   if ((($84|0) != 0) & ((threwValue|0) != 0)) { $85 = _testSetjmp(HEAP32[$84>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($85|0) == 0) { _longjmp($84|0, threwValue|0); } tempRet0 = (threwValue); } else { $85 = -1; };
   $86 = tempRet0;
   $cond178 = ($85|0)==(1);
   if ($cond178) {
    $$reg2mem148$0 = $86;
    continue;
   }
  }
  HEAPF64[$9>>3] = 0.45455000000000001;
  $87 = HEAP32[$4>>2]|0;
  $88 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  $89 = (invoke_iiii(29,($87|0),($88|0),2048)|0);
  $90 = __THREW__; __THREW__ = 0;
  if ((($90|0) != 0) & ((threwValue|0) != 0)) { $91 = _testSetjmp(HEAP32[$90>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($91|0) == 0) { _longjmp($90|0, threwValue|0); } tempRet0 = (threwValue); } else { $91 = -1; };
  $92 = tempRet0;
  $cond163 = ($91|0)==(1);
  if ($cond163) {
   $$reg2mem148$0 = $92;
   continue;
  }
  $93 = ($89|0)==(0);
  do {
   if ($93) {
    $96 = HEAP32[$4>>2]|0;
    $97 = HEAP32[$5>>2]|0;
    __THREW__ = 0;
    (invoke_iiii(30,($96|0),($97|0),($9|0))|0);
    $98 = __THREW__; __THREW__ = 0;
    if ((($98|0) != 0) & ((threwValue|0) != 0)) { $99 = _testSetjmp(HEAP32[$98>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($99|0) == 0) { _longjmp($98|0, threwValue|0); } tempRet0 = (threwValue); } else { $99 = -1; };
    $100 = tempRet0;
    $cond176 = ($99|0)==(1);
    if ($cond176) {
     $$reg2mem148$0 = $100;
     continue L13;
    }
    $101 = +HEAPF64[$9>>3];
    $102 = $101 > 0.0;
    $103 = $101 <= 1.0;
    $or$cond = $102 & $103;
    if ($or$cond) {
     $104 = ((($1)) + 188|0);
     HEAP32[$104>>2] = 5;
     $105 = ((($1)) + 192|0);
     HEAP32[$105>>2] = 5;
     $$reg2mem146$0 = $101;
     break;
    }
    $106 = HEAP32[2490]|0;
    __THREW__ = 0;
    HEAPF64[$vararg_buffer>>3] = $101;
    (invoke_iiii(31,($106|0),(18319|0),($vararg_buffer|0))|0);
    $107 = __THREW__; __THREW__ = 0;
    if ((($107|0) != 0) & ((threwValue|0) != 0)) { $108 = _testSetjmp(HEAP32[$107>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($108|0) == 0) { _longjmp($107|0, threwValue|0); } tempRet0 = (threwValue); } else { $108 = -1; };
    $109 = tempRet0;
    $cond177 = ($108|0)==(1);
    if ($cond177) {
     $$reg2mem148$0 = $109;
     continue L13;
    }
    $110 = ((($1)) + 188|0);
    HEAP32[$110>>2] = 0;
    $111 = ((($1)) + 192|0);
    HEAP32[$111>>2] = 0;
    HEAPF64[$9>>3] = 0.45455000000000001;
    $$reg2mem146$0 = 0.45455000000000001;
   } else {
    $94 = ((($1)) + 188|0);
    HEAP32[$94>>2] = 1;
    $95 = ((($1)) + 192|0);
    HEAP32[$95>>2] = 1;
    $$reg2mem146$0 = 0.45455000000000001;
   }
  } while(0);
  $112 = ((($1)) + 168|0);
  HEAPF64[$112>>3] = $$reg2mem146$0;
  $113 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  (invoke_ii(32,($113|0))|0);
  $114 = __THREW__; __THREW__ = 0;
  if ((($114|0) != 0) & ((threwValue|0) != 0)) { $115 = _testSetjmp(HEAP32[$114>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($115|0) == 0) { _longjmp($114|0, threwValue|0); } tempRet0 = (threwValue); } else { $115 = -1; };
  $116 = tempRet0;
  $cond164 = ($115|0)==(1);
  if ($cond164) {
   $$reg2mem148$0 = $116;
   continue;
  }
  $117 = HEAP32[$4>>2]|0;
  $118 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  invoke_vii(33,($117|0),($118|0));
  $119 = __THREW__; __THREW__ = 0;
  if ((($119|0) != 0) & ((threwValue|0) != 0)) { $120 = _testSetjmp(HEAP32[$119>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($120|0) == 0) { _longjmp($119|0, threwValue|0); } tempRet0 = (threwValue); } else { $120 = -1; };
  $121 = tempRet0;
  $cond165 = ($120|0)==(1);
  if ($cond165) {
   $$reg2mem148$0 = $121;
   continue;
  }
  $122 = HEAP32[$4>>2]|0;
  $123 = HEAP32[$5>>2]|0;
  __THREW__ = 0;
  $124 = (invoke_iii(34,($122|0),($123|0))|0);
  $125 = __THREW__; __THREW__ = 0;
  if ((($125|0) != 0) & ((threwValue|0) != 0)) { $126 = _testSetjmp(HEAP32[$125>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($126|0) == 0) { _longjmp($125|0, threwValue|0); } tempRet0 = (threwValue); } else { $126 = -1; };
  $127 = tempRet0;
  $cond166 = ($126|0)==(1);
  if ($cond166) {
   $$reg2mem148$0 = $127;
   continue;
  }
  $128 = HEAP32[$59>>2]|0;
  $129 = (2147483647 / ($128>>>0))&-1;
  $130 = ($124>>>0)>($129>>>0);
  if ($130) {
   __THREW__ = 0;
   invoke_viii(16,($4|0),($5|0),(0|0));
   $131 = __THREW__; __THREW__ = 0;
   if ((($131|0) != 0) & ((threwValue|0) != 0)) { $132 = _testSetjmp(HEAP32[$131>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($132|0) == 0) { _longjmp($131|0, threwValue|0); } tempRet0 = (threwValue); } else { $132 = -1; };
   $133 = tempRet0;
   $cond175 = ($132|0)==(1);
   if ($cond175) {
    $$reg2mem148$0 = $133;
    continue;
   } else {
    label = 43;
    break;
   }
  }
  $134 = Math_imul($128, $124)|0;
  __THREW__ = 0;
  $135 = (invoke_ii(35,($134|0))|0);
  $136 = __THREW__; __THREW__ = 0;
  if ((($136|0) != 0) & ((threwValue|0) != 0)) { $137 = _testSetjmp(HEAP32[$136>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($137|0) == 0) { _longjmp($136|0, threwValue|0); } tempRet0 = (threwValue); } else { $137 = -1; };
  $138 = tempRet0;
  $cond167 = ($137|0)==(1);
  if ($cond167) {
   $$reg2mem148$0 = $138;
   continue;
  }
  $139 = ((($1)) + 180|0);
  HEAP32[$139>>2] = $135;
  $140 = ($135|0)==(0|0);
  if ($140) {
   $141 = HEAP32[2490]|0;
   __THREW__ = 0;
   (invoke_iiiii(36,(18369|0),49,1,($141|0))|0);
   $142 = __THREW__; __THREW__ = 0;
   if ((($142|0) != 0) & ((threwValue|0) != 0)) { $143 = _testSetjmp(HEAP32[$142>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($143|0) == 0) { _longjmp($142|0, threwValue|0); } tempRet0 = (threwValue); } else { $143 = -1; };
   $144 = tempRet0;
   $cond173 = ($143|0)==(1);
   if ($cond173) {
    $$reg2mem148$0 = $144;
    continue;
   }
   __THREW__ = 0;
   invoke_viii(16,($4|0),($5|0),(0|0));
   $145 = __THREW__; __THREW__ = 0;
   if ((($145|0) != 0) & ((threwValue|0) != 0)) { $146 = _testSetjmp(HEAP32[$145>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($146|0) == 0) { _longjmp($145|0, threwValue|0); } tempRet0 = (threwValue); } else { $146 = -1; };
   $147 = tempRet0;
   $cond174 = ($146|0)==(1);
   if ($cond174) {
    $$reg2mem148$0 = $147;
    continue;
   } else {
    label = 48;
    break;
   }
  }
  $148 = HEAP32[$5>>2]|0;
  $149 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  $150 = (invoke_iii(34,($149|0),($148|0))|0);
  $151 = __THREW__; __THREW__ = 0;
  if ((($151|0) != 0) & ((threwValue|0) != 0)) { $152 = _testSetjmp(HEAP32[$151>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($152|0) == 0) { _longjmp($151|0, threwValue|0); } tempRet0 = (threwValue); } else { $152 = -1; };
  $153 = tempRet0;
  $cond168 = ($152|0)==(1);
  if ($cond168) {
   $$reg2mem148$0 = $153;
   continue;
  }
  $154 = $128 << 2;
  __THREW__ = 0;
  $155 = (invoke_ii(35,($154|0))|0);
  $156 = __THREW__; __THREW__ = 0;
  if ((($156|0) != 0) & ((threwValue|0) != 0)) { $157 = _testSetjmp(HEAP32[$156>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($157|0) == 0) { _longjmp($156|0, threwValue|0); } tempRet0 = (threwValue); } else { $157 = -1; };
  $158 = tempRet0;
  $cond169 = ($157|0)==(1);
  if ($cond169) {
   $$reg2mem148$0 = $158;
   continue;
  }
  $159 = ($155|0)==(0|0);
  do {
   if ($159) {
    $$017$i$reg2mem144$0 = 0;
   } else {
    $160 = ($128|0)==(0);
    if ($160) {
     $$017$i$reg2mem144$0 = $155;
     break;
    }
    $$01$i$reg2mem$0 = 0;
    while(1) {
     $161 = Math_imul($$01$i$reg2mem$0, $150)|0;
     $162 = (($135) + ($161)|0);
     $163 = (($155) + ($$01$i$reg2mem$0<<2)|0);
     HEAP32[$163>>2] = $162;
     $164 = (($$01$i$reg2mem$0) + 1)|0;
     $exitcond$i = ($164|0)==($128|0);
     if ($exitcond$i) {
      $$017$i$reg2mem144$0 = $155;
      break;
     } else {
      $$01$i$reg2mem$0 = $164;
     }
    }
   }
  } while(0);
  $165 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  invoke_vii(37,($165|0),($$017$i$reg2mem144$0|0));
  $166 = __THREW__; __THREW__ = 0;
  if ((($166|0) != 0) & ((threwValue|0) != 0)) { $167 = _testSetjmp(HEAP32[$166>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($167|0) == 0) { _longjmp($166|0, threwValue|0); } tempRet0 = (threwValue); } else { $167 = -1; };
  $168 = tempRet0;
  $cond170 = ($167|0)==(1);
  if ($cond170) {
   $$reg2mem148$0 = $168;
   continue;
  }
  $169 = HEAP32[$4>>2]|0;
  __THREW__ = 0;
  invoke_vii(38,($169|0),(0|0));
  $170 = __THREW__; __THREW__ = 0;
  if ((($170|0) != 0) & ((threwValue|0) != 0)) { $171 = _testSetjmp(HEAP32[$170>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($171|0) == 0) { _longjmp($170|0, threwValue|0); } tempRet0 = (threwValue); } else { $171 = -1; };
  $172 = tempRet0;
  $cond171 = ($171|0)==(1);
  if ($cond171) {
   $$reg2mem148$0 = $172;
   continue;
  }
  __THREW__ = 0;
  invoke_viii(16,($4|0),($5|0),(0|0));
  $173 = __THREW__; __THREW__ = 0;
  if ((($173|0) != 0) & ((threwValue|0) != 0)) { $174 = _testSetjmp(HEAP32[$173>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($174|0) == 0) { _longjmp($173|0, threwValue|0); } tempRet0 = (threwValue); } else { $174 = -1; };
  $175 = tempRet0;
  $cond172 = ($174|0)==(1);
  if ($cond172) {
   $$reg2mem148$0 = $175;
  } else {
   label = 58;
   break;
  }
 }
 if ((label|0) == 11) {
  $$1$reg2mem$0 = 25;
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($$1$reg2mem$0|0);
 }
 else if ((label|0) == 43) {
  $$0$reg2mem142$0 = 24;
 }
 else if ((label|0) == 48) {
  $$0$reg2mem142$0 = 24;
 }
 else if ((label|0) == 58) {
  $176 = HEAP32[$46>>2]|0;
  $177 = ((($1)) + 164|0);
  HEAP32[$177>>2] = $176;
  $178 = ((($1)) + 176|0);
  HEAP32[$178>>2] = $$017$i$reg2mem144$0;
  $$0$reg2mem142$0 = 0;
 }
 $$1$reg2mem$0 = $$0$reg2mem142$0;
 _free(_setjmpTable|0);
 STACKTOP = sp;return ($$1$reg2mem$0|0);
}
function _rwpng_warning_silent_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _rwpng_warning_stderr_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = HEAP32[2490]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_fprintf($2,18474,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _rwpng_error_handler($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = HEAP32[2490]|0;
 HEAP32[$vararg_buffer>>2] = $1;
 (_fprintf($2,18445,$vararg_buffer)|0);
 (_fflush($2)|0);
 $3 = (_png_get_error_ptr($0)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  _abort();
  // unreachable;
 } else {
  _longjmp(($3|0),1);
  // unreachable;
 }
}
function _read_chunk_callback($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_memcmp(18430,$1,5)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (_memcmp(18435,$1,5)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0 = 0;
  return ($$0|0);
 }
 $6 = (_memcmp(18440,$1,5)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = ((($1)) + 16|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = ($9<<24>>24)==(0);
 if ($10) {
  $$0 = 1;
  return ($$0|0);
 }
 $11 = (_png_get_user_chunk_ptr($0)|0);
 $12 = (_malloc(20)|0);
 $13 = ((($12)) + 12|0);
 ;HEAP32[$13>>2]=HEAP32[$1>>2]|0;HEAP8[$13+4>>0]=HEAP8[$1+4>>0]|0;
 $14 = ((($1)) + 12|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($12)) + 8|0);
 HEAP32[$16>>2] = $15;
 $17 = HEAP8[$8>>0]|0;
 $18 = ((($12)) + 17|0);
 HEAP8[$18>>0] = $17;
 $19 = ($15|0)==(0);
 if ($19) {
  $20 = ((($12)) + 4|0);
  HEAP32[$20>>2] = 0;
 } else {
  $21 = (_malloc($15)|0);
  $22 = ((($12)) + 4|0);
  HEAP32[$22>>2] = $21;
  $23 = ((($1)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  _memcpy(($21|0),($24|0),($15|0))|0;
 }
 $25 = HEAP32[$11>>2]|0;
 HEAP32[$12>>2] = $25;
 HEAP32[$11>>2] = $12;
 $$0 = 1;
 return ($$0|0);
}
function _user_read_data($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_png_get_io_ptr($0)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (_fread($1,1,$2,$4)|0);
 $6 = ($5|0)==(0);
 if ($6) {
  _png_error($0,18419);
  // unreachable;
 } else {
  $7 = ((($3)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($5))|0;
  HEAP32[$7>>2] = $9;
  return;
 }
}
function _rwpng_write_image8($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$063 = 0, $$06472 = 0, $$065$lcssa = 0, $$06571 = 0, $$06874 = 0, $$2 = 0, $$lcssa = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$2$0$$sroa_idx = 0, $$sroa$230$0$$sroa_idx31 = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$332$0$$sroa_idx33 = 0, $$sroa$4$0$$sroa_idx34 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $or$cond = 0, $spec$select = 0, $spec$select70 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1072|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1072|0);
 $2 = sp + 44|0;
 $3 = sp + 40|0;
 $4 = sp + 24|0;
 $5 = sp;
 $6 = sp + 304|0;
 $7 = sp + 48|0;
 $8 = ((($1)) + 196|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9>>>0)>(256);
 if ($10) {
  $$2 = 4;
  STACKTOP = sp;return ($$2|0);
 }
 $11 = ((($1)) + 1228|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12 << 24 >> 24;
 $14 = (_rwpng_write_image_init($1,$2,$3,$13)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  $$2 = $14;
  STACKTOP = sp;return ($$2|0);
 }
 $16 = ((($1)) + 164|0);
 $17 = HEAP32[$16>>2]|0;
 HEAP32[$4>>2] = $0;
 $$sroa$230$0$$sroa_idx31 = ((($4)) + 4|0);
 HEAP32[$$sroa$230$0$$sroa_idx31>>2] = $17;
 $$sroa$332$0$$sroa_idx33 = ((($4)) + 8|0);
 HEAP32[$$sroa$332$0$$sroa_idx33>>2] = 0;
 $$sroa$4$0$$sroa_idx34 = ((($4)) + 12|0);
 HEAP32[$$sroa$4$0$$sroa_idx34>>2] = 0;
 $18 = HEAP32[$2>>2]|0;
 _png_set_write_fn($18,$4,39,40);
 $19 = HEAP32[$2>>2]|0;
 _png_set_filter($19,0,0);
 $20 = HEAP32[$3>>2]|0;
 $21 = HEAP32[$2>>2]|0;
 $22 = ((($1)) + 1224|0);
 $23 = HEAP32[$22>>2]|0;
 switch ($23|0) {
 case 5: case 0:  {
  break;
 }
 default: {
  $24 = ((($1)) + 176|0);
  $25 = +HEAPF64[$24>>3];
  _png_set_gAMA($21,$20,$25);
  $26 = ($23|0)==(1);
  if ($26) {
   _png_set_sRGB($21,$20,0);
  }
 }
 }
 $27 = HEAP32[$8>>2]|0;
 $28 = ($27>>>0)<(3);
 if ($28) {
  $$063 = 1;
 } else {
  $29 = ($27>>>0)<(5);
  $30 = ($27>>>0)<(17);
  $$ = $30 ? 4 : 8;
  $spec$select70 = $29 ? 2 : $$;
  $$063 = $spec$select70;
 }
 $31 = ((($1)) + 192|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($1)) + 168|0);
 HEAP32[$33>>2] = 0;
 $34 = ($32|0)==(0|0);
 if (!($34)) {
  $35 = ((($5)) + 8|0);
  $36 = ((($5)) + 12|0);
  $37 = ((($5)) + 16|0);
  $$06874 = $32;
  while(1) {
   ;HEAP32[$5>>2]=0|0;HEAP8[$5+4>>0]=0|0;
   $38 = ((($$06874)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   HEAP32[$35>>2] = $39;
   $40 = ((($$06874)) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   HEAP32[$36>>2] = $41;
   $42 = ((($$06874)) + 17|0);
   $43 = HEAP8[$42>>0]|0;
   HEAP8[$37>>0] = $43;
   $44 = ((($$06874)) + 12|0);
   ;HEAP32[$5>>2]=HEAP32[$44>>2]|0;HEAP8[$5+4>>0]=HEAP8[$44+4>>0]|0;
   $45 = HEAP32[$2>>2]|0;
   $46 = HEAP32[$3>>2]|0;
   _png_set_unknown_chunks($45,$46,$5,1);
   $47 = HEAP32[$40>>2]|0;
   $48 = (($47) + 12)|0;
   $49 = HEAP32[$33>>2]|0;
   $50 = (($48) + ($49))|0;
   HEAP32[$33>>2] = $50;
   $51 = HEAP32[$$06874>>2]|0;
   $52 = ($51|0)==(0|0);
   if ($52) {
    break;
   } else {
    $$06874 = $51;
   }
  }
 }
 $53 = HEAP32[$2>>2]|0;
 $54 = HEAP32[$3>>2]|0;
 $55 = ((($1)) + 156|0);
 $56 = HEAP32[$55>>2]|0;
 $57 = ((($1)) + 160|0);
 $58 = HEAP32[$57>>2]|0;
 _png_set_IHDR($53,$54,$56,$58,$$063,3,0,0,0);
 $59 = HEAP32[$8>>2]|0;
 $60 = ($59|0)==(0);
 if ($60) {
  $$065$lcssa = 0;$$lcssa = 0;
 } else {
  $$06472 = 0;$$06571 = 0;
  while(1) {
   $64 = (((($1)) + 200|0) + ($$06472<<2)|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = (((((($1)) + 200|0) + ($$06472<<2)|0)) + 1|0);
   $67 = HEAP8[$66>>0]|0;
   $68 = (((((($1)) + 200|0) + ($$06472<<2)|0)) + 2|0);
   $69 = HEAP8[$68>>0]|0;
   $$sroa$0$0$$sroa_idx = (($6) + (($$06472*3)|0)|0);
   HEAP8[$$sroa$0$0$$sroa_idx>>0] = $65;
   $$sroa$2$0$$sroa_idx = (((($6) + (($$06472*3)|0)|0)) + 1|0);
   HEAP8[$$sroa$2$0$$sroa_idx>>0] = $67;
   $$sroa$3$0$$sroa_idx = (((($6) + (($$06472*3)|0)|0)) + 2|0);
   HEAP8[$$sroa$3$0$$sroa_idx>>0] = $69;
   $70 = (((((($1)) + 200|0) + ($$06472<<2)|0)) + 3|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = (($7) + ($$06472)|0);
   HEAP8[$72>>0] = $71;
   $73 = ($71<<24>>24)==(-1);
   $74 = (($$06472) + 1)|0;
   $spec$select = $73 ? $$06571 : $74;
   $75 = ($74>>>0)<($59>>>0);
   if ($75) {
    $$06472 = $74;$$06571 = $spec$select;
   } else {
    $$065$lcssa = $spec$select;$$lcssa = $59;
    break;
   }
  }
 }
 $61 = HEAP32[$2>>2]|0;
 $62 = HEAP32[$3>>2]|0;
 _png_set_PLTE($61,$62,$6,$$lcssa);
 $63 = ($$065$lcssa|0)==(0);
 if (!($63)) {
  $76 = HEAP32[$2>>2]|0;
  $77 = HEAP32[$3>>2]|0;
  _png_set_tRNS($76,$77,$7,$$065$lcssa,0);
 }
 $78 = ((($1)) + 184|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = HEAP32[$2>>2]|0;
 $81 = HEAP32[$3>>2]|0;
 _png_write_info($80,$81);
 $82 = HEAP32[$2>>2]|0;
 _png_set_packing($82);
 $83 = HEAP32[$2>>2]|0;
 _png_write_image($83,$79);
 $84 = HEAP32[$2>>2]|0;
 _png_write_end($84,0);
 _png_destroy_write_struct($2,$3);
 $85 = HEAP32[$$sroa$4$0$$sroa_idx34>>2]|0;
 $86 = ($85|0)==(0);
 if ($86) {
  $87 = HEAP32[$$sroa$230$0$$sroa_idx31>>2]|0;
  $88 = ($87|0)!=(0);
  $89 = HEAP32[$$sroa$332$0$$sroa_idx33>>2]|0;
  $90 = ($89>>>0)>($87>>>0);
  $or$cond = $88 & $90;
  if ($or$cond) {
   $$0 = 98;
  } else {
   label = 18;
  }
 } else {
  label = 18;
 }
 if ((label|0) == 18) {
  $$0 = $85;
 }
 $$2 = $$0;
 STACKTOP = sp;return ($$2|0);
}
function _rwpng_write_image_init($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$reg2mem$0 = 0, $$reg2mem29$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond31 = 0, $cond32 = 0, $cond33 = 0, $cond34 = 0, $cond35 = 0, $cond36 = 0;
 var _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 __THREW__ = 0;
 $4 = (invoke_iiiii(41,(18292|0),($0|0),(14|0),(0|0))|0);
 $5 = __THREW__; __THREW__ = 0;
 if ((($5|0) != 0) & ((threwValue|0) != 0)) { $6 = _testSetjmp(HEAP32[$5>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($6|0) == 0) { _longjmp($5|0, threwValue|0); } tempRet0 = (threwValue); } else { $6 = -1; };
 $7 = tempRet0;
 $cond = ($6|0)==(1);
 do {
  if ($cond) {
   $$reg2mem29$0 = $7;
  } else {
   HEAP32[$1>>2] = $4;
   $8 = ($4|0)==(0|0);
   if ($8) {
    $$0$reg2mem$0 = 35;
    _free(_setjmpTable|0);
    return ($$0$reg2mem$0|0);
   }
   __THREW__ = 0;
   $9 = (invoke_ii(15,($4|0))|0);
   $10 = __THREW__; __THREW__ = 0;
   if ((($10|0) != 0) & ((threwValue|0) != 0)) { $11 = _testSetjmp(HEAP32[$10>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($11|0) == 0) { _longjmp($10|0, threwValue|0); } tempRet0 = (threwValue); } else { $11 = -1; };
   $12 = tempRet0;
   $cond31 = ($11|0)==(1);
   if ($cond31) {
    $$reg2mem29$0 = $12;
   } else {
    HEAP32[$2>>2] = $9;
    $13 = ($9|0)==(0|0);
    if (!($13)) {
     _setjmpTable = _saveSetjmp($0,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
     __THREW__ = 0;
     $17 = __THREW__; __THREW__ = 0;
     if ((($17|0) != 0) & ((threwValue|0) != 0)) { $18 = _testSetjmp(HEAP32[$17>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($18|0) == 0) { _longjmp($17|0, threwValue|0); } tempRet0 = (threwValue); } else { $18 = -1; };
     $19 = tempRet0;
     $cond32 = ($18|0)==(1);
     if ($cond32) {
      $$reg2mem29$0 = $19;
      break;
     }
     $$reg2mem29$0 = 0;
     break;
    }
    __THREW__ = 0;
    invoke_vii(42,($1|0),(0|0));
    $14 = __THREW__; __THREW__ = 0;
    if ((($14|0) != 0) & ((threwValue|0) != 0)) { $15 = _testSetjmp(HEAP32[$14>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($15|0) == 0) { _longjmp($14|0, threwValue|0); } tempRet0 = (threwValue); } else { $15 = -1; };
    $16 = tempRet0;
    $cond33 = ($15|0)==(1);
    if ($cond33) {
     $$reg2mem29$0 = $16;
    } else {
     $$0$reg2mem$0 = 35;
     _free(_setjmpTable|0);
     return ($$0$reg2mem$0|0);
    }
   }
  }
 } while(0);
 while(1) {
  $20 = ($$reg2mem29$0|0)==(0);
  if (!($20)) {
   __THREW__ = 0;
   invoke_vii(42,($1|0),($2|0));
   $21 = __THREW__; __THREW__ = 0;
   if ((($21|0) != 0) & ((threwValue|0) != 0)) { $22 = _testSetjmp(HEAP32[$21>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($22|0) == 0) { _longjmp($21|0, threwValue|0); } tempRet0 = (threwValue); } else { $22 = -1; };
   $23 = tempRet0;
   $cond34 = ($22|0)==(1);
   if ($cond34) {
    $$reg2mem29$0 = $23;
    continue;
   } else {
    label = 11;
    break;
   }
  }
  $24 = HEAP32[$1>>2]|0;
  $25 = ($3|0)!=(0);
  $26 = $25 ? 1 : 9;
  __THREW__ = 0;
  invoke_vii(43,($24|0),($26|0));
  $27 = __THREW__; __THREW__ = 0;
  if ((($27|0) != 0) & ((threwValue|0) != 0)) { $28 = _testSetjmp(HEAP32[$27>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($28|0) == 0) { _longjmp($27|0, threwValue|0); } tempRet0 = (threwValue); } else { $28 = -1; };
  $29 = tempRet0;
  $cond35 = ($28|0)==(1);
  if ($cond35) {
   $$reg2mem29$0 = $29;
   continue;
  }
  $30 = HEAP32[$1>>2]|0;
  $31 = $25 ? 9 : 5;
  __THREW__ = 0;
  invoke_vii(44,($30|0),($31|0));
  $32 = __THREW__; __THREW__ = 0;
  if ((($32|0) != 0) & ((threwValue|0) != 0)) { $33 = _testSetjmp(HEAP32[$32>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($33|0) == 0) { _longjmp($32|0, threwValue|0); } tempRet0 = (threwValue); } else { $33 = -1; };
  $34 = tempRet0;
  $cond36 = ($33|0)==(1);
  if ($cond36) {
   $$reg2mem29$0 = $34;
  } else {
   label = 14;
   break;
  }
 }
 if ((label|0) == 11) {
  $$0$reg2mem$0 = 35;
  _free(_setjmpTable|0);
  return ($$0$reg2mem$0|0);
 }
 else if ((label|0) == 14) {
  $$0$reg2mem$0 = 0;
  _free(_setjmpTable|0);
  return ($$0$reg2mem$0|0);
 }
 return (0)|0;
}
function _user_write_data($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_png_get_io_ptr($0)|0);
 $4 = ((($3)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if (!($6)) {
  return;
 }
 $7 = HEAP32[$3>>2]|0;
 $8 = (_fwrite($1,$2,1,$7)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  HEAP32[$4>>2] = 16;
 }
 $10 = ((($3)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($11) + ($2))|0;
 HEAP32[$10>>2] = $12;
 return;
}
function _user_flush_data($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _rwpng_write_image24($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01$i = 0, $$017$i = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 $4 = (_rwpng_write_image_init($1,$2,$3,0)|0);
 $5 = ($4|0)==(0);
 if (!($5)) {
  $$0 = $4;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = HEAP32[$2>>2]|0;
 _png_init_io($6,$0);
 $7 = HEAP32[$3>>2]|0;
 $8 = HEAP32[$2>>2]|0;
 $9 = ((($1)) + 192|0);
 $10 = HEAP32[$9>>2]|0;
 switch ($10|0) {
 case 5: case 0:  {
  break;
 }
 default: {
  $11 = ((($1)) + 168|0);
  $12 = +HEAPF64[$11>>3];
  _png_set_gAMA($8,$7,$12);
  $13 = ($10|0)==(1);
  if ($13) {
   _png_set_sRGB($8,$7,0);
  }
 }
 }
 $14 = HEAP32[$2>>2]|0;
 $15 = HEAP32[$3>>2]|0;
 $16 = ((($1)) + 156|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($1)) + 160|0);
 $19 = HEAP32[$18>>2]|0;
 _png_set_IHDR($14,$15,$17,$19,8,6,0,0,0);
 $20 = HEAP32[$3>>2]|0;
 $21 = HEAP32[$2>>2]|0;
 $22 = ((($1)) + 180|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = HEAP32[$18>>2]|0;
 $25 = (_png_get_rowbytes($21,$20)|0);
 $26 = $24 << 2;
 $27 = (_malloc($26)|0);
 $28 = ($27|0)==(0|0);
 if ($28) {
  $$017$i = 0;$39 = 0;
 } else {
  $29 = ($24|0)==(0);
  if ($29) {
   $$017$i = $27;$39 = $27;
  } else {
   $$01$i = 0;
   while(1) {
    $30 = Math_imul($$01$i, $25)|0;
    $31 = (($23) + ($30)|0);
    $32 = (($27) + ($$01$i<<2)|0);
    HEAP32[$32>>2] = $31;
    $33 = (($$01$i) + 1)|0;
    $exitcond$i = ($33|0)==($24|0);
    if ($exitcond$i) {
     $$017$i = $27;$39 = $27;
     break;
    } else {
     $$01$i = $33;
    }
   }
  }
 }
 $34 = HEAP32[$2>>2]|0;
 $35 = HEAP32[$3>>2]|0;
 _png_write_info($34,$35);
 $36 = HEAP32[$2>>2]|0;
 _png_set_packing($36);
 $37 = HEAP32[$2>>2]|0;
 _png_write_image($37,$$017$i);
 $38 = HEAP32[$2>>2]|0;
 _png_write_end($38,0);
 _png_destroy_write_struct($2,$3);
 _free($39);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _liq_crash_if_invalid_handle_pointer_given($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)==(18496|0);
 if ($4) {
  $5 = HEAP32[2490]|0;
  HEAP32[$vararg_buffer>>2] = $1;
  (_fprintf($5,18501,$vararg_buffer)|0);
  _abort();
  // unreachable;
 }
 $6 = ($3|0)==($1|0);
 $$0 = $6;
 STACKTOP = sp;return ($$0|0);
}
function _liq_crash_if_invalid_pointer_given($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = HEAP8[$0>>0]|0;
  $$0 = 1;
 }
 return ($$0|0);
}
function _liq_set_quality($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i = 0.0, $$0$i13 = 0.0, $10 = 0.0, $11 = 0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0.0;
 var $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_liq_crash_if_invalid_handle_pointer_given($0,18527)|0);
 if (!($3)) {
  $$0 = 105;
  return ($$0|0);
 }
 $4 = ($2>>>0)>(100);
 if ($4) {
  $$0 = 100;
  return ($$0|0);
 }
 $5 = ($2|0)<($1|0);
 $6 = ($1|0)<(0);
 $or$cond3 = $6 | $5;
 if ($or$cond3) {
  $$0 = 100;
  return ($$0|0);
 }
 switch ($2|0) {
 case 0:  {
  $$0$i = 1.0E+20;
  break;
 }
 case 100:  {
  $$0$i = 0.0;
  break;
 }
 default: {
  $7 = (+($2|0));
  $8 = $7 + 0.001;
  $9 = 0.016 / $8;
  $10 = $9 + -0.001;
  $11 = $10 < 0.0;
  $12 = $11 ? 0.0 : $10;
  $13 = $7 + 210.0;
  $14 = (+Math_pow((+$13),1.2));
  $15 = 2.5 / $14;
  $16 = 100.09999999999999 - $7;
  $17 = $16 * $15;
  $18 = $17 / 100.0;
  $19 = $12 + $18;
  $$0$i = $19;
 }
 }
 $20 = ((($0)) + 16|0);
 HEAPF64[$20>>3] = $$0$i;
 switch ($1|0) {
 case 0:  {
  $$0$i13 = 1.0E+20;
  break;
 }
 case 100:  {
  $$0$i13 = 0.0;
  break;
 }
 default: {
  $21 = (+($1|0));
  $22 = $21 + 0.001;
  $23 = 0.016 / $22;
  $24 = $23 + -0.001;
  $25 = $24 < 0.0;
  $26 = $25 ? 0.0 : $24;
  $27 = $21 + 210.0;
  $28 = (+Math_pow((+$27),1.2));
  $29 = 2.5 / $28;
  $30 = 100.09999999999999 - $21;
  $31 = $30 * $29;
  $32 = $31 / 100.0;
  $33 = $26 + $32;
  $$0$i13 = $33;
 }
 }
 $34 = ((($0)) + 24|0);
 HEAPF64[$34>>3] = $$0$i13;
 $$0 = 0;
 return ($$0|0);
}
function _liq_set_max_colors($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$off = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_liq_crash_if_invalid_handle_pointer_given($0,18527)|0);
 if (!($2)) {
  $$0 = 105;
  return ($$0|0);
 }
 $$off = (($1) + -2)|0;
 $3 = ($$off>>>0)>(254);
 if ($3) {
  $$0 = 100;
  return ($$0|0);
 }
 $4 = ((($0)) + 44|0);
 HEAP32[$4>>2] = $1;
 $$0 = 0;
 return ($$0|0);
}
function _liq_set_min_posterization($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_liq_crash_if_invalid_handle_pointer_given($0,18527)|0);
 if ($2) {
  $3 = ($1>>>0)>(4);
  if ($3) {
   $$0 = 100;
  } else {
   $4 = ((($0)) + 52|0);
   HEAP32[$4>>2] = $1;
   $$0 = 0;
  }
 } else {
  $$0 = 105;
 }
 return ($$0|0);
}
function _liq_set_speed($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$off = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $addconv = 0, $spec$select = 0, $spec$select44 = 0, $spec$select47 = 0, $spec$select48 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_liq_crash_if_invalid_handle_pointer_given($0,18527)|0);
 if (!($2)) {
  $$0 = 105;
  return ($$0|0);
 }
 $$off = (($1) + -1)|0;
 $3 = ($$off>>>0)>(9);
 if ($3) {
  $$0 = 100;
  return ($$0|0);
 }
 $4 = (8 - ($1))|0;
 $5 = ($4|0)>(0);
 $6 = $5 ? $4 : 0;
 $7 = Math_imul($6, $6)|0;
 $8 = $7 >>> 1;
 $9 = (($8) + ($6))|0;
 $10 = ((($0)) + 60|0);
 HEAP32[$10>>2] = $9;
 $11 = (23 - ($1))|0;
 $12 = 1 << $11;
 $13 = (+($12|0));
 $14 = 1.0 / $13;
 $15 = ((($0)) + 32|0);
 HEAPF64[$15>>3] = $14;
 $16 = Math_imul($1, -9)|0;
 $17 = (($16) + 56)|0;
 $18 = ($17|0)>(0);
 $spec$select = $18 ? $17 : 0;
 $19 = ((($0)) + 64|0);
 HEAP32[$19>>2] = $spec$select;
 $20 = $1 << 18;
 $21 = (2621440 - ($20))|0;
 $22 = $21 | 131072;
 $23 = ((($0)) + 48|0);
 HEAP32[$23>>2] = $22;
 $24 = ($1|0)>(7);
 $25 = $24&1;
 $26 = ((($0)) + 56|0);
 HEAP32[$26>>2] = $25;
 $27 = ($1|0)<(6);
 $28 = $27&1;
 $29 = ((($0)) + 70|0);
 $30 = ($1|0)<(3);
 $storemerge = $30 ? 2 : $28;
 HEAP8[$29>>0] = $storemerge;
 $31 = ($1|0)<(8);
 $32 = ((($0)) + 69|0);
 $spec$select47 = $31&1;
 $spec$select48 = $31 ? 20 : 8;
 HEAP8[$32>>0] = $spec$select47;
 $$sink = $1&255;
 $33 = ((($0)) + 71|0);
 HEAP8[$33>>0] = $$sink;
 $34 = ((($0)) + 72|0);
 $35 = ($spec$select>>>0)<(2);
 $addconv = (($spec$select48) + 30)<<24>>24;
 $spec$select44 = $35 ? $addconv : $spec$select48;
 HEAP8[$34>>0] = $spec$select44;
 $36 = (($1) + 1)|0;
 $37 = (50 / ($36|0))&-1;
 $38 = $37&255;
 $39 = ((($0)) + 74|0);
 HEAP8[$39>>0] = $38;
 $40 = $spec$select44&255;
 $41 = (100 - ($37))|0;
 $42 = (($41) - ($40))|0;
 $43 = $42&255;
 $44 = ((($0)) + 73|0);
 HEAP8[$44>>0] = $43;
 $$0 = 0;
 return ($$0|0);
}
function _liq_set_output_gamma($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$0 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = (_liq_crash_if_invalid_handle_pointer_given($0,18536)|0);
 if (!($2)) {
  $$0 = 105;
  return ($$0|0);
 }
 $3 = $1 <= 0.0;
 $4 = $1 >= 1.0;
 $or$cond = $3 | $4;
 if ($or$cond) {
  $$0 = 100;
  return ($$0|0);
 }
 $5 = ((($0)) + 12|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if (!($7)) {
  $8 = (_liq_crash_if_invalid_handle_pointer_given($6,18547)|0);
  if ($8) {
   $9 = ((($6)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if (!($11)) {
    _pam_freecolormap($10);
   }
   $12 = ((($6)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   $$pre$i = ((($6)) + 8|0);
   if (!($14)) {
    $15 = HEAP32[$$pre$i>>2]|0;
    FUNCTION_TABLE_vi[$15 & 63]($13);
   }
   HEAP32[$6>>2] = 18496;
   $16 = HEAP32[$$pre$i>>2]|0;
   FUNCTION_TABLE_vi[$16 & 63]($6);
  }
  HEAP32[$5>>2] = 0;
 }
 $17 = ((($0)) + 1064|0);
 HEAPF64[$17>>3] = $1;
 $$0 = 0;
 return ($$0|0);
}
function _liq_set_min_opacity($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_liq_crash_if_invalid_handle_pointer_given($0,18527)|0);
 if (!($2)) {
  $$0 = 105;
  return ($$0|0);
 }
 $3 = ($1>>>0)>(255);
 if ($3) {
  $$0 = 100;
  return ($$0|0);
 }
 $4 = ((($0)) + 40|0);
 $5 = (+($1|0));
 $6 = $5 / 255.0;
 $7 = $6;
 HEAPF32[$4>>2] = $7;
 $$0 = 0;
 return ($$0|0);
}
function _liq_set_last_index_transparent($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_liq_crash_if_invalid_handle_pointer_given($0,18527)|0);
 if (!($2)) {
  return;
 }
 $3 = ($1|0)!=(0);
 $4 = $3&1;
 $5 = ((($0)) + 68|0);
 HEAP8[$5>>0] = $4;
 return;
}
function _liq_set_log_callback($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_liq_crash_if_invalid_handle_pointer_given($0,18527)|0);
 if (!($3)) {
  return;
 }
 $4 = ((($0)) + 92|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if (!($6)) {
  $7 = ((($0)) + 96|0);
  $8 = HEAP32[$7>>2]|0;
  FUNCTION_TABLE_vii[$5 & 127]($0,$8);
 }
 $9 = ((($0)) + 84|0);
 HEAP32[$9>>2] = $1;
 $10 = ((($0)) + 88|0);
 HEAP32[$10>>2] = $2;
 return;
}
function _liq_attr_create() {
 var $$1$i = 0, $$sroa$11$0$$sroa_idx12$i = 0, $$sroa$12$0$$sroa_idx13$i = 0, $$sroa$13$0$$sroa_idx14$i = 0, $$sroa$2$0$$sroa_idx2$i = 0, $$sroa$2115$0$$sroa_idx16$i = 0, $$sroa$3$0$$sroa_idx3$i = 0, $$sroa$44$0$$sroa_idx5$i = 0, $$sroa$5$0$$sroa_idx6$i = 0, $$sroa$6$0$$sroa_idx7$i = 0, $$sroa$7$0$$sroa_idx8$i = 0, $$sroa$8$0$$sroa_idx9$i = 0, $$sroa$9$0$$sroa_idx10$i = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_malloc(120)|0);
 $1 = ($0|0)==(0|0);
 $2 = $0;
 $3 = $2 & 15;
 $4 = (16 - ($3))|0;
 $5 = (($0) + ($4)|0);
 if ($1) {
  $$1$i = 0;
  return ($$1$i|0);
 }
 $6 = ((($5)) + -1|0);
 $7 = $4 ^ 89;
 $8 = $7&255;
 HEAP8[$6>>0] = $8;
 HEAP32[$5>>2] = 18527;
 $$sroa$2$0$$sroa_idx2$i = ((($5)) + 4|0);
 HEAP32[$$sroa$2$0$$sroa_idx2$i>>2] = 45;
 $$sroa$3$0$$sroa_idx3$i = ((($5)) + 8|0);
 HEAP32[$$sroa$3$0$$sroa_idx3$i>>2] = 46;
 $$sroa$44$0$$sroa_idx5$i = ((($5)) + 16|0);
 HEAPF64[$$sroa$44$0$$sroa_idx5$i>>3] = 0.0;
 $$sroa$5$0$$sroa_idx6$i = ((($5)) + 24|0);
 HEAPF64[$$sroa$5$0$$sroa_idx6$i>>3] = 1.0E+20;
 $$sroa$6$0$$sroa_idx7$i = ((($5)) + 32|0);
 HEAPF64[$$sroa$6$0$$sroa_idx7$i>>3] = 0.0;
 $$sroa$7$0$$sroa_idx8$i = ((($5)) + 40|0);
 HEAPF32[$$sroa$7$0$$sroa_idx8$i>>2] = 1.0;
 $$sroa$8$0$$sroa_idx9$i = ((($5)) + 44|0);
 HEAP32[$$sroa$8$0$$sroa_idx9$i>>2] = 256;
 $$sroa$9$0$$sroa_idx10$i = ((($5)) + 48|0);
 $$sroa$2115$0$$sroa_idx16$i = ((($5)) + 76|0);
 ;HEAP32[$$sroa$9$0$$sroa_idx10$i>>2]=0|0;HEAP32[$$sroa$9$0$$sroa_idx10$i+4>>2]=0|0;HEAP32[$$sroa$9$0$$sroa_idx10$i+8>>2]=0|0;HEAP32[$$sroa$9$0$$sroa_idx10$i+12>>2]=0|0;HEAP32[$$sroa$9$0$$sroa_idx10$i+16>>2]=0|0;HEAP32[$$sroa$9$0$$sroa_idx10$i+20>>2]=0|0;HEAP16[$$sroa$9$0$$sroa_idx10$i+24>>1]=0|0;HEAP8[$$sroa$9$0$$sroa_idx10$i+26>>0]=0|0;
 ;HEAP32[$$sroa$2115$0$$sroa_idx16$i>>2]=0|0;HEAP32[$$sroa$2115$0$$sroa_idx16$i+4>>2]=0|0;HEAP32[$$sroa$2115$0$$sroa_idx16$i+8>>2]=0|0;HEAP32[$$sroa$2115$0$$sroa_idx16$i+12>>2]=0|0;HEAP32[$$sroa$2115$0$$sroa_idx16$i+16>>2]=0|0;HEAP32[$$sroa$2115$0$$sroa_idx16$i+20>>2]=0|0;
 $9 = (_liq_crash_if_invalid_handle_pointer_given($5,18527)|0);
 if (!($9)) {
  $$1$i = $5;
  return ($$1$i|0);
 }
 $10 = ((($5)) + 74|0);
 $11 = ((($5)) + 73|0);
 $12 = ((($5)) + 72|0);
 $13 = ((($5)) + 71|0);
 $14 = ((($5)) + 70|0);
 $15 = ((($5)) + 69|0);
 $$sroa$13$0$$sroa_idx14$i = ((($5)) + 64|0);
 $$sroa$12$0$$sroa_idx13$i = ((($5)) + 60|0);
 $$sroa$11$0$$sroa_idx12$i = ((($5)) + 56|0);
 HEAP32[$$sroa$12$0$$sroa_idx13$i>>2] = 12;
 HEAPF64[$$sroa$6$0$$sroa_idx7$i>>3] = 1.9073486328125E-6;
 HEAP32[$$sroa$13$0$$sroa_idx14$i>>2] = 20;
 HEAP32[$$sroa$9$0$$sroa_idx10$i>>2] = 1703936;
 HEAP32[$$sroa$11$0$$sroa_idx12$i>>2] = 0;
 HEAP8[$14>>0] = 1;
 HEAP8[$15>>0] = 1;
 HEAP8[$13>>0] = 4;
 HEAP8[$12>>0] = 20;
 HEAP8[$10>>0] = 10;
 HEAP8[$11>>0] = 70;
 $$1$i = $5;
 return ($$1$i|0);
}
function _liq_aligned_malloc($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + 16)|0;
 $2 = (_malloc($1)|0);
 $3 = ($2|0)==(0|0);
 $4 = $2;
 $5 = $4 & 15;
 $6 = (16 - ($5))|0;
 $7 = (($2) + ($6)|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = ((($7)) + -1|0);
 $9 = $6 ^ 89;
 $10 = $9&255;
 HEAP8[$8>>0] = $10;
 $$0 = $7;
 return ($$0|0);
}
function _liq_aligned_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + -1|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 ^ 89;
 $4 = $3&255;
 $5 = (0 - ($4))|0;
 $6 = (($0) + ($5)|0);
 _free($6);
 return;
}
function _liq_attr_destroy($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_liq_crash_if_invalid_handle_pointer_given($0,18527)|0);
 if (!($1)) {
  return;
 }
 $2 = ((($0)) + 92|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = ((($0)) + 96|0);
  $6 = HEAP32[$5>>2]|0;
  FUNCTION_TABLE_vii[$3 & 127]($0,$6);
 }
 HEAP32[$0>>2] = 18496;
 $7 = ((($0)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 FUNCTION_TABLE_vi[$8 & 63]($0);
 return;
}
function _liq_attr_copy($0) {
 $0 = $0|0;
 var $$1 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $1 = (_liq_crash_if_invalid_handle_pointer_given($0,18527)|0);
 if (!($1)) {
  $$1 = 0;
  return ($$1|0);
 }
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (FUNCTION_TABLE_ii[$3 & 63](104)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $$1 = 0;
  return ($$1|0);
 }
 dest=$4; src=$0; stop=dest+104|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $$1 = $4;
 return ($$1|0);
}
function _liq_image_add_fixed_color($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$2$0$$sroa_idx5 = 0, $$sroa$3$0$$sroa_idx6 = 0, $$sroa$4$0$$sroa_idx7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0.0;
 var $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1024|0);
 $2 = sp;
 $3 = (_liq_crash_if_invalid_handle_pointer_given($0,18568)|0);
 if (!($3)) {
  $$0 = 105;
  STACKTOP = sp;return ($$0|0);
 }
 $4 = ((($0)) + 4176|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = ($5&65535)>(255);
 if ($6) {
  $$0 = 106;
  STACKTOP = sp;return ($$0|0);
 }
 $7 = ((($0)) + 24|0);
 $8 = +HEAPF64[$7>>3];
 _to_f_set_gamma($2,$8);
 $9 = HEAP16[$4>>1]|0;
 $10 = (($9) + 1)<<16>>16;
 HEAP16[$4>>1] = $10;
 $11 = $9&65535;
 $12 = HEAP8[$1>>0]|0;
 $13 = ((($1)) + 1|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = ((($1)) + 2|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ((($1)) + 3|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = (+($18&255));
 $20 = $19 / 255.0;
 $21 = $12&255;
 $22 = (($2) + ($21<<2)|0);
 $23 = +HEAPF32[$22>>2];
 $24 = $23 * $20;
 $25 = $14&255;
 $26 = (($2) + ($25<<2)|0);
 $27 = +HEAPF32[$26>>2];
 $28 = $20 * $27;
 $29 = $16&255;
 $30 = (($2) + ($29<<2)|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $20 * $31;
 $$sroa$0$0$$sroa_idx = (((($0)) + 80|0) + ($11<<4)|0);
 HEAPF32[$$sroa$0$0$$sroa_idx>>2] = $20;
 $$sroa$2$0$$sroa_idx5 = (((((($0)) + 80|0) + ($11<<4)|0)) + 4|0);
 HEAPF32[$$sroa$2$0$$sroa_idx5>>2] = $24;
 $$sroa$3$0$$sroa_idx6 = (((((($0)) + 80|0) + ($11<<4)|0)) + 8|0);
 HEAPF32[$$sroa$3$0$$sroa_idx6>>2] = $28;
 $$sroa$4$0$$sroa_idx7 = (((((($0)) + 80|0) + ($11<<4)|0)) + 12|0);
 HEAPF32[$$sroa$4$0$$sroa_idx7>>2] = $32;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _liq_image_set_memory_ownership($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$023 = 0, $$026 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond25 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_liq_crash_if_invalid_handle_pointer_given($0,18568)|0);
 if (!($2)) {
  $$023 = 105;
  return ($$023|0);
 }
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 $6 = ($1|0)!=(0);
 $or$cond = $6 & $5;
 $7 = $1 & -13;
 $8 = ($7|0)==(0);
 $or$cond25 = $8 & $or$cond;
 if (!($or$cond25)) {
  $$023 = 100;
  return ($$023|0);
 }
 $9 = $1 & 4;
 $10 = ($9|0)==(0);
 do {
  if (!($10)) {
   $11 = ((($0)) + 4180|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = ($12<<24>>24)==(0);
   if ($13) {
    $14 = ((($0)) + 4179|0);
    HEAP8[$14>>0] = 1;
    break;
   } else {
    $$023 = 100;
    return ($$023|0);
   }
  }
 } while(0);
 $15 = $1 & 8;
 $16 = ($15|0)==(0);
 if ($16) {
  $$023 = 0;
  return ($$023|0);
 }
 $17 = ((($0)) + 4178|0);
 HEAP8[$17>>0] = 1;
 $18 = ((($0)) + 52|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  $$023 = 0;
  return ($$023|0);
 }
 $21 = HEAP32[$4>>2]|0;
 HEAP32[$18>>2] = $21;
 $22 = ((($0)) + 36|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23>>>0)>(1);
 if (!($24)) {
  $$023 = 0;
  return ($$023|0);
 }
 $25 = $21;
 $$026 = 1;$28 = $25;
 while(1) {
  $26 = (($4) + ($$026<<2)|0);
  $27 = HEAP32[$26>>2]|0;
  $29 = ($28>>>0)<($27>>>0);
  $$ = $29 ? $28 : $27;
  HEAP32[$18>>2] = $$;
  $30 = (($$026) + 1)|0;
  $31 = ($30>>>0)<($23>>>0);
  if ($31) {
   $$026 = $30;$28 = $$;
  } else {
   $$023 = 0;
   break;
  }
 }
 return ($$023|0);
}
function _liq_image_destroy($0) {
 $0 = $0|0;
 var $$0$i$i = 0, $$0$i11$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond$i$i = 0, $or$cond$i10$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_liq_crash_if_invalid_handle_pointer_given($0,18568)|0);
 if (!($1)) {
  return;
 }
 $2 = ((($0)) + 4178|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if (!($4)) {
  $5 = ((($0)) + 52|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   $8 = ((($0)) + 4180|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(0);
   $11 = ((($0)) + 8|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(46|0);
   $or$cond$i$i = $10 & $13;
   $$0$i$i = $or$cond$i$i ? 47 : $12;
   FUNCTION_TABLE_vi[$$0$i$i & 63]($6);
   HEAP32[$5>>2] = 0;
  }
 }
 $14 = ((($0)) + 4179|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)==(0);
 if (!($16)) {
  $17 = ((($0)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ($18|0)==(0|0);
  if (!($19)) {
   $20 = ((($0)) + 4180|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)==(0);
   $23 = ((($0)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(46|0);
   $or$cond$i10$i = $22 & $25;
   $$0$i11$i = $or$cond$i10$i ? 47 : $24;
   FUNCTION_TABLE_vi[$$0$i11$i & 63]($18);
   HEAP32[$17>>2] = 0;
  }
 }
 $26 = ((($0)) + 40|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  $29 = ((($0)) + 8|0);
  $30 = HEAP32[$29>>2]|0;
  FUNCTION_TABLE_vi[$30 & 63]($27);
  HEAP32[$26>>2] = 0;
 }
 $31 = ((($0)) + 44|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0|0);
 if (!($33)) {
  $34 = ((($0)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  FUNCTION_TABLE_vi[$35 & 63]($32);
  HEAP32[$31>>2] = 0;
 }
 $36 = ((($0)) + 48|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if (!($38)) {
  $39 = ((($0)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  FUNCTION_TABLE_vi[$40 & 63]($37);
  HEAP32[$36>>2] = 0;
 }
 $41 = ((($0)) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)==(0|0);
 if (!($43)) {
  $44 = ((($0)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  FUNCTION_TABLE_vi[$45 & 63]($42);
 }
 $46 = ((($0)) + 56|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)==(0|0);
 if (!($48)) {
  $49 = ((($0)) + 8|0);
  $50 = HEAP32[$49>>2]|0;
  FUNCTION_TABLE_vi[$50 & 63]($47);
 }
 $51 = ((($0)) + 60|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)==(0|0);
 if (!($53)) {
  $54 = ((($0)) + 8|0);
  $55 = HEAP32[$54>>2]|0;
  FUNCTION_TABLE_vi[$55 & 63]($52);
 }
 $56 = ((($0)) + 72|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = ($57|0)==(0|0);
 if (!($58)) {
  _liq_image_destroy($57);
 }
 HEAP32[$0>>2] = 18496;
 $59 = ((($0)) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 FUNCTION_TABLE_vi[$60 & 63]($0);
 return;
}
function _liq_verbose_printf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $$alloca_mul = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 84|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  STACKTOP = sp;return;
 }
 HEAP32[$2>>2] = $varargs;
 $6 = (_vsnprintf(0,0,$1,$2)|0);
 $7 = (($6) + 1)|0;
 $8 = (_llvm_stacksave()|0);
 $$alloca_mul = $7;
 $9 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 HEAP32[$2>>2] = $varargs;
 (_vsnprintf($9,$7,$1,$2)|0);
 $10 = HEAP32[$3>>2]|0;
 $11 = ((($0)) + 88|0);
 $12 = HEAP32[$11>>2]|0;
 FUNCTION_TABLE_viii[$10 & 127]($0,$9,$12);
 _llvm_stackrestore(($8|0));
 STACKTOP = sp;return;
}
function _liq_image_create_internal($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = +$6;
 var $$1 = 0, $$idx$val = 0, $$idx$val61 = 0, $$idx57$val = 0, $$idx57$val63 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre65 = 0, $$sroa$10$0$$sroa_idx16 = 0, $$sroa$11$0$$sroa_idx17 = 0, $$sroa$1118$0$$sroa_idx19 = 0, $$sroa$12$0$$sroa_idx = 0, $$sroa$3$0$$sroa_idx4 = 0, $$sroa$4$0$$sroa_idx5 = 0, $$sroa$5$0$$sroa_idx6 = 0, $$sroa$57$0$$sroa_idx8 = 0, $$sroa$6$0$$sroa_idx = 0, $$sroa$69$0$$sroa_idx10 = 0, $$sroa$7$0$$sroa_idx11 = 0, $$sroa$8$0$$sroa_idx12 = 0;
 var $$sroa$9$0$$sroa_idx = 0, $$sroa$914$0$$sroa_idx15 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0;
 var $spec$select = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $7 = $6 < 0.0;
 $8 = $6 > 1.0;
 $or$cond = $7 | $8;
 if ($or$cond) {
  $9 = (_liq_crash_if_invalid_handle_pointer_given($0,18527)|0);
  if (!($9)) {
   $$1 = 0;
   STACKTOP = sp;return ($$1|0);
  }
  HEAP32[$vararg_buffer>>2] = 18635;
  _liq_verbose_printf($0,18578,$vararg_buffer);
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $10 = ($1|0)!=(0|0);
 $11 = ($2|0)!=(0|0);
 $or$cond3 = $10 | $11;
 if (!($or$cond3)) {
  $12 = (_liq_crash_if_invalid_handle_pointer_given($0,18527)|0);
  if (!($12)) {
   $$1 = 0;
   STACKTOP = sp;return ($$1|0);
  }
  HEAP32[$vararg_buffer1>>2] = 18685;
  _liq_verbose_printf($0,18578,$vararg_buffer1);
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $13 = ((($0)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (FUNCTION_TABLE_ii[$14 & 63](4184)|0);
 $16 = ($15|0)==(0|0);
 if ($16) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $17 = HEAP32[$13>>2]|0;
 $18 = ((($0)) + 8|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = $6 != 0.0;
 $21 = $20 ? $6 : 0.45455000000000001;
 $22 = ((($0)) + 40|0);
 $23 = HEAP32[$22>>2]|0;
 HEAP32[$15>>2] = 18568;
 $$sroa$3$0$$sroa_idx4 = ((($15)) + 4|0);
 HEAP32[$$sroa$3$0$$sroa_idx4>>2] = $17;
 $$sroa$4$0$$sroa_idx5 = ((($15)) + 8|0);
 HEAP32[$$sroa$4$0$$sroa_idx5>>2] = $19;
 $$sroa$5$0$$sroa_idx6 = ((($15)) + 12|0);
 HEAP32[$$sroa$5$0$$sroa_idx6>>2] = 0;
 $$sroa$57$0$$sroa_idx8 = ((($15)) + 16|0);
 HEAP32[$$sroa$57$0$$sroa_idx8>>2] = $1;
 $$sroa$6$0$$sroa_idx = ((($15)) + 20|0);
 HEAP32[$$sroa$6$0$$sroa_idx>>2] = 0;
 $$sroa$69$0$$sroa_idx10 = ((($15)) + 24|0);
 HEAPF64[$$sroa$69$0$$sroa_idx10>>3] = $21;
 $$sroa$7$0$$sroa_idx11 = ((($15)) + 32|0);
 HEAP32[$$sroa$7$0$$sroa_idx11>>2] = $4;
 $$sroa$8$0$$sroa_idx12 = ((($15)) + 36|0);
 HEAP32[$$sroa$8$0$$sroa_idx12>>2] = $5;
 $$sroa$9$0$$sroa_idx = ((($15)) + 40|0);
 ;HEAP32[$$sroa$9$0$$sroa_idx>>2]=0|0;HEAP32[$$sroa$9$0$$sroa_idx+4>>2]=0|0;HEAP32[$$sroa$9$0$$sroa_idx+8>>2]=0|0;HEAP32[$$sroa$9$0$$sroa_idx+12>>2]=0|0;HEAP32[$$sroa$9$0$$sroa_idx+16>>2]=0|0;HEAP32[$$sroa$9$0$$sroa_idx+20>>2]=0|0;
 $$sroa$914$0$$sroa_idx15 = ((($15)) + 64|0);
 HEAP32[$$sroa$914$0$$sroa_idx15>>2] = $2;
 $$sroa$10$0$$sroa_idx16 = ((($15)) + 68|0);
 HEAP32[$$sroa$10$0$$sroa_idx16>>2] = $3;
 $$sroa$11$0$$sroa_idx17 = ((($15)) + 72|0);
 HEAP32[$$sroa$11$0$$sroa_idx17>>2] = 0;
 $$sroa$1118$0$$sroa_idx19 = ((($15)) + 76|0);
 HEAP32[$$sroa$1118$0$$sroa_idx19>>2] = $23;
 $$sroa$12$0$$sroa_idx = ((($15)) + 80|0);
 _memset(($$sroa$12$0$$sroa_idx|0),0,4104)|0;
 if ($10) {
  $24 = +HEAPF32[$22>>2];
  $25 = $24 < 1.0;
  if ($25) {
   label = 11;
  } else {
   $$phi$trans$insert = ((($15)) + 56|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $31 = $$pre;
  }
 } else {
  label = 11;
 }
 do {
  if ((label|0) == 11) {
   $26 = HEAP32[$13>>2]|0;
   $27 = $4 << 2;
   $28 = (FUNCTION_TABLE_ii[$26 & 63]($27)|0);
   $29 = ((($15)) + 56|0);
   HEAP32[$29>>2] = $28;
   $30 = ($28|0)==(0|0);
   if ($30) {
    $$1 = 0;
    STACKTOP = sp;return ($$1|0);
   } else {
    $31 = $28;
    break;
   }
  }
 } while(0);
 $32 = ($31|0)==(0|0);
 if ($32) {
  $33 = ((($0)) + 69|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = ($34<<24>>24)==(0);
  if ($35) {
   $37 = ((($0)) + 70|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = ($38<<24>>24)==(0);
   $$idx$val = HEAP32[$$sroa$7$0$$sroa_idx11>>2]|0;
   $$idx57$val = HEAP32[$$sroa$8$0$$sroa_idx12>>2]|0;
   $40 = Math_imul($$idx57$val, $$idx$val)|0;
   $spec$select = $39 ? 524288 : 4194304;
   $41 = $40;$43 = $spec$select;$62 = $$idx$val;
  } else {
   label = 15;
  }
 } else {
  label = 15;
 }
 if ((label|0) == 15) {
  $$idx$val61 = HEAP32[$$sroa$7$0$$sroa_idx11>>2]|0;
  $$idx57$val63 = HEAP32[$$sroa$8$0$$sroa_idx12>>2]|0;
  $36 = Math_imul($$idx57$val63, $$idx$val61)|0;
  $41 = $36;$43 = 4194304;$62 = $$idx$val61;
 }
 $42 = ($41>>>0)>($43>>>0);
 if ($42) {
  $44 = ((($0)) + 84|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(0|0);
  if ($46) {
   $51 = $62;
  } else {
   $47 = ((($0)) + 88|0);
   $48 = HEAP32[$47>>2]|0;
   FUNCTION_TABLE_viii[$45 & 127]($0,18702,$48);
   $$pre65 = HEAP32[$$sroa$7$0$$sroa_idx11>>2]|0;
   $51 = $$pre65;
  }
  $49 = HEAP32[$$sroa$3$0$$sroa_idx4>>2]|0;
  $50 = $51 << 4;
  $52 = (FUNCTION_TABLE_ii[$49 & 63]($50)|0);
  $53 = ((($15)) + 60|0);
  HEAP32[$53>>2] = $52;
  $54 = ($52|0)==(0|0);
  if ($54) {
   $$1 = 0;
   STACKTOP = sp;return ($$1|0);
  }
 }
 $55 = +HEAPF32[$$sroa$1118$0$$sroa_idx19>>2];
 $56 = $55 < 1.0;
 if (!($56)) {
  $$1 = $15;
  STACKTOP = sp;return ($$1|0);
 }
 $57 = ((($0)) + 84|0);
 $58 = HEAP32[$57>>2]|0;
 $59 = ($58|0)==(0|0);
 if ($59) {
  $$1 = $15;
  STACKTOP = sp;return ($$1|0);
 }
 $60 = ((($0)) + 88|0);
 $61 = HEAP32[$60>>2]|0;
 FUNCTION_TABLE_viii[$58 & 127]($0,18722,$61);
 $$1 = $15;
 STACKTOP = sp;return ($$1|0);
}
function _liq_image_create_rgba_rows($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$01820 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0;
 var $or$cond3$i = 0, $or$cond5$i = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $5 = (_liq_crash_if_invalid_handle_pointer_given($0,18527)|0);
 if (!($5)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $6 = ($2|0)<(1);
 $7 = ($3|0)<(1);
 $or$cond$i = $6 | $7;
 if ($or$cond$i) {
  $8 = (_liq_crash_if_invalid_handle_pointer_given($0,18527)|0);
  if (!($8)) {
   $$1 = 0;
   STACKTOP = sp;return ($$1|0);
  }
  HEAP32[$vararg_buffer>>2] = 18590;
  _liq_verbose_printf($0,18578,$vararg_buffer);
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $9 = (536870911 / ($3>>>0))&-1;
 $10 = ($9>>>0)<($2>>>0);
 $11 = ($2>>>0)>(8388607);
 $or$cond3$i = $11 | $10;
 $12 = ($3>>>0)>(536870911);
 $or$cond5$i = $12 | $or$cond3$i;
 if ($or$cond5$i) {
  $13 = (_liq_crash_if_invalid_handle_pointer_given($0,18527)|0);
  if (!($13)) {
   $$1 = 0;
   STACKTOP = sp;return ($$1|0);
  }
  HEAP32[$vararg_buffer1>>2] = 18619;
  _liq_verbose_printf($0,18578,$vararg_buffer1);
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $$01820 = 0;
 while(1) {
  $16 = (($1) + ($$01820<<2)|0);
  $17 = (_liq_crash_if_invalid_pointer_given($16)|0);
  if (!($17)) {
   break;
  }
  $18 = HEAP32[$16>>2]|0;
  $19 = (_liq_crash_if_invalid_pointer_given($18)|0);
  $14 = (($$01820) + 1)|0;
  if (!($19)) {
   break;
  }
  $15 = ($14|0)<($3|0);
  if ($15) {
   $$01820 = $14;
  } else {
   label = 14;
   break;
  }
 }
 if ((label|0) == 14) {
  $21 = (_liq_image_create_internal($0,$1,0,0,$2,$3,$4)|0);
  $$1 = $21;
  STACKTOP = sp;return ($$1|0);
 }
 $20 = (_liq_crash_if_invalid_handle_pointer_given($0,18527)|0);
 if (!($20)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 HEAP32[$vararg_buffer4>>2] = 18783;
 _liq_verbose_printf($0,18578,$vararg_buffer4);
 $$1 = 0;
 STACKTOP = sp;return ($$1|0);
}
function _liq_executing_user_callback($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 FUNCTION_TABLE_viiii[$0 & 63]($1,$2,$3,$4);
 return;
}
function _liq_image_get_width($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_liq_crash_if_invalid_handle_pointer_given($0,18568)|0);
 if (!($1)) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ((($0)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $$0 = $3;
 return ($$0|0);
}
function _liq_image_get_height($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_liq_crash_if_invalid_handle_pointer_given($0,18568)|0);
 if (!($1)) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ((($0)) + 36|0);
 $3 = HEAP32[$2>>2]|0;
 $$0 = $3;
 return ($$0|0);
}
function _liq_quantize_image($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = (_liq_image_quantize($1,$0,$2)|0);
 $4 = ($3|0)==(0);
 $5 = HEAP32[$2>>2]|0;
 $$0 = $4 ? $5 : 0;
 STACKTOP = sp;return ($$0|0);
}
function _liq_image_quantize($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i = 0, $$2 = 0, $$sroa$3$0$$sroa_idx1$i = 0, $$sroa$4$0$$sroa_idx2$i = 0, $$sroa$5$0$$sroa_idx$i = 0, $$sroa$54$0$$sroa_idx5$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_liq_crash_if_invalid_handle_pointer_given($1,18527)|0);
 if (!($3)) {
  $$2 = 105;
  return ($$2|0);
 }
 $4 = (_liq_crash_if_invalid_handle_pointer_given($0,18568)|0);
 if (!($4)) {
  $$2 = 106;
  return ($$2|0);
 }
 $5 = ((($0)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $8 = ((($0)) + 56|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(0|0);
  if ($10) {
   $$2 = 106;
   return ($$2|0);
  }
  $11 = ((($0)) + 64|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $$2 = 106;
   return ($$2|0);
  }
 }
 $14 = (_liq_crash_if_invalid_handle_pointer_given($1,18527)|0);
 if (!($14)) {
  $$2 = 101;
  return ($$2|0);
 }
 $15 = ((($1)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (FUNCTION_TABLE_ii[$16 & 63](4128)|0);
 $18 = ($17|0)==(0|0);
 if ($18) {
  $$2 = 101;
  return ($$2|0);
 }
 $19 = HEAP32[$15>>2]|0;
 $20 = ((($1)) + 8|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = ((($1)) + 52|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ((($1)) + 56|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($23>>>0)>($25>>>0);
 $$$i = $26 ? $23 : $25;
 $27 = $$$i&65535;
 HEAP32[$17>>2] = 18804;
 $$sroa$3$0$$sroa_idx1$i = ((($17)) + 4|0);
 HEAP32[$$sroa$3$0$$sroa_idx1$i>>2] = $19;
 $$sroa$4$0$$sroa_idx2$i = ((($17)) + 8|0);
 HEAP32[$$sroa$4$0$$sroa_idx2$i>>2] = $21;
 $$sroa$5$0$$sroa_idx$i = ((($17)) + 12|0);
 _memset(($$sroa$5$0$$sroa_idx$i|0),0,4110)|0;
 $$sroa$54$0$$sroa_idx5$i = ((($17)) + 4122|0);
 HEAP16[$$sroa$54$0$$sroa_idx5$i>>1] = $27;
 $28 = ((($17)) + 4124|0);
 HEAP32[$28>>2] = 0;
 $29 = (_liq_histogram_add_image($17,$1,$0)|0);
 $30 = ($29|0)==(0);
 if (!($30)) {
  $$2 = $29;
  return ($$2|0);
 }
 $31 = (_liq_histogram_quantize_internal($17,$1,0,$2)|0);
 $32 = (_liq_crash_if_invalid_handle_pointer_given($17,18804)|0);
 if (!($32)) {
  $$2 = $31;
  return ($$2|0);
 }
 HEAP32[$17>>2] = 18496;
 $33 = HEAP32[$$sroa$5$0$$sroa_idx$i>>2]|0;
 _pam_freeacolorhash($33);
 $34 = HEAP32[$$sroa$4$0$$sroa_idx2$i>>2]|0;
 FUNCTION_TABLE_vi[$34 & 63]($17);
 $$2 = $31;
 return ($$2|0);
}
function _liq_histogram_add_image($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i$i = 0, $$0$i11$i = 0, $$082108$us = 0, $$084110 = 0, $$9 = 0, $$pr = 0, $$pre114 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond$i$i = 0, $or$cond$i10$i = 0, $vararg_buffer = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp + 16|0;
 $3 = sp;
 $4 = sp + 20|0;
 $5 = (_liq_crash_if_invalid_handle_pointer_given($1,18527)|0);
 if (!($5)) {
  $$9 = 105;
  STACKTOP = sp;return ($$9|0);
 }
 $6 = (_liq_crash_if_invalid_handle_pointer_given($0,18804)|0);
 if (!($6)) {
  $$9 = 105;
  STACKTOP = sp;return ($$9|0);
 }
 $7 = (_liq_crash_if_invalid_handle_pointer_given($2,18568)|0);
 if (!($7)) {
  $$9 = 105;
  STACKTOP = sp;return ($$9|0);
 }
 $8 = ((($2)) + 32|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($2)) + 36|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($2)) + 40|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  $15 = ((($1)) + 69|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)==(0);
  if (!($17)) {
   _contrast_maps($2);
  }
 }
 $18 = ((($2)) + 24|0);
 $19 = +HEAPF64[$18>>3];
 $20 = ((($0)) + 16|0);
 HEAPF64[$20>>3] = $19;
 $21 = ((($2)) + 4176|0);
 $22 = HEAP16[$21>>1]|0;
 $23 = ($22<<16>>16)==(0);
 L14: do {
  if (!($23)) {
   $24 = ((($0)) + 4120|0);
   $$084110 = 0;
   while(1) {
    $25 = (((($2)) + 80|0) + ($$084110<<4)|0);
    dest=$3; src=$25; stop=dest+16|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
    $26 = HEAP16[$24>>1]|0;
    $27 = ($26&65535)>(255);
    if ($27) {
     break;
    }
    $28 = (($26) + 1)<<16>>16;
    $29 = $26&65535;
    $30 = (((($0)) + 24|0) + ($29<<4)|0);
    HEAP16[$24>>1] = $28;
    ;HEAP32[$30>>2]=HEAP32[$3>>2]|0;HEAP32[$30+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$30+8>>2]=HEAP32[$3+8>>2]|0;HEAP32[$30+12>>2]=HEAP32[$3+12>>2]|0;
    $31 = (($$084110) + 1)|0;
    $32 = HEAP16[$21>>1]|0;
    $33 = $32&65535;
    $34 = ($31>>>0)<($33>>>0);
    if ($34) {
     $$084110 = $31;
    } else {
     break L14;
    }
   }
   $$9 = 106;
   STACKTOP = sp;return ($$9|0);
  }
 } while(0);
 $35 = ((($1)) + 72|0);
 $36 = ((($1)) + 76|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)==(0|0);
 if (!($38)) {
  $39 = HEAP8[$35>>0]|0;
  $40 = (+($39&255));
  $41 = $40 * 0.40000000596046448;
  $42 = ((($1)) + 80|0);
  $43 = HEAP32[$42>>2]|0;
  $44 = (FUNCTION_TABLE_idi[$37 & 0]($41,$43)|0);
  $45 = ($44|0)==(0);
  if ($45) {
   $$9 = 102;
   STACKTOP = sp;return ($$9|0);
  }
 }
 $46 = ((($2)) + 16|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ($47|0)==(0|0);
 if ($48) {
  $138 = 0;
 } else {
  $49 = ((($2)) + 76|0);
  $50 = +HEAPF32[$49>>2];
  $51 = !($50 < 1.0);
  $138 = $51;
 }
 $52 = ((($0)) + 4124|0);
 $53 = HEAP8[$52>>0]|0;
 $54 = ($53<<24>>24)==(0);
 if ($54) {
  $55 = ((($1)) + 48|0);
  $56 = HEAP32[$55>>2]|0;
  $70 = $56;
 } else {
  $70 = -1;
 }
 $57 = ((($0)) + 12|0);
 $58 = Math_imul($11, $9)|0;
 $59 = ((($0)) + 4122|0);
 $60 = ((($1)) + 4|0);
 $61 = ((($1)) + 8|0);
 $62 = ($11|0)==(0);
 $63 = ((($1)) + 80|0);
 $$pre114 = HEAP32[$57>>2]|0;
 L32: do {
  if ($62) {
   $101 = ($$pre114|0)==(0|0);
   if ($101) {
    $102 = HEAP16[$59>>1]|0;
    $103 = $102&65535;
    $104 = HEAP32[$60>>2]|0;
    $105 = HEAP32[$61>>2]|0;
    $106 = (_pam_allocacolorhash($70,$58,$103,$104,$105)|0);
    HEAP32[$57>>2] = $106;
    $107 = ($106|0)==(0|0);
    if ($107) {
     $$9 = 101;
     STACKTOP = sp;return ($$9|0);
    }
   }
  } else {
   $64 = $$pre114;
   while(1) {
    $65 = ($64|0)==(0|0);
    if ($65) {
     $66 = HEAP16[$59>>1]|0;
     $67 = $66&65535;
     $68 = HEAP32[$60>>2]|0;
     $69 = HEAP32[$61>>2]|0;
     $71 = (_pam_allocacolorhash($70,$58,$67,$68,$69)|0);
     HEAP32[$57>>2] = $71;
     $72 = ($71|0)==(0|0);
     if ($72) {
      $$9 = 101;
      label = 42;
      break;
     } else {
      $99 = $71;
     }
    } else {
     $99 = $64;
    }
    L42: do {
     if ($138) {
      $97 = HEAP32[$46>>2]|0;
      $98 = HEAP32[$12>>2]|0;
      $100 = (_pam_computeacolorhash($99,$97,$9,$11,$98)|0);
      if ($100) {
       label = 26;
      } else {
       label = 24;
      }
     } else {
      $$082108$us = 0;
      while(1) {
       $75 = (_liq_image_get_row_rgba($2,$$082108$us)|0);
       HEAP32[$4>>2] = $75;
       $76 = HEAP32[$57>>2]|0;
       $77 = HEAP32[$12>>2]|0;
       $78 = ($77|0)==(0|0);
       $79 = Math_imul($$082108$us, $9)|0;
       $80 = (($77) + ($79)|0);
       $81 = $78 ? 0 : $80;
       $82 = (_pam_computeacolorhash($76,$4,$9,1,$81)|0);
       $73 = (($$082108$us) + 1)|0;
       if (!($82)) {
        label = 24;
        break L42;
       }
       $74 = ($73>>>0)<($11>>>0);
       if ($74) {
        $$082108$us = $73;
       } else {
        label = 26;
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 24) {
     label = 0;
     $83 = HEAP16[$59>>1]|0;
     $84 = (($83) + 1)<<16>>16;
     HEAP16[$59>>1] = $84;
     $85 = $84&65535;
     HEAP32[$vararg_buffer>>2] = $85;
     _liq_verbose_printf($1,19052,$vararg_buffer);
     $86 = HEAP32[$57>>2]|0;
     _pam_freeacolorhash($86);
     HEAP32[$57>>2] = 0;
     $87 = HEAP32[$36>>2]|0;
     $88 = ($87|0)==(0|0);
     if ($88) {
      $95 = 0;
     } else {
      $89 = HEAP8[$35>>0]|0;
      $90 = (+($89&255));
      $91 = $90 * 0.60000002384185791;
      $92 = HEAP32[$63>>2]|0;
      $93 = (FUNCTION_TABLE_idi[$87 & 0]($91,$92)|0);
      $94 = ($93|0)==(0);
      if ($94) {
       $$9 = 102;
       label = 42;
       break;
      } else {
       label = 26;
      }
     }
    }
    if ((label|0) == 26) {
     label = 0;
     $$pr = HEAP32[$57>>2]|0;
     $95 = $$pr;
    }
    $96 = ($95|0)==(0|0);
    if ($96) {
     $64 = 0;
    } else {
     break L32;
    }
   }
   if ((label|0) == 42) {
    STACKTOP = sp;return ($$9|0);
   }
  }
 } while(0);
 HEAP8[$52>>0] = 1;
 $108 = HEAP32[$12>>2]|0;
 $109 = ($108|0)==(0|0);
 if (!($109)) {
  $110 = ((($2)) + 8|0);
  $111 = HEAP32[$110>>2]|0;
  FUNCTION_TABLE_vi[$111 & 63]($108);
  HEAP32[$12>>2] = 0;
 }
 $112 = ((($2)) + 4178|0);
 $113 = HEAP8[$112>>0]|0;
 $114 = ($113<<24>>24)==(0);
 if ($114) {
  $$9 = 0;
  STACKTOP = sp;return ($$9|0);
 }
 $115 = ((($2)) + 12|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ($116|0)==(0|0);
 if ($117) {
  $$9 = 0;
  STACKTOP = sp;return ($$9|0);
 }
 $118 = ((($2)) + 52|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = ($119|0)==(0|0);
 if (!($120)) {
  $121 = ((($2)) + 4180|0);
  $122 = HEAP8[$121>>0]|0;
  $123 = ($122<<24>>24)==(0);
  $124 = ((($2)) + 8|0);
  $125 = HEAP32[$124>>2]|0;
  $126 = ($125|0)==(46|0);
  $or$cond$i$i = $123 & $126;
  $$0$i$i = $or$cond$i$i ? 47 : $125;
  FUNCTION_TABLE_vi[$$0$i$i & 63]($119);
  HEAP32[$118>>2] = 0;
 }
 $127 = ((($2)) + 4179|0);
 $128 = HEAP8[$127>>0]|0;
 $129 = ($128<<24>>24)==(0);
 if ($129) {
  $$9 = 0;
  STACKTOP = sp;return ($$9|0);
 }
 $130 = HEAP32[$46>>2]|0;
 $131 = ($130|0)==(0|0);
 if ($131) {
  $$9 = 0;
  STACKTOP = sp;return ($$9|0);
 }
 $132 = ((($2)) + 4180|0);
 $133 = HEAP8[$132>>0]|0;
 $134 = ($133<<24>>24)==(0);
 $135 = ((($2)) + 8|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ($136|0)==(46|0);
 $or$cond$i10$i = $134 & $137;
 $$0$i11$i = $or$cond$i10$i ? 47 : $136;
 FUNCTION_TABLE_vi[$$0$i11$i & 63]($130);
 HEAP32[$46>>2] = 0;
 $$9 = 0;
 STACKTOP = sp;return ($$9|0);
}
function _liq_histogram_quantize_internal($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$0128$i$i = 0, $$$0144$i$i = 0.0, $$$i$i = 0, $$$i$i$i = 0, $$$i$i$i$us$i$i = 0.0, $$$i139$i = 0.0, $$$i4$i$i$us$i$i = 0.0, $$$i5$i$i$us$i$i = 0.0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i$i144$i = 0.0, $$0$i$i147$i = 0.0, $$0111$i$i = 0, $$0124$i = 0, $$0127$i = 0.0, $$0127165$i$i = 0, $$0128$i$i = 0, $$0132207$i = 0, $$0133201$i = 0.0, $$0134199$i = 0;
 var $$0135200$i = 0, $$0136$i$i = 0, $$0137$i$i = 0, $$0140$i$i = 0.0, $$0144$i$i = 0.0, $$0181$i = 0.0, $$019$i$i = 0, $$020$i$i = 0, $$02344$us$i$i = 0, $$043$us$i$i = 0, $$05155$i$i = 0, $$05155$i$i$i = 0, $$05253$i$i = 0, $$05253$i$i$i = 0, $$068$i$i = 0, $$068$i145$i = 0, $$087$lcssa138139$i$i = 0, $$087$lcssa138143$i$i = 0, $$087110$i$i = 0, $$089113$i$i = 0;
 var $$090$lcssa132136141$i$i = 0, $$090$lcssa135$i$i = 0, $$091122$i$i = 0, $$1 = 0, $$1$i$i = 0, $$1$i$i$i = 0, $$1$i155$i = 0, $$1$us$i$i = 0, $$1129$i$i = 0, $$1136$i = 0, $$1138$i$i = 0, $$1145$i$i = 0.0, $$188$i$i = 0, $$2$i = 0.0, $$2$i156$i = 0, $$2$i182$i = 0, $$2142$i$i = 0.0, $$254$i$i = 0, $$254$i$i$i = 0, $$3$i = 0;
 var $$3$i$i = 0, $$4$i = 0, $$4$i$i = 0, $$4178$i = 0.0, $$5$i$i = 0, $$6$i$i = 0, $$6$v$i$i = 0, $$7$i$i = 0, $$in$i$i = 0.0, $$pow2$i$i = 0.0, $$pr = 0, $$pre = 0, $$pre$i$i = 0, $$pre$i$i19 = 0, $$pre$i142$i = 0, $$pre$i151$i = 0, $$pre218$i = 0, $$pre219$i = 0, $$pre57 = 0, $$sroa$0$0$$sroa_idx$us$i$i = 0;
 var $$sroa$0$0$copyload$us$i$i = 0.0, $$sroa$031$0$$sroa_idx$us$i$i = 0, $$sroa$031$0$copyload$us$i$i = 0.0, $$sroa$10$0$$sroa_raw_idx$i = 0, $$sroa$2$0$$sroa_idx3$i$i = 0, $$sroa$2$0$$sroa_idx3$i$i$i = 0, $$sroa$3$0$$sroa_idx$i$i = 0, $$sroa$3$0$$sroa_idx$i$i$i = 0, $$sroa$3$0$$sroa_idx4$i = 0, $$sroa$4$0$$sroa_idx25$us$i$i = 0, $$sroa$4$0$$sroa_idx5$i = 0, $$sroa$4$0$$sroa_raw_idx$i$i = 0, $$sroa$4$0$$sroa_raw_idx$i$i$i = 0, $$sroa$4$0$copyload$us$i$i = 0.0, $$sroa$4$i$i = 0, $$sroa$433$0$$sroa_idx34$us$i$i = 0, $$sroa$433$0$copyload$us$i$i = 0.0, $$sroa$5$0$$sroa_idx27$us$i$i = 0, $$sroa$5$0$$sroa_idx6$i = 0, $$sroa$5$0$copyload$us$i$i = 0.0;
 var $$sroa$536$0$$sroa_idx37$us$i$i = 0, $$sroa$536$0$copyload$us$i$i = 0.0, $$sroa$57$0$$sroa_idx8$i = 0, $$sroa$6$0$$sroa_idx$i = 0, $$sroa$6$0$$sroa_idx29$us$i$i = 0, $$sroa$6$0$copyload$us$i$i = 0.0, $$sroa$610$0$$sroa_idx11$i = 0, $$sroa$639$0$$sroa_idx40$us$i$i = 0, $$sroa$639$0$copyload$us$i$i = 0.0, $$sroa$7$0$$sroa_idx12$i = 0, $$sroa$8$0$$sroa_idx13$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0.0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0.0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0.0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0.0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0, $263 = 0.0, $264 = 0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0;
 var $271 = 0, $272 = 0.0, $273 = 0.0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0.0, $279 = 0, $28 = 0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0.0;
 var $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0.0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0.0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0.0, $334 = 0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0.0;
 var $344 = 0.0, $345 = 0.0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0.0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0, $372 = 0.0, $373 = 0.0, $374 = 0.0, $375 = 0.0, $376 = 0.0, $377 = 0.0, $378 = 0.0, $379 = 0.0, $38 = 0;
 var $380 = 0.0, $381 = 0, $382 = 0, $383 = 0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0, $396 = 0.0, $397 = 0.0, $398 = 0.0;
 var $399 = 0.0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0.0, $41 = 0, $410 = 0.0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0.0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0.0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0.0, $450 = 0, $451 = 0;
 var $452 = 0.0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0.0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0.0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0;
 var $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0;
 var $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond$i$i = 0, $cond$i146$i = 0, $exitcond = 0, $exitcond$i = 0, $not$$i$i = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i$i$i = 0, $or$cond$i138$i = 0, $or$cond148$i$i = 0;
 var $or$cond149$i$i = 0, $or$cond210$i = 0, $or$cond231$i = 0, $or$cond3$i = 0, $pow2$i$i = 0.0, $spec$select = 0, $spec$select$i = 0, $spec$select$i$i = 0.0, $spec$select189$i = 0, $spec$select42 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer4 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr7 = 0;
 var $vararg_ptr8 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer14 = sp + 56|0;
 $vararg_buffer10 = sp + 48|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 168|0;
 $5 = sp + 144|0;
 $6 = sp + 120|0;
 $7 = sp + 96|0;
 $8 = sp + 72|0;
 $$sroa$4$i$i = sp + 192|0;
 $9 = (_liq_crash_if_invalid_pointer_given($3)|0);
 if (!($9)) {
  $$1 = 105;
  STACKTOP = sp;return ($$1|0);
 }
 HEAP32[$3>>2] = 0;
 $10 = (_liq_crash_if_invalid_handle_pointer_given($1,18527)|0);
 if (!($10)) {
  $$1 = 105;
  STACKTOP = sp;return ($$1|0);
 }
 $11 = (_liq_crash_if_invalid_handle_pointer_given($0,18804)|0);
 if (!($11)) {
  $$1 = 105;
  STACKTOP = sp;return ($$1|0);
 }
 $12 = ((($1)) + 76|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if (!($14)) {
  $15 = ((($1)) + 80|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (FUNCTION_TABLE_idi[$13 & 0](0.0,$16)|0);
  $18 = ($17|0)==(0);
  if ($18) {
   $$1 = 102;
   STACKTOP = sp;return ($$1|0);
  }
  $$pr = HEAP32[$12>>2]|0;
  $19 = ($$pr|0)==(0|0);
  if (!($19)) {
   $20 = ((($1)) + 72|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = (+($21&255));
   $23 = $22 * 0.89999997615814208;
   $24 = HEAP32[$15>>2]|0;
   $25 = (FUNCTION_TABLE_idi[$$pr & 0]($23,$24)|0);
   $26 = ($25|0)==(0);
   if ($26) {
    $$1 = 102;
    STACKTOP = sp;return ($$1|0);
   }
  }
 }
 $27 = ((($0)) + 12|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(0|0);
 if ($29) {
  $$1 = 103;
  STACKTOP = sp;return ($$1|0);
 }
 $30 = ((($0)) + 16|0);
 $31 = +HEAPF64[$30>>3];
 $32 = ((($1)) + 4|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($1)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (_pam_acolorhashtoacolorhist($28,$31,$33,$35)|0);
 $37 = HEAP32[$27>>2]|0;
 _pam_freeacolorhash($37);
 HEAP32[$27>>2] = 0;
 $38 = ($36|0)==(0|0);
 if ($38) {
  $$1 = 101;
  STACKTOP = sp;return ($$1|0);
 }
 $39 = ((($36)) + 16|0);
 $40 = HEAP32[$39>>2]|0;
 HEAP32[$vararg_buffer>>2] = $40;
 _liq_verbose_printf($1,18818,$vararg_buffer);
 $41 = ((($0)) + 4120|0);
 $42 = HEAP16[$41>>1]|0;
 $43 = $42&65535;
 $44 = ((($1)) + 16|0);
 $45 = +HEAPF64[$44>>3];
 $46 = $45;
 $47 = $46 * 0.5;
 $48 = $47 > 3.0517578125E-5;
 $49 = $48 ? $47 : 3.0517578125E-5;
 $50 = ($42<<16>>16)==(0);
 $$pre57 = HEAP32[$39>>2]|0;
 if ($50) {
  $91 = 0;$94 = $$pre57;
 } else {
  $51 = ($$pre57|0)==(0);
  if ($51) {
   $91 = $42;$94 = 0;
  } else {
   $$02344$us$i$i = 0;$84 = $$pre57;
   while(1) {
    $52 = HEAP32[$36>>2]|0;
    $$sroa$0$0$$sroa_idx$us$i$i = (($52) + ($$02344$us$i$i<<5)|0);
    HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$0$0$$sroa_idx$us$i$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$0$0$$sroa_idx$us$i$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$0$0$$sroa_idx$us$i$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$0$0$$sroa_idx$us$i$i+3>>0];$$sroa$0$0$copyload$us$i$i = +HEAPF32[tempDoublePtr>>2];
    $$sroa$4$0$$sroa_idx25$us$i$i = (((($52) + ($$02344$us$i$i<<5)|0)) + 4|0);
    HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$4$0$$sroa_idx25$us$i$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$4$0$$sroa_idx25$us$i$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$4$0$$sroa_idx25$us$i$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$4$0$$sroa_idx25$us$i$i+3>>0];$$sroa$4$0$copyload$us$i$i = +HEAPF32[tempDoublePtr>>2];
    $$sroa$5$0$$sroa_idx27$us$i$i = (((($52) + ($$02344$us$i$i<<5)|0)) + 8|0);
    HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$5$0$$sroa_idx27$us$i$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$5$0$$sroa_idx27$us$i$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$5$0$$sroa_idx27$us$i$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$5$0$$sroa_idx27$us$i$i+3>>0];$$sroa$5$0$copyload$us$i$i = +HEAPF32[tempDoublePtr>>2];
    $$sroa$6$0$$sroa_idx29$us$i$i = (((($52) + ($$02344$us$i$i<<5)|0)) + 12|0);
    HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$6$0$$sroa_idx29$us$i$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$6$0$$sroa_idx29$us$i$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$6$0$$sroa_idx29$us$i$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$6$0$$sroa_idx29$us$i$i+3>>0];$$sroa$6$0$copyload$us$i$i = +HEAPF32[tempDoublePtr>>2];
    $53 = $$sroa$4$0$copyload$us$i$i;
    $54 = $$sroa$5$0$copyload$us$i$i;
    $55 = $$sroa$6$0$copyload$us$i$i;
    $$043$us$i$i = 0;
    while(1) {
     $$sroa$031$0$$sroa_idx$us$i$i = (((($0)) + 24|0) + ($$043$us$i$i<<4)|0);
     HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$031$0$$sroa_idx$us$i$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$031$0$$sroa_idx$us$i$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$031$0$$sroa_idx$us$i$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$031$0$$sroa_idx$us$i$i+3>>0];$$sroa$031$0$copyload$us$i$i = +HEAPF32[tempDoublePtr>>2];
     $$sroa$433$0$$sroa_idx34$us$i$i = (((((($0)) + 24|0) + ($$043$us$i$i<<4)|0)) + 4|0);
     HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$433$0$$sroa_idx34$us$i$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$433$0$$sroa_idx34$us$i$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$433$0$$sroa_idx34$us$i$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$433$0$$sroa_idx34$us$i$i+3>>0];$$sroa$433$0$copyload$us$i$i = +HEAPF32[tempDoublePtr>>2];
     $$sroa$536$0$$sroa_idx37$us$i$i = (((((($0)) + 24|0) + ($$043$us$i$i<<4)|0)) + 8|0);
     HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$536$0$$sroa_idx37$us$i$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$536$0$$sroa_idx37$us$i$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$536$0$$sroa_idx37$us$i$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$536$0$$sroa_idx37$us$i$i+3>>0];$$sroa$536$0$copyload$us$i$i = +HEAPF32[tempDoublePtr>>2];
     $$sroa$639$0$$sroa_idx40$us$i$i = (((((($0)) + 24|0) + ($$043$us$i$i<<4)|0)) + 12|0);
     HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$639$0$$sroa_idx40$us$i$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$639$0$$sroa_idx40$us$i$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$639$0$$sroa_idx40$us$i$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$639$0$$sroa_idx40$us$i$i+3>>0];$$sroa$639$0$copyload$us$i$i = +HEAPF32[tempDoublePtr>>2];
     $58 = $$sroa$031$0$copyload$us$i$i - $$sroa$0$0$copyload$us$i$i;
     $59 = $58;
     $60 = $$sroa$433$0$copyload$us$i$i;
     $61 = $53 - $60;
     $62 = $61 + $59;
     $63 = $61 * $61;
     $64 = $62 * $62;
     $65 = $63 > $64;
     $$$i$i$i$us$i$i = $65 ? $63 : $64;
     $66 = $$sroa$536$0$copyload$us$i$i;
     $67 = $54 - $66;
     $68 = $67 + $59;
     $69 = $67 * $67;
     $70 = $68 * $68;
     $71 = $69 > $70;
     $$$i5$i$i$us$i$i = $71 ? $69 : $70;
     $72 = $$$i$i$i$us$i$i + $$$i5$i$i$us$i$i;
     $73 = $$sroa$639$0$copyload$us$i$i;
     $74 = $55 - $73;
     $75 = $74 + $59;
     $76 = $74 * $74;
     $77 = $75 * $75;
     $78 = $76 > $77;
     $$$i4$i$i$us$i$i = $78 ? $76 : $77;
     $79 = $72 + $$$i4$i$i$us$i$i;
     $80 = $79;
     $81 = $49 > $80;
     $56 = (($$043$us$i$i) + 1)|0;
     if ($81) {
      label = 16;
      break;
     }
     $57 = ($56>>>0)<($43>>>0);
     if ($57) {
      $$043$us$i$i = $56;
     } else {
      $$1$us$i$i = $$02344$us$i$i;$89 = $84;
      break;
     }
    }
    if ((label|0) == 16) {
     label = 0;
     $82 = (($52) + ($$02344$us$i$i<<5)|0);
     $83 = (($84) + -1)|0;
     HEAP32[$39>>2] = $83;
     $85 = (($52) + ($83<<5)|0);
     ;HEAP32[$82>>2]=HEAP32[$85>>2]|0;HEAP32[$82+4>>2]=HEAP32[$85+4>>2]|0;HEAP32[$82+8>>2]=HEAP32[$85+8>>2]|0;HEAP32[$82+12>>2]=HEAP32[$85+12>>2]|0;HEAP32[$82+16>>2]=HEAP32[$85+16>>2]|0;HEAP32[$82+20>>2]=HEAP32[$85+20>>2]|0;HEAP32[$82+24>>2]=HEAP32[$85+24>>2]|0;HEAP32[$82+28>>2]=HEAP32[$85+28>>2]|0;
     $86 = (($$02344$us$i$i) + -1)|0;
     $$pre$i$i = HEAP32[$39>>2]|0;
     $$1$us$i$i = $86;$89 = $$pre$i$i;
    }
    $87 = (($$1$us$i$i) + 1)|0;
    $88 = ($87>>>0)<($89>>>0);
    if ($88) {
     $$02344$us$i$i = $87;$84 = $89;
    } else {
     break;
    }
   }
   $$pre = HEAP16[$41>>1]|0;
   $91 = $$pre;$94 = $89;
  }
 }
 $90 = $91&65535;
 $92 = +HEAPF64[$30>>3];
 $93 = (($94) + ($90))|0;
 $95 = ((($1)) + 44|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ($93>>>0)<=($96>>>0);
 $98 = ((($1)) + 72|0);
 $99 = HEAP32[$12>>2]|0;
 $100 = ($99|0)==(0|0);
 if ($100) {
  label = 21;
 } else {
  $101 = HEAP8[$98>>0]|0;
  $102 = (+($101&255));
  $103 = ((($1)) + 80|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = (FUNCTION_TABLE_idi[$99 & 0]($102,$104)|0);
  $106 = ($105|0)==(0);
  if ($106) {
   $$3$i = 102;
  } else {
   label = 21;
  }
 }
 L39: do {
  if ((label|0) == 21) {
   $107 = +HEAPF64[$44>>3];
   $108 = $107 == 0.0;
   $or$cond231$i = $97 & $108;
   if ($or$cond231$i) {
    $109 = HEAP32[$39>>2]|0;
    $110 = ($109|0)==(0);
    if ($110) {
     $$019$i$i = 0;
    } else {
     $111 = HEAP32[$32>>2]|0;
     $112 = HEAP32[$34>>2]|0;
     $113 = (_pam_colormap($109,$111,$112)|0);
     $114 = HEAP32[$39>>2]|0;
     $115 = ($114|0)==(0);
     if ($115) {
      $$019$i$i = $113;
     } else {
      $$pre$i$i19 = HEAP32[$36>>2]|0;
      $$020$i$i = 0;$118 = $$pre$i$i19;
      while(1) {
       $116 = (((($113)) + 12|0) + (($$020$i$i*24)|0)|0);
       $117 = (($118) + ($$020$i$i<<5)|0);
       ;HEAP32[$116>>2]=HEAP32[$117>>2]|0;HEAP32[$116+4>>2]=HEAP32[$117+4>>2]|0;HEAP32[$116+8>>2]=HEAP32[$117+8>>2]|0;HEAP32[$116+12>>2]=HEAP32[$117+12>>2]|0;
       $119 = HEAP32[$36>>2]|0;
       $120 = (((($119) + ($$020$i$i<<5)|0)) + 20|0);
       $121 = HEAP32[$120>>2]|0;
       $122 = (((((($113)) + 12|0) + (($$020$i$i*24)|0)|0)) + 16|0);
       HEAP32[$122>>2] = $121;
       $123 = (($$020$i$i) + 1)|0;
       $124 = HEAP32[$39>>2]|0;
       $125 = ($123>>>0)<($124>>>0);
       if ($125) {
        $$020$i$i = $123;$118 = $119;
       } else {
        $$019$i$i = $113;
        break;
       }
      }
     }
    }
    $126 = HEAP32[$95>>2]|0;
    $127 = HEAP32[$32>>2]|0;
    $128 = HEAP32[$34>>2]|0;
    $129 = ($91<<16>>16)==(0);
    if ($129) {
     $$0$i$i = $$019$i$i;
    } else {
     $130 = ($$019$i$i|0)!=(0|0);
     if ($130) {
      $131 = HEAP32[$$019$i$i>>2]|0;
      $133 = $131;
     } else {
      $133 = 0;
     }
     $132 = (($133) + ($90))|0;
     $134 = ($132>>>0)>($126>>>0);
     if ($134) {
      $138 = $126;
     } else {
      if ($130) {
       $135 = HEAP32[$$019$i$i>>2]|0;
       $137 = $135;
      } else {
       $137 = 0;
      }
      $136 = (($137) + ($90))|0;
      $138 = $136;
     }
     $139 = (_pam_colormap($138,$127,$128)|0);
     $140 = ($126|0)>($90|0);
     $or$cond$i$i = $130 & $140;
     if ($or$cond$i$i) {
      $141 = HEAP32[$$019$i$i>>2]|0;
      $142 = (($126) - ($90))|0;
      $143 = ($141>>>0)<($142>>>0);
      $$$i$i = $143 ? $141 : $142;
      $144 = ($$$i$i|0)==(0);
      if ($144) {
       $$1$i$i = 0;
      } else {
       $$05155$i$i = 0;
       while(1) {
        $145 = (((($139)) + 12|0) + (($$05155$i$i*24)|0)|0);
        $146 = (((($$019$i$i)) + 12|0) + (($$05155$i$i*24)|0)|0);
        ;HEAP32[$145>>2]=HEAP32[$146>>2]|0;HEAP32[$145+4>>2]=HEAP32[$146+4>>2]|0;HEAP32[$145+8>>2]=HEAP32[$146+8>>2]|0;HEAP32[$145+12>>2]=HEAP32[$146+12>>2]|0;HEAP32[$145+16>>2]=HEAP32[$146+16>>2]|0;HEAP32[$145+20>>2]=HEAP32[$146+20>>2]|0;
        $147 = (($$05155$i$i) + 1)|0;
        $148 = ($147>>>0)<($$$i$i>>>0);
        if ($148) {
         $$05155$i$i = $147;
        } else {
         $$1$i$i = $$$i$i;
         break;
        }
       }
      }
     } else {
      $$1$i$i = 0;
     }
     $149 = ($126|0)<($90|0);
     $150 = $149 ? $126 : $90;
     $151 = ($150|0)>(0);
     if ($151) {
      $$05253$i$i = 0;$$254$i$i = $$1$i$i;
      while(1) {
       $152 = (($$254$i$i) + 1)|0;
       $153 = (((($139)) + 12|0) + (($$254$i$i*24)|0)|0);
       $154 = (((($0)) + 24|0) + ($$05253$i$i<<4)|0);
       _memmove(($153|0),($154|0),16)|0;
       $$sroa$2$0$$sroa_idx3$i$i = (((((($139)) + 12|0) + (($$254$i$i*24)|0)|0)) + 16|0);
       HEAPF32[$$sroa$2$0$$sroa_idx3$i$i>>2] = 0.0;
       $$sroa$3$0$$sroa_idx$i$i = (((((($139)) + 12|0) + (($$254$i$i*24)|0)|0)) + 20|0);
       HEAP8[$$sroa$3$0$$sroa_idx$i$i>>0] = 1;
       $$sroa$4$0$$sroa_raw_idx$i$i = ((($153)) + 21|0);
       ;HEAP8[$$sroa$4$0$$sroa_raw_idx$i$i>>0]=HEAP8[$$sroa$4$i$i>>0]|0;HEAP8[$$sroa$4$0$$sroa_raw_idx$i$i+1>>0]=HEAP8[$$sroa$4$i$i+1>>0]|0;HEAP8[$$sroa$4$0$$sroa_raw_idx$i$i+2>>0]=HEAP8[$$sroa$4$i$i+2>>0]|0;
       $155 = (($$05253$i$i) + 1)|0;
       $156 = ($155|0)<($150|0);
       if ($156) {
        $$05253$i$i = $155;$$254$i$i = $152;
       } else {
        break;
       }
      }
     }
     if ($130) {
      _pam_freecolormap($$019$i$i);
      $$0$i$i = $139;
     } else {
      $$0$i$i = $139;
     }
    }
    $$0124$i = $$0$i$i;$$4178$i = 0.0;
   } else {
    $157 = ((($1)) + 24|0);
    $158 = +HEAPF64[$157>>3];
    $159 = $97 ? 0.33000000000000002 : 1.0;
    $160 = $159 * $158;
    $161 = HEAP32[$95>>2]|0;
    $162 = ((($1)) + 52|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = 1 << $163;
    $165 = (+($164|0));
    $166 = $165 * 9.765625E-4;
    $pow2$i$i = $166 * $166;
    $167 = $107 > $pow2$i$i;
    $$pow2$i$i = $167 ? $107 : $pow2$i$i;
    $168 = $$pow2$i$i > $160;
    $169 = $168 ? $160 : $$pow2$i$i;
    $170 = ((($1)) + 64|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = HEAP32[$39>>2]|0;
    $173 = ($172>>>0)>(5000);
    if ($173) {
     $174 = ($171*3)|0;
     $175 = (($174) + 3)|0;
     $176 = (($175|0) / 4)&-1;
     $177 = ($172>>>0)>(25000);
     if ($177) {
      $178 = ($176*3)|0;
      $179 = (($178) + 3)|0;
      $180 = (($179|0) / 4)&-1;
      $181 = ($172>>>0)>(50000);
      if ($181) {
       $182 = ($180*3)|0;
       $183 = (($182) + 3)|0;
       $184 = (($183|0) / 4)&-1;
       $185 = ($172>>>0)>(100000);
       if ($185) {
        $186 = ($184*3)|0;
        $187 = (($186) + 3)|0;
        $188 = (($187|0) / 4)&-1;
        $$3$i$i = $188;
       } else {
        $$3$i$i = $184;
       }
      } else {
       $$3$i$i = $180;
      }
     } else {
      $$3$i$i = $176;
     }
    } else {
     $$3$i$i = $171;
    }
    $189 = ($$3$i$i|0)>(0);
    $190 = $189 ? 1.05 : 1.0;
    $191 = (+($$3$i$i|0));
    $192 = $189 ? $191 : 1.0;
    $193 = $169 < 6.866455078125E-4;
    $194 = $193 ? 6.866455078125E-4 : $169;
    $195 = ($91<<16>>16)==(0);
    $196 = $169 > 0.0;
    $197 = ((($1)) + 73|0);
    $198 = ((($1)) + 80|0);
    $$0128$i$i = $161;$$0137$i$i = 0;$$0140$i$i = $190;$$0144$i$i = 1.0E+20;$$4$i$i = $$3$i$i;$199 = $172;
    while(1) {
     $200 = ($199|0)!=(0);
     $201 = ($$0128$i$i>>>0)>($90>>>0);
     $or$cond148$i$i = $200 & $201;
     if ($or$cond148$i$i) {
      $202 = $194 > $$0144$i$i;
      $$$0144$i$i = $202 ? $194 : $$0144$i$i;
      $203 = $$$0144$i$i * 1.2;
      $204 = $169 * $$0140$i$i;
      $205 = (($$0128$i$i) - ($90))|0;
      $206 = HEAP32[$32>>2]|0;
      $207 = HEAP32[$34>>2]|0;
      $208 = (_mediancut($36,$205,$204,$203,$206,$207)|0);
      $$0136$i$i = $208;$$5$i$i = $$4$i$i;
     } else {
      $$0136$i$i = 0;$$5$i$i = 0;
     }
     $209 = HEAP32[$32>>2]|0;
     $210 = HEAP32[$34>>2]|0;
     do {
      if ($195) {
       $$0$i$i$i = $$0136$i$i;
      } else {
       $211 = ($$0136$i$i|0)!=(0|0);
       if ($211) {
        $212 = HEAP32[$$0136$i$i>>2]|0;
        $214 = $212;
       } else {
        $214 = 0;
       }
       $213 = (($214) + ($90))|0;
       $215 = ($213>>>0)>($$0128$i$i>>>0);
       if ($215) {
        $219 = $$0128$i$i;
       } else {
        if ($211) {
         $216 = HEAP32[$$0136$i$i>>2]|0;
         $218 = $216;
        } else {
         $218 = 0;
        }
        $217 = (($218) + ($90))|0;
        $219 = $217;
       }
       $220 = (_pam_colormap($219,$209,$210)|0);
       $221 = ($$0128$i$i|0)>($90|0);
       $or$cond$i$i$i = $221 & $211;
       do {
        if ($or$cond$i$i$i) {
         $222 = HEAP32[$$0136$i$i>>2]|0;
         $223 = (($$0128$i$i) - ($90))|0;
         $224 = ($222>>>0)<($223>>>0);
         $$$i$i$i = $224 ? $222 : $223;
         $225 = ($$$i$i$i|0)==(0);
         if ($225) {
          $$1$i$i$i = 0;
          break;
         }
         $$05155$i$i$i = 0;
         while(1) {
          $226 = (((($220)) + 12|0) + (($$05155$i$i$i*24)|0)|0);
          $227 = (((($$0136$i$i)) + 12|0) + (($$05155$i$i$i*24)|0)|0);
          ;HEAP32[$226>>2]=HEAP32[$227>>2]|0;HEAP32[$226+4>>2]=HEAP32[$227+4>>2]|0;HEAP32[$226+8>>2]=HEAP32[$227+8>>2]|0;HEAP32[$226+12>>2]=HEAP32[$227+12>>2]|0;HEAP32[$226+16>>2]=HEAP32[$227+16>>2]|0;HEAP32[$226+20>>2]=HEAP32[$227+20>>2]|0;
          $228 = (($$05155$i$i$i) + 1)|0;
          $229 = ($228>>>0)<($$$i$i$i>>>0);
          if ($229) {
           $$05155$i$i$i = $228;
          } else {
           $$1$i$i$i = $$$i$i$i;
           break;
          }
         }
        } else {
         $$1$i$i$i = 0;
        }
       } while(0);
       $230 = ($$0128$i$i|0)<($90|0);
       $231 = $230 ? $$0128$i$i : $90;
       $232 = ($231|0)>(0);
       if ($232) {
        $$05253$i$i$i = 0;$$254$i$i$i = $$1$i$i$i;
        while(1) {
         $233 = (($$254$i$i$i) + 1)|0;
         $234 = (((($220)) + 12|0) + (($$254$i$i$i*24)|0)|0);
         $235 = (((($0)) + 24|0) + ($$05253$i$i$i<<4)|0);
         _memmove(($234|0),($235|0),16)|0;
         $$sroa$2$0$$sroa_idx3$i$i$i = (((((($220)) + 12|0) + (($$254$i$i$i*24)|0)|0)) + 16|0);
         HEAPF32[$$sroa$2$0$$sroa_idx3$i$i$i>>2] = 0.0;
         $$sroa$3$0$$sroa_idx$i$i$i = (((((($220)) + 12|0) + (($$254$i$i$i*24)|0)|0)) + 20|0);
         HEAP8[$$sroa$3$0$$sroa_idx$i$i$i>>0] = 1;
         $$sroa$4$0$$sroa_raw_idx$i$i$i = ((($234)) + 21|0);
         ;HEAP8[$$sroa$4$0$$sroa_raw_idx$i$i$i>>0]=HEAP8[$$sroa$4$i$i>>0]|0;HEAP8[$$sroa$4$0$$sroa_raw_idx$i$i$i+1>>0]=HEAP8[$$sroa$4$i$i+1>>0]|0;HEAP8[$$sroa$4$0$$sroa_raw_idx$i$i$i+2>>0]=HEAP8[$$sroa$4$i$i+2>>0]|0;
         $236 = (($$05253$i$i$i) + 1)|0;
         $237 = ($236|0)<($231|0);
         if ($237) {
          $$05253$i$i$i = $236;$$254$i$i$i = $233;
         } else {
          break;
         }
        }
       }
       if (!($211)) {
        $$0$i$i$i = $220;
        break;
       }
       _pam_freecolormap($$0136$i$i);
       $$0$i$i$i = $220;
      }
     } while(0);
     $238 = ($$0$i$i$i|0)==(0|0);
     if ($238) {
      $$3$i = 100;
      break L39;
     }
     $239 = ($$5$i$i|0)<(1);
     if ($239) {
      $$0181$i = -1.0;$$2$i182$i = $$0$i$i$i;
      break;
     }
     $240 = ($$0137$i$i|0)!=(0|0);
     $not$$i$i = $240 ^ 1;
     $241 = $196 & $not$$i$i;
     $242 = $241 ? 0 : 48;
     $243 = (+_kmeans_do_iteration($36,$$0$i$i$i,$242));
     $244 = $243 < $$0144$i$i;
     $or$cond149$i$i = $244 | $not$$i$i;
     do {
      if ($or$cond149$i$i) {
       label = 72;
      } else {
       $245 = !($243 <= $169);
       if (!($245)) {
        $246 = HEAP32[$$0$i$i$i>>2]|0;
        $247 = ($246>>>0)<($$0128$i$i>>>0);
        if ($247) {
         label = 72;
         break;
        }
       }
       $257 = HEAP32[$39>>2]|0;
       $258 = ($257|0)==(0);
       if (!($258)) {
        $259 = HEAP32[$36>>2]|0;
        $$0127165$i$i = 0;
        while(1) {
         $262 = (((($259) + ($$0127165$i$i<<5)|0)) + 20|0);
         $263 = +HEAPF32[$262>>2];
         $264 = (((($259) + ($$0127165$i$i<<5)|0)) + 16|0);
         $265 = +HEAPF32[$264>>2];
         $266 = $263 + $265;
         $267 = $266 * 0.5;
         HEAPF32[$264>>2] = $267;
         $268 = (($$0127165$i$i) + 1)|0;
         $exitcond$i = ($268|0)==($257|0);
         if ($exitcond$i) {
          break;
         } else {
          $$0127165$i$i = $268;
         }
        }
       }
       $260 = $$0144$i$i * 4.0;
       $261 = $243 > $260;
       $$6$v$i$i = $261 ? -9 : -6;
       $$6$i$i = (($$6$v$i$i) + ($$5$i$i))|0;
       _pam_freecolormap($$0$i$i$i);
       $$1129$i$i = $$0128$i$i;$$1138$i$i = $$0137$i$i;$$1145$i$i = $$0144$i$i;$$2142$i$i = 1.0;$$7$i$i = $$6$i$i;
      }
     } while(0);
     if ((label|0) == 72) {
      label = 0;
      if ($240) {
       _pam_freecolormap($$0137$i$i);
      }
      $248 = $243 < $169;
      $249 = $243 > 0.0;
      $or$cond$i138$i = $248 & $249;
      $250 = $$0140$i$i * 1.25;
      $251 = $169 / $243;
      $252 = $250 < $251;
      $$$i139$i = $252 ? $250 : $251;
      $spec$select$i$i = $or$cond$i138$i ? $$$i139$i : $$0140$i$i;
      $253 = HEAP32[$$0$i$i$i>>2]|0;
      $254 = (($253) + 1)|0;
      $255 = ($254>>>0)<($$0128$i$i>>>0);
      $$$0128$i$i = $255 ? $254 : $$0128$i$i;
      $256 = (($$5$i$i) + -1)|0;
      $$1129$i$i = $$$0128$i$i;$$1138$i$i = $$0$i$i$i;$$1145$i$i = $243;$$2142$i$i = $spec$select$i$i;$$7$i$i = $256;
     }
     $269 = (+($$7$i$i|0));
     $270 = $269 / $192;
     $271 = $270 < 0.0;
     $272 = $271 ? 0.0 : $270;
     $273 = 1.0 - $272;
     $274 = HEAP32[$12>>2]|0;
     $275 = ($274|0)==(0|0);
     if (!($275)) {
      $276 = HEAP8[$197>>0]|0;
      $277 = (+($276&255));
      $278 = $273 * $277;
      $279 = HEAP8[$98>>0]|0;
      $280 = (+($279&255));
      $281 = $278 + $280;
      $282 = HEAP32[$198>>2]|0;
      $283 = (FUNCTION_TABLE_idi[$274 & 0]($281,$282)|0);
      $284 = ($283|0)==(0);
      if ($284) {
       label = 83;
       break;
      }
     }
     $$in$i$i = $273 * 100.0;
     $285 = (~~(($$in$i$i)));
     HEAP32[$vararg_buffer1>>2] = $285;
     _liq_verbose_printf($1,18853,$vararg_buffer1);
     $286 = ($$7$i$i|0)>(0);
     if (!($286)) {
      label = 83;
      break;
     }
     $$pre$i142$i = HEAP32[$39>>2]|0;
     $$0128$i$i = $$1129$i$i;$$0137$i$i = $$1138$i$i;$$0140$i$i = $$2142$i$i;$$0144$i$i = $$1145$i$i;$$4$i$i = $$7$i$i;$199 = $$pre$i142$i;
    }
    if ((label|0) == 83) {
     $287 = ($$1138$i$i|0)==(0|0);
     if ($287) {
      $$3$i = 100;
      break;
     } else {
      $$0181$i = $$1145$i$i;$$2$i182$i = $$1138$i$i;
     }
    }
    $288 = ((($1)) + 32|0);
    $289 = +HEAPF64[$288>>3];
    $290 = ((($1)) + 60|0);
    $291 = HEAP32[$290>>2]|0;
    $292 = ($291|0)==(0);
    $293 = $$0181$i < 0.0;
    $or$cond$i = $293 & $292;
    $294 = $160 < 1.0E+20;
    $or$cond3$i = $294 & $or$cond$i;
    $spec$select$i = $or$cond3$i ? 1 : $291;
    $295 = ($spec$select$i|0)==(0);
    L134: do {
     if ($295) {
      $$2$i = $$0181$i;
     } else {
      $296 = HEAP32[$$2$i182$i>>2]|0;
      $297 = ($296>>>0)<(256);
      $298 = HEAP32[$39>>2]|0;
      $299 = ($298|0)!=(0);
      $or$cond210$i = $297 & $299;
      L136: do {
       if ($or$cond210$i) {
        $$0132207$i = 0;$304 = $296;$482 = $298;
        while(1) {
         $300 = HEAP32[$36>>2]|0;
         $301 = (((($300) + ($$0132207$i<<5)|0)) + 28|0);
         $302 = HEAP8[$301>>0]|0;
         $303 = $302&255;
         $305 = ($304>>>0)>($303>>>0);
         if ($305) {
          $308 = $482;
         } else {
          HEAP8[$301>>0] = 0;
          $$pre219$i = HEAP32[$39>>2]|0;
          $308 = $$pre219$i;
         }
         $306 = (($$0132207$i) + 1)|0;
         $307 = ($306>>>0)<($308>>>0);
         if (!($307)) {
          $309 = $308;
          break L136;
         }
         $$pre218$i = HEAP32[$$2$i182$i>>2]|0;
         $$0132207$i = $306;$304 = $$pre218$i;$482 = $308;
        }
       } else {
        $309 = $298;
       }
      } while(0);
      $310 = ($309>>>0)>(5000);
      $311 = ($spec$select$i*3)|0;
      $312 = (($311) + 3)|0;
      $313 = $312 >>> 2;
      if ($310) {
       $314 = ($309>>>0)>(25000);
       $315 = ($313*3)|0;
       $316 = (($315) + 3)|0;
       $317 = $316 >>> 2;
       if ($314) {
        $318 = ($309>>>0)>(50000);
        $319 = ($317*3)|0;
        $320 = (($319) + 3)|0;
        $321 = $320 >>> 2;
        $322 = ($309>>>0)>(100000);
        $323 = ($321*3)|0;
        $324 = (($323) + 3)|0;
        $325 = $324 >>> 2;
        $326 = $289 * 2.0;
        $spec$select189$i = $322 ? $325 : $321;
        $spec$select = $318 ? $spec$select189$i : $317;
        $spec$select42 = $322 ? $326 : $289;
        $$0127$i = $spec$select42;$$4$i = $spec$select;
       } else {
        $$0127$i = $289;$$4$i = $313;
       }
      } else {
       $$0127$i = $289;$$4$i = $spec$select$i;
      }
      $327 = ((($1)) + 84|0);
      $328 = HEAP32[$327>>2]|0;
      $329 = ($328|0)==(0|0);
      if (!($329)) {
       $330 = ((($1)) + 88|0);
       $331 = HEAP32[$330>>2]|0;
       FUNCTION_TABLE_viii[$328 & 127]($1,18879,$331);
      }
      $332 = ((($1)) + 74|0);
      $333 = $160 * 3.0;
      $334 = ($$4$i|0)==(0);
      if ($334) {
       $$2$i = $$0181$i;
      } else {
       $335 = (+($$4$i>>>0));
       $336 = $160 * 1.5;
       $$0133201$i = 1.0E+20;$$0135200$i = 0;
       while(1) {
        $337 = (+_kmeans_do_iteration($36,$$2$i182$i,0));
        $338 = HEAP32[$12>>2]|0;
        $339 = ($338|0)==(0|0);
        if (!($339)) {
         $340 = HEAP8[$332>>0]|0;
         $341 = $340&255;
         $342 = Math_imul($$0135200$i, $341)|0;
         $343 = (+($342>>>0));
         $344 = $343 * 0.89999997615814208;
         $345 = $344 / $335;
         $346 = HEAP8[$98>>0]|0;
         $347 = $346&255;
         $348 = HEAP8[$197>>0]|0;
         $349 = $348&255;
         $350 = (($349) + ($347))|0;
         $351 = (+($350|0));
         $352 = $345 + $351;
         $353 = HEAP32[$198>>2]|0;
         $354 = (FUNCTION_TABLE_idi[$338 & 0]($352,$353)|0);
         $355 = ($354|0)==(0);
         if ($355) {
          $$2$i = $337;
          break L134;
         }
        }
        $356 = $$0133201$i - $337;
        $357 = (+Math_abs((+$356)));
        $358 = $357 < $$0127$i;
        if ($358) {
         $$2$i = $337;
         break L134;
        }
        $359 = $337 > $336;
        if ($359) {
         $360 = $337 > $333;
         if ($360) {
          $$2$i = $337;
          break L134;
         }
         $361 = (($$0135200$i) + 1)|0;
         $$1136$i = $361;
        } else {
         $$1136$i = $$0135200$i;
        }
        $362 = (($$1136$i) + 1)|0;
        $363 = ($362>>>0)<($$4$i>>>0);
        if ($363) {
         $$0133201$i = $337;$$0135200$i = $362;
        } else {
         $$2$i = $337;
         break;
        }
       }
      }
     }
    } while(0);
    $364 = $$2$i > $160;
    if ($364) {
     $365 = $$2$i * 65536.0;
     $366 = $365 / 6.0;
     $$068$i$i = 100;
     while(1) {
      $cond$i$i = ($$068$i$i|0)==(100);
      if ($cond$i$i) {
       $$0$i$i144$i = 0.0;
      } else {
       $367 = (+($$068$i$i|0));
       $368 = $367 + 0.001;
       $369 = 0.016 / $368;
       $370 = $369 + -0.001;
       $371 = $370 < 0.0;
       $372 = $371 ? 0.0 : $370;
       $373 = $367 + 210.0;
       $374 = (+Math_pow((+$373),1.2));
       $375 = 2.5 / $374;
       $376 = 100.09999999999999 - $367;
       $377 = $376 * $375;
       $378 = $377 / 100.0;
       $379 = $372 + $378;
       $$0$i$i144$i = $379;
      }
      $380 = $$0$i$i144$i + 9.9999999999999995E-7;
      $381 = !($380 >= $$2$i);
      if (!($381)) {
       $403 = $$068$i$i;
       break;
      }
      $382 = (($$068$i$i) + -1)|0;
      $383 = ($$068$i$i>>>0)>(1);
      if ($383) {
       $$068$i$i = $382;
      } else {
       $403 = 0;
       break;
      }
     }
     $384 = $160 * 65536.0;
     $385 = $384 / 6.0;
     $$068$i145$i = 100;
     while(1) {
      $cond$i146$i = ($$068$i145$i|0)==(100);
      if ($cond$i146$i) {
       $$0$i$i147$i = 0.0;
      } else {
       $386 = (+($$068$i145$i|0));
       $387 = $386 + 0.001;
       $388 = 0.016 / $387;
       $389 = $388 + -0.001;
       $390 = $389 < 0.0;
       $391 = $390 ? 0.0 : $389;
       $392 = $386 + 210.0;
       $393 = (+Math_pow((+$392),1.2));
       $394 = 2.5 / $393;
       $395 = 100.09999999999999 - $386;
       $396 = $395 * $394;
       $397 = $396 / 100.0;
       $398 = $391 + $397;
       $$0$i$i147$i = $398;
      }
      $399 = $$0$i$i147$i + 9.9999999999999995E-7;
      $400 = !($399 >= $160);
      if (!($400)) {
       $404 = $$068$i145$i;
       break;
      }
      $401 = (($$068$i145$i) + -1)|0;
      $402 = ($$068$i145$i>>>0)>(1);
      if ($402) {
       $$068$i145$i = $401;
      } else {
       $404 = 0;
       break;
      }
     }
     HEAPF64[$vararg_buffer4>>3] = $366;
     $vararg_ptr7 = ((($vararg_buffer4)) + 8|0);
     HEAP32[$vararg_ptr7>>2] = $403;
     $vararg_ptr8 = ((($vararg_buffer4)) + 16|0);
     HEAPF64[$vararg_ptr8>>3] = $385;
     $vararg_ptr9 = ((($vararg_buffer4)) + 24|0);
     HEAP32[$vararg_ptr9>>2] = $404;
     _liq_verbose_printf($1,18919,$vararg_buffer4);
     _pam_freecolormap($$2$i182$i);
     $$3$i = 99;
     break;
    } else {
     $$0124$i = $$2$i182$i;$$4178$i = $$2$i;
    }
   }
   $405 = HEAP32[$12>>2]|0;
   $406 = ($405|0)==(0|0);
   if (!($406)) {
    $407 = ((($1)) + 74|0);
    $408 = HEAP8[$407>>0]|0;
    $409 = (+($408&255));
    $410 = $409 * 0.94999998807907104;
    $411 = HEAP8[$98>>0]|0;
    $412 = $411&255;
    $413 = ((($1)) + 73|0);
    $414 = HEAP8[$413>>0]|0;
    $415 = $414&255;
    $416 = (($415) + ($412))|0;
    $417 = (+($416|0));
    $418 = $410 + $417;
    $419 = ((($1)) + 80|0);
    $420 = HEAP32[$419>>2]|0;
    $421 = (FUNCTION_TABLE_idi[$405 & 0]($418,$420)|0);
    $422 = ($421|0)==(0);
    if ($422) {
     _pam_freecolormap($$0124$i);
     $$3$i = 102;
     break;
    }
   }
   $423 = ((($1)) + 68|0);
   $424 = HEAP8[$423>>0]|0;
   $425 = ($424<<24>>24)==(0);
   $$pre$i151$i = HEAP32[$$0124$i>>2]|0;
   $426 = ($$pre$i151$i|0)==(0);
   L184: do {
    if ($425) {
     if ($426) {
      label = 133;
     } else {
      label = 128;
     }
    } else {
     if ($426) {
      label = 133;
     } else {
      $$091122$i$i = 0;
      while(1) {
       $429 = (((($$0124$i)) + 12|0) + (($$091122$i$i*24)|0)|0);
       $430 = +HEAPF32[$429>>2];
       $431 = $430 < 0.00390625;
       $427 = (($$091122$i$i) + 1)|0;
       if ($431) {
        break;
       }
       $428 = ($427>>>0)<($$pre$i151$i>>>0);
       if ($428) {
        $$091122$i$i = $427;
       } else {
        label = 128;
        break L184;
       }
      }
      $432 = (($$pre$i151$i) + -1)|0;
      $433 = (((($$0124$i)) + 12|0) + (($432*24)|0)|0);
      ;HEAP32[$4>>2]=HEAP32[$433>>2]|0;HEAP32[$4+4>>2]=HEAP32[$433+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$433+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$433+12>>2]|0;HEAP32[$4+16>>2]=HEAP32[$433+16>>2]|0;HEAP32[$4+20>>2]=HEAP32[$433+20>>2]|0;
      ;HEAP32[$433>>2]=HEAP32[$429>>2]|0;HEAP32[$433+4>>2]=HEAP32[$429+4>>2]|0;HEAP32[$433+8>>2]=HEAP32[$429+8>>2]|0;HEAP32[$433+12>>2]=HEAP32[$429+12>>2]|0;HEAP32[$433+16>>2]=HEAP32[$429+16>>2]|0;HEAP32[$433+20>>2]=HEAP32[$429+20>>2]|0;
      ;HEAP32[$429>>2]=HEAP32[$4>>2]|0;HEAP32[$429+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$429+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$429+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$429+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$429+20>>2]=HEAP32[$4+20>>2]|0;
      $434 = HEAP32[$$0124$i>>2]|0;
      $435 = (($434) + -1)|0;
      $436 = ($435|0)==(0);
      if (!($436)) {
       $437 = ((($$0124$i)) + 12|0);
       _qsort($437,$435,24,49);
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 128) {
     $$089113$i$i = 0;
     while(1) {
      $438 = (((((($$0124$i)) + 12|0) + (($$089113$i$i*24)|0)|0)) + 20|0);
      $439 = HEAP8[$438>>0]|0;
      $440 = ($439<<24>>24)==(0);
      if (!($440)) {
       label = 131;
       break;
      }
      $441 = (($$089113$i$i) + 1)|0;
      $442 = ($441>>>0)<($$pre$i151$i>>>0);
      if ($442) {
       $$089113$i$i = $441;
      } else {
       $$090$lcssa135$i$i = $441;
       break;
      }
     }
     if ((label|0) == 131) {
      $443 = ($$089113$i$i|0)==(0);
      if ($443) {
       label = 133;
       break;
      } else {
       $$090$lcssa135$i$i = $$089113$i$i;
      }
     }
     $$0111$i$i = 0;$$087110$i$i = 0;
     while(1) {
      $451 = (((($$0124$i)) + 12|0) + (($$0111$i$i*24)|0)|0);
      $452 = +HEAPF32[$451>>2];
      $453 = $452 < 0.99609375;
      if ($453) {
       $454 = ($$0111$i$i|0)==($$087110$i$i|0);
       if ($454) {
        $$1$i155$i = $$0111$i$i;
       } else {
        $455 = (((($$0124$i)) + 12|0) + (($$087110$i$i*24)|0)|0);
        ;HEAP32[$5>>2]=HEAP32[$455>>2]|0;HEAP32[$5+4>>2]=HEAP32[$455+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$455+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$455+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[$455+16>>2]|0;HEAP32[$5+20>>2]=HEAP32[$455+20>>2]|0;
        ;HEAP32[$455>>2]=HEAP32[$451>>2]|0;HEAP32[$455+4>>2]=HEAP32[$451+4>>2]|0;HEAP32[$455+8>>2]=HEAP32[$451+8>>2]|0;HEAP32[$455+12>>2]=HEAP32[$451+12>>2]|0;HEAP32[$455+16>>2]=HEAP32[$451+16>>2]|0;HEAP32[$455+20>>2]=HEAP32[$451+20>>2]|0;
        ;HEAP32[$451>>2]=HEAP32[$5>>2]|0;HEAP32[$451+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$451+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$451+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$451+16>>2]=HEAP32[$5+16>>2]|0;HEAP32[$451+20>>2]=HEAP32[$5+20>>2]|0;
        $456 = (($$0111$i$i) + -1)|0;
        $$1$i155$i = $456;
       }
       $457 = (($$087110$i$i) + 1)|0;
       $$188$i$i = $457;$$2$i156$i = $$1$i155$i;
      } else {
       $$188$i$i = $$087110$i$i;$$2$i156$i = $$0111$i$i;
      }
      $458 = (($$2$i156$i) + 1)|0;
      $459 = ($458>>>0)<($$090$lcssa135$i$i>>>0);
      if ($459) {
       $$0111$i$i = $458;$$087110$i$i = $$188$i$i;
      } else {
       break;
      }
     }
     $444 = ($$188$i$i|0)==(1);
     if ($444) {
      HEAP32[$vararg_buffer14>>2] = 1;
      $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
      HEAP32[$vararg_ptr17>>2] = 19050;
      _liq_verbose_printf($1,18983,$vararg_buffer14);
      $$087$lcssa138143$i$i = 1;
     } else {
      HEAP32[$vararg_buffer18>>2] = $$188$i$i;
      $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
      HEAP32[$vararg_ptr21>>2] = 19046;
      _liq_verbose_printf($1,18983,$vararg_buffer18);
      $445 = ($$188$i$i|0)==(0);
      if ($445) {
       $$087$lcssa138139$i$i = 0;$$090$lcssa132136141$i$i = $$090$lcssa135$i$i;
       label = 138;
       break;
      } else {
       $$087$lcssa138143$i$i = $$188$i$i;
      }
     }
     $446 = ((($$0124$i)) + 12|0);
     _qsort($446,$$087$lcssa138143$i$i,24,49);
     $$087$lcssa138139$i$i = $$087$lcssa138143$i$i;$$090$lcssa132136141$i$i = $$090$lcssa135$i$i;
     label = 138;
    }
   } while(0);
   if ((label|0) == 133) {
    HEAP32[$vararg_buffer10>>2] = 0;
    $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
    HEAP32[$vararg_ptr13>>2] = 19046;
    _liq_verbose_printf($1,18983,$vararg_buffer10);
    $$087$lcssa138139$i$i = 0;$$090$lcssa132136141$i$i = 0;
    label = 138;
   }
   if ((label|0) == 138) {
    $447 = (($$090$lcssa132136141$i$i) - ($$087$lcssa138139$i$i))|0;
    $448 = ($447|0)==(0);
    if (!($448)) {
     $449 = (((($$0124$i)) + 12|0) + (($$087$lcssa138139$i$i*24)|0)|0);
     _qsort($449,$447,24,49);
    }
    $450 = ($$090$lcssa132136141$i$i>>>0)>(9);
    if ($450) {
     $460 = HEAP32[$$0124$i>>2]|0;
     $461 = ($460>>>0)>(16);
     if ($461) {
      $462 = ((($$0124$i)) + 180|0);
      ;HEAP32[$6>>2]=HEAP32[$462>>2]|0;HEAP32[$6+4>>2]=HEAP32[$462+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$462+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$462+12>>2]|0;HEAP32[$6+16>>2]=HEAP32[$462+16>>2]|0;HEAP32[$6+20>>2]=HEAP32[$462+20>>2]|0;
      $463 = ((($$0124$i)) + 36|0);
      ;HEAP32[$462>>2]=HEAP32[$463>>2]|0;HEAP32[$462+4>>2]=HEAP32[$463+4>>2]|0;HEAP32[$462+8>>2]=HEAP32[$463+8>>2]|0;HEAP32[$462+12>>2]=HEAP32[$463+12>>2]|0;HEAP32[$462+16>>2]=HEAP32[$463+16>>2]|0;HEAP32[$462+20>>2]=HEAP32[$463+20>>2]|0;
      ;HEAP32[$463>>2]=HEAP32[$6>>2]|0;HEAP32[$463+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$463+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$463+12>>2]=HEAP32[$6+12>>2]|0;HEAP32[$463+16>>2]=HEAP32[$6+16>>2]|0;HEAP32[$463+20>>2]=HEAP32[$6+20>>2]|0;
      $464 = ((($$0124$i)) + 204|0);
      ;HEAP32[$7>>2]=HEAP32[$464>>2]|0;HEAP32[$7+4>>2]=HEAP32[$464+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$464+8>>2]|0;HEAP32[$7+12>>2]=HEAP32[$464+12>>2]|0;HEAP32[$7+16>>2]=HEAP32[$464+16>>2]|0;HEAP32[$7+20>>2]=HEAP32[$464+20>>2]|0;
      $465 = ((($$0124$i)) + 60|0);
      ;HEAP32[$464>>2]=HEAP32[$465>>2]|0;HEAP32[$464+4>>2]=HEAP32[$465+4>>2]|0;HEAP32[$464+8>>2]=HEAP32[$465+8>>2]|0;HEAP32[$464+12>>2]=HEAP32[$465+12>>2]|0;HEAP32[$464+16>>2]=HEAP32[$465+16>>2]|0;HEAP32[$464+20>>2]=HEAP32[$465+20>>2]|0;
      ;HEAP32[$465>>2]=HEAP32[$7>>2]|0;HEAP32[$465+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$465+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$465+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$465+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$465+20>>2]=HEAP32[$7+20>>2]|0;
      $466 = ((($$0124$i)) + 228|0);
      ;HEAP32[$8>>2]=HEAP32[$466>>2]|0;HEAP32[$8+4>>2]=HEAP32[$466+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$466+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$466+12>>2]|0;HEAP32[$8+16>>2]=HEAP32[$466+16>>2]|0;HEAP32[$8+20>>2]=HEAP32[$466+20>>2]|0;
      $467 = ((($$0124$i)) + 84|0);
      ;HEAP32[$466>>2]=HEAP32[$467>>2]|0;HEAP32[$466+4>>2]=HEAP32[$467+4>>2]|0;HEAP32[$466+8>>2]=HEAP32[$467+8>>2]|0;HEAP32[$466+12>>2]=HEAP32[$467+12>>2]|0;HEAP32[$466+16>>2]=HEAP32[$467+16>>2]|0;HEAP32[$466+20>>2]=HEAP32[$467+20>>2]|0;
      ;HEAP32[$467>>2]=HEAP32[$8>>2]|0;HEAP32[$467+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$467+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$467+12>>2]=HEAP32[$8+12>>2]|0;HEAP32[$467+16>>2]=HEAP32[$8+16>>2]|0;HEAP32[$467+20>>2]=HEAP32[$8+20>>2]|0;
     }
    }
   }
   if ($2) {
    $468 = HEAP32[$$0124$i>>2]|0;
    $469 = ($468|0)==(0);
    if (!($469)) {
     $$0134199$i = 0;
     while(1) {
      $470 = (((((($$0124$i)) + 12|0) + (($$0134199$i*24)|0)|0)) + 20|0);
      HEAP8[$470>>0] = 1;
      $471 = (($$0134199$i) + 1)|0;
      $exitcond = ($471|0)==($468|0);
      if ($exitcond) {
       break;
      } else {
       $$0134199$i = $471;
      }
     }
    }
   }
   $472 = HEAP32[$32>>2]|0;
   $473 = (FUNCTION_TABLE_ii[$472 & 63](1088)|0);
   $474 = ($473|0)==(0|0);
   if ($474) {
    $$3$i = 101;
   } else {
    $475 = HEAP32[$32>>2]|0;
    $476 = HEAP32[$34>>2]|0;
    $477 = ((($1)) + 52|0);
    $478 = HEAP32[$477>>2]|0;
    $479 = ((($1)) + 70|0);
    $480 = HEAP8[$479>>0]|0;
    HEAP32[$473>>2] = 18536;
    $$sroa$3$0$$sroa_idx4$i = ((($473)) + 4|0);
    HEAP32[$$sroa$3$0$$sroa_idx4$i>>2] = $475;
    $$sroa$4$0$$sroa_idx5$i = ((($473)) + 8|0);
    HEAP32[$$sroa$4$0$$sroa_idx5$i>>2] = $476;
    $$sroa$5$0$$sroa_idx6$i = ((($473)) + 12|0);
    HEAP32[$$sroa$5$0$$sroa_idx6$i>>2] = 0;
    $$sroa$57$0$$sroa_idx8$i = ((($473)) + 16|0);
    HEAP32[$$sroa$57$0$$sroa_idx8$i>>2] = $$0124$i;
    $$sroa$6$0$$sroa_idx$i = ((($473)) + 20|0);
    _memset(($$sroa$6$0$$sroa_idx$i|0),0,1044)|0;
    $$sroa$610$0$$sroa_idx11$i = ((($473)) + 1064|0);
    HEAPF64[$$sroa$610$0$$sroa_idx11$i>>3] = $92;
    $$sroa$7$0$$sroa_idx12$i = ((($473)) + 1072|0);
    HEAPF64[$$sroa$7$0$$sroa_idx12$i>>3] = $$4178$i;
    $$sroa$8$0$$sroa_idx13$i = ((($473)) + 1080|0);
    HEAP32[$$sroa$8$0$$sroa_idx13$i>>2] = $478;
    $481 = ((($473)) + 1084|0);
    HEAP8[$481>>0] = $480;
    $$sroa$10$0$$sroa_raw_idx$i = ((($473)) + 1085|0);
    ;HEAP8[$$sroa$10$0$$sroa_raw_idx$i>>0]=0|0;HEAP8[$$sroa$10$0$$sroa_raw_idx$i+1>>0]=0|0;HEAP8[$$sroa$10$0$$sroa_raw_idx$i+2>>0]=0|0;
    HEAP32[$3>>2] = $473;
    $$3$i = 0;
   }
  }
 } while(0);
 _pam_freeacolorhist($36);
 $$1 = $$3$i;
 STACKTOP = sp;return ($$1|0);
}
function _adjust_histogram_callback($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 20|0);
 $3 = +HEAPF32[$2>>2];
 $4 = ((($0)) + 16|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $3 + $5;
 $7 = $1 + 1.0;
 $8 = (+Math_sqrt((+$7)));
 $9 = $8 * $6;
 HEAPF32[$4>>2] = $9;
 return;
}
function _compare_popularity($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 $3 = +HEAPF32[$2>>2];
 $4 = ((($1)) + 16|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $3 > $5;
 $7 = $6 ? -1 : 1;
 return ($7|0);
}
function _contrast_maps($0) {
 $0 = $0|0;
 var $$ = 0.0, $$0$i329 = 0, $$017$i$i = 0, $$0303323 = 0, $$0303323$phi = 0, $$0304322 = 0, $$0305321 = 0, $$0306309 = 0, $$0308 = 0, $$307 = 0.0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$$sroa_idx$i$i = 0, $$sroa$0$0$copyload = 0.0, $$sroa$0128$0$$sroa_idx131 = 0, $$sroa$0128$0$copyload132 = 0.0, $$sroa$0128$0310 = 0.0, $$sroa$015$0$$sroa_idx$i$i = 0, $$sroa$015$0$copyload$i$i = 0, $$sroa$0153$0$copyload = 0.0, $$sroa$0153$0314 = 0.0;
 var $$sroa$0153$0314$phi = 0.0, $$sroa$083$0$$sroa_idx = 0, $$sroa$083$0$copyload = 0.0, $$sroa$12$0$$sroa_idx164 = 0, $$sroa$12$0$copyload = 0.0, $$sroa$12$0316 = 0.0, $$sroa$12$0316$phi = 0.0, $$sroa$16$0$$sroa_idx169 = 0, $$sroa$16$0$copyload = 0.0, $$sroa$16$0317 = 0.0, $$sroa$16$0317$phi = 0.0, $$sroa$2$0$$sroa_idx12$i$i = 0, $$sroa$3$0$$sroa_idx13$i$i = 0, $$sroa$4$0$$sroa_idx14$i$i = 0, $$sroa$4$0$$sroa_idx77 = 0, $$sroa$4$0$copyload = 0.0, $$sroa$416$0$$sroa_idx$i$i = 0, $$sroa$416$0$copyload$i$i = 0, $$sroa$485$0$$sroa_idx86 = 0, $$sroa$485$0$copyload = 0.0;
 var $$sroa$5$0$$sroa_idx$i$i = 0, $$sroa$5$0$$sroa_idx79 = 0, $$sroa$5$0$copyload = 0.0, $$sroa$5$0$copyload$i$i = 0, $$sroa$588$0$$sroa_idx89 = 0, $$sroa$588$0$copyload = 0.0, $$sroa$6$0$$sroa_idx$i$i = 0, $$sroa$6$0$$sroa_idx81 = 0, $$sroa$6$0$copyload = 0.0, $$sroa$6$0$copyload$i$i = 0, $$sroa$6134$0$$sroa_idx138 = 0, $$sroa$6134$0$copyload139 = 0.0, $$sroa$6134$0311 = 0.0, $$sroa$691$0$$sroa_idx92 = 0, $$sroa$691$0$copyload = 0.0, $$sroa$7$0$$sroa_idx144 = 0, $$sroa$7$0$copyload145 = 0.0, $$sroa$7$0312 = 0.0, $$sroa$8$0$$sroa_idx150 = 0, $$sroa$8$0$copyload151 = 0.0;
 var $$sroa$8$0313 = 0.0, $$sroa$8158$0$$sroa_idx159 = 0, $$sroa$8158$0$copyload = 0.0, $$sroa$8158$0315 = 0.0, $$sroa$8158$0315$phi = 0.0, $$v = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0;
 var $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0;
 var $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0.0, $83 = 0.0, $84 = 0.0;
 var $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $exitcond = 0, $exitcond326 = 0, $exitcond327 = 0, $or$cond = 0;
 var $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1024|0);
 $1 = sp;
 $2 = ((($0)) + 32|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 36|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<(4);
 $7 = ($5>>>0)<(4);
 $or$cond = $6 | $7;
 if ($or$cond) {
  STACKTOP = sp;return;
 }
 $8 = Math_imul($5, $3)|0;
 $9 = ($8*3)|0;
 $10 = ($9>>>0)>(67108864);
 if ($10) {
  STACKTOP = sp;return;
 }
 $11 = ((($0)) + 40|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0|0);
 if ($13) {
  $14 = ((($0)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = (FUNCTION_TABLE_ii[$15 & 63]($8)|0);
  $25 = $16;
 } else {
  $25 = $12;
 }
 HEAP32[$11>>2] = 0;
 $17 = ((($0)) + 44|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 $20 = ((($0)) + 4|0);
 if ($19) {
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_ii[$21 & 63]($8)|0);
  $27 = $22;
 } else {
  $27 = $18;
 }
 HEAP32[$17>>2] = 0;
 $23 = HEAP32[$20>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 63]($8)|0);
 $26 = ($25|0)!=(0|0);
 $28 = ($27|0)!=(0|0);
 $or$cond3 = $26 & $28;
 $29 = ($24|0)!=(0|0);
 $or$cond5 = $or$cond3 & $29;
 if ($or$cond5) {
  $30 = (_liq_image_get_row_f_init($0)|0);
  if ($30) {
   $35 = ((($0)) + 12|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(0|0);
   do {
    if ($37) {
     $38 = ((($0)) + 24|0);
     $39 = +HEAPF64[$38>>3];
     _to_f_set_gamma($1,$39);
     $40 = ((($0)) + 60|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = (_liq_image_get_row_rgba($0,0)|0);
     $43 = HEAP32[$2>>2]|0;
     $44 = ($43|0)==(0);
     if ($44) {
      $$0$i329 = $41;
      label = 16;
      break;
     }
     $$017$i$i = 0;
     while(1) {
      $$sroa$015$0$$sroa_idx$i$i = (($42) + ($$017$i$i<<2)|0);
      $$sroa$015$0$copyload$i$i = HEAP8[$$sroa$015$0$$sroa_idx$i$i>>0]|0;
      $$sroa$416$0$$sroa_idx$i$i = (((($42) + ($$017$i$i<<2)|0)) + 1|0);
      $$sroa$416$0$copyload$i$i = HEAP8[$$sroa$416$0$$sroa_idx$i$i>>0]|0;
      $$sroa$5$0$$sroa_idx$i$i = (((($42) + ($$017$i$i<<2)|0)) + 2|0);
      $$sroa$5$0$copyload$i$i = HEAP8[$$sroa$5$0$$sroa_idx$i$i>>0]|0;
      $$sroa$6$0$$sroa_idx$i$i = (((($42) + ($$017$i$i<<2)|0)) + 3|0);
      $$sroa$6$0$copyload$i$i = HEAP8[$$sroa$6$0$$sroa_idx$i$i>>0]|0;
      $45 = (+($$sroa$6$0$copyload$i$i&255));
      $46 = $45 / 255.0;
      $47 = $$sroa$015$0$copyload$i$i&255;
      $48 = (($1) + ($47<<2)|0);
      $49 = +HEAPF32[$48>>2];
      $50 = $49 * $46;
      $51 = $$sroa$416$0$copyload$i$i&255;
      $52 = (($1) + ($51<<2)|0);
      $53 = +HEAPF32[$52>>2];
      $54 = $46 * $53;
      $55 = $$sroa$5$0$copyload$i$i&255;
      $56 = (($1) + ($55<<2)|0);
      $57 = +HEAPF32[$56>>2];
      $58 = $46 * $57;
      $$sroa$0$0$$sroa_idx$i$i = (($41) + ($$017$i$i<<4)|0);
      HEAPF32[$$sroa$0$0$$sroa_idx$i$i>>2] = $46;
      $$sroa$2$0$$sroa_idx12$i$i = (((($41) + ($$017$i$i<<4)|0)) + 4|0);
      HEAPF32[$$sroa$2$0$$sroa_idx12$i$i>>2] = $50;
      $$sroa$3$0$$sroa_idx13$i$i = (((($41) + ($$017$i$i<<4)|0)) + 8|0);
      HEAPF32[$$sroa$3$0$$sroa_idx13$i$i>>2] = $54;
      $$sroa$4$0$$sroa_idx14$i$i = (((($41) + ($$017$i$i<<4)|0)) + 12|0);
      HEAPF32[$$sroa$4$0$$sroa_idx14$i$i>>2] = $58;
      $59 = (($$017$i$i) + 1)|0;
      $60 = HEAP32[$2>>2]|0;
      $61 = ($59>>>0)<($60>>>0);
      if ($61) {
       $$017$i$i = $59;
      } else {
       break;
      }
     }
     $62 = ($5|0)==(0);
     if (!($62)) {
      $$0$i329 = $41;
      label = 16;
     }
    } else {
     $$0$i329 = $36;
     label = 16;
    }
   } while(0);
   if ((label|0) == 16) {
    $63 = (($5) + -1)|0;
    $64 = ($3|0)==(0);
    $65 = (($3) + -1)|0;
    $$0303323 = $$0$i329;$$0304322 = $$0$i329;$$0305321 = 0;
    while(1) {
     $67 = (($$0305321) + 1)|0;
     $68 = ($63>>>0)<($67>>>0);
     $69 = $68 ? $63 : $67;
     $70 = (_liq_image_get_row_f($0,$69)|0);
     $$sroa$0153$0$copyload = +HEAPF32[$$0304322>>2];
     $$sroa$8158$0$$sroa_idx159 = ((($$0304322)) + 4|0);
     $$sroa$8158$0$copyload = +HEAPF32[$$sroa$8158$0$$sroa_idx159>>2];
     $$sroa$12$0$$sroa_idx164 = ((($$0304322)) + 8|0);
     $$sroa$12$0$copyload = +HEAPF32[$$sroa$12$0$$sroa_idx164>>2];
     $$sroa$16$0$$sroa_idx169 = ((($$0304322)) + 12|0);
     $$sroa$16$0$copyload = +HEAPF32[$$sroa$16$0$$sroa_idx169>>2];
     if (!($64)) {
      $71 = Math_imul($$0305321, $3)|0;
      $$0306309 = 0;$$sroa$0128$0310 = $$sroa$0153$0$copyload;$$sroa$0153$0314 = $$sroa$0153$0$copyload;$$sroa$12$0316 = $$sroa$12$0$copyload;$$sroa$16$0317 = $$sroa$16$0$copyload;$$sroa$6134$0311 = $$sroa$8158$0$copyload;$$sroa$7$0312 = $$sroa$12$0$copyload;$$sroa$8$0313 = $$sroa$16$0$copyload;$$sroa$8158$0315 = $$sroa$8158$0$copyload;
      while(1) {
       $72 = (($$0306309) + 1)|0;
       $73 = ($65>>>0)<($72>>>0);
       $74 = $73 ? $65 : $72;
       $$sroa$0128$0$$sroa_idx131 = (($$0304322) + ($74<<4)|0);
       $$sroa$0128$0$copyload132 = +HEAPF32[$$sroa$0128$0$$sroa_idx131>>2];
       $$sroa$6134$0$$sroa_idx138 = (((($$0304322) + ($74<<4)|0)) + 4|0);
       $$sroa$6134$0$copyload139 = +HEAPF32[$$sroa$6134$0$$sroa_idx138>>2];
       $$sroa$7$0$$sroa_idx144 = (((($$0304322) + ($74<<4)|0)) + 8|0);
       $$sroa$7$0$copyload145 = +HEAPF32[$$sroa$7$0$$sroa_idx144>>2];
       $$sroa$8$0$$sroa_idx150 = (((($$0304322) + ($74<<4)|0)) + 12|0);
       $$sroa$8$0$copyload151 = +HEAPF32[$$sroa$8$0$$sroa_idx150>>2];
       $75 = $$sroa$0153$0314 + $$sroa$0128$0$copyload132;
       $76 = $$sroa$0128$0310 * 2.0;
       $77 = $75 - $76;
       $78 = (+Math_abs((+$77)));
       $79 = $$sroa$8158$0315 + $$sroa$6134$0$copyload139;
       $80 = $$sroa$6134$0311 * 2.0;
       $81 = $79 - $80;
       $82 = (+Math_abs((+$81)));
       $83 = $$sroa$12$0316 + $$sroa$7$0$copyload145;
       $84 = $$sroa$7$0312 * 2.0;
       $85 = $83 - $84;
       $86 = (+Math_abs((+$85)));
       $87 = $$sroa$16$0317 + $$sroa$8$0$copyload151;
       $88 = $$sroa$8$0313 * 2.0;
       $89 = $87 - $88;
       $90 = (+Math_abs((+$89)));
       $$sroa$083$0$$sroa_idx = (($$0303323) + ($$0306309<<4)|0);
       $$sroa$083$0$copyload = +HEAPF32[$$sroa$083$0$$sroa_idx>>2];
       $$sroa$485$0$$sroa_idx86 = (((($$0303323) + ($$0306309<<4)|0)) + 4|0);
       $$sroa$485$0$copyload = +HEAPF32[$$sroa$485$0$$sroa_idx86>>2];
       $$sroa$588$0$$sroa_idx89 = (((($$0303323) + ($$0306309<<4)|0)) + 8|0);
       $$sroa$588$0$copyload = +HEAPF32[$$sroa$588$0$$sroa_idx89>>2];
       $$sroa$691$0$$sroa_idx92 = (((($$0303323) + ($$0306309<<4)|0)) + 12|0);
       $$sroa$691$0$copyload = +HEAPF32[$$sroa$691$0$$sroa_idx92>>2];
       $$sroa$0$0$$sroa_idx = (($70) + ($$0306309<<4)|0);
       $$sroa$0$0$copyload = +HEAPF32[$$sroa$0$0$$sroa_idx>>2];
       $$sroa$4$0$$sroa_idx77 = (((($70) + ($$0306309<<4)|0)) + 4|0);
       $$sroa$4$0$copyload = +HEAPF32[$$sroa$4$0$$sroa_idx77>>2];
       $$sroa$5$0$$sroa_idx79 = (((($70) + ($$0306309<<4)|0)) + 8|0);
       $$sroa$5$0$copyload = +HEAPF32[$$sroa$5$0$$sroa_idx79>>2];
       $$sroa$6$0$$sroa_idx81 = (((($70) + ($$0306309<<4)|0)) + 12|0);
       $$sroa$6$0$copyload = +HEAPF32[$$sroa$6$0$$sroa_idx81>>2];
       $91 = $$sroa$083$0$copyload + $$sroa$0$0$copyload;
       $92 = $91 - $76;
       $93 = (+Math_abs((+$92)));
       $94 = $$sroa$485$0$copyload + $$sroa$4$0$copyload;
       $95 = $94 - $80;
       $96 = (+Math_abs((+$95)));
       $97 = $$sroa$588$0$copyload + $$sroa$5$0$copyload;
       $98 = $97 - $84;
       $99 = (+Math_abs((+$98)));
       $100 = $$sroa$691$0$copyload + $$sroa$6$0$copyload;
       $101 = $100 - $88;
       $102 = (+Math_abs((+$101)));
       $103 = $78 > $82;
       $104 = $103 ? $78 : $82;
       $105 = $86 > $90;
       $106 = $105 ? $86 : $90;
       $107 = $104 > $106;
       $$ = $107 ? $104 : $106;
       $108 = $93 > $96;
       $109 = $108 ? $93 : $96;
       $110 = $99 > $102;
       $111 = $110 ? $99 : $102;
       $112 = $109 > $111;
       $113 = $112 ? $109 : $111;
       $114 = $$ > $113;
       $115 = $114 ? $$ : $113;
       $116 = $$ - $113;
       $117 = (+Math_abs((+$116)));
       $118 = $117 * 0.5;
       $119 = $115 - $118;
       $120 = $$ < $113;
       $121 = $120 ? $$ : $113;
       $122 = $119 > $121;
       $$307 = $122 ? $119 : $121;
       $123 = 1.0 - $$307;
       $124 = $123 * $123;
       $125 = $124 * $124;
       $126 = $125 * 171.0;
       $127 = (~~(($126))>>>0);
       $128 = (($127) + 85)|0;
       $129 = ($128>>>0)<(255);
       $130 = $129 ? $128 : 255;
       $131 = $130&255;
       $132 = (($$0306309) + ($71))|0;
       $133 = (($25) + ($132)|0);
       HEAP8[$133>>0] = $131;
       $134 = $115 * 256.0;
       $135 = (~~(($134)));
       $136 = (255 - ($135))|0;
       $137 = ($136|0)<(255);
       $138 = $137 ? $136 : 255;
       $139 = ($138|0)>(0);
       $140 = $139 ? $138 : 0;
       $141 = $140&255;
       $142 = (($27) + ($132)|0);
       HEAP8[$142>>0] = $141;
       $exitcond326 = ($72|0)==($3|0);
       if ($exitcond326) {
        break;
       } else {
        $$sroa$8158$0315$phi = $$sroa$6134$0311;$$sroa$16$0317$phi = $$sroa$8$0313;$$sroa$12$0316$phi = $$sroa$7$0312;$$sroa$0153$0314$phi = $$sroa$0128$0310;$$0306309 = $72;$$sroa$0128$0310 = $$sroa$0128$0$copyload132;$$sroa$6134$0311 = $$sroa$6134$0$copyload139;$$sroa$7$0312 = $$sroa$7$0$copyload145;$$sroa$8$0313 = $$sroa$8$0$copyload151;$$sroa$8158$0315 = $$sroa$8158$0315$phi;$$sroa$16$0317 = $$sroa$16$0317$phi;$$sroa$12$0316 = $$sroa$12$0316$phi;$$sroa$0153$0314 = $$sroa$0153$0314$phi;
       }
      }
     }
     $exitcond327 = ($67|0)==($5|0);
     if ($exitcond327) {
      break;
     } else {
      $$0303323$phi = $$0304322;$$0304322 = $70;$$0305321 = $67;$$0303323 = $$0303323$phi;
     }
    }
   }
   _liq_max3($25,$24,$3,$5);
   _liq_max3($24,$25,$3,$5);
   _liq_blur($25,$24,$25,$3,$5,3);
   _liq_max3($25,$24,$3,$5);
   _liq_min3($24,$25,$3,$5);
   _liq_min3($25,$24,$3,$5);
   _liq_min3($24,$25,$3,$5);
   _liq_min3($27,$24,$3,$5);
   _liq_max3($24,$27,$3,$5);
   $66 = ($8|0)==(0);
   if (!($66)) {
    $$0308 = 0;
    while(1) {
     $145 = (($25) + ($$0308)|0);
     $146 = HEAP8[$145>>0]|0;
     $147 = (($27) + ($$0308)|0);
     $148 = HEAP8[$147>>0]|0;
     $149 = ($146&255)<($148&255);
     $$v = $149 ? $146 : $148;
     HEAP8[$147>>0] = $$v;
     $150 = (($$0308) + 1)|0;
     $exitcond = ($150|0)==($8|0);
     if ($exitcond) {
      break;
     } else {
      $$0308 = $150;
     }
    }
   }
   $143 = ((($0)) + 8|0);
   $144 = HEAP32[$143>>2]|0;
   FUNCTION_TABLE_vi[$144 & 63]($24);
   HEAP32[$11>>2] = $25;
   HEAP32[$17>>2] = $27;
   STACKTOP = sp;return;
  }
 }
 $31 = ((($0)) + 8|0);
 $32 = HEAP32[$31>>2]|0;
 FUNCTION_TABLE_vi[$32 & 63]($25);
 $33 = HEAP32[$31>>2]|0;
 FUNCTION_TABLE_vi[$33 & 63]($27);
 $34 = HEAP32[$31>>2]|0;
 FUNCTION_TABLE_vi[$34 & 63]($24);
 STACKTOP = sp;return;
}
function _liq_image_get_row_rgba($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$033$i = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sroa$3$0$$sroa_idx$i = 0, $$sroa$3$0$copyload$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0.0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0.0;
 var $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 16|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 do {
  if ($4) {
   $17 = ((($0)) + 56|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($0)) + 32|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ((($0)) + 64|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($0)) + 68|0);
   $24 = HEAP32[$23>>2]|0;
   _liq_executing_user_callback($22,$18,$1,$20,$24);
   $$pre = ((($0)) + 76|0);
   $$pre$phiZ2D = $$pre;$32 = $19;$36 = $18;
  } else {
   $5 = ((($0)) + 76|0);
   $6 = +HEAPF32[$5>>2];
   $7 = !($6 < 1.0);
   if (!($7)) {
    $10 = ((($0)) + 56|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = ((($0)) + 32|0);
    $13 = HEAP32[$12>>2]|0;
    $14 = (($3) + ($1<<2)|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $13 << 2;
    _memcpy(($11|0),($15|0),($16|0))|0;
    $$pre$phiZ2D = $5;$32 = $12;$36 = $11;
    break;
   }
   $8 = (($3) + ($1<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $$0 = $9;
   return ($$0|0);
  }
 } while(0);
 $25 = +HEAPF32[$$pre$phiZ2D>>2];
 $26 = $25 < 1.0;
 if (!($26)) {
  $$0 = $36;
  return ($$0|0);
 }
 $27 = $25 * 169.0;
 $28 = $27 * 0.00390625;
 $29 = $28 * 255.0;
 $30 = (~~(($29))>>>0);
 $31 = HEAP32[$32>>2]|0;
 $33 = ($31|0)==(0);
 if ($33) {
  $$0 = $36;
  return ($$0|0);
 }
 $34 = 1.0 - $28;
 $35 = $25 - $28;
 $$033$i = 0;
 while(1) {
  $$sroa$3$0$$sroa_idx$i = (((($36) + ($$033$i<<2)|0)) + 3|0);
  $$sroa$3$0$copyload$i = HEAP8[$$sroa$3$0$$sroa_idx$i>>0]|0;
  $37 = $$sroa$3$0$copyload$i&255;
  $38 = ($37>>>0)<($30>>>0);
  if (!($38)) {
   $39 = (+($$sroa$3$0$copyload$i&255));
   $40 = $39 / 255.0;
   $41 = $40 - $28;
   $42 = $34 * $41;
   $43 = $42 / $35;
   $44 = $28 + $43;
   $45 = $44 * 256.0;
   $46 = $45 >= 255.0;
   $47 = $46 ? 255.0 : $45;
   $48 = (~~(($47))&255);
   HEAP8[$$sroa$3$0$$sroa_idx$i>>0] = $48;
  }
  $49 = (($$033$i) + 1)|0;
  $exitcond = ($49|0)==($31|0);
  if ($exitcond) {
   $$0 = $36;
   break;
  } else {
   $$033$i = $49;
  }
 }
 return ($$0|0);
}
function _liq_image_get_row_f_init($0) {
 $0 = $0|0;
 var $$017$i = 0, $$018 = 0, $$021 = 0, $$idx = 0, $$idx$val = 0, $$idx19 = 0, $$idx19$val = 0, $$pre = 0, $$sroa$0$0$$sroa_idx$i = 0, $$sroa$015$0$$sroa_idx$i = 0, $$sroa$015$0$copyload$i = 0, $$sroa$2$0$$sroa_idx12$i = 0, $$sroa$3$0$$sroa_idx13$i = 0, $$sroa$4$0$$sroa_idx14$i = 0, $$sroa$416$0$$sroa_idx$i = 0, $$sroa$416$0$copyload$i = 0, $$sroa$5$0$$sroa_idx$i = 0, $$sroa$5$0$copyload$i = 0, $$sroa$6$0$$sroa_idx$i = 0, $$sroa$6$0$copyload$i = 0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0.0;
 var $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1024|0);
 $1 = sp;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $$018 = 1;
  STACKTOP = sp;return ($$018|0);
 }
 $$idx = ((($0)) + 32|0);
 $$idx$val = HEAP32[$$idx>>2]|0;
 $$idx19 = ((($0)) + 36|0);
 $$idx19$val = HEAP32[$$idx19>>2]|0;
 $5 = Math_imul($$idx19$val, $$idx$val)|0;
 $6 = ($5>>>0)>(4194304);
 if (!($6)) {
  $7 = ((($0)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $$idx$val << 4;
  $10 = Math_imul($9, $$idx19$val)|0;
  $11 = (FUNCTION_TABLE_ii[$8 & 63]($10)|0);
  HEAP32[$2>>2] = $11;
  $phitmp = ($11|0)==(0|0);
  if (!($phitmp)) {
   $19 = (_liq_crash_if_invalid_handle_pointer_given($0,18568)|0);
   if (!($19)) {
    $$018 = 0;
    STACKTOP = sp;return ($$018|0);
   }
   $20 = ((($0)) + 16|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ($21|0)==(0|0);
   if ($22) {
    $23 = ((($0)) + 56|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==(0|0);
    if ($25) {
     $$018 = 0;
     STACKTOP = sp;return ($$018|0);
    }
    $26 = ((($0)) + 64|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($27|0)==(0|0);
    if ($28) {
     $$018 = 0;
     STACKTOP = sp;return ($$018|0);
    }
   }
   $29 = ((($0)) + 24|0);
   $30 = +HEAPF64[$29>>3];
   _to_f_set_gamma($1,$30);
   $31 = HEAP32[$$idx19>>2]|0;
   $32 = ($31|0)==(0);
   if (!($32)) {
    $$pre = HEAP32[$$idx>>2]|0;
    $$021 = 0;$35 = $$pre;
    while(1) {
     $33 = HEAP32[$2>>2]|0;
     $34 = Math_imul($35, $$021)|0;
     $36 = (($33) + ($34<<4)|0);
     $37 = (_liq_image_get_row_rgba($0,$$021)|0);
     $38 = HEAP32[$$idx>>2]|0;
     $39 = ($38|0)==(0);
     if ($39) {
      $60 = 0;
     } else {
      $$017$i = 0;
      while(1) {
       $$sroa$015$0$$sroa_idx$i = (($37) + ($$017$i<<2)|0);
       $$sroa$015$0$copyload$i = HEAP8[$$sroa$015$0$$sroa_idx$i>>0]|0;
       $$sroa$416$0$$sroa_idx$i = (((($37) + ($$017$i<<2)|0)) + 1|0);
       $$sroa$416$0$copyload$i = HEAP8[$$sroa$416$0$$sroa_idx$i>>0]|0;
       $$sroa$5$0$$sroa_idx$i = (((($37) + ($$017$i<<2)|0)) + 2|0);
       $$sroa$5$0$copyload$i = HEAP8[$$sroa$5$0$$sroa_idx$i>>0]|0;
       $$sroa$6$0$$sroa_idx$i = (((($37) + ($$017$i<<2)|0)) + 3|0);
       $$sroa$6$0$copyload$i = HEAP8[$$sroa$6$0$$sroa_idx$i>>0]|0;
       $40 = (+($$sroa$6$0$copyload$i&255));
       $41 = $40 / 255.0;
       $42 = $$sroa$015$0$copyload$i&255;
       $43 = (($1) + ($42<<2)|0);
       $44 = +HEAPF32[$43>>2];
       $45 = $44 * $41;
       $46 = $$sroa$416$0$copyload$i&255;
       $47 = (($1) + ($46<<2)|0);
       $48 = +HEAPF32[$47>>2];
       $49 = $41 * $48;
       $50 = $$sroa$5$0$copyload$i&255;
       $51 = (($1) + ($50<<2)|0);
       $52 = +HEAPF32[$51>>2];
       $53 = $41 * $52;
       $$sroa$0$0$$sroa_idx$i = (($36) + ($$017$i<<4)|0);
       HEAPF32[$$sroa$0$0$$sroa_idx$i>>2] = $41;
       $$sroa$2$0$$sroa_idx12$i = (((($36) + ($$017$i<<4)|0)) + 4|0);
       HEAPF32[$$sroa$2$0$$sroa_idx12$i>>2] = $45;
       $$sroa$3$0$$sroa_idx13$i = (((($36) + ($$017$i<<4)|0)) + 8|0);
       HEAPF32[$$sroa$3$0$$sroa_idx13$i>>2] = $49;
       $$sroa$4$0$$sroa_idx14$i = (((($36) + ($$017$i<<4)|0)) + 12|0);
       HEAPF32[$$sroa$4$0$$sroa_idx14$i>>2] = $53;
       $54 = (($$017$i) + 1)|0;
       $55 = HEAP32[$$idx>>2]|0;
       $56 = ($54>>>0)<($55>>>0);
       if ($56) {
        $$017$i = $54;
       } else {
        $60 = $55;
        break;
       }
      }
     }
     $57 = (($$021) + 1)|0;
     $58 = HEAP32[$$idx19>>2]|0;
     $59 = ($57>>>0)<($58>>>0);
     if ($59) {
      $$021 = $57;$35 = $60;
     } else {
      break;
     }
    }
   }
   $$018 = 1;
   STACKTOP = sp;return ($$018|0);
  }
 }
 $12 = ((($0)) + 4|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = HEAP32[$$idx>>2]|0;
 $15 = $14 << 4;
 $16 = (FUNCTION_TABLE_ii[$13 & 63]($15)|0);
 $17 = ((($0)) + 60|0);
 HEAP32[$17>>2] = $16;
 $18 = ($16|0)!=(0|0);
 $$018 = $18;
 STACKTOP = sp;return ($$018|0);
}
function _liq_image_get_row_f($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$017$i = 0, $$sroa$0$0$$sroa_idx$i = 0, $$sroa$015$0$$sroa_idx$i = 0, $$sroa$015$0$copyload$i = 0, $$sroa$2$0$$sroa_idx12$i = 0, $$sroa$3$0$$sroa_idx13$i = 0, $$sroa$4$0$$sroa_idx14$i = 0, $$sroa$416$0$$sroa_idx$i = 0, $$sroa$416$0$copyload$i = 0, $$sroa$5$0$$sroa_idx$i = 0, $$sroa$5$0$copyload$i = 0, $$sroa$6$0$$sroa_idx$i = 0, $$sroa$6$0$copyload$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0.0;
 var $16 = 0, $17 = 0, $18 = 0.0, $19 = 0.0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0.0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1024|0);
 $2 = sp;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $31 = ((($0)) + 32|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = Math_imul($32, $1)|0;
  $34 = (($4) + ($33<<4)|0);
  $$0 = $34;
  STACKTOP = sp;return ($$0|0);
 }
 $6 = ((($0)) + 24|0);
 $7 = +HEAPF64[$6>>3];
 _to_f_set_gamma($2,$7);
 $8 = ((($0)) + 60|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_liq_image_get_row_rgba($0,$1)|0);
 $11 = ((($0)) + 32|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(0);
 if (!($13)) {
  $$017$i = 0;
  while(1) {
   $$sroa$015$0$$sroa_idx$i = (($10) + ($$017$i<<2)|0);
   $$sroa$015$0$copyload$i = HEAP8[$$sroa$015$0$$sroa_idx$i>>0]|0;
   $$sroa$416$0$$sroa_idx$i = (((($10) + ($$017$i<<2)|0)) + 1|0);
   $$sroa$416$0$copyload$i = HEAP8[$$sroa$416$0$$sroa_idx$i>>0]|0;
   $$sroa$5$0$$sroa_idx$i = (((($10) + ($$017$i<<2)|0)) + 2|0);
   $$sroa$5$0$copyload$i = HEAP8[$$sroa$5$0$$sroa_idx$i>>0]|0;
   $$sroa$6$0$$sroa_idx$i = (((($10) + ($$017$i<<2)|0)) + 3|0);
   $$sroa$6$0$copyload$i = HEAP8[$$sroa$6$0$$sroa_idx$i>>0]|0;
   $14 = (+($$sroa$6$0$copyload$i&255));
   $15 = $14 / 255.0;
   $16 = $$sroa$015$0$copyload$i&255;
   $17 = (($2) + ($16<<2)|0);
   $18 = +HEAPF32[$17>>2];
   $19 = $18 * $15;
   $20 = $$sroa$416$0$copyload$i&255;
   $21 = (($2) + ($20<<2)|0);
   $22 = +HEAPF32[$21>>2];
   $23 = $15 * $22;
   $24 = $$sroa$5$0$copyload$i&255;
   $25 = (($2) + ($24<<2)|0);
   $26 = +HEAPF32[$25>>2];
   $27 = $15 * $26;
   $$sroa$0$0$$sroa_idx$i = (($9) + ($$017$i<<4)|0);
   HEAPF32[$$sroa$0$0$$sroa_idx$i>>2] = $15;
   $$sroa$2$0$$sroa_idx12$i = (((($9) + ($$017$i<<4)|0)) + 4|0);
   HEAPF32[$$sroa$2$0$$sroa_idx12$i>>2] = $19;
   $$sroa$3$0$$sroa_idx13$i = (((($9) + ($$017$i<<4)|0)) + 8|0);
   HEAPF32[$$sroa$3$0$$sroa_idx13$i>>2] = $23;
   $$sroa$4$0$$sroa_idx14$i = (((($9) + ($$017$i<<4)|0)) + 12|0);
   HEAPF32[$$sroa$4$0$$sroa_idx14$i>>2] = $27;
   $28 = (($$017$i) + 1)|0;
   $29 = HEAP32[$11>>2]|0;
   $30 = ($28>>>0)<($29>>>0);
   if ($30) {
    $$017$i = $28;
   } else {
    break;
   }
  }
 }
 $$0 = $9;
 STACKTOP = sp;return ($$0|0);
}
function _liq_set_dithering_level($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$0 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_liq_crash_if_invalid_handle_pointer_given($0,18536)|0);
 if (!($2)) {
  $$0 = 105;
  return ($$0|0);
 }
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = (_liq_crash_if_invalid_handle_pointer_given($4,18547)|0);
  if ($6) {
   $7 = ((($4)) + 16|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ($8|0)==(0|0);
   if (!($9)) {
    _pam_freecolormap($8);
   }
   $10 = ((($4)) + 12|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   $$pre$i = ((($4)) + 8|0);
   if (!($12)) {
    $13 = HEAP32[$$pre$i>>2]|0;
    FUNCTION_TABLE_vi[$13 & 63]($11);
   }
   HEAP32[$4>>2] = 18496;
   $14 = HEAP32[$$pre$i>>2]|0;
   FUNCTION_TABLE_vi[$14 & 63]($4);
  }
  HEAP32[$3>>2] = 0;
 }
 $15 = ((($0)) + 1056|0);
 $16 = +HEAPF32[$15>>2];
 $17 = $16 < 0.0;
 $18 = $16 > 1.0;
 $or$cond = $17 | $18;
 if ($or$cond) {
  $$0 = 100;
  return ($$0|0);
 }
 HEAPF32[$15>>2] = $1;
 $$0 = 0;
 return ($$0|0);
}
function _liq_get_output_gamma($0) {
 $0 = $0|0;
 var $$0 = 0.0, $1 = 0, $2 = 0, $3 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_liq_crash_if_invalid_handle_pointer_given($0,18536)|0);
 if (!($1)) {
  $$0 = -1.0;
  return (+$$0);
 }
 $2 = ((($0)) + 1064|0);
 $3 = +HEAPF64[$2>>3];
 $$0 = $3;
 return (+$$0);
}
function _liq_result_destroy($0) {
 $0 = $0|0;
 var $$pre$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_liq_crash_if_invalid_handle_pointer_given($0,18536)|0);
 if (!($1)) {
  return;
 }
 $2 = ((($0)) + 28|0);
 _memset(($2|0),0,1028)|0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 28|0);
  _memset(($6|0),0,1028)|0;
  $7 = HEAP32[$3>>2]|0;
  $8 = (_liq_crash_if_invalid_handle_pointer_given($7,18547)|0);
  if ($8) {
   $9 = ((($7)) + 16|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(0|0);
   if (!($11)) {
    _pam_freecolormap($10);
   }
   $12 = ((($7)) + 12|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0|0);
   $$pre$i = ((($7)) + 8|0);
   if (!($14)) {
    $15 = HEAP32[$$pre$i>>2]|0;
    FUNCTION_TABLE_vi[$15 & 63]($13);
   }
   HEAP32[$7>>2] = 18496;
   $16 = HEAP32[$$pre$i>>2]|0;
   FUNCTION_TABLE_vi[$16 & 63]($7);
  }
 }
 $17 = ((($0)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 _pam_freecolormap($18);
 HEAP32[$0>>2] = 18496;
 $19 = ((($0)) + 8|0);
 $20 = HEAP32[$19>>2]|0;
 FUNCTION_TABLE_vi[$20 & 63]($0);
 return;
}
function _liq_get_quantization_error($0) {
 $0 = $0|0;
 var $$0 = 0.0, $1 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_liq_crash_if_invalid_handle_pointer_given($0,18536)|0);
 if (!($1)) {
  $$0 = -1.0;
  return (+$$0);
 }
 $2 = ((($0)) + 1072|0);
 $3 = +HEAPF64[$2>>3];
 $4 = !($3 >= 0.0);
 if ($4) {
  $$0 = -1.0;
  return (+$$0);
 }
 $5 = $3 * 65536.0;
 $6 = $5 / 6.0;
 $$0 = $6;
 return (+$$0);
}
function _liq_get_quantization_quality($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i$i = 0.0, $$068$i = 0, $1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0.0, $4 = 0, $5 = 0.0;
 var $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0, $cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_liq_crash_if_invalid_handle_pointer_given($0,18536)|0);
 if (!($1)) {
  $$0 = -1;
  return ($$0|0);
 }
 $2 = ((($0)) + 1072|0);
 $3 = +HEAPF64[$2>>3];
 $4 = !($3 >= 0.0);
 if ($4) {
  $$0 = -1;
  return ($$0|0);
 }
 $$068$i = 100;
 while(1) {
  $cond$i = ($$068$i|0)==(100);
  if ($cond$i) {
   $$0$i$i = 0.0;
  } else {
   $5 = (+($$068$i|0));
   $6 = $5 + 0.001;
   $7 = 0.016 / $6;
   $8 = $7 + -0.001;
   $9 = $8 < 0.0;
   $10 = $9 ? 0.0 : $8;
   $11 = $5 + 210.0;
   $12 = (+Math_pow((+$11),1.2));
   $13 = 2.5 / $12;
   $14 = 100.09999999999999 - $5;
   $15 = $14 * $13;
   $16 = $15 / 100.0;
   $17 = $10 + $16;
   $$0$i$i = $17;
  }
  $18 = $$0$i$i + 9.9999999999999995E-7;
  $19 = !($18 >= $3);
  if (!($19)) {
   $$0 = $$068$i;
   label = 8;
   break;
  }
  $20 = (($$068$i) + -1)|0;
  $21 = ($$068$i>>>0)>(1);
  if ($21) {
   $$068$i = $20;
  } else {
   $$0 = 0;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  return ($$0|0);
 }
 return (0)|0;
}
function _liq_get_palette($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_liq_crash_if_invalid_handle_pointer_given($0,18536)|0);
 if (!($1)) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  $5 = ((($3)) + 28|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0);
  if (!($7)) {
   $$0 = $5;
   return ($$0|0);
  }
 }
 $8 = ((($0)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $$0 = $8;
  return ($$0|0);
 }
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 1064|0);
 $14 = +HEAPF64[$13>>3];
 $15 = ((($0)) + 1080|0);
 $16 = HEAP32[$15>>2]|0;
 _set_rounded_palette($8,$12,$14,$16);
 $$0 = $8;
 return ($$0|0);
}
function _set_rounded_palette($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = $3|0;
 var $$047 = 0, $$sink$i = 0, $$sink25$i = 0, $$sink26$i = 0, $$sink27$i = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$026$0 = 0, $$sroa$032$0$$sroa_idx = 0, $$sroa$032$0$copyload = 0.0, $$sroa$13$0 = 0, $$sroa$2$0$$sroa_idx = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$434$0$$sroa_idx35 = 0, $$sroa$434$0$copyload = 0.0, $$sroa$5$0$$sroa_idx37 = 0, $$sroa$5$0$copyload = 0.0, $$sroa$6$0$$sroa_idx39 = 0, $$sroa$6$0$copyload = 0.0, $$sroa$8$0 = 0;
 var $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0, $29 = 0;
 var $30 = 0.0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0;
 var $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select45 = 0, $spec$select46 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1024|0);
 $4 = sp;
 _to_f_set_gamma($4,$2);
 $5 = HEAP32[$1>>2]|0;
 HEAP32[$0>>2] = $5;
 $6 = HEAP32[$1>>2]|0;
 $7 = ($6|0)==(0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = -1 << $3;
 $9 = (8 - ($3))|0;
 $10 = $2;
 $11 = $10 / 0.54989999532699585;
 $$047 = 0;
 while(1) {
  $$sroa$032$0$$sroa_idx = (((($1)) + 12|0) + (($$047*24)|0)|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$032$0$$sroa_idx>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$032$0$$sroa_idx+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$032$0$$sroa_idx+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$032$0$$sroa_idx+3>>0];$$sroa$032$0$copyload = +HEAPF32[tempDoublePtr>>2];
  $$sroa$434$0$$sroa_idx35 = (((((($1)) + 12|0) + (($$047*24)|0)|0)) + 4|0);
  $$sroa$5$0$$sroa_idx37 = (((((($1)) + 12|0) + (($$047*24)|0)|0)) + 8|0);
  $$sroa$6$0$$sroa_idx39 = (((((($1)) + 12|0) + (($$047*24)|0)|0)) + 12|0);
  $12 = $$sroa$032$0$copyload < 0.00390625;
  if ($12) {
   $$sink$i = 0;$$sink25$i = 0;$$sink26$i = 0;$$sink27$i = 0;
  } else {
   HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$6$0$$sroa_idx39>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$6$0$$sroa_idx39+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$6$0$$sroa_idx39+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$6$0$$sroa_idx39+3>>0];$$sroa$6$0$copyload = +HEAPF32[tempDoublePtr>>2];
   HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$5$0$$sroa_idx37>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$5$0$$sroa_idx37+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$5$0$$sroa_idx37+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$5$0$$sroa_idx37+3>>0];$$sroa$5$0$copyload = +HEAPF32[tempDoublePtr>>2];
   HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$434$0$$sroa_idx35>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$434$0$$sroa_idx35+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$434$0$$sroa_idx35+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$434$0$$sroa_idx35+3>>0];$$sroa$434$0$copyload = +HEAPF32[tempDoublePtr>>2];
   $13 = $$sroa$434$0$copyload / $$sroa$032$0$copyload;
   $14 = $$sroa$5$0$copyload / $$sroa$032$0$copyload;
   $15 = $$sroa$6$0$copyload / $$sroa$032$0$copyload;
   $16 = (+Math_pow((+$13),(+$11)));
   $17 = (+Math_pow((+$14),(+$11)));
   $18 = (+Math_pow((+$15),(+$11)));
   $19 = $16 * 256.0;
   $20 = $17 * 256.0;
   $21 = $18 * 256.0;
   $22 = $$sroa$032$0$copyload * 256.0;
   $23 = $19 >= 255.0;
   $24 = $23 ? 255.0 : $19;
   $25 = (~~(($24))&255);
   $26 = $20 >= 255.0;
   $27 = $26 ? 255.0 : $20;
   $28 = (~~(($27))&255);
   $29 = $21 >= 255.0;
   $30 = $29 ? 255.0 : $21;
   $31 = (~~(($30))&255);
   $32 = $22 >= 255.0;
   $33 = $32 ? 255.0 : $22;
   $34 = (~~(($33))&255);
   $$sink$i = $34;$$sink25$i = $31;$$sink26$i = $28;$$sink27$i = $25;
  }
  $35 = $$sink27$i&255;
  $36 = $8 & $35;
  $37 = $35 >>> $9;
  $38 = $36 | $37;
  $39 = $38&255;
  $40 = $$sink26$i&255;
  $41 = $8 & $40;
  $42 = $40 >>> $9;
  $43 = $41 | $42;
  $44 = $43&255;
  $45 = $$sink25$i&255;
  $46 = $8 & $45;
  $47 = $45 >>> $9;
  $48 = $46 | $47;
  $49 = $48&255;
  $50 = $$sink$i&255;
  $51 = $8 & $50;
  $52 = $50 >>> $9;
  $53 = $51 | $52;
  $54 = $53&255;
  $55 = (+($54&255));
  $56 = $55 / 255.0;
  $57 = $38 & 255;
  $58 = (($4) + ($57<<2)|0);
  $59 = +HEAPF32[$58>>2];
  $60 = $59 * $56;
  $61 = $43 & 255;
  $62 = (($4) + ($61<<2)|0);
  $63 = +HEAPF32[$62>>2];
  $64 = $63 * $56;
  $65 = $48 & 255;
  $66 = (($4) + ($65<<2)|0);
  $67 = +HEAPF32[$66>>2];
  $68 = $67 * $56;
  HEAPF32[$$sroa$032$0$$sroa_idx>>2] = $56;
  HEAPF32[$$sroa$434$0$$sroa_idx35>>2] = $60;
  HEAPF32[$$sroa$5$0$$sroa_idx37>>2] = $64;
  HEAPF32[$$sroa$6$0$$sroa_idx39>>2] = $68;
  $69 = ($54<<24>>24)==(0);
  if ($69) {
   $70 = (((((($1)) + 12|0) + (($$047*24)|0)|0)) + 20|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = ($71<<24>>24)==(0);
   $spec$select = $72 ? 71 : $39;
   $spec$select45 = $72 ? 112 : $44;
   $spec$select46 = $72 ? 76 : $49;
   $$sroa$026$0 = $spec$select;$$sroa$13$0 = $spec$select46;$$sroa$8$0 = $spec$select45;
  } else {
   $$sroa$026$0 = $39;$$sroa$13$0 = $49;$$sroa$8$0 = $44;
  }
  $$sroa$0$0$$sroa_idx = (((($0)) + 4|0) + ($$047<<2)|0);
  HEAP8[$$sroa$0$0$$sroa_idx>>0] = $$sroa$026$0;
  $$sroa$2$0$$sroa_idx = (((((($0)) + 4|0) + ($$047<<2)|0)) + 1|0);
  HEAP8[$$sroa$2$0$$sroa_idx>>0] = $$sroa$8$0;
  $$sroa$3$0$$sroa_idx = (((((($0)) + 4|0) + ($$047<<2)|0)) + 2|0);
  HEAP8[$$sroa$3$0$$sroa_idx>>0] = $$sroa$13$0;
  $$sroa$4$0$$sroa_idx = (((((($0)) + 4|0) + ($$047<<2)|0)) + 3|0);
  HEAP8[$$sroa$4$0$$sroa_idx>>0] = $54;
  $73 = (($$047) + 1)|0;
  $74 = HEAP32[$1>>2]|0;
  $75 = ($73>>>0)<($74>>>0);
  if ($75) {
   $$047 = $73;
  } else {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _liq_write_remapped_image_rows($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i$i = 0.0, $$$i$i$i$i = 0.0, $$$i4$i$i$i = 0.0, $$$i5$i$i$i = 0.0, $$0$$i$i = 0.0, $$0$75$i$i = 0.0, $$0$i$i = 0.0, $$0105$i = 0, $$0245$i = 0.0, $$0246323$i = 0, $$0246323$i$phi = 0, $$0247322$i = 0, $$0247322$i$phi = 0, $$0248$i = 0, $$0249321$i = 0, $$0250320$i = 0, $$0252319$i = 0, $$066100 = 0, $$069 = 0.0, $$073$i$i = 0.0;
 var $$076101$i = 0, $$076101$i$us = 0, $$07789$i = 0, $$07789$i$us = 0, $$07789$us$us$i$us = 0, $$078$lcssa$i = 0, $$078$lcssa$i$us = 0, $$07888$i = 0, $$07888$i$us = 0, $$07888$us$us$i$us = 0, $$081100$i = 0, $$081100$i$us = 0, $$08594$i = 0, $$08594$i$us = 0, $$1$$i$i = 0.0, $$1$76$i$i = 0.0, $$1$i$i = 0.0, $$1251$i = 0, $$170 = 0.0, $$18290$i = 0;
 var $$18290$i$us = 0, $$2$i = 0, $$2$i$i = 0.0, $$2$i$us = 0, $$3$i$i = 0.0, $$384$i = 0, $$384$i$us = 0, $$4 = 0, $$74$i$i = 0.0, $$not101 = 0, $$pre = 0, $$pre$i = 0, $$pre$i74 = 0, $$pre$i74$us = 0, $$pre$phi121$iZ2D = 0, $$pre106 = 0, $$pre116$i = 0, $$pre117$i$us = 0, $$pre118$i = 0, $$pre120$i = 0;
 var $$sink = 0, $$sink$in = 0, $$sroa$0$0$$sroa_idx$i78 = 0, $$sroa$0$0$copyload$i = 0.0, $$sroa$0$0$i = 0.0, $$sroa$0$0316$i = 0.0, $$sroa$0278$0$$sroa_idx$i = 0, $$sroa$0278$0$copyload$i = 0.0, $$sroa$0286$0$$sroa_idx287$i = 0, $$sroa$0286$0$copyload288$i = 0.0, $$sroa$0305$0$$sroa_idx$i = 0, $$sroa$0305$0$copyload$i = 0.0, $$sroa$10$0$$sroa_idx12$i = 0, $$sroa$11$0$$sroa_idx272$i = 0, $$sroa$11$0$copyload$i = 0.0, $$sroa$11$0$i = 0.0, $$sroa$13$0$$sroa_raw_idx$i = 0, $$sroa$14$0$i = 0.0, $$sroa$27$0$i = 0.0, $$sroa$3$0$$sroa_idx1$i = 0;
 var $$sroa$4$0$$sroa_idx2$i = 0, $$sroa$4$0$$sroa_idx280$i = 0, $$sroa$4$0$copyload$i = 0.0, $$sroa$40$0$i = 0.0, $$sroa$4307$0$$sroa_idx308$i = 0, $$sroa$4307$0$copyload$i = 0.0, $$sroa$5$0$$sroa_idx282$i = 0, $$sroa$5$0$$sroa_idx3$i = 0, $$sroa$5$0$copyload$i = 0.0, $$sroa$5290$0$$sroa_idx292$i = 0, $$sroa$5290$0$copyload293$i = 0.0, $$sroa$5310$0$$sroa_idx311$i = 0, $$sroa$5310$0$copyload$i = 0.0, $$sroa$54$0$$sroa_idx5$i = 0, $$sroa$6$0$$sroa_idx284$i = 0, $$sroa$6$0$$sroa_idx6$i = 0, $$sroa$6$0$copyload$i = 0.0, $$sroa$6295$0$$sroa_idx297$i = 0, $$sroa$6295$0$copyload298$i = 0.0, $$sroa$6313$0$$sroa_idx314$i = 0;
 var $$sroa$6313$0$copyload$i = 0.0, $$sroa$7$0$$sroa_idx260$i = 0, $$sroa$7$0$$sroa_idx7$i = 0, $$sroa$7$0$copyload$i = 0.0, $$sroa$7$0$i = 0.0, $$sroa$7300$0$$sroa_idx302$i = 0, $$sroa$7300$0$copyload303$i = 0.0, $$sroa$8$0$$sroa_idx$i = 0, $$sroa$89$0$$sroa_idx10$i = 0, $$sroa$9$0$$sroa_idx11$i = 0, $$sroa$9$0$$sroa_idx266$i = 0, $$sroa$9$0$copyload$i = 0.0, $$sroa$9$0$i = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0.0;
 var $142 = 0.0, $143 = 0.0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0.0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0.0, $186 = 0.0, $187 = 0.0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0, $211 = 0, $212 = 0.0, $213 = 0.0, $214 = 0;
 var $215 = 0.0, $216 = 0.0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0;
 var $251 = 0.0, $252 = 0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0.0, $268 = 0.0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0.0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0.0;
 var $288 = 0.0, $289 = 0, $29 = 0, $290 = 0.0, $291 = 0.0, $292 = 0.0, $293 = 0.0, $294 = 0.0, $295 = 0, $296 = 0.0, $297 = 0.0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0.0, $301 = 0.0, $302 = 0, $303 = 0.0, $304 = 0;
 var $305 = 0.0, $306 = 0.0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0, $312 = 0.0, $313 = 0, $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0.0, $322 = 0;
 var $323 = 0, $324 = 0.0, $325 = 0.0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0, $332 = 0.0, $333 = 0, $334 = 0.0, $335 = 0.0, $336 = 0.0, $337 = 0.0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0.0, $347 = 0.0, $348 = 0.0, $349 = 0.0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0, $355 = 0.0, $356 = 0.0, $357 = 0.0, $358 = 0.0, $359 = 0.0;
 var $36 = 0, $360 = 0.0, $361 = 0, $362 = 0.0, $363 = 0.0, $364 = 0.0, $365 = 0.0, $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0.0, $373 = 0, $374 = 0, $375 = 0, $376 = 0.0, $377 = 0.0;
 var $378 = 0.0, $379 = 0.0, $38 = 0, $380 = 0.0, $381 = 0.0, $382 = 0.0, $383 = 0.0, $384 = 0.0, $385 = 0.0, $386 = 0.0, $387 = 0.0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0, $392 = 0.0, $393 = 0.0, $394 = 0.0, $395 = 0.0;
 var $396 = 0.0, $397 = 0, $398 = 0, $399 = 0.0, $4 = 0, $40 = 0, $400 = 0.0, $401 = 0.0, $402 = 0, $403 = 0.0, $404 = 0.0, $405 = 0.0, $406 = 0, $407 = 0.0, $408 = 0.0, $409 = 0.0, $41 = 0, $410 = 0, $411 = 0.0, $412 = 0.0;
 var $413 = 0.0, $414 = 0, $415 = 0.0, $416 = 0, $417 = 0.0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0.0, $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0, $427 = 0.0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0;
 var $431 = 0.0, $432 = 0.0, $433 = 0.0, $434 = 0, $435 = 0.0, $436 = 0.0, $437 = 0.0, $438 = 0, $439 = 0.0, $44 = 0, $440 = 0.0, $441 = 0.0, $442 = 0, $443 = 0.0, $444 = 0.0, $445 = 0.0, $446 = 0, $447 = 0.0, $448 = 0.0, $449 = 0.0;
 var $45 = 0, $450 = 0, $451 = 0.0, $452 = 0.0, $453 = 0, $454 = 0, $455 = 0, $456 = 0.0, $457 = 0.0, $458 = 0.0, $459 = 0, $46 = 0.0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0, $464 = 0.0, $465 = 0.0, $466 = 0.0, $467 = 0;
 var $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0, $472 = 0.0, $473 = 0, $474 = 0.0, $475 = 0, $476 = 0.0, $477 = 0, $478 = 0.0, $479 = 0, $48 = 0.0, $480 = 0.0, $481 = 0.0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0.0;
 var $486 = 0.0, $487 = 0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0, $492 = 0.0, $493 = 0.0, $494 = 0.0, $495 = 0, $496 = 0, $497 = 0.0, $498 = 0.0, $499 = 0.0, $5 = 0, $50 = 0, $500 = 0, $501 = 0.0, $502 = 0.0;
 var $503 = 0.0, $504 = 0, $505 = 0.0, $506 = 0.0, $507 = 0.0, $508 = 0, $509 = 0.0, $51 = 0, $510 = 0.0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0.0, $525 = 0, $526 = 0.0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0, $78 = 0;
 var $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0.0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0.0, $99 = 0, $brmerge = 0, $exitcond$i = 0, $exitcond$i$us = 0, $exitcond112$i$us = 0, $exitcond113$i = 0, $exitcond113$i$us = 0, $exitcond114$i = 0, $exitcond114$i$us = 0, $exitcond115$i = 0, $indvars$iv$i = 0, $indvars$iv$i$us = 0, $indvars$iv$next$i = 0, $indvars$iv$next$i$us = 0, $or$cond$i = 0, $or$cond$i$us = 0, $spec$select = 0, $spec$select$i = 0;
 var $spec$select$i$us = 0, $spec$select$i76 = 0.0, $spec$select87$i$us = 0, $spec$select87$us$us$i$us = 0, $storemerge$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $3 = sp + 24|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = (_liq_crash_if_invalid_handle_pointer_given($0,18536)|0);
 if (!($6)) {
  $$4 = 105;
  STACKTOP = sp;return ($$4|0);
 }
 $7 = (_liq_crash_if_invalid_handle_pointer_given($1,18568)|0);
 if (!($7)) {
  $$4 = 105;
  STACKTOP = sp;return ($$4|0);
 }
 $8 = ((($1)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 L7: do {
  if (!($10)) {
   $$066100 = 0;
   while(1) {
    $14 = (($2) + ($$066100<<2)|0);
    $15 = (_liq_crash_if_invalid_pointer_given($14)|0);
    if (!($15)) {
     $$4 = 105;
     label = 125;
     break;
    }
    $16 = HEAP32[$14>>2]|0;
    $17 = (_liq_crash_if_invalid_pointer_given($16)|0);
    $12 = (($$066100) + 1)|0;
    if (!($17)) {
     $$4 = 105;
     label = 125;
     break;
    }
    $11 = HEAP32[$8>>2]|0;
    $13 = ($12>>>0)<($11>>>0);
    if ($13) {
     $$066100 = $12;
    } else {
     break L7;
    }
   }
   if ((label|0) == 125) {
    STACKTOP = sp;return ($$4|0);
   }
  }
 } while(0);
 $18 = ((($0)) + 12|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if (!($20)) {
  $21 = (_liq_crash_if_invalid_handle_pointer_given($19,18547)|0);
  if ($21) {
   $22 = ((($19)) + 16|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(0|0);
   if (!($24)) {
    _pam_freecolormap($23);
   }
   $25 = ((($19)) + 12|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)==(0|0);
   $$pre$i = ((($19)) + 8|0);
   if (!($27)) {
    $28 = HEAP32[$$pre$i>>2]|0;
    FUNCTION_TABLE_vi[$28 & 63]($26);
   }
   HEAP32[$19>>2] = 18496;
   $29 = HEAP32[$$pre$i>>2]|0;
   FUNCTION_TABLE_vi[$29 & 63]($19);
  }
 }
 $30 = (_liq_crash_if_invalid_handle_pointer_given($0,18536)|0);
 if ($30) {
  $31 = ((($0)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = (FUNCTION_TABLE_ii[$32 & 63](1080)|0);
  $34 = ($33|0)==(0|0);
  if (!($34)) {
   $35 = HEAP32[$31>>2]|0;
   $36 = ((($0)) + 8|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ((($0)) + 16|0);
   $39 = HEAP32[$38>>2]|0;
   $40 = (_pam_duplicate_colormap($39)|0);
   $41 = ((($0)) + 20|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($0)) + 24|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ((($0)) + 1064|0);
   $46 = +HEAPF64[$45>>3];
   $47 = ((($0)) + 1072|0);
   $48 = +HEAPF64[$47>>3];
   $49 = ((($0)) + 1056|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = ((($0)) + 1084|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = ($52<<24>>24)==(0);
   $54 = $53 ? 0 : 20;
   HEAP32[$33>>2] = 18547;
   $$sroa$3$0$$sroa_idx1$i = ((($33)) + 4|0);
   HEAP32[$$sroa$3$0$$sroa_idx1$i>>2] = $35;
   $$sroa$4$0$$sroa_idx2$i = ((($33)) + 8|0);
   HEAP32[$$sroa$4$0$$sroa_idx2$i>>2] = $37;
   $$sroa$5$0$$sroa_idx3$i = ((($33)) + 12|0);
   HEAP32[$$sroa$5$0$$sroa_idx3$i>>2] = 0;
   $$sroa$54$0$$sroa_idx5$i = ((($33)) + 16|0);
   HEAP32[$$sroa$54$0$$sroa_idx5$i>>2] = $40;
   $$sroa$6$0$$sroa_idx6$i = ((($33)) + 20|0);
   HEAP32[$$sroa$6$0$$sroa_idx6$i>>2] = $42;
   $$sroa$7$0$$sroa_idx7$i = ((($33)) + 24|0);
   HEAP32[$$sroa$7$0$$sroa_idx7$i>>2] = $44;
   $$sroa$8$0$$sroa_idx$i = ((($33)) + 28|0);
   _memset(($$sroa$8$0$$sroa_idx$i|0),0,1028)|0;
   $$sroa$89$0$$sroa_idx10$i = ((($33)) + 1056|0);
   HEAPF64[$$sroa$89$0$$sroa_idx10$i>>3] = $46;
   $$sroa$9$0$$sroa_idx11$i = ((($33)) + 1064|0);
   HEAPF64[$$sroa$9$0$$sroa_idx11$i>>3] = $48;
   $$sroa$10$0$$sroa_idx12$i = ((($33)) + 1072|0);
   HEAP32[$$sroa$10$0$$sroa_idx12$i>>2] = $50;
   $55 = ((($33)) + 1076|0);
   HEAP8[$55>>0] = $52;
   $56 = ((($33)) + 1077|0);
   HEAP8[$56>>0] = $54;
   $$sroa$13$0$$sroa_raw_idx$i = ((($33)) + 1078|0);
   HEAP16[$$sroa$13$0$$sroa_raw_idx$i>>1] = 0;
   HEAP32[$18>>2] = $33;
   $57 = ((($1)) + 44|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($58|0)==(0|0);
   $60 = $42;
   if ($59) {
    $61 = ((($1)) + 48|0);
    $62 = HEAP32[$61>>2]|0;
    $63 = ($62|0)==(0|0);
    if ($63) {
     $64 = HEAP8[$51>>0]|0;
     $65 = ($64<<24>>24)==(0);
     if ($65) {
      $66 = $60;
     } else {
      _contrast_maps($1);
      $$pre = HEAP32[$$sroa$6$0$$sroa_idx6$i>>2]|0;
      $66 = $$pre;
     }
    } else {
     $66 = $60;
    }
   } else {
    $66 = $60;
   }
   $67 = ($66|0)==(0|0);
   if (!($67)) {
    $68 = HEAP8[$56>>0]|0;
    $69 = (+($68&255));
    $70 = $69 * 0.25;
    $71 = HEAP32[$$sroa$7$0$$sroa_idx7$i>>2]|0;
    $72 = (FUNCTION_TABLE_idi[$66 & 0]($70,$71)|0);
    $73 = ($72|0)==(0);
    if ($73) {
     $$4 = 102;
     STACKTOP = sp;return ($$4|0);
    }
   }
   $74 = +HEAPF64[$$sroa$9$0$$sroa_idx11$i>>3];
   $75 = $74;
   $76 = +HEAPF32[$$sroa$10$0$$sroa_idx12$i>>2];
   $77 = $76 == 0.0;
   L39: do {
    if ($77) {
     $78 = HEAP32[$$sroa$54$0$$sroa_idx5$i>>2]|0;
     $79 = +HEAPF64[$$sroa$89$0$$sroa_idx10$i>>3];
     $80 = ((($0)) + 1080|0);
     $81 = HEAP32[$80>>2]|0;
     _set_rounded_palette($$sroa$8$0$$sroa_idx$i,$78,$79,$81);
     $82 = HEAP32[$$sroa$54$0$$sroa_idx5$i>>2]|0;
     $83 = (+_remap_to_palette($1,$2,$82));
     $$170 = $83;
    } else {
     $84 = HEAP8[$55>>0]|0;
     $85 = ($84<<24>>24)==(2);
     if ($85) {
      label = 28;
     } else {
      $86 = ((($1)) + 32|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = HEAP32[$8>>2]|0;
      $89 = Math_imul($88, $87)|0;
      $90 = ($89>>>0)<(4000001);
      $91 = ($84<<24>>24)!=(0);
      $spec$select = $91 & $90;
      if ($spec$select) {
       label = 28;
      } else {
       $$069 = $75;$531 = 0;
      }
     }
     if ((label|0) == 28) {
      $92 = HEAP32[$57>>2]|0;
      $93 = ($92|0)==(0|0);
      if ($93) {
       $$069 = $75;$531 = 0;
      } else {
       $94 = ((($1)) + 48|0);
       $95 = HEAP32[$94>>2]|0;
       $96 = ($95|0)==(0|0);
       if ($96) {
        $97 = HEAP32[$$sroa$54$0$$sroa_idx5$i>>2]|0;
        $98 = (+_remap_to_palette($1,$2,$97));
        $99 = HEAP32[$$sroa$54$0$$sroa_idx5$i>>2]|0;
        $100 = ((($1)) + 32|0);
        $101 = HEAP32[$100>>2]|0;
        $102 = HEAP32[$8>>2]|0;
        $103 = HEAP32[$57>>2]|0;
        $104 = ($102|0)==(0);
        if ($104) {
         $105 = $103;
         $199 = $105;
        } else {
         $106 = ($101>>>0)>(1);
         $107 = ((($1)) + 72|0);
         $108 = (($101) + -1)|0;
         $109 = (($102) + -1)|0;
         $$0105$i = 0;
         while(1) {
          $110 = (($2) + ($$0105$i<<2)|0);
          L53: do {
           if ($106) {
            $111 = HEAP32[$110>>2]|0;
            $112 = HEAP8[$111>>0]|0;
            $113 = ($$0105$i|0)==(0);
            $114 = ($$0105$i>>>0)<($109>>>0);
            $115 = (($$0105$i) + -1)|0;
            $116 = (($2) + ($115<<2)|0);
            $117 = (($$0105$i) + 1)|0;
            $118 = (($2) + ($117<<2)|0);
            $119 = Math_imul($$0105$i, $101)|0;
            if ($113) {
             $$not101 = $114 ^ 1;
             $$076101$i$us = $112;$$081100$i$us = 0;$$08594$i$us = 1;$121 = $111;$indvars$iv$i$us = 2;
             while(1) {
              $120 = (($121) + ($$08594$i$us)|0);
              $122 = HEAP8[$120>>0]|0;
              $123 = HEAP32[$107>>2]|0;
              $124 = ($123|0)==(0|0);
              if ($124) {
               label = 41;
              } else {
               $125 = $122&255;
               $126 = (((($99)) + 12|0) + (($125*24)|0)|0);
               $127 = +HEAPF32[$126>>2];
               $128 = $127 < 0.00390625;
               if ($128) {
                $$2$i$us = $$076101$i$us;$$384$i$us = $$081100$i$us;
               } else {
                label = 41;
               }
              }
              do {
               if ((label|0) == 41) {
                label = 0;
                $129 = ($122<<24>>24)!=($$076101$i$us<<24>>24);
                $130 = ($$08594$i$us|0)==($108|0);
                $or$cond$i$us = $130 | $129;
                if (!($or$cond$i$us)) {
                 $$2$i$us = $$076101$i$us;$$384$i$us = $$081100$i$us;
                 break;
                }
                $131 = (($$08594$i$us) - ($$081100$i$us))|0;
                $132 = ($131*10)|0;
                $133 = ($$08594$i$us>>>0)<=($$081100$i$us>>>0);
                $brmerge = $133 | $$not101;
                if ($brmerge) {
                 $$078$lcssa$i$us = $132;
                } else {
                 $$pre117$i$us = HEAP32[$118>>2]|0;
                 $$07789$us$us$i$us = $$081100$i$us;$$07888$us$us$i$us = $132;
                 while(1) {
                  $134 = (($$pre117$i$us) + ($$07789$us$us$i$us)|0);
                  $135 = HEAP8[$134>>0]|0;
                  $136 = ($135<<24>>24)==($$076101$i$us<<24>>24);
                  $137 = (($$07888$us$us$i$us) + 15)|0;
                  $spec$select87$us$us$i$us = $136 ? $137 : $$07888$us$us$i$us;
                  $138 = (($$07789$us$us$i$us) + 1)|0;
                  $exitcond112$i$us = ($138|0)==($$08594$i$us|0);
                  if ($exitcond112$i$us) {
                   $$078$lcssa$i$us = $spec$select87$us$us$i$us;
                   break;
                  } else {
                   $$07789$us$us$i$us = $138;$$07888$us$us$i$us = $spec$select87$us$us$i$us;
                  }
                 }
                }
                $139 = ($$08594$i$us>>>0)<($$081100$i$us>>>0);
                if ($139) {
                 $$2$i$us = $122;$$384$i$us = $$081100$i$us;
                 break;
                }
                $140 = (($$078$lcssa$i$us) + 20)|0;
                $141 = (+($140|0));
                $142 = 20.0 / $141;
                $143 = 1.0 - $142;
                $$18290$i$us = $$081100$i$us;
                while(1) {
                 $144 = (($$18290$i$us) + ($119))|0;
                 $145 = (($103) + ($144)|0);
                 $146 = HEAP8[$145>>0]|0;
                 $147 = $146&255;
                 $148 = (($147) + 128)|0;
                 $149 = (+($148|0));
                 $150 = $149 * 0.66579633951187134;
                 $151 = $143 * $150;
                 $152 = (~~(($151))&255);
                 $153 = (($$18290$i$us) + 1)|0;
                 HEAP8[$145>>0] = $152;
                 $exitcond113$i$us = ($153|0)==($indvars$iv$i$us|0);
                 if ($exitcond113$i$us) {
                  $$2$i$us = $122;$$384$i$us = $indvars$iv$i$us;
                  break;
                 } else {
                  $$18290$i$us = $153;
                 }
                }
               }
              } while(0);
              $exitcond114$i$us = ($indvars$iv$i$us|0)==($101|0);
              if ($exitcond114$i$us) {
               $$pre$phi121$iZ2D = $117;
               break L53;
              }
              $indvars$iv$next$i$us = (($indvars$iv$i$us) + 1)|0;
              $154 = (($$08594$i$us) + 1)|0;
              $$pre$i74$us = HEAP32[$110>>2]|0;
              $$076101$i$us = $$2$i$us;$$081100$i$us = $$384$i$us;$$08594$i$us = $154;$121 = $$pre$i74$us;$indvars$iv$i$us = $indvars$iv$next$i$us;
             }
            }
            $$076101$i = $112;$$081100$i = 0;$$08594$i = 1;$156 = $111;$indvars$iv$i = 2;
            while(1) {
             $155 = (($156) + ($$08594$i)|0);
             $157 = HEAP8[$155>>0]|0;
             $158 = HEAP32[$107>>2]|0;
             $159 = ($158|0)==(0|0);
             if ($159) {
              label = 53;
             } else {
              $160 = $157&255;
              $161 = (((($99)) + 12|0) + (($160*24)|0)|0);
              $162 = +HEAPF32[$161>>2];
              $163 = $162 < 0.00390625;
              if ($163) {
               $$2$i = $$076101$i;$$384$i = $$081100$i;
              } else {
               label = 53;
              }
             }
             do {
              if ((label|0) == 53) {
               label = 0;
               $164 = ($157<<24>>24)!=($$076101$i<<24>>24);
               $165 = ($$08594$i|0)==($108|0);
               $or$cond$i = $165 | $164;
               if (!($or$cond$i)) {
                $$2$i = $$076101$i;$$384$i = $$081100$i;
                break;
               }
               $166 = (($$08594$i) - ($$081100$i))|0;
               $167 = ($166*10)|0;
               $168 = ($$08594$i>>>0)>($$081100$i>>>0);
               if ($168) {
                $$pre116$i = HEAP32[$116>>2]|0;
                if ($114) {
                 $$pre106 = HEAP32[$118>>2]|0;
                 $$07789$i$us = $$081100$i;$$07888$i$us = $167;
                 while(1) {
                  $169 = (($$pre116$i) + ($$07789$i$us)|0);
                  $170 = HEAP8[$169>>0]|0;
                  $171 = ($170<<24>>24)==($$076101$i<<24>>24);
                  $172 = (($$07888$i$us) + 15)|0;
                  $spec$select$i$us = $171 ? $172 : $$07888$i$us;
                  $173 = (($$pre106) + ($$07789$i$us)|0);
                  $174 = HEAP8[$173>>0]|0;
                  $175 = ($174<<24>>24)==($$076101$i<<24>>24);
                  $176 = (($spec$select$i$us) + 15)|0;
                  $spec$select87$i$us = $175 ? $176 : $spec$select$i$us;
                  $177 = (($$07789$i$us) + 1)|0;
                  $exitcond$i$us = ($177|0)==($$08594$i|0);
                  if ($exitcond$i$us) {
                   $$078$lcssa$i = $spec$select87$i$us;
                   break;
                  } else {
                   $$07789$i$us = $177;$$07888$i$us = $spec$select87$i$us;
                  }
                 }
                } else {
                 $$07789$i = $$081100$i;$$07888$i = $167;
                 while(1) {
                  $178 = (($$pre116$i) + ($$07789$i)|0);
                  $179 = HEAP8[$178>>0]|0;
                  $180 = ($179<<24>>24)==($$076101$i<<24>>24);
                  $181 = (($$07888$i) + 15)|0;
                  $spec$select$i = $180 ? $181 : $$07888$i;
                  $182 = (($$07789$i) + 1)|0;
                  $exitcond$i = ($182|0)==($$08594$i|0);
                  if ($exitcond$i) {
                   $$078$lcssa$i = $spec$select$i;
                   break;
                  } else {
                   $$07789$i = $182;$$07888$i = $spec$select$i;
                  }
                 }
                }
               } else {
                $$078$lcssa$i = $167;
               }
               $183 = ($$08594$i>>>0)<($$081100$i>>>0);
               if ($183) {
                $$2$i = $157;$$384$i = $$081100$i;
                break;
               }
               $184 = (($$078$lcssa$i) + 20)|0;
               $185 = (+($184|0));
               $186 = 20.0 / $185;
               $187 = 1.0 - $186;
               $$18290$i = $$081100$i;
               while(1) {
                $188 = (($$18290$i) + ($119))|0;
                $189 = (($103) + ($188)|0);
                $190 = HEAP8[$189>>0]|0;
                $191 = $190&255;
                $192 = (($191) + 128)|0;
                $193 = (+($192|0));
                $194 = $193 * 0.66579633951187134;
                $195 = $187 * $194;
                $196 = (~~(($195))&255);
                $197 = (($$18290$i) + 1)|0;
                HEAP8[$189>>0] = $196;
                $exitcond113$i = ($197|0)==($indvars$iv$i|0);
                if ($exitcond113$i) {
                 $$2$i = $157;$$384$i = $indvars$iv$i;
                 break;
                } else {
                 $$18290$i = $197;
                }
               }
              }
             } while(0);
             $exitcond114$i = ($indvars$iv$i|0)==($101|0);
             if ($exitcond114$i) {
              $$pre$phi121$iZ2D = $117;
              break L53;
             }
             $indvars$iv$next$i = (($indvars$iv$i) + 1)|0;
             $198 = (($$08594$i) + 1)|0;
             $$pre$i74 = HEAP32[$110>>2]|0;
             $$076101$i = $$2$i;$$081100$i = $$384$i;$$08594$i = $198;$156 = $$pre$i74;$indvars$iv$i = $indvars$iv$next$i;
            }
           } else {
            $$pre120$i = (($$0105$i) + 1)|0;
            $$pre$phi121$iZ2D = $$pre120$i;
           }
          } while(0);
          $exitcond115$i = ($$pre$phi121$iZ2D|0)==($102|0);
          if ($exitcond115$i) {
           break;
          } else {
           $$0105$i = $$pre$phi121$iZ2D;
          }
         }
         $$pre118$i = HEAP32[$57>>2]|0;
         $199 = $$pre118$i;
        }
        HEAP32[$94>>2] = $199;
        HEAP32[$57>>2] = 0;
        $$069 = $98;$531 = 1;
       } else {
        $$069 = $75;$531 = 0;
       }
      }
     }
     $200 = HEAP32[$$sroa$6$0$$sroa_idx6$i>>2]|0;
     $201 = ($200|0)==(0|0);
     if (!($201)) {
      $202 = HEAP8[$56>>0]|0;
      $203 = (+($202&255));
      $204 = $203 * 0.5;
      $205 = HEAP32[$$sroa$7$0$$sroa_idx7$i>>2]|0;
      $206 = (FUNCTION_TABLE_idi[$200 & 0]($204,$205)|0);
      $207 = ($206|0)==(0);
      if ($207) {
       $$4 = 102;
       STACKTOP = sp;return ($$4|0);
      }
     }
     $208 = HEAP32[$$sroa$54$0$$sroa_idx5$i>>2]|0;
     $209 = +HEAPF64[$$sroa$89$0$$sroa_idx10$i>>3];
     $210 = ((($0)) + 1080|0);
     $211 = HEAP32[$210>>2]|0;
     _set_rounded_palette($$sroa$8$0$$sroa_idx$i,$208,$209,$211);
     $212 = $$069;
     $213 = $212 * 2.3999999999999999;
     $214 = $213 > 0.0625;
     $215 = $214 ? $213 : 0.0625;
     $216 = $215;
     $217 = HEAP32[$8>>2]|0;
     $218 = ((($1)) + 32|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = HEAP8[$55>>0]|0;
     $221 = ($220<<24>>24)==(0);
     if ($221) {
      $248 = 0;
     } else {
      $222 = ((($1)) + 48|0);
      $223 = HEAP32[$222>>2]|0;
      $224 = ($223|0)==(0|0);
      if ($224) {
       $225 = HEAP32[$57>>2]|0;
       $248 = $225;
      } else {
       $248 = $223;
      }
     }
     $226 = HEAP32[$$sroa$54$0$$sroa_idx5$i>>2]|0;
     $227 = (_liq_image_get_row_f_init($1)|0);
     do {
      if ($227) {
       $228 = ((($1)) + 72|0);
       $229 = HEAP32[$228>>2]|0;
       $230 = ($229|0)==(0|0);
       if (!($230)) {
        $231 = (_liq_image_get_row_f_init($229)|0);
        if (!($231)) {
         break;
        }
       }
       $232 = (($219) + 2)|0;
       $233 = ((($1)) + 4|0);
       $234 = HEAP32[$233>>2]|0;
       $235 = $232 << 4;
       $236 = $232 << 5;
       $237 = (FUNCTION_TABLE_ii[$234 & 63]($236)|0);
       $238 = ($237|0)==(0|0);
       if (!($238)) {
        $239 = (($237) + ($232<<4)|0);
        _memset(($237|0),0,($235|0))|0;
        $240 = (_nearest_init($226)|0);
        $241 = HEAP32[$228>>2]|0;
        $242 = ($241|0)==(0|0);
        if ($242) {
         $259 = 0;
        } else {
         ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
         $243 = (_nearest_search($240,$3,0,0)|0);
         $259 = $243;
        }
        $244 = +HEAPF32[$$sroa$10$0$$sroa_idx12$i>>2];
        $245 = 1.0 - $244;
        $246 = $245 * $245;
        $247 = 1.0 - $246;
        $249 = ($248|0)!=(0|0);
        $250 = $247 * 0.0039215688593685627;
        $spec$select$i76 = $249 ? $250 : $247;
        $251 = $spec$select$i76 * 0.9375;
        $252 = ($217|0)>(0);
        if (!($252)) {
         $520 = ((($1)) + 8|0);
         $521 = HEAP32[$520>>2]|0;
         $522 = ($239>>>0)>($237>>>0);
         $523 = $522 ? $237 : $239;
         FUNCTION_TABLE_vi[$521 & 63]($523);
         _nearest_free($240);
         $$170 = $$069;
         break L39;
        }
        $253 = (($219) + -1)|0;
        $254 = (+($217|0));
        $255 = ((($4)) + 4|0);
        $256 = ((($4)) + 8|0);
        $257 = ((($4)) + 12|0);
        $258 = (((($226)) + 12|0) + (($259*24)|0)|0);
        $$0246323$i = $237;$$0247322$i = $239;$$0249321$i = 0;$$0250320$i = 0;$$0252319$i = 1;
        while(1) {
         $260 = HEAP8[$56>>0]|0;
         $261 = (+($260&255));
         $262 = HEAP32[$$sroa$6$0$$sroa_idx6$i>>2]|0;
         $263 = ($262|0)==(0|0);
         if (!($263)) {
          $264 = 100.0 - $261;
          $265 = (+($$0249321$i|0));
          $266 = $264 * $265;
          $267 = $266 / $254;
          $268 = $267 + $261;
          $269 = HEAP32[$$sroa$7$0$$sroa_idx7$i>>2]|0;
          $270 = (FUNCTION_TABLE_idi[$262 & 0]($268,$269)|0);
          $271 = ($270|0)==(0);
          if ($271) {
           break;
          }
         }
         _memset(($$0247322$i|0),0,($235|0))|0;
         $272 = ($$0252319$i|0)>(0);
         $273 = $272 ? 0 : $253;
         $274 = (_liq_image_get_row_f($1,$$0249321$i)|0);
         $275 = HEAP32[$228>>2]|0;
         $276 = ($275|0)==(0|0);
         do {
          if ($276) {
           $282 = 0;
          } else {
           $277 = +HEAPF32[$258>>2];
           $278 = $277 < 0.00390625;
           if (!($278)) {
            $282 = 0;
            break;
           }
           $279 = (_liq_image_get_row_f($275,$$0249321$i)|0);
           $282 = $279;
          }
         } while(0);
         $280 = Math_imul($$0249321$i, $219)|0;
         $281 = (($2) + ($$0249321$i<<2)|0);
         $283 = ($282|0)==(0|0);
         $$0248$i = $273;$$1251$i = $$0250320$i;
         while(1) {
          if ($249) {
           $284 = (($$0248$i) + ($280))|0;
           $285 = (($248) + ($284)|0);
           $286 = HEAP8[$285>>0]|0;
           $287 = (+($286&255));
           $288 = $251 * $287;
           $$0245$i = $288;
          } else {
           $$0245$i = $251;
          }
          $289 = (($$0248$i) + 1)|0;
          $$sroa$0286$0$$sroa_idx287$i = (($274) + ($$0248$i<<4)|0);
          HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$0286$0$$sroa_idx287$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$0286$0$$sroa_idx287$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$0286$0$$sroa_idx287$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$0286$0$$sroa_idx287$i+3>>0];$$sroa$0286$0$copyload288$i = +HEAPF32[tempDoublePtr>>2];
          $$sroa$5290$0$$sroa_idx292$i = (((($274) + ($$0248$i<<4)|0)) + 4|0);
          HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$5290$0$$sroa_idx292$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$5290$0$$sroa_idx292$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$5290$0$$sroa_idx292$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$5290$0$$sroa_idx292$i+3>>0];$$sroa$5290$0$copyload293$i = +HEAPF32[tempDoublePtr>>2];
          $$sroa$6295$0$$sroa_idx297$i = (((($274) + ($$0248$i<<4)|0)) + 8|0);
          HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$6295$0$$sroa_idx297$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$6295$0$$sroa_idx297$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$6295$0$$sroa_idx297$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$6295$0$$sroa_idx297$i+3>>0];$$sroa$6295$0$copyload298$i = +HEAPF32[tempDoublePtr>>2];
          $$sroa$7300$0$$sroa_idx302$i = (((($274) + ($$0248$i<<4)|0)) + 12|0);
          HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$7300$0$$sroa_idx302$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$7300$0$$sroa_idx302$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$7300$0$$sroa_idx302$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$7300$0$$sroa_idx302$i+3>>0];$$sroa$7300$0$copyload303$i = +HEAPF32[tempDoublePtr>>2];
          $$sroa$0278$0$$sroa_idx$i = (($$0246323$i) + ($289<<4)|0);
          HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$0278$0$$sroa_idx$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$0278$0$$sroa_idx$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$0278$0$$sroa_idx$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$0278$0$$sroa_idx$i+3>>0];$$sroa$0278$0$copyload$i = +HEAPF32[tempDoublePtr>>2];
          $$sroa$4$0$$sroa_idx280$i = (((($$0246323$i) + ($289<<4)|0)) + 4|0);
          HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$4$0$$sroa_idx280$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$4$0$$sroa_idx280$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$4$0$$sroa_idx280$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$4$0$$sroa_idx280$i+3>>0];$$sroa$4$0$copyload$i = +HEAPF32[tempDoublePtr>>2];
          $$sroa$5$0$$sroa_idx282$i = (((($$0246323$i) + ($289<<4)|0)) + 8|0);
          HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$5$0$$sroa_idx282$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$5$0$$sroa_idx282$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$5$0$$sroa_idx282$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$5$0$$sroa_idx282$i+3>>0];$$sroa$5$0$copyload$i = +HEAPF32[tempDoublePtr>>2];
          $$sroa$6$0$$sroa_idx284$i = (((($$0246323$i) + ($289<<4)|0)) + 12|0);
          HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$6$0$$sroa_idx284$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$6$0$$sroa_idx284$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$6$0$$sroa_idx284$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$6$0$$sroa_idx284$i+3>>0];$$sroa$6$0$copyload$i = +HEAPF32[tempDoublePtr>>2];
          $290 = $$0245$i * $$sroa$4$0$copyload$i;
          $291 = $$0245$i * $$sroa$5$0$copyload$i;
          $292 = $$0245$i * $$sroa$6$0$copyload$i;
          $293 = $$0245$i * $$sroa$0278$0$copyload$i;
          $294 = $$sroa$5290$0$copyload293$i + $290;
          $295 = $294 > 1.1000000238418579;
          do {
           if ($295) {
            $296 = 1.1000000238418579 - $$sroa$5290$0$copyload293$i;
            $297 = $296 / $290;
            $298 = $297 > 1.0;
            $$$i$i = $298 ? 1.0 : $297;
            $$0$i$i = $$$i$i;
           } else {
            $299 = $294 < -0.10000000149011612;
            $300 = -0.10000000149011612 - $$sroa$5290$0$copyload293$i;
            $301 = $300 / $290;
            if (!($299)) {
             $$0$i$i = 1.0;
             break;
            }
            $302 = $301 > 1.0;
            $$74$i$i = $302 ? 1.0 : $301;
            $$0$i$i = $$74$i$i;
           }
          } while(0);
          $303 = $$sroa$6295$0$copyload298$i + $291;
          $304 = $303 > 1.1000000238418579;
          do {
           if ($304) {
            $305 = 1.1000000238418579 - $$sroa$6295$0$copyload298$i;
            $306 = $305 / $291;
            $307 = $$0$i$i < $306;
            $$0$$i$i = $307 ? $$0$i$i : $306;
            $$1$i$i = $$0$$i$i;
           } else {
            $308 = $303 < -0.10000000149011612;
            $309 = -0.10000000149011612 - $$sroa$6295$0$copyload298$i;
            $310 = $309 / $291;
            if (!($308)) {
             $$1$i$i = $$0$i$i;
             break;
            }
            $311 = $$0$i$i < $310;
            $$0$75$i$i = $311 ? $$0$i$i : $310;
            $$1$i$i = $$0$75$i$i;
           }
          } while(0);
          $312 = $$sroa$7300$0$copyload303$i + $292;
          $313 = $312 > 1.1000000238418579;
          do {
           if ($313) {
            $314 = 1.1000000238418579 - $$sroa$7300$0$copyload303$i;
            $315 = $314 / $292;
            $316 = $$1$i$i < $315;
            $$1$$i$i = $316 ? $$1$i$i : $315;
            $$2$i$i = $$1$$i$i;
           } else {
            $317 = $312 < -0.10000000149011612;
            $318 = -0.10000000149011612 - $$sroa$7300$0$copyload303$i;
            $319 = $318 / $292;
            if (!($317)) {
             $$2$i$i = $$1$i$i;
             break;
            }
            $320 = $$1$i$i < $319;
            $$1$76$i$i = $320 ? $$1$i$i : $319;
            $$2$i$i = $$1$76$i$i;
           }
          } while(0);
          $321 = $$sroa$0286$0$copyload288$i + $293;
          $322 = $321 > 1.0;
          do {
           if ($322) {
            $$073$i$i = 1.0;
           } else {
            $323 = $321 < 0.0;
            if (!($323)) {
             $$073$i$i = $321;
             break;
            }
            $$073$i$i = 0.0;
           }
          } while(0);
          $324 = $290 * $290;
          $325 = $291 * $291;
          $326 = $324 + $325;
          $327 = $292 * $292;
          $328 = $326 + $327;
          $329 = $293 * $293;
          $330 = $329 + $328;
          $331 = $330 > $216;
          do {
           if ($331) {
            $332 = $$2$i$i * 0.80000001192092896;
            $$3$i$i = $332;
            label = 106;
           } else {
            $333 = $330 < 3.0517578125E-5;
            if (!($333)) {
             $$3$i$i = $$2$i$i;
             label = 106;
             break;
            }
            HEAPF32[$4>>2] = $$sroa$0286$0$copyload288$i;
            HEAPF32[$255>>2] = $$sroa$5290$0$copyload293$i;
            HEAPF32[$256>>2] = $$sroa$6295$0$copyload298$i;
            $storemerge$i = $$sroa$7300$0$copyload303$i;
           }
          } while(0);
          if ((label|0) == 106) {
           label = 0;
           HEAPF32[$4>>2] = $$073$i$i;
           $334 = $290 * $$3$i$i;
           $335 = $$sroa$5290$0$copyload293$i + $334;
           HEAPF32[$255>>2] = $335;
           $336 = $291 * $$3$i$i;
           $337 = $$sroa$6295$0$copyload298$i + $336;
           HEAPF32[$256>>2] = $337;
           $338 = $292 * $$3$i$i;
           $339 = $$sroa$7300$0$copyload303$i + $338;
           $storemerge$i = $339;
          }
          HEAPF32[$257>>2] = $storemerge$i;
          if ($531) {
           $340 = HEAP32[$281>>2]|0;
           $341 = (($340) + ($$0248$i)|0);
           $342 = HEAP8[$341>>0]|0;
           $343 = $342&255;
           $344 = $343;
          } else {
           $344 = $$1251$i;
          }
          $345 = (_nearest_search($240,$4,$344,$5)|0);
          $$sroa$0$0$$sroa_idx$i78 = (((($226)) + 12|0) + (($345*24)|0)|0);
          $$sroa$0$0$copyload$i = +HEAPF32[$$sroa$0$0$$sroa_idx$i78>>2];
          $$sroa$7$0$$sroa_idx260$i = (((((($226)) + 12|0) + (($345*24)|0)|0)) + 4|0);
          $$sroa$7$0$copyload$i = +HEAPF32[$$sroa$7$0$$sroa_idx260$i>>2];
          $$sroa$9$0$$sroa_idx266$i = (((((($226)) + 12|0) + (($345*24)|0)|0)) + 8|0);
          $$sroa$9$0$copyload$i = +HEAPF32[$$sroa$9$0$$sroa_idx266$i>>2];
          $$sroa$11$0$$sroa_idx272$i = (((((($226)) + 12|0) + (($345*24)|0)|0)) + 12|0);
          $$sroa$11$0$copyload$i = +HEAPF32[$$sroa$11$0$$sroa_idx272$i>>2];
          if ($283) {
           label = 111;
          } else {
           $$sroa$0305$0$$sroa_idx$i = (($282) + ($$0248$i<<4)|0);
           HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$0305$0$$sroa_idx$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$0305$0$$sroa_idx$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$0305$0$$sroa_idx$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$0305$0$$sroa_idx$i+3>>0];$$sroa$0305$0$copyload$i = +HEAPF32[tempDoublePtr>>2];
           $$sroa$4307$0$$sroa_idx308$i = (((($282) + ($$0248$i<<4)|0)) + 4|0);
           HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$4307$0$$sroa_idx308$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$4307$0$$sroa_idx308$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$4307$0$$sroa_idx308$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$4307$0$$sroa_idx308$i+3>>0];$$sroa$4307$0$copyload$i = +HEAPF32[tempDoublePtr>>2];
           $$sroa$5310$0$$sroa_idx311$i = (((($282) + ($$0248$i<<4)|0)) + 8|0);
           HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$5310$0$$sroa_idx311$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$5310$0$$sroa_idx311$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$5310$0$$sroa_idx311$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$5310$0$$sroa_idx311$i+3>>0];$$sroa$5310$0$copyload$i = +HEAPF32[tempDoublePtr>>2];
           $$sroa$6313$0$$sroa_idx314$i = (((($282) + ($$0248$i<<4)|0)) + 12|0);
           HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$6313$0$$sroa_idx314$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$6313$0$$sroa_idx314$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$6313$0$$sroa_idx314$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$6313$0$$sroa_idx314$i+3>>0];$$sroa$6313$0$copyload$i = +HEAPF32[tempDoublePtr>>2];
           $346 = $$sroa$0$0$copyload$i - $$sroa$0305$0$copyload$i;
           $347 = $346;
           $348 = $$sroa$4307$0$copyload$i;
           $349 = $$sroa$7$0$copyload$i;
           $350 = $348 - $349;
           $351 = $350 + $347;
           $352 = $350 * $350;
           $353 = $351 * $351;
           $354 = $352 > $353;
           $$$i$i$i$i = $354 ? $352 : $353;
           $355 = $$sroa$5310$0$copyload$i;
           $356 = $$sroa$9$0$copyload$i;
           $357 = $355 - $356;
           $358 = $357 + $347;
           $359 = $357 * $357;
           $360 = $358 * $358;
           $361 = $359 > $360;
           $$$i5$i$i$i = $361 ? $359 : $360;
           $362 = $$$i$i$i$i + $$$i5$i$i$i;
           $363 = $$sroa$6313$0$copyload$i;
           $364 = $$sroa$11$0$copyload$i;
           $365 = $363 - $364;
           $366 = $365 + $347;
           $367 = $365 * $365;
           $368 = $366 * $366;
           $369 = $367 > $368;
           $$$i4$i$i$i = $369 ? $367 : $368;
           $370 = $362 + $$$i4$i$i$i;
           $371 = $370;
           $372 = +HEAPF32[$5>>2];
           $373 = !($372 >= $371);
           if ($373) {
            label = 111;
           } else {
            $$sink$in = $259;$$sroa$0$0316$i = $$sroa$0305$0$copyload$i;$$sroa$11$0$i = $$sroa$6313$0$copyload$i;$$sroa$7$0$i = $$sroa$4307$0$copyload$i;$$sroa$9$0$i = $$sroa$5310$0$copyload$i;
           }
          }
          if ((label|0) == 111) {
           label = 0;
           $$sink$in = $345;$$sroa$0$0316$i = $$sroa$0$0$copyload$i;$$sroa$11$0$i = $$sroa$11$0$copyload$i;$$sroa$7$0$i = $$sroa$7$0$copyload$i;$$sroa$9$0$i = $$sroa$9$0$copyload$i;
          }
          $$sink = $$sink$in&255;
          $374 = HEAP32[$281>>2]|0;
          $375 = (($374) + ($$0248$i)|0);
          HEAP8[$375>>0] = $$sink;
          $376 = +HEAPF32[$4>>2];
          $377 = $376 - $$sroa$0$0316$i;
          $378 = +HEAPF32[$255>>2];
          $379 = $378 - $$sroa$7$0$i;
          $380 = +HEAPF32[$256>>2];
          $381 = $380 - $$sroa$9$0$i;
          $382 = +HEAPF32[$257>>2];
          $383 = $382 - $$sroa$11$0$i;
          $384 = $379 * $379;
          $385 = $381 * $381;
          $386 = $384 + $385;
          $387 = $383 * $383;
          $388 = $386 + $387;
          $389 = $377 * $377;
          $390 = $389 + $388;
          $391 = $390 > $216;
          if ($391) {
           $392 = $379 * 0.75;
           $393 = $381 * 0.75;
           $394 = $383 * 0.75;
           $395 = $377 * 0.75;
           $$sroa$0$0$i = $395;$$sroa$14$0$i = $392;$$sroa$27$0$i = $393;$$sroa$40$0$i = $394;
          } else {
           $$sroa$0$0$i = $377;$$sroa$14$0$i = $379;$$sroa$27$0$i = $381;$$sroa$40$0$i = $383;
          }
          $396 = $$sroa$0$0$i * 0.4375;
          if ($272) {
           $397 = (($$0248$i) + 2)|0;
           $398 = (($$0246323$i) + ($397<<4)|0);
           $399 = +HEAPF32[$398>>2];
           $400 = $396 + $399;
           HEAPF32[$398>>2] = $400;
           $401 = $$sroa$14$0$i * 0.4375;
           $402 = (((($$0246323$i) + ($397<<4)|0)) + 4|0);
           $403 = +HEAPF32[$402>>2];
           $404 = $401 + $403;
           HEAPF32[$402>>2] = $404;
           $405 = $$sroa$27$0$i * 0.4375;
           $406 = (((($$0246323$i) + ($397<<4)|0)) + 8|0);
           $407 = +HEAPF32[$406>>2];
           $408 = $405 + $407;
           HEAPF32[$406>>2] = $408;
           $409 = $$sroa$40$0$i * 0.4375;
           $410 = (((($$0246323$i) + ($397<<4)|0)) + 12|0);
           $411 = +HEAPF32[$410>>2];
           $412 = $409 + $411;
           HEAPF32[$410>>2] = $412;
           $413 = $$sroa$0$0$i * 0.0625;
           $414 = (($$0247322$i) + ($397<<4)|0);
           HEAPF32[$414>>2] = $413;
           $415 = $$sroa$14$0$i * 0.0625;
           $416 = (((($$0247322$i) + ($397<<4)|0)) + 4|0);
           HEAPF32[$416>>2] = $415;
           $417 = $$sroa$27$0$i * 0.0625;
           $418 = (((($$0247322$i) + ($397<<4)|0)) + 8|0);
           HEAPF32[$418>>2] = $417;
           $419 = $$sroa$40$0$i * 0.0625;
           $420 = (((($$0247322$i) + ($397<<4)|0)) + 12|0);
           HEAPF32[$420>>2] = $419;
           $421 = $$sroa$0$0$i * 0.3125;
           $422 = (($$0247322$i) + ($289<<4)|0);
           $423 = +HEAPF32[$422>>2];
           $424 = $421 + $423;
           HEAPF32[$422>>2] = $424;
           $425 = $$sroa$14$0$i * 0.3125;
           $426 = (((($$0247322$i) + ($289<<4)|0)) + 4|0);
           $427 = +HEAPF32[$426>>2];
           $428 = $425 + $427;
           HEAPF32[$426>>2] = $428;
           $429 = $$sroa$27$0$i * 0.3125;
           $430 = (((($$0247322$i) + ($289<<4)|0)) + 8|0);
           $431 = +HEAPF32[$430>>2];
           $432 = $429 + $431;
           HEAPF32[$430>>2] = $432;
           $433 = $$sroa$40$0$i * 0.3125;
           $434 = (((($$0247322$i) + ($289<<4)|0)) + 12|0);
           $435 = +HEAPF32[$434>>2];
           $436 = $433 + $435;
           HEAPF32[$434>>2] = $436;
           $437 = $$sroa$0$0$i * 0.1875;
           $438 = (($$0247322$i) + ($$0248$i<<4)|0);
           $439 = +HEAPF32[$438>>2];
           $440 = $437 + $439;
           HEAPF32[$438>>2] = $440;
           $441 = $$sroa$14$0$i * 0.1875;
           $442 = (((($$0247322$i) + ($$0248$i<<4)|0)) + 4|0);
           $443 = +HEAPF32[$442>>2];
           $444 = $441 + $443;
           HEAPF32[$442>>2] = $444;
           $445 = $$sroa$27$0$i * 0.1875;
           $446 = (((($$0247322$i) + ($$0248$i<<4)|0)) + 8|0);
           $447 = +HEAPF32[$446>>2];
           $448 = $445 + $447;
           HEAPF32[$446>>2] = $448;
           $449 = $$sroa$40$0$i * 0.1875;
           $450 = (((($$0247322$i) + ($$0248$i<<4)|0)) + 12|0);
           $451 = +HEAPF32[$450>>2];
           $452 = $449 + $451;
           HEAPF32[$450>>2] = $452;
           $453 = (($$0248$i) + ($$0252319$i))|0;
           $454 = ($453|0)<($219|0);
           if ($454) {
            $532 = $453;
           } else {
            break;
           }
          } else {
           $455 = (($$0246323$i) + ($$0248$i<<4)|0);
           $456 = +HEAPF32[$455>>2];
           $457 = $396 + $456;
           HEAPF32[$455>>2] = $457;
           $458 = $$sroa$14$0$i * 0.4375;
           $459 = (((($$0246323$i) + ($$0248$i<<4)|0)) + 4|0);
           $460 = +HEAPF32[$459>>2];
           $461 = $458 + $460;
           HEAPF32[$459>>2] = $461;
           $462 = $$sroa$27$0$i * 0.4375;
           $463 = (((($$0246323$i) + ($$0248$i<<4)|0)) + 8|0);
           $464 = +HEAPF32[$463>>2];
           $465 = $462 + $464;
           HEAPF32[$463>>2] = $465;
           $466 = $$sroa$40$0$i * 0.4375;
           $467 = (((($$0246323$i) + ($$0248$i<<4)|0)) + 12|0);
           $468 = +HEAPF32[$467>>2];
           $469 = $466 + $468;
           HEAPF32[$467>>2] = $469;
           $470 = $$sroa$0$0$i * 0.0625;
           $471 = (($$0247322$i) + ($$0248$i<<4)|0);
           HEAPF32[$471>>2] = $470;
           $472 = $$sroa$14$0$i * 0.0625;
           $473 = (((($$0247322$i) + ($$0248$i<<4)|0)) + 4|0);
           HEAPF32[$473>>2] = $472;
           $474 = $$sroa$27$0$i * 0.0625;
           $475 = (((($$0247322$i) + ($$0248$i<<4)|0)) + 8|0);
           HEAPF32[$475>>2] = $474;
           $476 = $$sroa$40$0$i * 0.0625;
           $477 = (((($$0247322$i) + ($$0248$i<<4)|0)) + 12|0);
           HEAPF32[$477>>2] = $476;
           $478 = $$sroa$0$0$i * 0.3125;
           $479 = (($$0247322$i) + ($289<<4)|0);
           $480 = +HEAPF32[$479>>2];
           $481 = $478 + $480;
           HEAPF32[$479>>2] = $481;
           $482 = $$sroa$14$0$i * 0.3125;
           $483 = (((($$0247322$i) + ($289<<4)|0)) + 4|0);
           $484 = +HEAPF32[$483>>2];
           $485 = $482 + $484;
           HEAPF32[$483>>2] = $485;
           $486 = $$sroa$27$0$i * 0.3125;
           $487 = (((($$0247322$i) + ($289<<4)|0)) + 8|0);
           $488 = +HEAPF32[$487>>2];
           $489 = $486 + $488;
           HEAPF32[$487>>2] = $489;
           $490 = $$sroa$40$0$i * 0.3125;
           $491 = (((($$0247322$i) + ($289<<4)|0)) + 12|0);
           $492 = +HEAPF32[$491>>2];
           $493 = $490 + $492;
           HEAPF32[$491>>2] = $493;
           $494 = $$sroa$0$0$i * 0.1875;
           $495 = (($$0248$i) + 2)|0;
           $496 = (($$0247322$i) + ($495<<4)|0);
           $497 = +HEAPF32[$496>>2];
           $498 = $494 + $497;
           HEAPF32[$496>>2] = $498;
           $499 = $$sroa$14$0$i * 0.1875;
           $500 = (((($$0247322$i) + ($495<<4)|0)) + 4|0);
           $501 = +HEAPF32[$500>>2];
           $502 = $499 + $501;
           HEAPF32[$500>>2] = $502;
           $503 = $$sroa$27$0$i * 0.1875;
           $504 = (((($$0247322$i) + ($495<<4)|0)) + 8|0);
           $505 = +HEAPF32[$504>>2];
           $506 = $503 + $505;
           HEAPF32[$504>>2] = $506;
           $507 = $$sroa$40$0$i * 0.1875;
           $508 = (((($$0247322$i) + ($495<<4)|0)) + 12|0);
           $509 = +HEAPF32[$508>>2];
           $510 = $507 + $509;
           HEAPF32[$508>>2] = $510;
           $511 = (($$0248$i) + ($$0252319$i))|0;
           $512 = ($511|0)<(0);
           if ($512) {
            break;
           } else {
            $532 = $511;
           }
          }
          $$0248$i = $532;$$1251$i = $345;
         }
         $513 = (0 - ($$0252319$i))|0;
         $514 = (($$0249321$i) + 1)|0;
         $515 = ($514|0)<($217|0);
         if ($515) {
          $$0247322$i$phi = $$0246323$i;$$0246323$i$phi = $$0247322$i;$$0249321$i = $514;$$0250320$i = $345;$$0252319$i = $513;$$0247322$i = $$0247322$i$phi;$$0246323$i = $$0246323$i$phi;
         } else {
          label = 120;
          break;
         }
        }
        if ((label|0) == 120) {
         $516 = ((($1)) + 8|0);
         $517 = HEAP32[$516>>2]|0;
         $518 = ($$0247322$i>>>0)<($$0246323$i>>>0);
         $519 = $518 ? $$0247322$i : $$0246323$i;
         FUNCTION_TABLE_vi[$517 & 63]($519);
         _nearest_free($240);
         $$170 = $$069;
         break L39;
        }
        $527 = ((($1)) + 8|0);
        $528 = HEAP32[$527>>2]|0;
        $529 = ($$0246323$i>>>0)<($$0247322$i>>>0);
        $530 = $529 ? $$0246323$i : $$0247322$i;
        FUNCTION_TABLE_vi[$528 & 63]($530);
        _nearest_free($240);
        $$4 = 102;
        STACKTOP = sp;return ($$4|0);
       }
      }
     } while(0);
     $$4 = 102;
     STACKTOP = sp;return ($$4|0);
    }
   } while(0);
   $524 = +HEAPF64[$$sroa$9$0$$sroa_idx11$i>>3];
   $525 = $524 < 0.0;
   if (!($525)) {
    $$4 = 0;
    STACKTOP = sp;return ($$4|0);
   }
   $526 = $$170;
   HEAPF64[$$sroa$9$0$$sroa_idx11$i>>3] = $526;
   $$4 = 0;
   STACKTOP = sp;return ($$4|0);
  }
 }
 HEAP32[$18>>2] = 0;
 $$4 = 101;
 STACKTOP = sp;return ($$4|0);
}
function _remap_to_palette($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i$i$i = 0.0, $$$i4$i$i = 0.0, $$$i5$i$i = 0.0, $$07296 = 0, $$07296$us = 0, $$073 = 0.0, $$074$lcssa = 0.0, $$07499 = 0.0, $$07698 = 0, $$097 = 0, $$097$us = 0, $$1 = 0, $$175$lcssa = 0.0, $$17595 = 0.0, $$17595$us = 0.0, $$alloca_mul = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0.0;
 var $$sroa$084$0$$sroa_idx = 0, $$sroa$084$0$copyload = 0.0, $$sroa$4$0$$sroa_idx78 = 0, $$sroa$4$0$copyload = 0.0, $$sroa$486$0$$sroa_idx87 = 0, $$sroa$486$0$copyload = 0.0, $$sroa$5$0$$sroa_idx80 = 0, $$sroa$5$0$copyload = 0.0, $$sroa$589$0$$sroa_idx90 = 0, $$sroa$589$0$copyload = 0.0, $$sroa$6$0$$sroa_idx82 = 0, $$sroa$6$0$copyload = 0.0, $$sroa$692$0$$sroa_idx93 = 0, $$sroa$692$0$copyload = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0, $69 = 0.0, $7 = 0, $70 = 0.0;
 var $71 = 0.0, $72 = 0.0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $9 = 0, $exitcond = 0;
 var $exitcond106 = 0, $exitcond107 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy1 = sp + 40|0;
 $$byval_copy = sp + 24|0;
 $3 = sp + 8|0;
 $4 = sp;
 $5 = ((($0)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 32|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (_liq_image_get_row_f_init($0)|0);
 if (!($9)) {
  $$073 = -1.0;
  STACKTOP = sp;return (+$$073);
 }
 $10 = ((($0)) + 72|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = (_liq_image_get_row_f_init($11)|0);
  if (!($13)) {
   $$073 = -1.0;
   STACKTOP = sp;return (+$$073);
  }
 }
 $14 = (_nearest_init($2)|0);
 $15 = HEAP32[$10>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $25 = 0;
 } else {
  ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;HEAP32[$3+12>>2]=0|0;
  $17 = (_nearest_search($14,$3,0,0)|0);
  $25 = $17;
 }
 $18 = HEAP32[$2>>2]|0;
 $19 = (($18) + 2)|0;
 $20 = (_llvm_stacksave()|0);
 $$alloca_mul = ($19*40)|0;
 $21 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 _kmeans_init($2,1,$21);
 $22 = ($6|0)>(0);
 if ($22) {
  $23 = ($8|0)==(0);
  $24 = (((($2)) + 12|0) + (($25*24)|0)|0);
  $$07499 = 0.0;$$07698 = 0;
  while(1) {
   $32 = (_liq_image_get_row_f($0,$$07698)|0);
   $33 = HEAP32[$10>>2]|0;
   $34 = ($33|0)==(0|0);
   if ($34) {
    $38 = 0;
   } else {
    $35 = +HEAPF32[$24>>2];
    $36 = $35 < 0.00390625;
    if ($36) {
     $37 = (_liq_image_get_row_f($33,$$07698)|0);
     $38 = $37;
    } else {
     $38 = 0;
    }
   }
   if ($23) {
    $$175$lcssa = $$07499;
   } else {
    $39 = ($38|0)==(0|0);
    $40 = (($1) + ($$07698<<2)|0);
    if ($39) {
     $$07296$us = 0;$$097$us = 0;$$17595$us = $$07499;
     while(1) {
      $41 = (($32) + ($$097$us<<4)|0);
      $42 = (_nearest_search($14,$41,$$07296$us,$4)|0);
      $43 = $42&255;
      $44 = HEAP32[$40>>2]|0;
      $45 = (($44) + ($$097$us)|0);
      HEAP8[$45>>0] = $43;
      $46 = +HEAPF32[$4>>2];
      $47 = $46;
      $48 = $$17595$us + $47;
      ;HEAP32[$$byval_copy>>2]=HEAP32[$41>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[$41+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[$41+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[$41+12>>2]|0;
      _kmeans_update_color($$byval_copy,1.0,$2,$42,0,$21);
      $49 = (($$097$us) + 1)|0;
      $exitcond106 = ($49|0)==($8|0);
      if ($exitcond106) {
       $$175$lcssa = $48;
       break;
      } else {
       $$07296$us = $42;$$097$us = $49;$$17595$us = $48;
      }
     }
    } else {
     $$07296 = 0;$$097 = 0;$$17595 = $$07499;
     while(1) {
      $51 = (($32) + ($$097<<4)|0);
      $52 = (_nearest_search($14,$51,$$07296,$4)|0);
      $$sroa$084$0$$sroa_idx = (((($2)) + 12|0) + (($52*24)|0)|0);
      HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$084$0$$sroa_idx>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$084$0$$sroa_idx+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$084$0$$sroa_idx+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$084$0$$sroa_idx+3>>0];$$sroa$084$0$copyload = +HEAPF32[tempDoublePtr>>2];
      $$sroa$486$0$$sroa_idx87 = (((((($2)) + 12|0) + (($52*24)|0)|0)) + 4|0);
      HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$486$0$$sroa_idx87>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$486$0$$sroa_idx87+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$486$0$$sroa_idx87+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$486$0$$sroa_idx87+3>>0];$$sroa$486$0$copyload = +HEAPF32[tempDoublePtr>>2];
      $$sroa$589$0$$sroa_idx90 = (((((($2)) + 12|0) + (($52*24)|0)|0)) + 8|0);
      HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$589$0$$sroa_idx90>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$589$0$$sroa_idx90+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$589$0$$sroa_idx90+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$589$0$$sroa_idx90+3>>0];$$sroa$589$0$copyload = +HEAPF32[tempDoublePtr>>2];
      $$sroa$692$0$$sroa_idx93 = (((((($2)) + 12|0) + (($52*24)|0)|0)) + 12|0);
      HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$692$0$$sroa_idx93>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$692$0$$sroa_idx93+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$692$0$$sroa_idx93+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$692$0$$sroa_idx93+3>>0];$$sroa$692$0$copyload = +HEAPF32[tempDoublePtr>>2];
      $$sroa$0$0$$sroa_idx = (($38) + ($$097<<4)|0);
      HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$0$0$$sroa_idx>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$0$0$$sroa_idx+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$0$0$$sroa_idx+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$0$0$$sroa_idx+3>>0];$$sroa$0$0$copyload = +HEAPF32[tempDoublePtr>>2];
      $$sroa$4$0$$sroa_idx78 = (((($38) + ($$097<<4)|0)) + 4|0);
      HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$4$0$$sroa_idx78>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$4$0$$sroa_idx78+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$4$0$$sroa_idx78+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$4$0$$sroa_idx78+3>>0];$$sroa$4$0$copyload = +HEAPF32[tempDoublePtr>>2];
      $$sroa$5$0$$sroa_idx80 = (((($38) + ($$097<<4)|0)) + 8|0);
      HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$5$0$$sroa_idx80>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$5$0$$sroa_idx80+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$5$0$$sroa_idx80+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$5$0$$sroa_idx80+3>>0];$$sroa$5$0$copyload = +HEAPF32[tempDoublePtr>>2];
      $$sroa$6$0$$sroa_idx82 = (((($38) + ($$097<<4)|0)) + 12|0);
      HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$6$0$$sroa_idx82>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$6$0$$sroa_idx82+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$6$0$$sroa_idx82+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$6$0$$sroa_idx82+3>>0];$$sroa$6$0$copyload = +HEAPF32[tempDoublePtr>>2];
      $53 = $$sroa$084$0$copyload - $$sroa$0$0$copyload;
      $54 = $53;
      $55 = $$sroa$4$0$copyload;
      $56 = $$sroa$486$0$copyload;
      $57 = $55 - $56;
      $58 = $57 + $54;
      $59 = $57 * $57;
      $60 = $58 * $58;
      $61 = $59 > $60;
      $$$i$i$i = $61 ? $59 : $60;
      $62 = $$sroa$5$0$copyload;
      $63 = $$sroa$589$0$copyload;
      $64 = $62 - $63;
      $65 = $64 + $54;
      $66 = $64 * $64;
      $67 = $65 * $65;
      $68 = $66 > $67;
      $$$i5$i$i = $68 ? $66 : $67;
      $69 = $$$i$i$i + $$$i5$i$i;
      $70 = $$sroa$6$0$copyload;
      $71 = $$sroa$692$0$copyload;
      $72 = $70 - $71;
      $73 = $72 + $54;
      $74 = $72 * $72;
      $75 = $73 * $73;
      $76 = $74 > $75;
      $$$i4$i$i = $76 ? $74 : $75;
      $77 = $69 + $$$i4$i$i;
      $78 = $77;
      $79 = +HEAPF32[$4>>2];
      $80 = !($79 >= $78);
      $$1 = $80 ? $52 : $25;
      $81 = $$1&255;
      $82 = HEAP32[$40>>2]|0;
      $83 = (($82) + ($$097)|0);
      HEAP8[$83>>0] = $81;
      $84 = +HEAPF32[$4>>2];
      $85 = $84;
      $86 = $$17595 + $85;
      ;HEAP32[$$byval_copy1>>2]=HEAP32[$51>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$51+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$51+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[$51+12>>2]|0;
      _kmeans_update_color($$byval_copy1,1.0,$2,$$1,0,$21);
      $87 = (($$097) + 1)|0;
      $exitcond = ($87|0)==($8|0);
      if ($exitcond) {
       $$175$lcssa = $86;
       break;
      } else {
       $$07296 = $$1;$$097 = $87;$$17595 = $86;
      }
     }
    }
   }
   $50 = (($$07698) + 1)|0;
   $exitcond107 = ($50|0)==($6|0);
   if ($exitcond107) {
    $$074$lcssa = $$175$lcssa;
    break;
   } else {
    $$07499 = $$175$lcssa;$$07698 = $50;
   }
  }
 } else {
  $$074$lcssa = 0.0;
 }
 _kmeans_finalize($2,1,$21);
 _nearest_free($14);
 $26 = HEAP32[$7>>2]|0;
 $27 = HEAP32[$5>>2]|0;
 $28 = Math_imul($27, $26)|0;
 $29 = (+($28>>>0));
 $30 = $$074$lcssa / $29;
 $31 = $30;
 _llvm_stackrestore(($20|0));
 $$073 = $31;
 STACKTOP = sp;return (+$$073);
}
function _pam_computeacolorhash($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$us = 0, $$063$us = 0, $$06479$us = 0, $$06681$us = 0, $$07080$us = 0, $$17178$us = 0, $$272$us = 0, $$5 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp + 4|0;
 $5 = sp;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = 255 >>> $7;
 $9 = $8 << $7;
 $10 = $8 ^ 255;
 $11 = $9 << 24;
 $12 = $9 << 16;
 $13 = $9 << 8;
 $14 = $12 | $9;
 $15 = $14 | $11;
 $16 = $15 | $13;
 $17 = $10 << 24;
 $18 = $10 << 16;
 $19 = $10 << 8;
 $20 = $18 | $10;
 $21 = $20 | $17;
 $22 = $21 | $19;
 $23 = ((($0)) + 24|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($3|0)==(0);
 L1: do {
  if (!($25)) {
   $26 = ($2|0)==(0);
   $27 = (8 - ($7))|0;
   if (!($26)) {
    $$06681$us = 0;$$07080$us = $4;
    L4: while(1) {
     $28 = (($1) + ($$06681$us<<2)|0);
     $$06479$us = 0;$$17178$us = $$07080$us;
     while(1) {
      $31 = HEAP32[$28>>2]|0;
      $32 = (($31) + ($$06479$us<<2)|0);
      $33 = HEAPU8[$32>>0]|(HEAPU8[$32+1>>0]<<8)|(HEAPU8[$32+2>>0]<<16)|(HEAPU8[$32+3>>0]<<24);
      HEAP32[$5>>2] = $33;
      $34 = ($33>>>0)<(16777216);
      if ($34) {
       HEAP32[$5>>2] = 0;
       $44 = ($$17178$us|0)==(0|0);
       $45 = ((($$17178$us)) + 1|0);
       $spec$select$us = $44 ? 0 : $45;
       $$0$us = 0;$$063$us = 2000;$$272$us = $spec$select$us;
      } else {
       $35 = $33 & $16;
       $36 = $33 & $22;
       $37 = $36 >>> $27;
       $38 = $37 | $35;
       HEAP32[$5>>2] = $38;
       $39 = (($38>>>0) % ($24>>>0))&-1;
       $40 = ($$17178$us|0)==(0|0);
       if ($40) {
        $$0$us = $39;$$063$us = 255;$$272$us = 0;
       } else {
        $41 = ((($$17178$us)) + 1|0);
        $42 = HEAP8[$$17178$us>>0]|0;
        $43 = $42&255;
        $$0$us = $39;$$063$us = $43;$$272$us = $41;
       }
      }
      ;HEAP32[$$byval_copy>>2]=HEAP32[$5>>2]|0;
      $46 = (_pam_add_to_hash($0,$$0$us,$$063$us,$$byval_copy,$$06681$us,$3)|0);
      $29 = (($$06479$us) + 1)|0;
      if (!($46)) {
       $$5 = 0;
       break L4;
      }
      $30 = ($29>>>0)<($2>>>0);
      if ($30) {
       $$06479$us = $29;$$17178$us = $$272$us;
      } else {
       break;
      }
     }
     $47 = (($$06681$us) + 1)|0;
     $48 = ($47>>>0)<($3>>>0);
     if ($48) {
      $$06681$us = $47;$$07080$us = $$272$us;
     } else {
      break L1;
     }
    }
    STACKTOP = sp;return ($$5|0);
   }
  }
 } while(0);
 $49 = ((($0)) + 16|0);
 HEAP32[$49>>2] = $2;
 $50 = ((($0)) + 20|0);
 $51 = HEAP32[$50>>2]|0;
 $52 = (($51) + ($3))|0;
 HEAP32[$50>>2] = $52;
 $$5 = 1;
 STACKTOP = sp;return ($$5|0);
}
function _pam_add_to_hash($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0108$lcssa = 0, $$0108115 = 0, $$0109 = 0, $$0110 = 0, $$4 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$022$0$$sroa_idx = 0, $$sroa$2$0$$sroa_idx4 = 0, $$sroa$225$0$$sroa_idx26 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = (((($0)) + 2080|0) + (($1*28)|0)|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$3>>2]|0;
 $9 = ($7|0)==($8|0);
 $10 = (((((($0)) + 2080|0) + (($1*28)|0)|0)) + 16|0);
 $11 = HEAP32[$10>>2]|0;
 L1: do {
  if ($9) {
   $12 = ($11|0)==(0);
   if (!($12)) {
    $13 = (((((($0)) + 2080|0) + (($1*28)|0)|0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = (($14) + ($2))|0;
    HEAP32[$13>>2] = $15;
    $$4 = 1;
    return ($$4|0);
   }
  } else {
   switch ($11|0) {
   case 0:  {
    break L1;
    break;
   }
   case 1:  {
    $94 = (((((($0)) + 2080|0) + (($1*28)|0)|0)) + 8|0);
    HEAP32[$94>>2] = $8;
    $95 = (((((($0)) + 2080|0) + (($1*28)|0)|0)) + 12|0);
    HEAP32[$95>>2] = $2;
    HEAP32[$10>>2] = 2;
    $96 = ((($0)) + 12|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = (($97) + 1)|0;
    HEAP32[$96>>2] = $98;
    $$4 = 1;
    return ($$4|0);
    break;
   }
   default: {
   }
   }
   $16 = (((((($0)) + 2080|0) + (($1*28)|0)|0)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==($8|0);
   if ($18) {
    $19 = (((((($0)) + 2080|0) + (($1*28)|0)|0)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = (($20) + ($2))|0;
    HEAP32[$19>>2] = $21;
    $$4 = 1;
    return ($$4|0);
   }
   $22 = (((((($0)) + 2080|0) + (($1*28)|0)|0)) + 24|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = (($11) + -2)|0;
   $25 = ($24|0)==(0);
   L14: do {
    if ($25) {
     $$0108$lcssa = 0;
    } else {
     $$0108115 = 0;
     while(1) {
      $26 = (($23) + ($$0108115<<3)|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($27|0)==($8|0);
      if ($28) {
       break;
      }
      $32 = (($$0108115) + 1)|0;
      $33 = ($32>>>0)<($24>>>0);
      if ($33) {
       $$0108115 = $32;
      } else {
       $$0108$lcssa = $32;
       break L14;
      }
     }
     $29 = (((($23) + ($$0108115<<3)|0)) + 4|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = (($30) + ($2))|0;
     HEAP32[$29>>2] = $31;
     $$4 = 1;
     return ($$4|0);
    }
   } while(0);
   $34 = (((((($0)) + 2080|0) + (($1*28)|0)|0)) + 20|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($$0108$lcssa>>>0)<($35>>>0);
   if ($36) {
    $$sroa$022$0$$sroa_idx = (($23) + ($$0108$lcssa<<3)|0);
    HEAP32[$$sroa$022$0$$sroa_idx>>2] = $8;
    $$sroa$225$0$$sroa_idx26 = (((($23) + ($$0108$lcssa<<3)|0)) + 4|0);
    HEAP32[$$sroa$225$0$$sroa_idx26>>2] = $2;
    $37 = HEAP32[$10>>2]|0;
    $38 = (($37) + 1)|0;
    HEAP32[$10>>2] = $38;
    $39 = ((($0)) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + 1)|0;
    HEAP32[$39>>2] = $41;
    $$4 = 1;
    return ($$4|0);
   }
   $42 = ((($0)) + 12|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = (($43) + 1)|0;
   HEAP32[$42>>2] = $44;
   $45 = ((($0)) + 8|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ($44>>>0)>($46>>>0);
   if ($47) {
    $$4 = 0;
    return ($$4|0);
   }
   $48 = ($23|0)==(0|0);
   do {
    if ($48) {
     $49 = ((($0)) + 28|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==(0);
     if ($51) {
      $52 = ((($0)) + 20|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (($5) - ($4))|0;
      $55 = (($54) + ($53))|0;
      $56 = $44 << 1;
      $57 = Math_imul($56, $55)|0;
      $58 = (($4) + 1)|0;
      $59 = (($58) + ($53))|0;
      $60 = (($57>>>0) / ($59>>>0))&-1;
      $61 = $60 << 3;
      $62 = (($61) + 8192)|0;
      $63 = (_mempool_alloc($0,64,$62)|0);
      $$0109 = $63;$$0110 = 8;
      break;
     } else {
      $64 = (($50) + -1)|0;
      HEAP32[$49>>2] = $64;
      $65 = (((($0)) + 32|0) + ($64<<2)|0);
      $66 = HEAP32[$65>>2]|0;
      $$0109 = $66;$$0110 = 8;
      break;
     }
    } else {
     $67 = HEAP32[$34>>2]|0;
     $68 = $67 << 1;
     $69 = (($68) + 16)|0;
     $70 = ((($0)) + 28|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($71>>>0)<(511);
     if ($72) {
      $73 = (((($0)) + 32|0) + ($71<<2)|0);
      $74 = (($71) + 1)|0;
      HEAP32[$70>>2] = $74;
      HEAP32[$73>>2] = $23;
     }
     $75 = ((($0)) + 20|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = (($5) - ($4))|0;
     $78 = (($77) + ($76))|0;
     $79 = $44 << 1;
     $80 = Math_imul($79, $78)|0;
     $81 = (($4) + 1)|0;
     $82 = (($81) + ($76))|0;
     $83 = (($80>>>0) / ($82>>>0))&-1;
     $84 = $69 << 5;
     $85 = (($83) + ($84))|0;
     $86 = $85 << 3;
     $87 = $69 << 3;
     $88 = (_mempool_alloc($0,$87,$86)|0);
     $89 = ($88|0)==(0|0);
     if ($89) {
      $$4 = 0;
      return ($$4|0);
     } else {
      $90 = HEAP32[$34>>2]|0;
      $91 = $90 << 3;
      _memcpy(($88|0),($23|0),($91|0))|0;
      $$0109 = $88;$$0110 = $69;
      break;
     }
    }
   } while(0);
   HEAP32[$22>>2] = $$0109;
   HEAP32[$34>>2] = $$0110;
   $$sroa$0$0$$sroa_idx = (($$0109) + ($$0108$lcssa<<3)|0);
   HEAP32[$$sroa$0$0$$sroa_idx>>2] = $8;
   $$sroa$2$0$$sroa_idx4 = (((($$0109) + ($$0108$lcssa<<3)|0)) + 4|0);
   HEAP32[$$sroa$2$0$$sroa_idx4>>2] = $2;
   $92 = HEAP32[$10>>2]|0;
   $93 = (($92) + 1)|0;
   HEAP32[$10>>2] = $93;
   $$4 = 1;
   return ($$4|0);
  }
 } while(0);
 HEAP32[$6>>2] = $8;
 $99 = (((((($0)) + 2080|0) + (($1*28)|0)|0)) + 4|0);
 HEAP32[$99>>2] = $2;
 HEAP32[$10>>2] = 1;
 $100 = ((($0)) + 12|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = (($101) + 1)|0;
 HEAP32[$100>>2] = $102;
 $$4 = 1;
 return ($$4|0);
}
function _pam_allocacolorhash($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$sroa$3$0$$sroa_idx1 = 0, $$sroa$4$0$$sroa_idx2 = 0, $$sroa$5$0$$sroa_idx = 0, $$sroa$54$0$$sroa_idx5 = 0, $$sroa$6$0$$sroa_idx = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp;
 $6 = ($1>>>0)>(262144);
 $7 = $6 ? 6 : 5;
 $8 = (($7) + ($2))|0;
 $9 = (($1>>>0) / ($8>>>0))&-1;
 $10 = ($9>>>0)>($0>>>0);
 $$ = $10 ? $0 : $9;
 $11 = ($$>>>0)<(66000);
 $12 = ($$>>>0)<(200000);
 $13 = $12 ? 12011 : 24019;
 $14 = $11 ? 6673 : $13;
 HEAP32[$5>>2] = 0;
 $15 = ($14*28)|0;
 $16 = (($15) + 2080)|0;
 $17 = $$ << 3;
 $18 = (($16) + ($17))|0;
 $19 = (_mempool_create($5,$16,$18,$3,$4)|0);
 $20 = ($19|0)==(0|0);
 if ($20) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = HEAP32[$5>>2]|0;
 HEAP32[$19>>2] = $21;
 $$sroa$3$0$$sroa_idx1 = ((($19)) + 4|0);
 HEAP32[$$sroa$3$0$$sroa_idx1>>2] = $2;
 $$sroa$4$0$$sroa_idx2 = ((($19)) + 8|0);
 HEAP32[$$sroa$4$0$$sroa_idx2>>2] = $0;
 $$sroa$5$0$$sroa_idx = ((($19)) + 12|0);
 ;HEAP32[$$sroa$5$0$$sroa_idx>>2]=0|0;HEAP32[$$sroa$5$0$$sroa_idx+4>>2]=0|0;HEAP32[$$sroa$5$0$$sroa_idx+8>>2]=0|0;
 $$sroa$54$0$$sroa_idx5 = ((($19)) + 24|0);
 HEAP32[$$sroa$54$0$$sroa_idx5>>2] = $14;
 $$sroa$6$0$$sroa_idx = ((($19)) + 28|0);
 _memset(($$sroa$6$0$$sroa_idx|0),0,2052)|0;
 $22 = ((($19)) + 2080|0);
 _memset(($22|0),0,($15|0))|0;
 $$0 = $19;
 STACKTOP = sp;return ($$0|0);
}
function _pam_acolorhashtoacolorhist($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 var $$$i = 0.0, $$$i61 = 0.0, $$$i76 = 0.0, $$0$i = 0.0, $$0$i74 = 0.0, $$0$i89 = 0.0, $$0103 = 0, $$057 = 0, $$058107 = 0, $$059106 = 0.0, $$06$i = 0, $$098105 = 0, $$1 = 0, $$160102 = 0.0, $$199 = 0, $$2 = 0.0, $$2100 = 0, $$3101 = 0, $$4 = 0, $$5 = 0;
 var $$pre = 0, $$pre112 = 0, $$pre113 = 0, $$sroa$0$0$$sroa_idx$i = 0, $$sroa$0$0$$sroa_idx$i70 = 0, $$sroa$0$0$$sroa_idx$i85 = 0, $$sroa$021$0$copyload$i = 0, $$sroa$021$0$copyload$i63 = 0, $$sroa$021$0$copyload$i78 = 0, $$sroa$2$0$$sroa_idx18$i = 0, $$sroa$2$0$$sroa_idx18$i71 = 0, $$sroa$2$0$$sroa_idx18$i86 = 0, $$sroa$2$0$$sroa_idx28 = 0, $$sroa$3$0$$sroa_idx19$i = 0, $$sroa$3$0$$sroa_idx19$i72 = 0, $$sroa$3$0$$sroa_idx19$i87 = 0, $$sroa$3$0$$sroa_idx29 = 0, $$sroa$4$0$$sroa_idx20$i = 0, $$sroa$4$0$$sroa_idx20$i73 = 0, $$sroa$4$0$$sroa_idx20$i88 = 0;
 var $$sroa$4$0$$sroa_idx30 = 0, $$sroa$422$0$$sroa_idx$i = 0, $$sroa$422$0$$sroa_idx$i64 = 0, $$sroa$422$0$$sroa_idx$i79 = 0, $$sroa$422$0$copyload$i = 0, $$sroa$422$0$copyload$i65 = 0, $$sroa$422$0$copyload$i80 = 0, $$sroa$5$0$$sroa_idx$i = 0, $$sroa$5$0$$sroa_idx$i66 = 0, $$sroa$5$0$$sroa_idx$i81 = 0, $$sroa$5$0$$sroa_idx31 = 0, $$sroa$5$0$copyload$i = 0, $$sroa$5$0$copyload$i67 = 0, $$sroa$5$0$copyload$i82 = 0, $$sroa$6$0$$sroa_idx$i = 0, $$sroa$6$0$$sroa_idx$i68 = 0, $$sroa$6$0$$sroa_idx$i83 = 0, $$sroa$6$0$copyload$i = 0, $$sroa$6$0$copyload$i69 = 0, $$sroa$6$0$copyload$i84 = 0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0.0, $105 = 0, $106 = 0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $14 = 0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0.0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0;
 var $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $or$cond = 0, $phitmp = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1024|0);
 $4 = sp;
 $5 = (FUNCTION_TABLE_ii[$2 & 63](24)|0);
 $6 = ($5|0)!=(0|0);
 $7 = ($0|0)!=(0|0);
 $or$cond = $7 & $6;
 if (!($or$cond)) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0);
 $phitmp = $9 << 5;
 $spec$select = $10 ? 32 : $phitmp;
 $11 = (FUNCTION_TABLE_ii[$2 & 63]($spec$select)|0);
 $12 = HEAP32[$8>>2]|0;
 $13 = ((($0)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 HEAP32[$5>>2] = $11;
 $$sroa$2$0$$sroa_idx28 = ((($5)) + 4|0);
 HEAP32[$$sroa$2$0$$sroa_idx28>>2] = $3;
 $$sroa$3$0$$sroa_idx29 = ((($5)) + 8|0);
 HEAPF64[$$sroa$3$0$$sroa_idx29>>3] = 0.0;
 $$sroa$4$0$$sroa_idx30 = ((($5)) + 16|0);
 HEAP32[$$sroa$4$0$$sroa_idx30>>2] = $12;
 $$sroa$5$0$$sroa_idx31 = ((($5)) + 20|0);
 HEAP32[$$sroa$5$0$$sroa_idx31>>2] = $14;
 $15 = ($11|0)==(0|0);
 if ($15) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $16 = 0.54989999532699585 / $1;
 $$06$i = 0;
 while(1) {
  $17 = (+($$06$i|0));
  $18 = $17 / 255.0;
  $19 = (+Math_pow((+$18),(+$16)));
  $20 = $19;
  $21 = (($4) + ($$06$i<<2)|0);
  HEAPF32[$21>>2] = $20;
  $22 = (($$06$i) + 1)|0;
  $exitcond$i = ($22|0)==(256);
  if ($exitcond$i) {
   break;
  } else {
   $$06$i = $22;
  }
 }
 $23 = ((($0)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (+($24>>>0));
 $26 = $25 * 0.10000000149011612;
 $27 = ((($0)) + 20|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (+($28>>>0));
 $30 = $26 * $29;
 $31 = ((($0)) + 24|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0);
 if ($33) {
  HEAP32[$$sroa$4$0$$sroa_idx30>>2] = 0;
  HEAPF64[$$sroa$3$0$$sroa_idx29>>3] = 0.0;
  label = 21;
 } else {
  $$058107 = 0;$$059106 = 0.0;$$098105 = 0;
  while(1) {
   $35 = (((((($0)) + 2080|0) + (($$058107*28)|0)|0)) + 16|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($36|0)==(0);
   if ($37) {
    $$2 = $$059106;$$5 = $$098105;
   } else {
    $38 = HEAP32[$5>>2]|0;
    $39 = (((($0)) + 2080|0) + (($$058107*28)|0)|0);
    $40 = (((((($0)) + 2080|0) + (($$058107*28)|0)|0)) + 4|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = ($41|0)==(0);
    if ($42) {
     $$0$i = 0.0;$$199 = $$098105;$65 = $36;
    } else {
     $43 = (+($41>>>0));
     $44 = $43 * 0.0078125;
     $45 = $44 < $30;
     $$$i = $45 ? $44 : $30;
     $46 = (((($38) + ($$098105<<5)|0)) + 20|0);
     HEAPF32[$46>>2] = $$$i;
     $47 = (((($38) + ($$098105<<5)|0)) + 16|0);
     HEAPF32[$47>>2] = $$$i;
     $$sroa$021$0$copyload$i = HEAP8[$39>>0]|0;
     $$sroa$422$0$$sroa_idx$i = ((($39)) + 1|0);
     $$sroa$422$0$copyload$i = HEAP8[$$sroa$422$0$$sroa_idx$i>>0]|0;
     $$sroa$5$0$$sroa_idx$i = ((($39)) + 2|0);
     $$sroa$5$0$copyload$i = HEAP8[$$sroa$5$0$$sroa_idx$i>>0]|0;
     $$sroa$6$0$$sroa_idx$i = ((($39)) + 3|0);
     $$sroa$6$0$copyload$i = HEAP8[$$sroa$6$0$$sroa_idx$i>>0]|0;
     $48 = (+($$sroa$6$0$copyload$i&255));
     $49 = $48 / 255.0;
     $50 = $$sroa$021$0$copyload$i&255;
     $51 = (($4) + ($50<<2)|0);
     $52 = +HEAPF32[$51>>2];
     $53 = $52 * $49;
     $54 = $$sroa$422$0$copyload$i&255;
     $55 = (($4) + ($54<<2)|0);
     $56 = +HEAPF32[$55>>2];
     $57 = $49 * $56;
     $58 = $$sroa$5$0$copyload$i&255;
     $59 = (($4) + ($58<<2)|0);
     $60 = +HEAPF32[$59>>2];
     $61 = $49 * $60;
     $$sroa$0$0$$sroa_idx$i = (($38) + ($$098105<<5)|0);
     HEAPF32[$$sroa$0$0$$sroa_idx$i>>2] = $49;
     $$sroa$2$0$$sroa_idx18$i = (((($38) + ($$098105<<5)|0)) + 4|0);
     HEAPF32[$$sroa$2$0$$sroa_idx18$i>>2] = $53;
     $$sroa$3$0$$sroa_idx19$i = (((($38) + ($$098105<<5)|0)) + 8|0);
     HEAPF32[$$sroa$3$0$$sroa_idx19$i>>2] = $57;
     $$sroa$4$0$$sroa_idx20$i = (((($38) + ($$098105<<5)|0)) + 12|0);
     HEAPF32[$$sroa$4$0$$sroa_idx20$i>>2] = $61;
     $62 = (($$098105) + 1)|0;
     $$pre = HEAP32[$35>>2]|0;
     $$0$i = $$$i;$$199 = $62;$65 = $$pre;
    }
    $63 = $$0$i;
    $64 = $$059106 + $63;
    $66 = ($65>>>0)>(1);
    if ($66) {
     $67 = HEAP32[$5>>2]|0;
     $68 = (((((($0)) + 2080|0) + (($$058107*28)|0)|0)) + 8|0);
     $69 = (((((($0)) + 2080|0) + (($$058107*28)|0)|0)) + 12|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($70|0)==(0);
     if ($71) {
      $$0$i74 = 0.0;$$2100 = $$199;$94 = $65;
     } else {
      $72 = (+($70>>>0));
      $73 = $72 * 0.0078125;
      $74 = $73 < $30;
      $$$i61 = $74 ? $73 : $30;
      $75 = (((($67) + ($$199<<5)|0)) + 20|0);
      HEAPF32[$75>>2] = $$$i61;
      $76 = (((($67) + ($$199<<5)|0)) + 16|0);
      HEAPF32[$76>>2] = $$$i61;
      $$sroa$021$0$copyload$i63 = HEAP8[$68>>0]|0;
      $$sroa$422$0$$sroa_idx$i64 = ((($68)) + 1|0);
      $$sroa$422$0$copyload$i65 = HEAP8[$$sroa$422$0$$sroa_idx$i64>>0]|0;
      $$sroa$5$0$$sroa_idx$i66 = ((($68)) + 2|0);
      $$sroa$5$0$copyload$i67 = HEAP8[$$sroa$5$0$$sroa_idx$i66>>0]|0;
      $$sroa$6$0$$sroa_idx$i68 = ((($68)) + 3|0);
      $$sroa$6$0$copyload$i69 = HEAP8[$$sroa$6$0$$sroa_idx$i68>>0]|0;
      $77 = (+($$sroa$6$0$copyload$i69&255));
      $78 = $77 / 255.0;
      $79 = $$sroa$021$0$copyload$i63&255;
      $80 = (($4) + ($79<<2)|0);
      $81 = +HEAPF32[$80>>2];
      $82 = $81 * $78;
      $83 = $$sroa$422$0$copyload$i65&255;
      $84 = (($4) + ($83<<2)|0);
      $85 = +HEAPF32[$84>>2];
      $86 = $78 * $85;
      $87 = $$sroa$5$0$copyload$i67&255;
      $88 = (($4) + ($87<<2)|0);
      $89 = +HEAPF32[$88>>2];
      $90 = $78 * $89;
      $$sroa$0$0$$sroa_idx$i70 = (($67) + ($$199<<5)|0);
      HEAPF32[$$sroa$0$0$$sroa_idx$i70>>2] = $78;
      $$sroa$2$0$$sroa_idx18$i71 = (((($67) + ($$199<<5)|0)) + 4|0);
      HEAPF32[$$sroa$2$0$$sroa_idx18$i71>>2] = $82;
      $$sroa$3$0$$sroa_idx19$i72 = (((($67) + ($$199<<5)|0)) + 8|0);
      HEAPF32[$$sroa$3$0$$sroa_idx19$i72>>2] = $86;
      $$sroa$4$0$$sroa_idx20$i73 = (((($67) + ($$199<<5)|0)) + 12|0);
      HEAPF32[$$sroa$4$0$$sroa_idx20$i73>>2] = $90;
      $91 = (($$199) + 1)|0;
      $$pre112 = HEAP32[$35>>2]|0;
      $$0$i74 = $$$i61;$$2100 = $91;$94 = $$pre112;
     }
     $92 = $$0$i74;
     $93 = $64 + $92;
     $95 = ($94|0)==(2);
     if ($95) {
      $$2 = $93;$$5 = $$2100;
     } else {
      $96 = (((((($0)) + 2080|0) + (($$058107*28)|0)|0)) + 24|0);
      $$0103 = 0;$$160102 = $93;$$3101 = $$2100;$135 = $94;
      while(1) {
       $97 = HEAP32[$5>>2]|0;
       $98 = HEAP32[$96>>2]|0;
       $99 = (($98) + ($$0103<<3)|0);
       $100 = (((($98) + ($$0103<<3)|0)) + 4|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = ($101|0)==(0);
       if ($102) {
        $$0$i89 = 0.0;$$4 = $$3101;$127 = $135;
       } else {
        $103 = (+($101>>>0));
        $104 = $103 * 0.0078125;
        $105 = $104 < $30;
        $$$i76 = $105 ? $104 : $30;
        $106 = (((($97) + ($$3101<<5)|0)) + 20|0);
        HEAPF32[$106>>2] = $$$i76;
        $107 = (((($97) + ($$3101<<5)|0)) + 16|0);
        HEAPF32[$107>>2] = $$$i76;
        $$sroa$021$0$copyload$i78 = HEAP8[$99>>0]|0;
        $$sroa$422$0$$sroa_idx$i79 = ((($99)) + 1|0);
        $$sroa$422$0$copyload$i80 = HEAP8[$$sroa$422$0$$sroa_idx$i79>>0]|0;
        $$sroa$5$0$$sroa_idx$i81 = ((($99)) + 2|0);
        $$sroa$5$0$copyload$i82 = HEAP8[$$sroa$5$0$$sroa_idx$i81>>0]|0;
        $$sroa$6$0$$sroa_idx$i83 = ((($99)) + 3|0);
        $$sroa$6$0$copyload$i84 = HEAP8[$$sroa$6$0$$sroa_idx$i83>>0]|0;
        $108 = (+($$sroa$6$0$copyload$i84&255));
        $109 = $108 / 255.0;
        $110 = $$sroa$021$0$copyload$i78&255;
        $111 = (($4) + ($110<<2)|0);
        $112 = +HEAPF32[$111>>2];
        $113 = $112 * $109;
        $114 = $$sroa$422$0$copyload$i80&255;
        $115 = (($4) + ($114<<2)|0);
        $116 = +HEAPF32[$115>>2];
        $117 = $109 * $116;
        $118 = $$sroa$5$0$copyload$i82&255;
        $119 = (($4) + ($118<<2)|0);
        $120 = +HEAPF32[$119>>2];
        $121 = $109 * $120;
        $$sroa$0$0$$sroa_idx$i85 = (($97) + ($$3101<<5)|0);
        HEAPF32[$$sroa$0$0$$sroa_idx$i85>>2] = $109;
        $$sroa$2$0$$sroa_idx18$i86 = (((($97) + ($$3101<<5)|0)) + 4|0);
        HEAPF32[$$sroa$2$0$$sroa_idx18$i86>>2] = $113;
        $$sroa$3$0$$sroa_idx19$i87 = (((($97) + ($$3101<<5)|0)) + 8|0);
        HEAPF32[$$sroa$3$0$$sroa_idx19$i87>>2] = $117;
        $$sroa$4$0$$sroa_idx20$i88 = (((($97) + ($$3101<<5)|0)) + 12|0);
        HEAPF32[$$sroa$4$0$$sroa_idx20$i88>>2] = $121;
        $122 = (($$3101) + 1)|0;
        $$pre113 = HEAP32[$35>>2]|0;
        $$0$i89 = $$$i76;$$4 = $122;$127 = $$pre113;
       }
       $123 = $$0$i89;
       $124 = $$160102 + $123;
       $125 = (($$0103) + 1)|0;
       $126 = (($127) + -2)|0;
       $128 = ($125>>>0)<($126>>>0);
       if ($128) {
        $$0103 = $125;$$160102 = $124;$$3101 = $$4;$135 = $127;
       } else {
        $$2 = $124;$$5 = $$4;
        break;
       }
      }
     }
    } else {
     $$2 = $64;$$5 = $$199;
    }
   }
   $129 = (($$058107) + 1)|0;
   $130 = HEAP32[$31>>2]|0;
   $131 = ($129>>>0)<($130>>>0);
   if ($131) {
    $$058107 = $129;$$059106 = $$2;$$098105 = $$5;
   } else {
    break;
   }
  }
  HEAP32[$$sroa$4$0$$sroa_idx30>>2] = $$5;
  HEAPF64[$$sroa$3$0$$sroa_idx29>>3] = $$2;
  $34 = ($$5|0)==(0);
  if ($34) {
   label = 21;
  } else {
   $$057 = $5;
  }
 }
 if ((label|0) == 21) {
  $132 = HEAP32[$$sroa$2$0$$sroa_idx28>>2]|0;
  $133 = HEAP32[$5>>2]|0;
  FUNCTION_TABLE_vi[$132 & 63]($133);
  $134 = HEAP32[$$sroa$2$0$$sroa_idx28>>2]|0;
  FUNCTION_TABLE_vi[$134 & 63]($5);
  $$057 = 0;
 }
 $$1 = $$057;
 STACKTOP = sp;return ($$1|0);
}
function _to_f_set_gamma($0,$1) {
 $0 = $0|0;
 $1 = +$1;
 var $$06 = 0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = 0.54989999532699585 / $1;
 $$06 = 0;
 while(1) {
  $3 = (+($$06|0));
  $4 = $3 / 255.0;
  $5 = (+Math_pow((+$4),(+$2)));
  $6 = $5;
  $7 = (($0) + ($$06<<2)|0);
  HEAPF32[$7>>2] = $6;
  $8 = (($$06) + 1)|0;
  $exitcond = ($8|0)==(256);
  if ($exitcond) {
   break;
  } else {
   $$06 = $8;
  }
 }
 return;
}
function _pam_freeacolorhist($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = HEAP32[$0>>2]|0;
 FUNCTION_TABLE_vi[$2 & 63]($3);
 $4 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$4 & 63]($0);
 return;
}
function _pam_freeacolorhash($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = HEAP32[$0>>2]|0;
 _mempool_destroy($2);
 return;
}
function _pam_colormap($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$sroa$2$0$$sroa_idx1 = 0, $$sroa$3$0$$sroa_idx2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0*24)|0;
 $4 = (($3) + 12)|0;
 $5 = (FUNCTION_TABLE_ii[$1 & 63]($4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 HEAP32[$5>>2] = $0;
 $$sroa$2$0$$sroa_idx1 = ((($5)) + 4|0);
 HEAP32[$$sroa$2$0$$sroa_idx1>>2] = $1;
 $$sroa$3$0$$sroa_idx2 = ((($5)) + 8|0);
 HEAP32[$$sroa$3$0$$sroa_idx2>>2] = $2;
 $7 = ((($5)) + 12|0);
 _memset(($7|0),0,($3|0))|0;
 $$0 = $5;
 return ($$0|0);
}
function _pam_duplicate_colormap($0) {
 $0 = $0|0;
 var $$0$i = 0, $$013 = 0, $$sroa$2$0$$sroa_idx1$i = 0, $$sroa$3$0$$sroa_idx2$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($1*24)|0;
 $7 = (($6) + 12)|0;
 $8 = (FUNCTION_TABLE_ii[$3 & 63]($7)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$0$i = 0;
 } else {
  HEAP32[$8>>2] = $1;
  $$sroa$2$0$$sroa_idx1$i = ((($8)) + 4|0);
  HEAP32[$$sroa$2$0$$sroa_idx1$i>>2] = $3;
  $$sroa$3$0$$sroa_idx2$i = ((($8)) + 8|0);
  HEAP32[$$sroa$3$0$$sroa_idx2$i>>2] = $5;
  $10 = ((($8)) + 12|0);
  _memset(($10|0),0,($6|0))|0;
  $$0$i = $8;
 }
 $11 = HEAP32[$0>>2]|0;
 $12 = ($11|0)==(0);
 if ($12) {
  return ($$0$i|0);
 }
 $$013 = 0;
 while(1) {
  $13 = (((($$0$i)) + 12|0) + (($$013*24)|0)|0);
  $14 = (((($0)) + 12|0) + (($$013*24)|0)|0);
  ;HEAP32[$13>>2]=HEAP32[$14>>2]|0;HEAP32[$13+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$13+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$13+12>>2]=HEAP32[$14+12>>2]|0;HEAP32[$13+16>>2]=HEAP32[$14+16>>2]|0;HEAP32[$13+20>>2]=HEAP32[$14+20>>2]|0;
  $15 = (($$013) + 1)|0;
  $16 = HEAP32[$0>>2]|0;
  $17 = ($15>>>0)<($16>>>0);
  if ($17) {
   $$013 = $15;
  } else {
   break;
  }
 }
 return ($$0$i|0);
}
function _pam_freecolormap($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 FUNCTION_TABLE_vi[$2 & 63]($0);
 return;
}
function _mediancut($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 $3 = +$3;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$$i = 0.0, $$$i$i$i$i$i = 0.0, $$$i$i$i$i$i116 = 0.0, $$$i4$i$i$i$i = 0.0, $$$i4$i$i$i$i118 = 0.0, $$$i5$i$i$i$i = 0.0, $$$i5$i$i$i$i117 = 0.0, $$0$i = 0.0, $$0$lcssa$i$i$i$i = 0, $$0100144 = 0, $$0101$lcssa = 0.0, $$0101143 = 0.0, $$0102$lcssa = 0.0, $$0102151 = 0.0, $$0103150 = 0, $$014$lcssa$i$i = 0.0, $$01433$i$i = 0.0, $$0145 = 0, $$01618$i = 0;
 var $$017$i = 0, $$020$i$i$i$ph = 0, $$021$i$i$i = 0, $$021$i$i$i$ph = 0, $$02325$i = 0, $$024$i = 0, $$024$i$i$i$ph = 0, $$03144$i$i$i$i = 0, $$034$i$i = 0, $$03650$i = 0, $$03749$i = 0.0, $$045$i$i$i$i = 0, $$046$i = 0, $$04756$i = 0, $$048$lcssa$i = 0.0, $$04855$i = 0, $$04878$i = 0.0, $$04954$i = 0.0, $$04980$i = 0, $$079$i = 0;
 var $$1$i = 0, $$1$i$i$i = 0.0, $$1$i$i$i$i = 0, $$138$i = 0.0, $$150$i = 0.0, $$150$i$i$i = 0.0, $$152$i$i$i = 0.0, $$154$i$i$i = 0.0, $$2 = 0, $$2$i = 0, $$2$i$i$i$i = 0, $$251$i = 0.0, $$345$i = 0.0, $$4$i = 0.0, $$53$i = 0.0, $$alloca_mul = 0, $$in$i$i$i$i = 0, $$lcssa$i$i$i$i = 0, $$lcssa142 = 0, $$pre$i = 0;
 var $$pre85$i = 0, $$sroa$0$0$$sroa_idx$i$1$i$i = 0, $$sroa$0$0$$sroa_idx$i$i = 0, $$sroa$0$0$copyload$i$1$i$i = 0.0, $$sroa$0$0$copyload$i$i = 0.0, $$sroa$0$0$copyload$i$i$i = 0.0, $$sroa$0$0$i = 0.0, $$sroa$022$0$$sroa_idx$i$i = 0, $$sroa$022$0$copyload$i$i = 0.0, $$sroa$062$0$$sroa_idx$i = 0, $$sroa$062$0$copyload$i = 0.0, $$sroa$4$0$$sroa_idx16$i$i = 0, $$sroa$4$0$$sroa_idx64$i = 0, $$sroa$4$0$$sroa_idx7$i$1$i$i = 0, $$sroa$4$0$$sroa_idx7$i$i$i = 0, $$sroa$4$0$copyload$i = 0.0, $$sroa$4$0$copyload$i$1$i$i = 0.0, $$sroa$4$0$copyload$i$i = 0.0, $$sroa$4$0$copyload$i$i$i = 0.0, $$sroa$424$0$$sroa_idx25$i$i = 0;
 var $$sroa$424$0$copyload$i$i = 0.0, $$sroa$5$0$$sroa_idx18$i$i = 0, $$sroa$5$0$$sroa_idx9$i$1$i$i = 0, $$sroa$5$0$$sroa_idx9$i$i$i = 0, $$sroa$5$0$copyload$i$1$i$i = 0.0, $$sroa$5$0$copyload$i$i = 0.0, $$sroa$5$0$copyload$i$i$i = 0.0, $$sroa$5$0$i = 0.0, $$sroa$527$0$$sroa_idx28$i$i = 0, $$sroa$527$0$copyload$i$i = 0.0, $$sroa$566$0$$sroa_idx67$i = 0, $$sroa$566$0$copyload$i = 0.0, $$sroa$6$0$$sroa_idx11$i$1$i$i = 0, $$sroa$6$0$$sroa_idx11$i$i$i = 0, $$sroa$6$0$$sroa_idx20$i$i = 0, $$sroa$6$0$$sroa_idx69$i = 0, $$sroa$6$0$copyload$i = 0.0, $$sroa$6$0$copyload$i$1$i$i = 0.0, $$sroa$6$0$copyload$i$i = 0.0, $$sroa$6$0$copyload$i$i$i = 0.0;
 var $$sroa$630$0$$sroa_idx31$i$i = 0, $$sroa$630$0$copyload$i$i = 0.0, $$sroa$7$0$i = 0.0, $$sroa$771$0$$sroa_idx72$i = 0, $$sroa$771$0$copyload$i = 0.0, $$sroa$9$0$i = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0.0, $147 = 0.0, $148 = 0.0;
 var $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0.0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0;
 var $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0.0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0;
 var $185 = 0.0, $186 = 0, $187 = 0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0.0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0.0, $201 = 0.0, $202 = 0;
 var $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0, $208 = 0.0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0;
 var $221 = 0.0, $222 = 0.0, $223 = 0.0, $224 = 0.0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0, $232 = 0.0, $233 = 0.0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0.0, $238 = 0, $239 = 0.0;
 var $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0.0, $247 = 0.0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0.0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0.0, $268 = 0, $269 = 0.0, $27 = 0.0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0.0, $275 = 0;
 var $276 = 0.0, $277 = 0, $278 = 0, $279 = 0, $28 = 0.0, $280 = 0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0.0, $29 = 0.0, $290 = 0.0, $291 = 0.0, $292 = 0, $293 = 0.0;
 var $294 = 0.0, $295 = 0.0, $296 = 0.0, $297 = 0.0, $298 = 0.0, $299 = 0.0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0.0, $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0.0, $308 = 0.0, $309 = 0.0, $31 = 0, $310 = 0.0, $311 = 0.0;
 var $312 = 0.0, $313 = 0, $314 = 0.0, $315 = 0.0, $316 = 0, $317 = 0.0, $318 = 0.0, $319 = 0.0, $32 = 0.0, $320 = 0.0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0.0, $329 = 0, $33 = 0.0;
 var $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0.0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0, $344 = 0, $345 = 0.0, $346 = 0.0, $347 = 0, $348 = 0;
 var $349 = 0, $35 = 0.0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0.0, $360 = 0, $361 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0.0;
 var $42 = 0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0.0, $49 = 0, $50 = 0.0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0, $57 = 0.0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond$i108 = 0, $exitcond$i111 = 0, $exitcond$i113 = 0, $exitcond$i119 = 0, $exitcond84$i = 0, $or$cond27$i$i$i = 0, $phitmp$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(144|0);
 $6 = sp + 104|0;
 $7 = sp + 72|0;
 $8 = sp + 40|0;
 $9 = sp + 8|0;
 $10 = sp;
 $11 = HEAP32[$0>>2]|0;
 $$alloca_mul = $1<<6;
 $12 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $13 = ((($0)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  $$0102$lcssa = 0.0;$$lcssa142 = 0;
 } else {
  $$0102151 = 0.0;$$0103150 = 0;
  while(1) {
   $26 = (((($11) + ($$0103150<<5)|0)) + 16|0);
   $27 = +HEAPF32[$26>>2];
   $28 = $27;
   $29 = $$0102151 + $28;
   $30 = (($$0103150) + 1)|0;
   $31 = ($30>>>0)<($14>>>0);
   if ($31) {
    $$0102151 = $29;$$0103150 = $30;
   } else {
    $$0102$lcssa = $29;$$lcssa142 = $14;
    break;
   }
  }
 }
 _box_init($12,$11,0,$$lcssa142,$$0102$lcssa);
 $16 = ($1>>>0)>(1);
 L6: do {
  if ($16) {
   $17 = (+($1>>>0));
   $18 = ((($9)) + 4|0);
   $19 = ((($9)) + 8|0);
   $20 = ((($9)) + 12|0);
   $21 = ((($9)) + 16|0);
   $22 = ((($9)) + 20|0);
   $23 = ((($9)) + 24|0);
   $24 = ((($9)) + 28|0);
   $25 = ((($0)) + 8|0);
   $$0145 = 1;
   L8: while(1) {
    $32 = (+($$0145>>>0));
    $33 = $32 / $17;
    $34 = $33 * 16.0;
    $35 = $34 * $3;
    $36 = $35 + $3;
    $$04756$i = -1;$$04855$i = 0;$$04954$i = 0.0;
    while(1) {
     $37 = (((($12) + ($$04855$i<<6)|0)) + 60|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38>>>0)<(2);
     if ($39) {
      $$2$i = $$04756$i;$$251$i = $$04954$i;
     } else {
      $40 = (((($12) + ($$04855$i<<6)|0)) + 20|0);
      $41 = +HEAPF32[$40>>2];
      $42 = (((($12) + ($$04855$i<<6)|0)) + 24|0);
      $43 = +HEAPF32[$42>>2];
      $44 = (((($12) + ($$04855$i<<6)|0)) + 28|0);
      $45 = +HEAPF32[$44>>2];
      $46 = $43 > $45;
      $$$i = $46 ? $43 : $45;
      $47 = $41 > $$$i;
      $48 = $47 ? $41 : $$$i;
      $49 = (((($12) + ($$04855$i<<6)|0)) + 32|0);
      $50 = +HEAPF64[$49>>3];
      $51 = (((($12) + ($$04855$i<<6)|0)) + 16|0);
      $52 = +HEAPF32[$51>>2];
      $53 = $52 > $48;
      $$53$i = $53 ? $52 : $48;
      $54 = $$53$i;
      $55 = $50 * $54;
      $56 = (((($12) + ($$04855$i<<6)|0)) + 48|0);
      $57 = +HEAPF64[$56>>3];
      $58 = $57 > $36;
      $59 = $57 * $55;
      $60 = $59 / $36;
      $$0$i = $58 ? $60 : $55;
      $61 = $$0$i > $$04954$i;
      $$150$i = $61 ? $$0$i : $$04954$i;
      $$1$i = $61 ? $$04855$i : $$04756$i;
      $$2$i = $$1$i;$$251$i = $$150$i;
     }
     $62 = (($$04855$i) + 1)|0;
     $exitcond$i = ($62|0)==($$0145|0);
     if ($exitcond$i) {
      break;
     } else {
      $$04756$i = $$2$i;$$04855$i = $62;$$04954$i = $$251$i;
     }
    }
    $63 = ($$2$i|0)<(0);
    if ($63) {
     $$2 = $$0145;
     break L6;
    }
    $64 = (($12) + ($$2$i<<6)|0);
    $65 = (((($12) + ($$2$i<<6)|0)) + 56|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = (((($12) + ($$2$i<<6)|0)) + 60|0);
    $68 = HEAP32[$67>>2]|0;
    HEAP32[$9>>2] = 0;
    $69 = (((($12) + ($$2$i<<6)|0)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    HEAP32[$18>>2] = $70;
    HEAP32[$19>>2] = 1;
    $71 = (((($12) + ($$2$i<<6)|0)) + 20|0);
    $72 = HEAP32[$71>>2]|0;
    HEAP32[$20>>2] = $72;
    HEAP32[$21>>2] = 2;
    $73 = (((($12) + ($$2$i<<6)|0)) + 24|0);
    $74 = HEAP32[$73>>2]|0;
    HEAP32[$22>>2] = $74;
    HEAP32[$23>>2] = 3;
    $75 = (((($12) + ($$2$i<<6)|0)) + 28|0);
    $76 = HEAP32[$75>>2]|0;
    HEAP32[$24>>2] = $76;
    _qsort($9,4,8,50);
    $77 = HEAP32[$65>>2]|0;
    $78 = HEAP32[$67>>2]|0;
    $79 = ($78|0)==(0);
    if ($79) {
     $85 = 0;$88 = $77;
    } else {
     $80 = HEAP32[$9>>2]|0;
     $81 = HEAP32[$21>>2]|0;
     $82 = HEAP32[$19>>2]|0;
     $83 = HEAP32[$23>>2]|0;
     $$04980$i = 0;
     while(1) {
      $191 = (($$04980$i) + ($77))|0;
      $192 = (($11) + ($191<<5)|0);
      $193 = (($192) + ($80<<2)|0);
      $194 = +HEAPF32[$193>>2];
      $195 = $194;
      $196 = $195 * 65535.0;
      $197 = (~~(($196))>>>0);
      $198 = $197 << 16;
      $199 = (($192) + ($81<<2)|0);
      $200 = +HEAPF32[$199>>2];
      $201 = $200;
      $202 = (($192) + ($82<<2)|0);
      $203 = +HEAPF32[$202>>2];
      $204 = $203;
      $205 = $204 * 0.5;
      $206 = $205 + $201;
      $207 = (($192) + ($83<<2)|0);
      $208 = +HEAPF32[$207>>2];
      $209 = $208;
      $210 = $209 * 0.25;
      $211 = $206 + $210;
      $212 = $211 * 65535.0;
      $213 = (~~(($212))>>>0);
      $214 = $198 | $213;
      $215 = (((($11) + ($191<<5)|0)) + 28|0);
      HEAP32[$215>>2] = $214;
      $216 = (($$04980$i) + 1)|0;
      $exitcond84$i = ($216|0)==($78|0);
      if ($exitcond84$i) {
       break;
      } else {
       $$04980$i = $216;
      }
     }
     $$pre$i = HEAP32[$67>>2]|0;
     $$pre85$i = HEAP32[$65>>2]|0;
     $85 = $$pre$i;$88 = $$pre85$i;
    }
    $84 = (($85) + -1)|0;
    $86 = $84 >>> 1;
    $87 = (($11) + ($88<<5)|0);
    $$020$i$i$i$ph = $87;$$021$i$i$i$ph = $85;$$024$i$i$i$ph = $86;
    while(1) {
     $$in$i$i$i$i = ((($$020$i$i$i$ph)) + 28|0);
     $89 = ((($$020$i$i$i$ph)) + 284|0);
     $$021$i$i$i = $$021$i$i$i$ph;
     while(1) {
      $90 = ($$021$i$i$i>>>0)>(7);
      L27: do {
       if ($90) {
        $91 = ($$021$i$i$i>>>0)<(32);
        $92 = $$021$i$i$i >>> 1;
        do {
         if ($91) {
          $109 = $92;
         } else {
          $93 = (($$021$i$i$i) + -1)|0;
          $94 = HEAP32[$89>>2]|0;
          $95 = (((($$020$i$i$i$ph) + ($92<<5)|0)) + 28|0);
          $96 = HEAP32[$95>>2]|0;
          $97 = (((($$020$i$i$i$ph) + ($93<<5)|0)) + 28|0);
          $98 = HEAP32[$97>>2]|0;
          $99 = ($94>>>0)<($96>>>0);
          if ($99) {
           $100 = ($96>>>0)<($98>>>0);
           $101 = ($94>>>0)<($98>>>0);
           $102 = $101 ? $93 : 8;
           if ($100) {
            $109 = $92;
            break;
           } else {
            $106 = $102;
           }
          } else {
           $103 = ($96>>>0)>($98>>>0);
           $104 = ($94>>>0)<($98>>>0);
           $105 = $104 ? 8 : $93;
           if ($103) {
            $109 = $92;
            break;
           } else {
            $106 = $105;
           }
          }
          $107 = ($106|0)==(0);
          if ($107) {
           label = 24;
           break L27;
          } else {
           $109 = $106;
          }
         }
        } while(0);
        $108 = (($$020$i$i$i$ph) + ($109<<5)|0);
        ;HEAP32[$6>>2]=HEAP32[$$020$i$i$i$ph>>2]|0;HEAP32[$6+4>>2]=HEAP32[$$020$i$i$i$ph+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$$020$i$i$i$ph+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$$020$i$i$i$ph+12>>2]|0;HEAP32[$6+16>>2]=HEAP32[$$020$i$i$i$ph+16>>2]|0;HEAP32[$6+20>>2]=HEAP32[$$020$i$i$i$ph+20>>2]|0;HEAP32[$6+24>>2]=HEAP32[$$020$i$i$i$ph+24>>2]|0;HEAP32[$6+28>>2]=HEAP32[$$020$i$i$i$ph+28>>2]|0;
        ;HEAP32[$$020$i$i$i$ph>>2]=HEAP32[$108>>2]|0;HEAP32[$$020$i$i$i$ph+4>>2]=HEAP32[$108+4>>2]|0;HEAP32[$$020$i$i$i$ph+8>>2]=HEAP32[$108+8>>2]|0;HEAP32[$$020$i$i$i$ph+12>>2]=HEAP32[$108+12>>2]|0;HEAP32[$$020$i$i$i$ph+16>>2]=HEAP32[$108+16>>2]|0;HEAP32[$$020$i$i$i$ph+20>>2]=HEAP32[$108+20>>2]|0;HEAP32[$$020$i$i$i$ph+24>>2]=HEAP32[$108+24>>2]|0;HEAP32[$$020$i$i$i$ph+28>>2]=HEAP32[$108+28>>2]|0;
        ;HEAP32[$108>>2]=HEAP32[$6>>2]|0;HEAP32[$108+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$108+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$108+12>>2]=HEAP32[$6+12>>2]|0;HEAP32[$108+16>>2]=HEAP32[$6+16>>2]|0;HEAP32[$108+20>>2]=HEAP32[$6+20>>2]|0;HEAP32[$108+24>>2]=HEAP32[$6+24>>2]|0;HEAP32[$108+28>>2]=HEAP32[$6+28>>2]|0;
        label = 24;
       } else {
        $110 = ($$021$i$i$i>>>0)>(1);
        if ($110) {
         label = 24;
        } else {
         $132 = 0;
        }
       }
      } while(0);
      if ((label|0) == 24) {
       label = 0;
       $111 = HEAP32[$$in$i$i$i$i>>2]|0;
       $$03144$i$i$i$i = $$021$i$i$i;$$045$i$i$i$i = 1;
       while(1) {
        $112 = (($$020$i$i$i$ph) + ($$045$i$i$i$i<<5)|0);
        $113 = (((($$020$i$i$i$ph) + ($$045$i$i$i$i<<5)|0)) + 28|0);
        $114 = HEAP32[$113>>2]|0;
        $115 = ($114>>>0)<($111>>>0);
        if ($115) {
         $117 = (($$03144$i$i$i$i) + -1)|0;
         $118 = ($$045$i$i$i$i>>>0)<($117>>>0);
         L43: do {
          if ($118) {
           $120 = $117;
           while(1) {
            $122 = (((($$020$i$i$i$ph) + ($120<<5)|0)) + 28|0);
            $123 = HEAP32[$122>>2]|0;
            $124 = ($123>>>0)>($111>>>0);
            if ($124) {
             $$lcssa$i$i$i$i = $120;
             break L43;
            }
            $119 = (($120) + -1)|0;
            $121 = ($$045$i$i$i$i>>>0)<($119>>>0);
            if ($121) {
             $120 = $119;
            } else {
             $$lcssa$i$i$i$i = $119;
             break;
            }
           }
          } else {
           $$lcssa$i$i$i$i = $117;
          }
         } while(0);
         $125 = ($$045$i$i$i$i|0)==($$lcssa$i$i$i$i|0);
         if ($125) {
          $$0$lcssa$i$i$i$i = $$045$i$i$i$i;
          break;
         }
         $126 = (($$020$i$i$i$ph) + ($$lcssa$i$i$i$i<<5)|0);
         ;HEAP32[$7>>2]=HEAP32[$112>>2]|0;HEAP32[$7+4>>2]=HEAP32[$112+4>>2]|0;HEAP32[$7+8>>2]=HEAP32[$112+8>>2]|0;HEAP32[$7+12>>2]=HEAP32[$112+12>>2]|0;HEAP32[$7+16>>2]=HEAP32[$112+16>>2]|0;HEAP32[$7+20>>2]=HEAP32[$112+20>>2]|0;HEAP32[$7+24>>2]=HEAP32[$112+24>>2]|0;HEAP32[$7+28>>2]=HEAP32[$112+28>>2]|0;
         ;HEAP32[$112>>2]=HEAP32[$126>>2]|0;HEAP32[$112+4>>2]=HEAP32[$126+4>>2]|0;HEAP32[$112+8>>2]=HEAP32[$126+8>>2]|0;HEAP32[$112+12>>2]=HEAP32[$126+12>>2]|0;HEAP32[$112+16>>2]=HEAP32[$126+16>>2]|0;HEAP32[$112+20>>2]=HEAP32[$126+20>>2]|0;HEAP32[$112+24>>2]=HEAP32[$126+24>>2]|0;HEAP32[$112+28>>2]=HEAP32[$126+28>>2]|0;
         ;HEAP32[$126>>2]=HEAP32[$7>>2]|0;HEAP32[$126+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[$126+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[$126+12>>2]=HEAP32[$7+12>>2]|0;HEAP32[$126+16>>2]=HEAP32[$7+16>>2]|0;HEAP32[$126+20>>2]=HEAP32[$7+20>>2]|0;HEAP32[$126+24>>2]=HEAP32[$7+24>>2]|0;HEAP32[$126+28>>2]=HEAP32[$7+28>>2]|0;
         $$1$i$i$i$i = $$045$i$i$i$i;$$2$i$i$i$i = $$lcssa$i$i$i$i;
        } else {
         $116 = (($$045$i$i$i$i) + 1)|0;
         $$1$i$i$i$i = $116;$$2$i$i$i$i = $$03144$i$i$i$i;
        }
        $127 = ($$1$i$i$i$i>>>0)<($$2$i$i$i$i>>>0);
        if ($127) {
         $$03144$i$i$i$i = $$2$i$i$i$i;$$045$i$i$i$i = $$1$i$i$i$i;
        } else {
         $$0$lcssa$i$i$i$i = $$1$i$i$i$i;
         break;
        }
       }
       $128 = (($$0$lcssa$i$i$i$i) + -1)|0;
       $129 = ($128|0)==(0);
       if ($129) {
        $132 = 0;
       } else {
        $130 = (($$020$i$i$i$ph) + ($128<<5)|0);
        ;HEAP32[$8>>2]=HEAP32[$$020$i$i$i$ph>>2]|0;HEAP32[$8+4>>2]=HEAP32[$$020$i$i$i$ph+4>>2]|0;HEAP32[$8+8>>2]=HEAP32[$$020$i$i$i$ph+8>>2]|0;HEAP32[$8+12>>2]=HEAP32[$$020$i$i$i$ph+12>>2]|0;HEAP32[$8+16>>2]=HEAP32[$$020$i$i$i$ph+16>>2]|0;HEAP32[$8+20>>2]=HEAP32[$$020$i$i$i$ph+20>>2]|0;HEAP32[$8+24>>2]=HEAP32[$$020$i$i$i$ph+24>>2]|0;HEAP32[$8+28>>2]=HEAP32[$$020$i$i$i$ph+28>>2]|0;
        ;HEAP32[$$020$i$i$i$ph>>2]=HEAP32[$130>>2]|0;HEAP32[$$020$i$i$i$ph+4>>2]=HEAP32[$130+4>>2]|0;HEAP32[$$020$i$i$i$ph+8>>2]=HEAP32[$130+8>>2]|0;HEAP32[$$020$i$i$i$ph+12>>2]=HEAP32[$130+12>>2]|0;HEAP32[$$020$i$i$i$ph+16>>2]=HEAP32[$130+16>>2]|0;HEAP32[$$020$i$i$i$ph+20>>2]=HEAP32[$130+20>>2]|0;HEAP32[$$020$i$i$i$ph+24>>2]=HEAP32[$130+24>>2]|0;HEAP32[$$020$i$i$i$ph+28>>2]=HEAP32[$130+28>>2]|0;
        ;HEAP32[$130>>2]=HEAP32[$8>>2]|0;HEAP32[$130+4>>2]=HEAP32[$8+4>>2]|0;HEAP32[$130+8>>2]=HEAP32[$8+8>>2]|0;HEAP32[$130+12>>2]=HEAP32[$8+12>>2]|0;HEAP32[$130+16>>2]=HEAP32[$8+16>>2]|0;HEAP32[$130+20>>2]=HEAP32[$8+20>>2]|0;HEAP32[$130+24>>2]=HEAP32[$8+24>>2]|0;HEAP32[$130+28>>2]=HEAP32[$8+28>>2]|0;
        $132 = $128;
       }
      }
      $131 = ($$024$i$i$i$ph>>>0)<($132>>>0);
      if ($131) {
       $$021$i$i$i = $132;
      } else {
       break;
      }
     }
     $133 = (($132) + 1)|0;
     $134 = ($$021$i$i$i>>>0)>($133>>>0);
     $135 = ($$024$i$i$i$ph>>>0)>($133>>>0);
     $or$cond27$i$i$i = $134 & $135;
     $136 = (($$020$i$i$i$ph) + ($133<<5)|0);
     $137 = (($$021$i$i$i) - ($133))|0;
     $138 = (($$024$i$i$i$ph) - ($133))|0;
     if ($or$cond27$i$i$i) {
      $$020$i$i$i$ph = $136;$$021$i$i$i$ph = $137;$$024$i$i$i$ph = $138;
     } else {
      break;
     }
    }
    $139 = HEAP32[$67>>2]|0;
    $140 = $139 & 1;
    $141 = ($140|0)==(0);
    $142 = HEAP32[$65>>2]|0;
    $143 = (($142) + ($86))|0;
    $144 = (($11) + ($143<<5)|0);
    $$sroa$0$0$copyload$i$i$i = +HEAPF32[$144>>2];
    $$sroa$4$0$$sroa_idx7$i$i$i = (((($11) + ($143<<5)|0)) + 4|0);
    $$sroa$4$0$copyload$i$i$i = +HEAPF32[$$sroa$4$0$$sroa_idx7$i$i$i>>2];
    $$sroa$5$0$$sroa_idx9$i$i$i = (((($11) + ($143<<5)|0)) + 8|0);
    $$sroa$5$0$copyload$i$i$i = +HEAPF32[$$sroa$5$0$$sroa_idx9$i$i$i>>2];
    $$sroa$6$0$$sroa_idx11$i$i$i = (((($11) + ($143<<5)|0)) + 12|0);
    $$sroa$6$0$copyload$i$i$i = +HEAPF32[$$sroa$6$0$$sroa_idx11$i$i$i>>2];
    if ($141) {
     $145 = (((($11) + ($143<<5)|0)) + 16|0);
     $146 = +HEAPF32[$145>>2];
     $147 = $146;
     $148 = $147 + 0.0;
     $149 = $$sroa$0$0$copyload$i$i$i;
     $150 = $149 * $147;
     $151 = $150 + 0.0;
     $152 = $$sroa$4$0$copyload$i$i$i;
     $153 = $152 * $147;
     $154 = $153 + 0.0;
     $155 = $$sroa$5$0$copyload$i$i$i;
     $156 = $155 * $147;
     $157 = $156 + 0.0;
     $158 = $$sroa$6$0$copyload$i$i$i;
     $159 = $158 * $147;
     $160 = $159 + 0.0;
     $$sroa$0$0$$sroa_idx$i$1$i$i = ((($144)) + 32|0);
     $$sroa$0$0$copyload$i$1$i$i = +HEAPF32[$$sroa$0$0$$sroa_idx$i$1$i$i>>2];
     $$sroa$4$0$$sroa_idx7$i$1$i$i = ((($144)) + 36|0);
     $$sroa$4$0$copyload$i$1$i$i = +HEAPF32[$$sroa$4$0$$sroa_idx7$i$1$i$i>>2];
     $$sroa$5$0$$sroa_idx9$i$1$i$i = ((($144)) + 40|0);
     $$sroa$5$0$copyload$i$1$i$i = +HEAPF32[$$sroa$5$0$$sroa_idx9$i$1$i$i>>2];
     $$sroa$6$0$$sroa_idx11$i$1$i$i = ((($144)) + 44|0);
     $$sroa$6$0$copyload$i$1$i$i = +HEAPF32[$$sroa$6$0$$sroa_idx11$i$1$i$i>>2];
     $161 = ((($144)) + 48|0);
     $162 = +HEAPF32[$161>>2];
     $163 = $162;
     $164 = $148 + $163;
     $165 = $$sroa$0$0$copyload$i$1$i$i;
     $166 = $165 * $163;
     $167 = $151 + $166;
     $168 = $$sroa$4$0$copyload$i$1$i$i;
     $169 = $168 * $163;
     $170 = $154 + $169;
     $171 = $$sroa$5$0$copyload$i$1$i$i;
     $172 = $171 * $163;
     $173 = $157 + $172;
     $174 = $$sroa$6$0$copyload$i$1$i$i;
     $175 = $174 * $163;
     $176 = $160 + $175;
     $177 = $164 != 0.0;
     if ($177) {
      $178 = $167 / $164;
      $179 = $170 / $164;
      $180 = $173 / $164;
      $181 = $176 / $164;
      $$1$i$i$i = $179;$$150$i$i$i = $180;$$152$i$i$i = $181;$$154$i$i$i = $178;
     } else {
      $$1$i$i$i = $170;$$150$i$i$i = $173;$$152$i$i$i = $176;$$154$i$i$i = $167;
     }
     $182 = $$154$i$i$i;
     $183 = $$1$i$i$i;
     $184 = $$150$i$i$i;
     $185 = $$152$i$i$i;
     $$sroa$0$0$i = $182;$$sroa$5$0$i = $183;$$sroa$7$0$i = $184;$$sroa$9$0$i = $185;
    } else {
     $$sroa$0$0$i = $$sroa$0$0$copyload$i$i$i;$$sroa$5$0$i = $$sroa$4$0$copyload$i$i$i;$$sroa$7$0$i = $$sroa$5$0$copyload$i$i$i;$$sroa$9$0$i = $$sroa$6$0$copyload$i$i$i;
    }
    $186 = (($142) + ($139))|0;
    $187 = ($142>>>0)<($186>>>0);
    if ($187) {
     $188 = $$sroa$5$0$i;
     $189 = $$sroa$7$0$i;
     $190 = $$sroa$9$0$i;
     $$04878$i = 0.0;$$079$i = $142;
     while(1) {
      $$sroa$062$0$$sroa_idx$i = (($11) + ($$079$i<<5)|0);
      HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$062$0$$sroa_idx$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$062$0$$sroa_idx$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$062$0$$sroa_idx$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$062$0$$sroa_idx$i+3>>0];$$sroa$062$0$copyload$i = +HEAPF32[tempDoublePtr>>2];
      $$sroa$4$0$$sroa_idx64$i = (((($11) + ($$079$i<<5)|0)) + 4|0);
      HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$4$0$$sroa_idx64$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$4$0$$sroa_idx64$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$4$0$$sroa_idx64$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$4$0$$sroa_idx64$i+3>>0];$$sroa$4$0$copyload$i = +HEAPF32[tempDoublePtr>>2];
      $$sroa$566$0$$sroa_idx67$i = (((($11) + ($$079$i<<5)|0)) + 8|0);
      HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$566$0$$sroa_idx67$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$566$0$$sroa_idx67$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$566$0$$sroa_idx67$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$566$0$$sroa_idx67$i+3>>0];$$sroa$566$0$copyload$i = +HEAPF32[tempDoublePtr>>2];
      $$sroa$6$0$$sroa_idx69$i = (((($11) + ($$079$i<<5)|0)) + 12|0);
      HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$6$0$$sroa_idx69$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$6$0$$sroa_idx69$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$6$0$$sroa_idx69$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$6$0$$sroa_idx69$i+3>>0];$$sroa$6$0$copyload$i = +HEAPF32[tempDoublePtr>>2];
      $$sroa$771$0$$sroa_idx72$i = (((($11) + ($$079$i<<5)|0)) + 16|0);
      HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$771$0$$sroa_idx72$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$771$0$$sroa_idx72$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$771$0$$sroa_idx72$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$771$0$$sroa_idx72$i+3>>0];$$sroa$771$0$copyload$i = +HEAPF32[tempDoublePtr>>2];
      $218 = $$sroa$062$0$copyload$i - $$sroa$0$0$i;
      $219 = $218;
      $220 = $$sroa$4$0$copyload$i;
      $221 = $188 - $220;
      $222 = $221 + $219;
      $223 = $221 * $221;
      $224 = $222 * $222;
      $225 = $223 > $224;
      $$$i$i$i$i$i116 = $225 ? $223 : $224;
      $226 = $$sroa$566$0$copyload$i;
      $227 = $189 - $226;
      $228 = $227 + $219;
      $229 = $227 * $227;
      $230 = $228 * $228;
      $231 = $229 > $230;
      $$$i5$i$i$i$i117 = $231 ? $229 : $230;
      $232 = $$$i$i$i$i$i116 + $$$i5$i$i$i$i117;
      $233 = $$sroa$6$0$copyload$i;
      $234 = $190 - $233;
      $235 = $234 + $219;
      $236 = $234 * $234;
      $237 = $235 * $235;
      $238 = $236 > $237;
      $$$i4$i$i$i$i118 = $238 ? $236 : $237;
      $239 = $232 + $$$i4$i$i$i$i118;
      $240 = $239;
      $241 = $240;
      $242 = (+Math_sqrt((+$241)));
      $243 = $$sroa$771$0$copyload$i;
      $244 = $243 + 1.0;
      $245 = (+Math_sqrt((+$244)));
      $246 = $245 + -1.0;
      $247 = $246 * $242;
      $248 = $247;
      $249 = (((($11) + ($$079$i<<5)|0)) + 24|0);
      HEAPF32[$249>>2] = $248;
      $250 = $248;
      $217 = $$04878$i + $250;
      $251 = (($$079$i) + 1)|0;
      $exitcond$i119 = ($251|0)==($186|0);
      if ($exitcond$i119) {
       break;
      } else {
       $$04878$i = $217;$$079$i = $251;
      }
     }
     $phitmp$i = $217 * 0.5;
     $$048$lcssa$i = $phitmp$i;
    } else {
     $$048$lcssa$i = 0.0;
    }
    HEAPF64[$10>>3] = 0.0;
    $252 = (($11) + ($66<<5)|0);
    $253 = (_hist_item_sort_halfvar($252,$68,$10,$$048$lcssa$i)|0);
    $254 = (($68) + -1)|0;
    $255 = $253;
    $256 = $252;
    $257 = (($255) - ($256))|0;
    $258 = $257 >> 5;
    $259 = (($258) + 1)|0;
    $260 = ($254>>>0)<($259>>>0);
    $$ = $260 ? $254 : $259;
    $261 = (((($12) + ($$2$i<<6)|0)) + 32|0);
    $262 = +HEAPF64[$261>>3];
    $263 = ($$|0)==(0);
    if ($263) {
     $$0101$lcssa = 0.0;
    } else {
     $$0100144 = 0;$$0101143 = 0.0;
     while(1) {
      $324 = (($$0100144) + ($66))|0;
      $325 = (((($11) + ($324<<5)|0)) + 16|0);
      $326 = +HEAPF32[$325>>2];
      $327 = $326;
      $328 = $$0101143 + $327;
      $329 = (($$0100144) + 1)|0;
      $330 = ($329>>>0)<($$>>>0);
      if ($330) {
       $$0100144 = $329;$$0101143 = $328;
      } else {
       $$0101$lcssa = $328;
       break;
      }
     }
    }
    _box_init($64,$11,$66,$$,$$0101$lcssa);
    $264 = (($12) + ($$0145<<6)|0);
    $265 = (($$) + ($66))|0;
    $266 = (($68) - ($$))|0;
    $267 = $262 - $$0101$lcssa;
    _box_init($264,$11,$265,$266,$267);
    $268 = (($$0145) + 1)|0;
    $269 = +HEAPF64[$25>>3];
    $270 = $269 * $2;
    $$03650$i = 0;$$03749$i = 0.0;
    while(1) {
     $273 = (((($12) + ($$03650$i<<6)|0)) + 40|0);
     $274 = +HEAPF64[$273>>3];
     $275 = !($274 >= 0.0);
     $276 = $$03749$i + $274;
     $$138$i = $275 ? $$03749$i : $276;
     $277 = $$138$i > $270;
     if ($277) {
      break;
     }
     $271 = (($$03650$i) + 1)|0;
     $272 = ($$03650$i>>>0)<($$0145>>>0);
     if ($272) {
      $$03650$i = $271;$$03749$i = $$138$i;
     } else {
      label = 51;
      break;
     }
    }
    L77: do {
     if ((label|0) == 51) {
      label = 0;
      $$046$i = 0;$$345$i = $$138$i;
      while(1) {
       $280 = (((($12) + ($$046$i<<6)|0)) + 40|0);
       $281 = +HEAPF64[$280>>3];
       $282 = $281 < 0.0;
       if ($282) {
        $283 = HEAP32[$0>>2]|0;
        $$sroa$0$0$$sroa_idx$i$i = (($12) + ($$046$i<<6)|0);
        $$sroa$0$0$copyload$i$i = +HEAPF32[$$sroa$0$0$$sroa_idx$i$i>>2];
        $284 = (((($12) + ($$046$i<<6)|0)) + 60|0);
        $285 = HEAP32[$284>>2]|0;
        $286 = ($285|0)==(0);
        if ($286) {
         $$014$lcssa$i$i = 0.0;
        } else {
         $$sroa$6$0$$sroa_idx20$i$i = (((($12) + ($$046$i<<6)|0)) + 12|0);
         $$sroa$6$0$copyload$i$i = +HEAPF32[$$sroa$6$0$$sroa_idx20$i$i>>2];
         $$sroa$5$0$$sroa_idx18$i$i = (((($12) + ($$046$i<<6)|0)) + 8|0);
         $$sroa$5$0$copyload$i$i = +HEAPF32[$$sroa$5$0$$sroa_idx18$i$i>>2];
         $$sroa$4$0$$sroa_idx16$i$i = (((($12) + ($$046$i<<6)|0)) + 4|0);
         $$sroa$4$0$copyload$i$i = +HEAPF32[$$sroa$4$0$$sroa_idx16$i$i>>2];
         $287 = (((($12) + ($$046$i<<6)|0)) + 56|0);
         $288 = HEAP32[$287>>2]|0;
         $289 = $$sroa$4$0$copyload$i$i;
         $290 = $$sroa$5$0$copyload$i$i;
         $291 = $$sroa$6$0$copyload$i$i;
         $$01433$i$i = 0.0;$$034$i$i = 0;
         while(1) {
          $292 = (($$034$i$i) + ($288))|0;
          $$sroa$022$0$$sroa_idx$i$i = (($283) + ($292<<5)|0);
          HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$022$0$$sroa_idx$i$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$022$0$$sroa_idx$i$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$022$0$$sroa_idx$i$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$022$0$$sroa_idx$i$i+3>>0];$$sroa$022$0$copyload$i$i = +HEAPF32[tempDoublePtr>>2];
          $$sroa$424$0$$sroa_idx25$i$i = (((($283) + ($292<<5)|0)) + 4|0);
          HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$424$0$$sroa_idx25$i$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$424$0$$sroa_idx25$i$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$424$0$$sroa_idx25$i$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$424$0$$sroa_idx25$i$i+3>>0];$$sroa$424$0$copyload$i$i = +HEAPF32[tempDoublePtr>>2];
          $$sroa$527$0$$sroa_idx28$i$i = (((($283) + ($292<<5)|0)) + 8|0);
          HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$527$0$$sroa_idx28$i$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$527$0$$sroa_idx28$i$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$527$0$$sroa_idx28$i$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$527$0$$sroa_idx28$i$i+3>>0];$$sroa$527$0$copyload$i$i = +HEAPF32[tempDoublePtr>>2];
          $$sroa$630$0$$sroa_idx31$i$i = (((($283) + ($292<<5)|0)) + 12|0);
          HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$630$0$$sroa_idx31$i$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$630$0$$sroa_idx31$i$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$630$0$$sroa_idx31$i$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$630$0$$sroa_idx31$i$i+3>>0];$$sroa$630$0$copyload$i$i = +HEAPF32[tempDoublePtr>>2];
          $293 = $$sroa$022$0$copyload$i$i - $$sroa$0$0$copyload$i$i;
          $294 = $293;
          $295 = $$sroa$424$0$copyload$i$i;
          $296 = $289 - $295;
          $297 = $296 + $294;
          $298 = $296 * $296;
          $299 = $297 * $297;
          $300 = $298 > $299;
          $$$i$i$i$i$i = $300 ? $298 : $299;
          $301 = $$sroa$527$0$copyload$i$i;
          $302 = $290 - $301;
          $303 = $302 + $294;
          $304 = $302 * $302;
          $305 = $303 * $303;
          $306 = $304 > $305;
          $$$i5$i$i$i$i = $306 ? $304 : $305;
          $307 = $$$i$i$i$i$i + $$$i5$i$i$i$i;
          $308 = $$sroa$630$0$copyload$i$i;
          $309 = $291 - $308;
          $310 = $309 + $294;
          $311 = $309 * $309;
          $312 = $310 * $310;
          $313 = $311 > $312;
          $$$i4$i$i$i$i = $313 ? $311 : $312;
          $314 = $307 + $$$i4$i$i$i$i;
          $315 = $314;
          $316 = (((($283) + ($292<<5)|0)) + 20|0);
          $317 = +HEAPF32[$316>>2];
          $318 = $317 * $315;
          $319 = $318;
          $320 = $$01433$i$i + $319;
          $321 = (($$034$i$i) + 1)|0;
          $exitcond$i113 = ($321|0)==($285|0);
          if ($exitcond$i113) {
           $$014$lcssa$i$i = $320;
           break;
          } else {
           $$01433$i$i = $320;$$034$i$i = $321;
          }
         }
        }
        HEAPF64[$280>>3] = $$014$lcssa$i$i;
        $322 = $$345$i + $$014$lcssa$i$i;
        $$4$i = $322;
       } else {
        $$4$i = $$345$i;
       }
       $323 = $$4$i > $270;
       if ($323) {
        break L77;
       }
       $278 = (($$046$i) + 1)|0;
       $279 = ($$046$i>>>0)<($$0145>>>0);
       if ($279) {
        $$046$i = $278;$$345$i = $$4$i;
       } else {
        break L8;
       }
      }
     }
    } while(0);
    $331 = ($268>>>0)<($1>>>0);
    if ($331) {
     $$0145 = $268;
    } else {
     $$2 = $268;
     break L6;
    }
   }
   $$2 = $268;
  } else {
   $$2 = 1;
  }
 } while(0);
 $332 = (_pam_colormap($$2,$4,$5)|0);
 $$02325$i = 0;
 while(1) {
  $333 = (((($332)) + 12|0) + (($$02325$i*24)|0)|0);
  $334 = (($12) + ($$02325$i<<6)|0);
  ;HEAP32[$333>>2]=HEAP32[$334>>2]|0;HEAP32[$333+4>>2]=HEAP32[$334+4>>2]|0;HEAP32[$333+8>>2]=HEAP32[$334+8>>2]|0;HEAP32[$333+12>>2]=HEAP32[$334+12>>2]|0;
  $335 = (((((($332)) + 12|0) + (($$02325$i*24)|0)|0)) + 16|0);
  HEAPF32[$335>>2] = 0.0;
  $336 = (((($12) + ($$02325$i<<6)|0)) + 56|0);
  $337 = HEAP32[$336>>2]|0;
  $338 = (((($12) + ($$02325$i<<6)|0)) + 60|0);
  $339 = HEAP32[$338>>2]|0;
  $340 = (($339) + ($337))|0;
  $341 = ($337>>>0)<($340>>>0);
  if ($341) {
   $$024$i = $337;$346 = 0.0;
   while(1) {
    $344 = (((($11) + ($$024$i<<5)|0)) + 20|0);
    $345 = +HEAPF32[$344>>2];
    $342 = $346 + $345;
    $347 = (($$024$i) + 1)|0;
    $exitcond = ($347|0)==($340|0);
    if ($exitcond) {
     break;
    } else {
     $$024$i = $347;$346 = $342;
    }
   }
   HEAPF32[$335>>2] = $342;
  }
  $343 = (($$02325$i) + 1)|0;
  $exitcond$i111 = ($343|0)==($$2|0);
  if ($exitcond$i111) {
   break;
  } else {
   $$02325$i = $343;
  }
 }
 $$01618$i = 0;
 while(1) {
  $348 = (((($12) + ($$01618$i<<6)|0)) + 56|0);
  $349 = HEAP32[$348>>2]|0;
  $350 = (((($12) + ($$01618$i<<6)|0)) + 60|0);
  $351 = HEAP32[$350>>2]|0;
  $352 = (($351) + ($349))|0;
  $353 = ($349>>>0)<($352>>>0);
  if ($353) {
   $354 = $$01618$i&255;
   $$017$i = $349;
   while(1) {
    $356 = (((($11) + ($$017$i<<5)|0)) + 28|0);
    HEAP8[$356>>0] = $354;
    $357 = (($$017$i) + 1)|0;
    $358 = HEAP32[$348>>2]|0;
    $359 = HEAP32[$350>>2]|0;
    $360 = (($359) + ($358))|0;
    $361 = ($357>>>0)<($360>>>0);
    if ($361) {
     $$017$i = $357;
    } else {
     break;
    }
   }
  }
  $355 = (($$01618$i) + 1)|0;
  $exitcond$i108 = ($355|0)==($$2|0);
  if ($exitcond$i108) {
   break;
  } else {
   $$01618$i = $355;
  }
 }
 STACKTOP = sp;return ($332|0);
}
function _box_init($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = +$4;
 var $$$i$i$i$i = 0.0, $$$i4$i$i$i = 0.0, $$$i5$i$i$i = 0.0, $$0$i$i = 0.0, $$0$i54$i = 0.0, $$0$i55$i = 0.0, $$0$i56$i = 0.0, $$0$lcssa$i = 0.0, $$0$lcssa$i25 = 0.0, $$01534$i = 0, $$035$i = 0.0, $$04961$i = 0.0, $$050$lcssa$i = 0.0, $$05060$i = 0.0, $$051$lcssa$i = 0.0, $$05159$i = 0.0, $$05160$i = 0.0, $$052$lcssa$i = 0.0, $$05258$i = 0.0, $$05357$i = 0;
 var $$05359$i = 0.0, $$05558$i = 0.0, $$05657$i = 0, $$061$i = 0.0, $$062$i = 0.0, $$1$i = 0.0, $$1$i23 = 0.0, $$150$i = 0.0, $$152$i = 0.0, $$154$i = 0.0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$$sroa_idx$i = 0, $$sroa$0$0$$sroa_idx$i27 = 0, $$sroa$0$0$copyload$i = 0.0, $$sroa$0$0$copyload$i28 = 0.0, $$sroa$023$0$$sroa_idx$i = 0, $$sroa$023$0$copyload$i = 0.0, $$sroa$2$0$$sroa_idx32 = 0, $$sroa$236$0$$sroa_idx37 = 0, $$sroa$3$0$$sroa_idx33 = 0;
 var $$sroa$338$0$$sroa_idx39 = 0, $$sroa$4$0$$sroa_idx34 = 0, $$sroa$4$0$$sroa_idx6$i = 0, $$sroa$4$0$$sroa_idx7$i = 0, $$sroa$4$0$copyload$i = 0.0, $$sroa$4$0$copyload$i29 = 0.0, $$sroa$425$0$$sroa_idx26$i = 0, $$sroa$425$0$copyload$i = 0.0, $$sroa$440$0$$sroa_idx41 = 0, $$sroa$5$0$$sroa_idx8$i = 0, $$sroa$5$0$$sroa_idx9$i = 0, $$sroa$5$0$copyload$i = 0.0, $$sroa$5$0$copyload$i30 = 0.0, $$sroa$528$0$$sroa_idx29$i = 0, $$sroa$528$0$copyload$i = 0.0, $$sroa$6$0$$sroa_idx10$i = 0, $$sroa$6$0$$sroa_idx11$i = 0, $$sroa$6$0$copyload$i = 0.0, $$sroa$6$0$copyload$i31 = 0.0, $$sroa$631$0$$sroa_idx32$i = 0;
 var $$sroa$631$0$copyload$i = 0.0, $10 = 0, $100 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0, $29 = 0.0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0.0, $40 = 0.0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0;
 var $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0;
 var $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0.0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0.0, $83 = 0.0;
 var $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond58 = 0;
 var $phitmp$i = 0.0, $phitmp68$i = 0.0, $phitmp69$i = 0.0, $phitmp70$i = 0.0, $phitmp71$i = 0.0, $phitmp72$i = 0.0, $phitmp73$i = 0.0, $phitmp74$i = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 56|0);
 HEAP32[$5>>2] = $2;
 $6 = ((($0)) + 60|0);
 HEAP32[$6>>2] = $3;
 $7 = ((($0)) + 32|0);
 HEAPF64[$7>>3] = $4;
 $8 = ((($0)) + 40|0);
 HEAPF64[$8>>3] = -1.0;
 $9 = (($1) + ($2<<5)|0);
 $10 = ($3|0)==(0);
 if ($10) {
  $$1$i = 0.0;$$150$i = 0.0;$$152$i = 0.0;$$154$i = 0.0;
 } else {
  $$04961$i = 0.0;$$05160$i = 0.0;$$05359$i = 0.0;$$05558$i = 0.0;$$05657$i = 0;$$062$i = 0.0;
  while(1) {
   $$sroa$0$0$$sroa_idx$i = (($9) + ($$05657$i<<5)|0);
   $$sroa$0$0$copyload$i = +HEAPF32[$$sroa$0$0$$sroa_idx$i>>2];
   $$sroa$4$0$$sroa_idx7$i = (((($9) + ($$05657$i<<5)|0)) + 4|0);
   $$sroa$4$0$copyload$i = +HEAPF32[$$sroa$4$0$$sroa_idx7$i>>2];
   $$sroa$5$0$$sroa_idx9$i = (((($9) + ($$05657$i<<5)|0)) + 8|0);
   $$sroa$5$0$copyload$i = +HEAPF32[$$sroa$5$0$$sroa_idx9$i>>2];
   $$sroa$6$0$$sroa_idx11$i = (((($9) + ($$05657$i<<5)|0)) + 12|0);
   $$sroa$6$0$copyload$i = +HEAPF32[$$sroa$6$0$$sroa_idx11$i>>2];
   $13 = (((($9) + ($$05657$i<<5)|0)) + 16|0);
   $14 = +HEAPF32[$13>>2];
   $15 = $14;
   $12 = $$05558$i + $15;
   $16 = $$sroa$0$0$copyload$i;
   $17 = $16 * $15;
   $18 = $$05359$i + $17;
   $19 = $$sroa$4$0$copyload$i;
   $20 = $19 * $15;
   $21 = $$062$i + $20;
   $22 = $$sroa$5$0$copyload$i;
   $23 = $22 * $15;
   $24 = $$04961$i + $23;
   $25 = $$sroa$6$0$copyload$i;
   $26 = $25 * $15;
   $27 = $$05160$i + $26;
   $28 = (($$05657$i) + 1)|0;
   $exitcond$i = ($28|0)==($3|0);
   if ($exitcond$i) {
    break;
   } else {
    $$04961$i = $24;$$05160$i = $27;$$05359$i = $18;$$05558$i = $12;$$05657$i = $28;$$062$i = $21;
   }
  }
  $11 = $12 != 0.0;
  if ($11) {
   $29 = $18 / $12;
   $30 = $21 / $12;
   $31 = $24 / $12;
   $32 = $27 / $12;
   $$1$i = $30;$$150$i = $31;$$152$i = $32;$$154$i = $29;
  } else {
   $$1$i = $21;$$150$i = $24;$$152$i = $27;$$154$i = $18;
  }
 }
 $33 = $$154$i;
 $34 = $$1$i;
 $35 = $$150$i;
 $36 = $$152$i;
 HEAPF32[$0>>2] = $33;
 $$sroa$236$0$$sroa_idx37 = ((($0)) + 4|0);
 HEAPF32[$$sroa$236$0$$sroa_idx37>>2] = $34;
 $$sroa$338$0$$sroa_idx39 = ((($0)) + 8|0);
 HEAPF32[$$sroa$338$0$$sroa_idx39>>2] = $35;
 $$sroa$440$0$$sroa_idx41 = ((($0)) + 12|0);
 HEAPF32[$$sroa$440$0$$sroa_idx41>>2] = $36;
 if ($10) {
  $$0$lcssa$i25 = 0.0;$$050$lcssa$i = 0.0;$$051$lcssa$i = 0.0;$$052$lcssa$i = 0.0;
 } else {
  $$05060$i = 0.0;$$05159$i = 0.0;$$05258$i = 0.0;$$05357$i = 0;$$061$i = 0.0;
  while(1) {
   $41 = (($$05357$i) + ($2))|0;
   $$sroa$0$0$$sroa_idx$i27 = (($1) + ($41<<5)|0);
   $$sroa$0$0$copyload$i28 = +HEAPF32[$$sroa$0$0$$sroa_idx$i27>>2];
   $$sroa$4$0$$sroa_idx6$i = (((($1) + ($41<<5)|0)) + 4|0);
   $$sroa$4$0$copyload$i29 = +HEAPF32[$$sroa$4$0$$sroa_idx6$i>>2];
   $$sroa$5$0$$sroa_idx8$i = (((($1) + ($41<<5)|0)) + 8|0);
   $$sroa$5$0$copyload$i30 = +HEAPF32[$$sroa$5$0$$sroa_idx8$i>>2];
   $$sroa$6$0$$sroa_idx10$i = (((($1) + ($41<<5)|0)) + 12|0);
   $$sroa$6$0$copyload$i31 = +HEAPF32[$$sroa$6$0$$sroa_idx10$i>>2];
   $42 = (((($1) + ($41<<5)|0)) + 16|0);
   $43 = +HEAPF32[$42>>2];
   $44 = $43;
   $45 = $33 - $$sroa$0$0$copyload$i28;
   $46 = $45;
   $47 = $46 * $46;
   $48 = $47 < 6.103515625E-5;
   $49 = $47 * 0.25;
   $$0$i$i = $48 ? $49 : $47;
   $50 = $$0$i$i * $44;
   $37 = $$061$i + $50;
   $51 = $34 - $$sroa$4$0$copyload$i29;
   $52 = $51;
   $53 = $52 * $52;
   $54 = $53 < 1.52587890625E-5;
   $55 = $53 * 0.25;
   $$0$i56$i = $54 ? $55 : $53;
   $56 = $$0$i56$i * $44;
   $38 = $$05060$i + $56;
   $57 = $35 - $$sroa$5$0$copyload$i30;
   $58 = $57;
   $59 = $58 * $58;
   $60 = $59 < 1.52587890625E-5;
   $61 = $59 * 0.25;
   $$0$i55$i = $60 ? $61 : $59;
   $62 = $$0$i55$i * $44;
   $39 = $$05159$i + $62;
   $63 = $36 - $$sroa$6$0$copyload$i31;
   $64 = $63;
   $65 = $64 * $64;
   $66 = $65 < 1.52587890625E-5;
   $67 = $65 * 0.25;
   $$0$i54$i = $66 ? $67 : $65;
   $68 = $$0$i54$i * $44;
   $40 = $$05258$i + $68;
   $69 = (($$05357$i) + 1)|0;
   $exitcond58 = ($69|0)==($3|0);
   if ($exitcond58) {
    break;
   } else {
    $$05060$i = $38;$$05159$i = $39;$$05258$i = $40;$$05357$i = $69;$$061$i = $37;
   }
  }
  $phitmp$i = $37 * 0.25;
  $phitmp68$i = $phitmp$i;
  $phitmp69$i = $38 * 0.4375;
  $phitmp70$i = $phitmp69$i;
  $phitmp71$i = $39 * 0.5625;
  $phitmp72$i = $phitmp71$i;
  $phitmp73$i = $40 * 0.3125;
  $phitmp74$i = $phitmp73$i;
  $$0$lcssa$i25 = $phitmp68$i;$$050$lcssa$i = $phitmp70$i;$$051$lcssa$i = $phitmp72$i;$$052$lcssa$i = $phitmp74$i;
 }
 $$sroa$0$0$$sroa_idx = ((($0)) + 16|0);
 HEAPF32[$$sroa$0$0$$sroa_idx>>2] = $$0$lcssa$i25;
 $$sroa$2$0$$sroa_idx32 = ((($0)) + 20|0);
 HEAPF32[$$sroa$2$0$$sroa_idx32>>2] = $$050$lcssa$i;
 $$sroa$3$0$$sroa_idx33 = ((($0)) + 24|0);
 HEAPF32[$$sroa$3$0$$sroa_idx33>>2] = $$051$lcssa$i;
 $$sroa$4$0$$sroa_idx34 = ((($0)) + 28|0);
 HEAPF32[$$sroa$4$0$$sroa_idx34>>2] = $$052$lcssa$i;
 if ($10) {
  $$0$lcssa$i = 0.0;
  $100 = ((($0)) + 48|0);
  HEAPF64[$100>>3] = $$0$lcssa$i;
  return;
 }
 $70 = $34;
 $71 = $35;
 $72 = $36;
 $$01534$i = 0;$$035$i = 0.0;
 while(1) {
  $73 = (($$01534$i) + ($2))|0;
  $$sroa$023$0$$sroa_idx$i = (($1) + ($73<<5)|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$023$0$$sroa_idx$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$023$0$$sroa_idx$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$023$0$$sroa_idx$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$023$0$$sroa_idx$i+3>>0];$$sroa$023$0$copyload$i = +HEAPF32[tempDoublePtr>>2];
  $$sroa$425$0$$sroa_idx26$i = (((($1) + ($73<<5)|0)) + 4|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$425$0$$sroa_idx26$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$425$0$$sroa_idx26$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$425$0$$sroa_idx26$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$425$0$$sroa_idx26$i+3>>0];$$sroa$425$0$copyload$i = +HEAPF32[tempDoublePtr>>2];
  $$sroa$528$0$$sroa_idx29$i = (((($1) + ($73<<5)|0)) + 8|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$528$0$$sroa_idx29$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$528$0$$sroa_idx29$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$528$0$$sroa_idx29$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$528$0$$sroa_idx29$i+3>>0];$$sroa$528$0$copyload$i = +HEAPF32[tempDoublePtr>>2];
  $$sroa$631$0$$sroa_idx32$i = (((($1) + ($73<<5)|0)) + 12|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$631$0$$sroa_idx32$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$631$0$$sroa_idx32$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$631$0$$sroa_idx32$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$631$0$$sroa_idx32$i+3>>0];$$sroa$631$0$copyload$i = +HEAPF32[tempDoublePtr>>2];
  $74 = $$sroa$023$0$copyload$i - $33;
  $75 = $74;
  $76 = $$sroa$425$0$copyload$i;
  $77 = $70 - $76;
  $78 = $77 + $75;
  $79 = $77 * $77;
  $80 = $78 * $78;
  $81 = $79 > $80;
  $$$i$i$i$i = $81 ? $79 : $80;
  $82 = $$sroa$528$0$copyload$i;
  $83 = $71 - $82;
  $84 = $83 + $75;
  $85 = $83 * $83;
  $86 = $84 * $84;
  $87 = $85 > $86;
  $$$i5$i$i$i = $87 ? $85 : $86;
  $88 = $$$i$i$i$i + $$$i5$i$i$i;
  $89 = $$sroa$631$0$copyload$i;
  $90 = $72 - $89;
  $91 = $90 + $75;
  $92 = $90 * $90;
  $93 = $91 * $91;
  $94 = $92 > $93;
  $$$i4$i$i$i = $94 ? $92 : $93;
  $95 = $88 + $$$i4$i$i$i;
  $96 = $95;
  $97 = $96;
  $98 = $$035$i < $97;
  $$1$i23 = $98 ? $97 : $$035$i;
  $99 = (($$01534$i) + 1)|0;
  $exitcond = ($99|0)==($3|0);
  if ($exitcond) {
   $$0$lcssa$i = $$1$i23;
   break;
  } else {
   $$01534$i = $99;$$035$i = $$1$i23;
  }
 }
 $100 = ((($0)) + 48|0);
 HEAPF64[$100>>3] = $$0$lcssa$i;
 return;
}
function _comparevariance($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0.0, $4 = 0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = +HEAPF32[$2>>2];
 $4 = ((($1)) + 4|0);
 $5 = +HEAPF32[$4>>2];
 $6 = $3 > $5;
 $7 = $3 < $5;
 $8 = $7&1;
 $9 = $6 ? -1 : $8;
 return ($9|0);
}
function _hist_item_sort_halfvar($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = +$3;
 var $$0$lcssa$i = 0, $$03144$i = 0, $$045$i = 0, $$05376 = 0.0, $$05475 = 0, $$055 = 0, $$057 = 0, $$1$i = 0, $$2$i = 0, $$365 = 0, $$in$i = 0, $$lcssa$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0;
 var $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0.0, $73 = 0.0;
 var $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = sp + 64|0;
 $5 = sp + 32|0;
 $6 = sp;
 $$055 = $0;$$057 = $1;
 L1: while(1) {
  $7 = ($$057>>>0)>(7);
  L3: do {
   if ($7) {
    $8 = ($$057>>>0)<(32);
    $9 = $$057 >>> 1;
    do {
     if ($8) {
      $27 = $9;
     } else {
      $10 = (($$057) + -1)|0;
      $11 = ((($$055)) + 284|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (((($$055) + ($9<<5)|0)) + 28|0);
      $14 = HEAP32[$13>>2]|0;
      $15 = (((($$055) + ($10<<5)|0)) + 28|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = ($12>>>0)<($14>>>0);
      if ($17) {
       $18 = ($14>>>0)<($16>>>0);
       $19 = ($12>>>0)<($16>>>0);
       $20 = $19 ? $10 : 8;
       if ($18) {
        $27 = $9;
        break;
       } else {
        $24 = $20;
       }
      } else {
       $21 = ($14>>>0)>($16>>>0);
       $22 = ($12>>>0)<($16>>>0);
       $23 = $22 ? 8 : $10;
       if ($21) {
        $27 = $9;
        break;
       } else {
        $24 = $23;
       }
      }
      $25 = ($24|0)==(0);
      if ($25) {
       label = 10;
       break L3;
      } else {
       $27 = $24;
      }
     }
    } while(0);
    $26 = (($$055) + ($27<<5)|0);
    ;HEAP32[$4>>2]=HEAP32[$$055>>2]|0;HEAP32[$4+4>>2]=HEAP32[$$055+4>>2]|0;HEAP32[$4+8>>2]=HEAP32[$$055+8>>2]|0;HEAP32[$4+12>>2]=HEAP32[$$055+12>>2]|0;HEAP32[$4+16>>2]=HEAP32[$$055+16>>2]|0;HEAP32[$4+20>>2]=HEAP32[$$055+20>>2]|0;HEAP32[$4+24>>2]=HEAP32[$$055+24>>2]|0;HEAP32[$4+28>>2]=HEAP32[$$055+28>>2]|0;
    ;HEAP32[$$055>>2]=HEAP32[$26>>2]|0;HEAP32[$$055+4>>2]=HEAP32[$26+4>>2]|0;HEAP32[$$055+8>>2]=HEAP32[$26+8>>2]|0;HEAP32[$$055+12>>2]=HEAP32[$26+12>>2]|0;HEAP32[$$055+16>>2]=HEAP32[$26+16>>2]|0;HEAP32[$$055+20>>2]=HEAP32[$26+20>>2]|0;HEAP32[$$055+24>>2]=HEAP32[$26+24>>2]|0;HEAP32[$$055+28>>2]=HEAP32[$26+28>>2]|0;
    ;HEAP32[$26>>2]=HEAP32[$4>>2]|0;HEAP32[$26+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$26+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$26+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$26+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$26+20>>2]=HEAP32[$4+20>>2]|0;HEAP32[$26+24>>2]=HEAP32[$4+24>>2]|0;HEAP32[$26+28>>2]=HEAP32[$4+28>>2]|0;
    label = 10;
   } else {
    $28 = ($$057>>>0)>(1);
    if ($28) {
     label = 10;
    } else {
     $50 = 0;
    }
   }
  } while(0);
  if ((label|0) == 10) {
   label = 0;
   $$in$i = ((($$055)) + 28|0);
   $29 = HEAP32[$$in$i>>2]|0;
   $$03144$i = $$057;$$045$i = 1;
   while(1) {
    $30 = (($$055) + ($$045$i<<5)|0);
    $31 = (((($$055) + ($$045$i<<5)|0)) + 28|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32>>>0)<($29>>>0);
    if ($33) {
     $35 = (($$03144$i) + -1)|0;
     $36 = ($$045$i>>>0)<($35>>>0);
     L19: do {
      if ($36) {
       $38 = $35;
       while(1) {
        $40 = (((($$055) + ($38<<5)|0)) + 28|0);
        $41 = HEAP32[$40>>2]|0;
        $42 = ($41>>>0)>($29>>>0);
        if ($42) {
         $$lcssa$i = $38;
         break L19;
        }
        $37 = (($38) + -1)|0;
        $39 = ($$045$i>>>0)<($37>>>0);
        if ($39) {
         $38 = $37;
        } else {
         $$lcssa$i = $37;
         break;
        }
       }
      } else {
       $$lcssa$i = $35;
      }
     } while(0);
     $43 = ($$045$i|0)==($$lcssa$i|0);
     if ($43) {
      $$0$lcssa$i = $$045$i;
      break;
     }
     $44 = (($$055) + ($$lcssa$i<<5)|0);
     ;HEAP32[$5>>2]=HEAP32[$30>>2]|0;HEAP32[$5+4>>2]=HEAP32[$30+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$30+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$30+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[$30+16>>2]|0;HEAP32[$5+20>>2]=HEAP32[$30+20>>2]|0;HEAP32[$5+24>>2]=HEAP32[$30+24>>2]|0;HEAP32[$5+28>>2]=HEAP32[$30+28>>2]|0;
     ;HEAP32[$30>>2]=HEAP32[$44>>2]|0;HEAP32[$30+4>>2]=HEAP32[$44+4>>2]|0;HEAP32[$30+8>>2]=HEAP32[$44+8>>2]|0;HEAP32[$30+12>>2]=HEAP32[$44+12>>2]|0;HEAP32[$30+16>>2]=HEAP32[$44+16>>2]|0;HEAP32[$30+20>>2]=HEAP32[$44+20>>2]|0;HEAP32[$30+24>>2]=HEAP32[$44+24>>2]|0;HEAP32[$30+28>>2]=HEAP32[$44+28>>2]|0;
     ;HEAP32[$44>>2]=HEAP32[$5>>2]|0;HEAP32[$44+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[$44+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[$44+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[$44+16>>2]=HEAP32[$5+16>>2]|0;HEAP32[$44+20>>2]=HEAP32[$5+20>>2]|0;HEAP32[$44+24>>2]=HEAP32[$5+24>>2]|0;HEAP32[$44+28>>2]=HEAP32[$5+28>>2]|0;
     $$1$i = $$045$i;$$2$i = $$lcssa$i;
    } else {
     $34 = (($$045$i) + 1)|0;
     $$1$i = $34;$$2$i = $$03144$i;
    }
    $45 = ($$1$i>>>0)<($$2$i>>>0);
    if ($45) {
     $$03144$i = $$2$i;$$045$i = $$1$i;
    } else {
     $$0$lcssa$i = $$1$i;
     break;
    }
   }
   $46 = (($$0$lcssa$i) + -1)|0;
   $47 = ($46|0)==(0);
   if ($47) {
    $50 = 0;
   } else {
    $48 = (($$055) + ($46<<5)|0);
    ;HEAP32[$6>>2]=HEAP32[$$055>>2]|0;HEAP32[$6+4>>2]=HEAP32[$$055+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$$055+8>>2]|0;HEAP32[$6+12>>2]=HEAP32[$$055+12>>2]|0;HEAP32[$6+16>>2]=HEAP32[$$055+16>>2]|0;HEAP32[$6+20>>2]=HEAP32[$$055+20>>2]|0;HEAP32[$6+24>>2]=HEAP32[$$055+24>>2]|0;HEAP32[$6+28>>2]=HEAP32[$$055+28>>2]|0;
    ;HEAP32[$$055>>2]=HEAP32[$48>>2]|0;HEAP32[$$055+4>>2]=HEAP32[$48+4>>2]|0;HEAP32[$$055+8>>2]=HEAP32[$48+8>>2]|0;HEAP32[$$055+12>>2]=HEAP32[$48+12>>2]|0;HEAP32[$$055+16>>2]=HEAP32[$48+16>>2]|0;HEAP32[$$055+20>>2]=HEAP32[$48+20>>2]|0;HEAP32[$$055+24>>2]=HEAP32[$48+24>>2]|0;HEAP32[$$055+28>>2]=HEAP32[$48+28>>2]|0;
    ;HEAP32[$48>>2]=HEAP32[$6>>2]|0;HEAP32[$48+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[$48+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[$48+12>>2]=HEAP32[$6+12>>2]|0;HEAP32[$48+16>>2]=HEAP32[$6+16>>2]|0;HEAP32[$48+20>>2]=HEAP32[$6+20>>2]|0;HEAP32[$48+24>>2]=HEAP32[$6+24>>2]|0;HEAP32[$48+28>>2]=HEAP32[$6+28>>2]|0;
    $50 = $46;
   }
  }
  $49 = (($50) + 1)|0;
  $51 = +HEAPF64[$2>>3];
  $52 = $51 < $3;
  if ($52) {
   $$05376 = $51;$$05475 = 0;
   while(1) {
    $53 = (($$05475) + 1)|0;
    $54 = (((($$055) + ($$05475<<5)|0)) + 24|0);
    $55 = +HEAPF32[$54>>2];
    $56 = $55;
    $57 = $$05376 + $56;
    $58 = ($53>>>0)<=($50>>>0);
    $59 = $57 < $3;
    $or$cond = $58 & $59;
    if ($or$cond) {
     $$05376 = $57;$$05475 = $53;
    } else {
     break;
    }
   }
   if ($59) {
    HEAPF64[$2>>3] = $57;
   } else {
    label = 27;
   }
  } else {
   label = 27;
  }
  do {
   if ((label|0) == 27) {
    label = 0;
    $60 = ($50|0)==(0);
    if ($60) {
     $63 = ((($$055)) + 24|0);
     $64 = +HEAPF32[$63>>2];
     $65 = $64;
     $66 = $51 + $65;
     HEAPF64[$2>>3] = $66;
     $67 = $66 > $3;
     if ($67) {
      $$365 = $$055;
      label = 33;
      break L1;
     } else {
      break;
     }
    } else {
     $61 = (_hist_item_sort_halfvar($$055,$50,$2,$3)|0);
     $62 = ($61|0)==(0|0);
     if ($62) {
      break;
     } else {
      $$365 = $61;
      label = 33;
      break L1;
     }
    }
   }
  } while(0);
  $68 = ($$057>>>0)>($49>>>0);
  if (!($68)) {
   label = 32;
   break;
  }
  $69 = (($$055) + ($49<<5)|0);
  $70 = (($$057) - ($49))|0;
  $$055 = $69;$$057 = $70;
 }
 if ((label|0) == 32) {
  $71 = (((($$055) + ($49<<5)|0)) + 24|0);
  $72 = +HEAPF32[$71>>2];
  $73 = $72;
  $74 = +HEAPF64[$2>>3];
  $75 = $74 + $73;
  HEAPF64[$2>>3] = $75;
  $76 = $75 > $3;
  $77 = (($$055) + ($49<<5)|0);
  $78 = $76 ? $77 : 0;
  $$365 = $78;
  STACKTOP = sp;return ($$365|0);
 }
 else if ((label|0) == 33) {
  STACKTOP = sp;return ($$365|0);
 }
 return (0)|0;
}
function _liq_max3($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$us = 0, $$07385 = 0, $$07385$us = 0, $$07480$us = 0, $$07480$us$phi = 0, $$07579$us = 0, $$07678$us = 0, $$086 = 0, $$086$us = 0, $$181$us = 0, $$v = 0, $$v$us = 0, $$v77$us = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond93 = 0, $exitcond94 = 0, $scevgep92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = (($3) + -1)|0;
 $6 = (($2) + -1)|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $$07385 = 0;$$086 = $1;
  while(1) {
   $52 = Math_imul($$07385, $2)|0;
   $53 = (($0) + ($52)|0);
   $54 = ($$07385>>>0)>(1);
   $55 = (($$07385) + -1)|0;
   $56 = $54 ? $55 : 0;
   $57 = Math_imul($56, $2)|0;
   $58 = (($0) + ($57)|0);
   $59 = (($$07385) + 1)|0;
   $60 = ($5>>>0)<($59>>>0);
   $61 = $60 ? $5 : $59;
   $62 = Math_imul($61, $2)|0;
   $63 = (($0) + ($62)|0);
   $64 = HEAP8[$53>>0]|0;
   $65 = $64&255;
   $66 = HEAP8[$63>>0]|0;
   $67 = HEAP8[$58>>0]|0;
   $68 = ($66&255)>($67&255);
   $$v = $68 ? $66 : $67;
   $69 = $$v&255;
   $70 = ($65>>>0)>($69>>>0);
   $71 = $70 ? $65 : $69;
   $72 = $71&255;
   $73 = ((($$086)) + 1|0);
   HEAP8[$$086>>0] = $72;
   $exitcond94 = ($59|0)==($3|0);
   if ($exitcond94) {
    break;
   } else {
    $$07385 = $59;$$086 = $73;
   }
  }
  return;
 }
 $$07385$us = 0;$$086$us = $1;
 while(1) {
  $8 = Math_imul($$07385$us, $2)|0;
  $9 = (($0) + ($8)|0);
  $10 = ($$07385$us>>>0)>(1);
  $11 = (($$07385$us) + -1)|0;
  $12 = $10 ? $11 : 0;
  $13 = Math_imul($12, $2)|0;
  $14 = (($0) + ($13)|0);
  $15 = (($$07385$us) + 1)|0;
  $16 = ($5>>>0)<($15>>>0);
  $17 = $16 ? $5 : $15;
  $18 = Math_imul($17, $2)|0;
  $19 = (($0) + ($18)|0);
  $20 = HEAP8[$9>>0]|0;
  $$07480$us = $20;$$07579$us = 0;$$07678$us = $20;$$181$us = $$086$us;
  while(1) {
   $21 = (($$07579$us) + 1)|0;
   $22 = (($9) + ($21)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $$07480$us&255;
   $25 = $23&255;
   $26 = ($24>>>0)>($25>>>0);
   $27 = $26 ? $24 : $25;
   $28 = (($19) + ($$07579$us)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = (($14) + ($$07579$us)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = ($29&255)>($31&255);
   $$v77$us = $32 ? $29 : $31;
   $33 = $$v77$us&255;
   $34 = $$07678$us&255;
   $35 = ($27|0)>($33|0);
   $36 = $35 ? $27 : $33;
   $37 = ($36|0)<($34|0);
   $$$us = $37 ? $34 : $36;
   $38 = $$$us&255;
   $39 = ((($$181$us)) + 1|0);
   HEAP8[$$181$us>>0] = $38;
   $exitcond = ($21|0)==($6|0);
   if ($exitcond) {
    break;
   } else {
    $$07480$us$phi = $$07678$us;$$07579$us = $21;$$07678$us = $23;$$181$us = $39;$$07480$us = $$07480$us$phi;
   }
  }
  $scevgep92 = (($$086$us) + ($6)|0);
  $40 = ($34>>>0)>($25>>>0);
  $41 = $40 ? $34 : $25;
  $42 = (($19) + ($6)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = (($14) + ($6)|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = ($43&255)>($45&255);
  $$v$us = $46 ? $43 : $45;
  $47 = $$v$us&255;
  $48 = ($41|0)>($47|0);
  $49 = $48 ? $41 : $47;
  $50 = $49&255;
  $51 = (($$086$us) + ($2)|0);
  HEAP8[$scevgep92>>0] = $50;
  $exitcond93 = ($15|0)==($3|0);
  if ($exitcond93) {
   break;
  } else {
   $$07385$us = $15;$$086$us = $51;
  }
 }
 return;
}
function _liq_min3($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$us = 0, $$07385 = 0, $$07385$us = 0, $$07480$us = 0, $$07480$us$phi = 0, $$07579$us = 0, $$07678$us = 0, $$086 = 0, $$086$us = 0, $$181$us = 0, $$v = 0, $$v$us = 0, $$v77$us = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond93 = 0, $exitcond94 = 0, $scevgep92 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)==(0);
 if ($4) {
  return;
 }
 $5 = (($3) + -1)|0;
 $6 = (($2) + -1)|0;
 $7 = ($6|0)==(0);
 if ($7) {
  $$07385 = 0;$$086 = $1;
  while(1) {
   $52 = Math_imul($$07385, $2)|0;
   $53 = (($0) + ($52)|0);
   $54 = ($$07385>>>0)>(1);
   $55 = (($$07385) + -1)|0;
   $56 = $54 ? $55 : 0;
   $57 = Math_imul($56, $2)|0;
   $58 = (($0) + ($57)|0);
   $59 = (($$07385) + 1)|0;
   $60 = ($5>>>0)<($59>>>0);
   $61 = $60 ? $5 : $59;
   $62 = Math_imul($61, $2)|0;
   $63 = (($0) + ($62)|0);
   $64 = HEAP8[$53>>0]|0;
   $65 = $64&255;
   $66 = HEAP8[$63>>0]|0;
   $67 = HEAP8[$58>>0]|0;
   $68 = ($66&255)<($67&255);
   $$v = $68 ? $66 : $67;
   $69 = $$v&255;
   $70 = ($65>>>0)<($69>>>0);
   $71 = $70 ? $65 : $69;
   $72 = $71&255;
   $73 = ((($$086)) + 1|0);
   HEAP8[$$086>>0] = $72;
   $exitcond94 = ($59|0)==($3|0);
   if ($exitcond94) {
    break;
   } else {
    $$07385 = $59;$$086 = $73;
   }
  }
  return;
 }
 $$07385$us = 0;$$086$us = $1;
 while(1) {
  $8 = Math_imul($$07385$us, $2)|0;
  $9 = (($0) + ($8)|0);
  $10 = ($$07385$us>>>0)>(1);
  $11 = (($$07385$us) + -1)|0;
  $12 = $10 ? $11 : 0;
  $13 = Math_imul($12, $2)|0;
  $14 = (($0) + ($13)|0);
  $15 = (($$07385$us) + 1)|0;
  $16 = ($5>>>0)<($15>>>0);
  $17 = $16 ? $5 : $15;
  $18 = Math_imul($17, $2)|0;
  $19 = (($0) + ($18)|0);
  $20 = HEAP8[$9>>0]|0;
  $$07480$us = $20;$$07579$us = 0;$$07678$us = $20;$$181$us = $$086$us;
  while(1) {
   $21 = (($$07579$us) + 1)|0;
   $22 = (($9) + ($21)|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $$07480$us&255;
   $25 = $23&255;
   $26 = ($24>>>0)<($25>>>0);
   $27 = $26 ? $24 : $25;
   $28 = (($19) + ($$07579$us)|0);
   $29 = HEAP8[$28>>0]|0;
   $30 = (($14) + ($$07579$us)|0);
   $31 = HEAP8[$30>>0]|0;
   $32 = ($29&255)<($31&255);
   $$v77$us = $32 ? $29 : $31;
   $33 = $$v77$us&255;
   $34 = $$07678$us&255;
   $35 = ($27|0)<($33|0);
   $36 = $35 ? $27 : $33;
   $37 = ($36|0)>($34|0);
   $$$us = $37 ? $34 : $36;
   $38 = $$$us&255;
   $39 = ((($$181$us)) + 1|0);
   HEAP8[$$181$us>>0] = $38;
   $exitcond = ($21|0)==($6|0);
   if ($exitcond) {
    break;
   } else {
    $$07480$us$phi = $$07678$us;$$07579$us = $21;$$07678$us = $23;$$181$us = $39;$$07480$us = $$07480$us$phi;
   }
  }
  $scevgep92 = (($$086$us) + ($6)|0);
  $40 = ($34>>>0)<($25>>>0);
  $41 = $40 ? $34 : $25;
  $42 = (($19) + ($6)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = (($14) + ($6)|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = ($43&255)<($45&255);
  $$v$us = $46 ? $43 : $45;
  $47 = $$v$us&255;
  $48 = ($41|0)<($47|0);
  $49 = $48 ? $41 : $47;
  $50 = $49&255;
  $51 = (($$086$us) + ($2)|0);
  HEAP8[$scevgep92>>0] = $50;
  $exitcond93 = ($15|0)==($3|0);
  if ($exitcond93) {
   break;
  } else {
   $$07385$us = $15;$$086$us = $51;
  }
 }
 return;
}
function _liq_blur($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = $5 << 1;
 $7 = $6 | 1;
 $8 = ($7>>>0)>($3>>>0);
 $9 = ($7>>>0)>($4>>>0);
 $or$cond = $8 | $9;
 if ($or$cond) {
  return;
 }
 _transposing_1d_blur($0,$1,$3,$4,$5);
 _transposing_1d_blur($1,$2,$4,$3,$5);
 return;
}
function _transposing_1d_blur($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$07892 = 0, $$07892$us = 0, $$07986$us = 0, $$082103 = 0, $$082103$us = 0, $$099 = 0, $$099$us = 0, $$185$us = 0, $$185$us$ph = 0, $$2$lcssa$us = 0, $$291$us = 0, $$398 = 0, $$398$us = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $exitcond = 0;
 var $exitcond115 = 0, $exitcond116 = 0, $exitcond117 = 0, $exitcond118 = 0, $exitcond120 = 0, $exitcond121 = 0, $exitcond122 = 0, $exitcond132 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($3|0)==(0);
 if ($5) {
  return;
 }
 $6 = ($4|0)==(0);
 $7 = $4 << 1;
 $8 = (($2) - ($4))|0;
 $9 = ($8>>>0)>($4>>>0);
 $10 = (($2) + -1)|0;
 $11 = ($8>>>0)<($2>>>0);
 if ($6) {
  $$082103 = 0;
  while(1) {
   $68 = Math_imul($$082103, $2)|0;
   $69 = (($0) + ($68)|0);
   if ($9) {
    $$07892 = 0;
    while(1) {
     $73 = Math_imul($$07892, $3)|0;
     $74 = (($73) + ($$082103))|0;
     $75 = (($1) + ($74)|0);
     HEAP8[$75>>0] = 0;
     $76 = (($$07892) + 1)|0;
     $exitcond120 = ($76|0)==($8|0);
     if ($exitcond120) {
      break;
     } else {
      $$07892 = $76;
     }
    }
   }
   if ($11) {
    $70 = (($69) + ($10)|0);
    $71 = HEAP8[$70>>0]|0;
    $72 = $71&255;
    $$099 = $8;$$398 = 0;
    while(1) {
     $78 = (($69) + ($$099)|0);
     $79 = HEAP8[$78>>0]|0;
     $80 = $79&255;
     $81 = (($$398) - ($80))|0;
     $82 = (($81) + ($72))|0;
     $83 = (($82>>>0) / ($7>>>0))&-1;
     $84 = $83&255;
     $85 = Math_imul($$099, $3)|0;
     $86 = (($85) + ($$082103))|0;
     $87 = (($1) + ($86)|0);
     HEAP8[$87>>0] = $84;
     $88 = (($$099) + 1)|0;
     $exitcond121 = ($88|0)==($2|0);
     if ($exitcond121) {
      break;
     } else {
      $$099 = $88;$$398 = $82;
     }
    }
   }
   $77 = (($$082103) + 1)|0;
   $exitcond122 = ($77|0)==($3|0);
   if ($exitcond122) {
    break;
   } else {
    $$082103 = $77;
   }
  }
  return;
 }
 $exitcond132 = ($4|0)==(1);
 $$082103$us = 0;
 while(1) {
  $12 = Math_imul($$082103$us, $2)|0;
  $13 = (($0) + ($12)|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = $14&255;
  $16 = Math_imul($15, $4)|0;
  $17 = $14&255;
  $18 = (($16) + ($17))|0;
  if ($exitcond132) {
   $$185$us$ph = $18;
  } else {
   $61 = 1;$64 = $18;
   while(1) {
    $$phi$trans$insert = (($13) + ($61)|0);
    $$pre = HEAP8[$$phi$trans$insert>>0]|0;
    $62 = $$pre&255;
    $63 = (($64) + ($62))|0;
    $65 = (($61) + 1)|0;
    $exitcond = ($65|0)==($4|0);
    if ($exitcond) {
     $$185$us$ph = $63;
     break;
    } else {
     $61 = $65;$64 = $63;
    }
   }
  }
  $$07986$us = 0;$$185$us = $$185$us$ph;
  while(1) {
   $49 = (($$185$us) - ($15))|0;
   $50 = (($$07986$us) + ($4))|0;
   $51 = (($13) + ($50)|0);
   $52 = HEAP8[$51>>0]|0;
   $53 = $52&255;
   $54 = (($49) + ($53))|0;
   $55 = (($54>>>0) / ($7>>>0))&-1;
   $56 = $55&255;
   $57 = Math_imul($$07986$us, $3)|0;
   $58 = (($57) + ($$082103$us))|0;
   $59 = (($1) + ($58)|0);
   HEAP8[$59>>0] = $56;
   $60 = (($$07986$us) + 1)|0;
   $exitcond115 = ($60|0)==($4|0);
   if ($exitcond115) {
    break;
   } else {
    $$07986$us = $60;$$185$us = $54;
   }
  }
  if ($9) {
   $$07892$us = $4;$$291$us = $54;
   while(1) {
    $33 = (($$07892$us) - ($4))|0;
    $34 = (($13) + ($33)|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = $35&255;
    $37 = (($$291$us) - ($36))|0;
    $38 = (($$07892$us) + ($4))|0;
    $39 = (($13) + ($38)|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40&255;
    $42 = (($37) + ($41))|0;
    $43 = (($42>>>0) / ($7>>>0))&-1;
    $44 = $43&255;
    $45 = Math_imul($$07892$us, $3)|0;
    $46 = (($45) + ($$082103$us))|0;
    $47 = (($1) + ($46)|0);
    HEAP8[$47>>0] = $44;
    $48 = (($$07892$us) + 1)|0;
    $exitcond116 = ($48|0)==($8|0);
    if ($exitcond116) {
     $$2$lcssa$us = $42;
     break;
    } else {
     $$07892$us = $48;$$291$us = $42;
    }
   }
  } else {
   $$2$lcssa$us = $54;
  }
  if ($11) {
   $66 = (($13) + ($10)|0);
   $67 = HEAP8[$66>>0]|0;
   $26 = $67&255;
   $$099$us = $8;$$398$us = $$2$lcssa$us;
   while(1) {
    $20 = (($$099$us) - ($4))|0;
    $21 = (($13) + ($20)|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = $22&255;
    $24 = (($$398$us) - ($23))|0;
    $25 = (($24) + ($26))|0;
    $27 = (($25>>>0) / ($7>>>0))&-1;
    $28 = $27&255;
    $29 = Math_imul($$099$us, $3)|0;
    $30 = (($29) + ($$082103$us))|0;
    $31 = (($1) + ($30)|0);
    HEAP8[$31>>0] = $28;
    $32 = (($$099$us) + 1)|0;
    $exitcond117 = ($32|0)==($2|0);
    if ($exitcond117) {
     break;
    } else {
     $$099$us = $32;$$398$us = $25;
    }
   }
  }
  $19 = (($$082103$us) + 1)|0;
  $exitcond118 = ($19|0)==($3|0);
  if ($exitcond118) {
   break;
  } else {
   $$082103$us = $19;
  }
 }
 return;
}
function _mempool_create($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$1 = 0, $$in = 0, $$pre = 0, $$sroa$2$0$$sroa_idx2 = 0, $$sroa$3$0$$sroa_idx3 = 0, $$sroa$4$0$$sroa_idx4 = 0, $$sroa$5$0$$sroa_idx5 = 0, $$tr42 = 0, $$tr43 = 0, $$tr44 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (($1) + 15)|0;
 $$pre = HEAP32[$0>>2]|0;
 $6 = $$pre;
 $$in = $$pre;$$tr42 = $2;$$tr43 = $3;$$tr44 = $4;$22 = $6;
 while(1) {
  $7 = ($$in|0)==(0|0);
  if (!($7)) {
   $8 = HEAP32[$$in>>2]|0;
   $9 = (($8) + ($1))|0;
   $10 = ((($$in)) + 4|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($9>>>0)>($11>>>0);
   if (!($12)) {
    label = 4;
    break;
   }
  }
  $16 = ($$tr42|0)==(0);
  $spec$select = $16 ? 131072 : $$tr42;
  $17 = ($5>>>0)>($spec$select>>>0);
  $18 = $17 ? $5 : $spec$select;
  $19 = (($18) + 32)|0;
  $20 = (FUNCTION_TABLE_ii[$$tr43 & 63]($19)|0);
  HEAP32[$0>>2] = $20;
  $21 = ($20|0)==(0|0);
  if ($21) {
   $$1 = 0;
   label = 9;
   break;
  }
  HEAP32[$20>>2] = 20;
  $$sroa$2$0$$sroa_idx2 = ((($20)) + 4|0);
  HEAP32[$$sroa$2$0$$sroa_idx2>>2] = $19;
  $$sroa$3$0$$sroa_idx3 = ((($20)) + 8|0);
  HEAP32[$$sroa$3$0$$sroa_idx3>>2] = $$tr43;
  $$sroa$4$0$$sroa_idx4 = ((($20)) + 12|0);
  HEAP32[$$sroa$4$0$$sroa_idx4>>2] = $$tr44;
  $$sroa$5$0$$sroa_idx5 = ((($20)) + 16|0);
  HEAP32[$$sroa$5$0$$sroa_idx5>>2] = $22;
  $23 = HEAP32[$0>>2]|0;
  $24 = $23;
  $25 = HEAP32[$23>>2]|0;
  $26 = (($25) + ($24))|0;
  $27 = (0 - ($26))|0;
  $28 = $27 & 15;
  $29 = (($28) + ($25))|0;
  HEAP32[$23>>2] = $29;
  $30 = (($29) + ($1))|0;
  $31 = ((($23)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ($30>>>0)>($32>>>0);
  if (!($33)) {
   label = 7;
   break;
  }
  $37 = ((($23)) + 8|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($23)) + 12|0);
  $40 = HEAP32[$39>>2]|0;
  $$in = $23;$$tr42 = $1;$$tr43 = $38;$$tr44 = $40;$22 = $24;
 }
 if ((label|0) == 4) {
  $13 = $5 & -16;
  $14 = (($8) + ($13))|0;
  HEAP32[$$in>>2] = $14;
  $15 = (($$in) + ($8)|0);
  $$1 = $15;
  return ($$1|0);
 }
 else if ((label|0) == 7) {
  $34 = $5 & -16;
  $35 = (($29) + ($34))|0;
  HEAP32[$23>>2] = $35;
  $36 = (($23) + ($29)|0);
  $$1 = $36;
  return ($$1|0);
 }
 else if ((label|0) == 9) {
  return ($$1|0);
 }
 return (0)|0;
}
function _mempool_alloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($1))|0;
 $6 = ((($3)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($5>>>0)>($7>>>0);
 if ($8) {
  $13 = ((($3)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($3)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = (_mempool_create($0,$1,$2,$14,$16)|0);
  $$0 = $17;
  return ($$0|0);
 } else {
  $9 = (($1) + 15)|0;
  $10 = $9 & -16;
  $11 = (($4) + ($10))|0;
  HEAP32[$3>>2] = $11;
  $12 = (($3) + ($4)|0);
  $$0 = $12;
  return ($$0|0);
 }
 return (0)|0;
}
function _mempool_destroy($0) {
 $0 = $0|0;
 var $$06 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $$06 = $0;
 while(1) {
  $2 = ((($$06)) + 16|0);
  $3 = HEAP32[$2>>2]|0;
  $4 = ((($$06)) + 12|0);
  $5 = HEAP32[$4>>2]|0;
  FUNCTION_TABLE_vi[$5 & 63]($$06);
  $6 = ($3|0)==(0|0);
  if ($6) {
   break;
  } else {
   $$06 = $3;
  }
 }
 return;
}
function _kmeans_init($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3*40)|0;
 $5 = (($4) + 80)|0;
 $6 = Math_imul($5, $1)|0;
 _memset(($2|0),0,($6|0))|0;
 return;
}
function _kmeans_update_color($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0.0, $29 = 0.0;
 var $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0.0, $40 = 0.0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + 2)|0;
 $8 = Math_imul($7, $4)|0;
 $9 = (($8) + ($3))|0;
 $10 = +HEAPF32[$0>>2];
 $11 = $10 * $1;
 $12 = $11;
 $13 = (($5) + (($9*40)|0)|0);
 $14 = +HEAPF64[$13>>3];
 $15 = $14 + $12;
 HEAPF64[$13>>3] = $15;
 $16 = ((($0)) + 4|0);
 $17 = +HEAPF32[$16>>2];
 $18 = $17 * $1;
 $19 = $18;
 $20 = (((($5) + (($9*40)|0)|0)) + 8|0);
 $21 = +HEAPF64[$20>>3];
 $22 = $21 + $19;
 HEAPF64[$20>>3] = $22;
 $23 = ((($0)) + 8|0);
 $24 = +HEAPF32[$23>>2];
 $25 = $24 * $1;
 $26 = $25;
 $27 = (((($5) + (($9*40)|0)|0)) + 16|0);
 $28 = +HEAPF64[$27>>3];
 $29 = $28 + $26;
 HEAPF64[$27>>3] = $29;
 $30 = ((($0)) + 12|0);
 $31 = +HEAPF32[$30>>2];
 $32 = $31 * $1;
 $33 = $32;
 $34 = (((($5) + (($9*40)|0)|0)) + 24|0);
 $35 = +HEAPF64[$34>>3];
 $36 = $35 + $33;
 HEAPF64[$34>>3] = $36;
 $37 = $1;
 $38 = (((($5) + (($9*40)|0)|0)) + 32|0);
 $39 = +HEAPF64[$38>>3];
 $40 = $39 + $37;
 HEAPF64[$38>>3] = $40;
 return;
}
function _kmeans_finalize($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$05768$us = 0.0, $$05867$us = 0.0, $$05966$us = 0.0, $$06065$us = 0, $$06164$us = 0.0, $$06263$us = 0.0, $$073$us = 0, $$pre = 0, $$sroa$0$0$$sroa_idx$us = 0, $$sroa$2$0$$sroa_idx1$us = 0, $$sroa$3$0$$sroa_idx2$us = 0, $$sroa$4$0$$sroa_idx3$us = 0, $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0;
 var $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0.0;
 var $37 = 0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)==(0);
 $5 = ($1|0)==(0);
 $or$cond = $4 | $5;
 if ($or$cond) {
  return;
 }
 $$073$us = 0;$7 = $3;
 while(1) {
  $6 = (($7) + 2)|0;
  $$05768$us = 0.0;$$05867$us = 0.0;$$05966$us = 0.0;$$06065$us = 0;$$06164$us = 0.0;$$06263$us = 0.0;
  while(1) {
   $29 = Math_imul($$06065$us, $6)|0;
   $30 = (($29) + ($$073$us))|0;
   $31 = (($2) + (($30*40)|0)|0);
   $32 = +HEAPF64[$31>>3];
   $13 = $$05768$us + $32;
   $33 = (((($2) + (($30*40)|0)|0)) + 8|0);
   $34 = +HEAPF64[$33>>3];
   $16 = $$05867$us + $34;
   $35 = (((($2) + (($30*40)|0)|0)) + 16|0);
   $36 = +HEAPF64[$35>>3];
   $19 = $$05966$us + $36;
   $37 = (((($2) + (($30*40)|0)|0)) + 24|0);
   $38 = +HEAPF64[$37>>3];
   $22 = $$06263$us + $38;
   $39 = (((($2) + (($30*40)|0)|0)) + 32|0);
   $40 = +HEAPF64[$39>>3];
   $12 = $$06164$us + $40;
   $41 = (($$06065$us) + 1)|0;
   $exitcond = ($41|0)==($1|0);
   if ($exitcond) {
    break;
   } else {
    $$05768$us = $13;$$05867$us = $16;$$05966$us = $19;$$06065$us = $41;$$06164$us = $12;$$06263$us = $22;
   }
  }
  $42 = $12 != 0.0;
  if ($42) {
   $8 = (((((($0)) + 12|0) + (($$073$us*24)|0)|0)) + 20|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(0);
   if ($10) {
    $11 = $13 / $12;
    $14 = $11;
    $15 = $16 / $12;
    $17 = $15;
    $18 = $19 / $12;
    $20 = $18;
    $21 = $22 / $12;
    $23 = $21;
    $$sroa$0$0$$sroa_idx$us = (((($0)) + 12|0) + (($$073$us*24)|0)|0);
    HEAPF32[$$sroa$0$0$$sroa_idx$us>>2] = $14;
    $$sroa$2$0$$sroa_idx1$us = (((((($0)) + 12|0) + (($$073$us*24)|0)|0)) + 4|0);
    HEAPF32[$$sroa$2$0$$sroa_idx1$us>>2] = $17;
    $$sroa$3$0$$sroa_idx2$us = (((((($0)) + 12|0) + (($$073$us*24)|0)|0)) + 8|0);
    HEAPF32[$$sroa$3$0$$sroa_idx2$us>>2] = $20;
    $$sroa$4$0$$sroa_idx3$us = (((((($0)) + 12|0) + (($$073$us*24)|0)|0)) + 12|0);
    HEAPF32[$$sroa$4$0$$sroa_idx3$us>>2] = $23;
    $24 = $12;
    $25 = (((((($0)) + 12|0) + (($$073$us*24)|0)|0)) + 16|0);
    HEAPF32[$25>>2] = $24;
    $$pre = HEAP32[$0>>2]|0;
    $28 = $$pre;
   } else {
    $28 = $7;
   }
  } else {
   $28 = $7;
  }
  $26 = (($$073$us) + 1)|0;
  $27 = ($26>>>0)<($28>>>0);
  if ($27) {
   $$073$us = $26;$7 = $28;
  } else {
   break;
  }
 }
 return;
}
function _kmeans_do_iteration($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0.0, $$04658 = 0, $$04658$us = 0, $$059 = 0.0, $$059$us = 0.0, $$073$us$i = 0, $$alloca_mul = 0, $$pre$i = 0, $$sroa$0$0$$sroa_idx$us$i = 0, $$sroa$0$0$copyload = 0.0, $$sroa$0$0$copyload$us = 0.0, $$sroa$2$0$$sroa_idx1$us$i = 0, $$sroa$3$0$$sroa_idx2$us$i = 0, $$sroa$4$0$$sroa_idx3$us$i = 0, $$sroa$4$0$$sroa_idx48 = 0, $$sroa$4$0$$sroa_idx48$us = 0, $$sroa$4$0$copyload = 0.0, $$sroa$4$0$copyload$us = 0.0, $$sroa$5$0$$sroa_idx50 = 0, $$sroa$5$0$$sroa_idx50$us = 0;
 var $$sroa$5$0$copyload = 0.0, $$sroa$5$0$copyload$us = 0.0, $$sroa$6$0$$sroa_idx52 = 0, $$sroa$6$0$$sroa_idx52$us = 0, $$sroa$6$0$copyload = 0.0, $$sroa$6$0$copyload$us = 0.0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0;
 var $112 = 0.0, $113 = 0, $114 = 0.0, $115 = 0.0, $116 = 0.0, $117 = 0.0, $118 = 0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0, $35 = 0.0;
 var $36 = 0.0, $37 = 0.0, $38 = 0.0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0.0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $exitcond = 0, $exitcond68 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = HEAP32[$1>>2]|0;
 $5 = (($4) + 2)|0;
 $$alloca_mul = ($5*40)|0;
 $6 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $7 = ($4*40)|0;
 $8 = (($7) + 80)|0;
 _memset(($6|0),0,($8|0))|0;
 $9 = (_nearest_init($1)|0);
 $10 = HEAP32[$0>>2]|0;
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)>(0);
 if ($13) {
  $14 = ($2|0)==(0|0);
  if ($14) {
   $$04658$us = 0;$$059$us = 0.0;
   while(1) {
    $15 = (($10) + ($$04658$us<<5)|0);
    $16 = (((($10) + ($$04658$us<<5)|0)) + 28|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = $17&255;
    $19 = (_nearest_search($9,$15,$18,$3)|0);
    $20 = $19&255;
    HEAP8[$16>>0] = $20;
    $21 = +HEAPF32[$3>>2];
    $22 = (((($10) + ($$04658$us<<5)|0)) + 20|0);
    $23 = +HEAPF32[$22>>2];
    $24 = $21 * $23;
    $25 = $24;
    $26 = $$059$us + $25;
    HEAP8[tempDoublePtr>>0]=HEAP8[$15>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$15+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$15+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$15+3>>0];$$sroa$0$0$copyload$us = +HEAPF32[tempDoublePtr>>2];
    $$sroa$4$0$$sroa_idx48$us = (((($10) + ($$04658$us<<5)|0)) + 4|0);
    HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$4$0$$sroa_idx48$us>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$4$0$$sroa_idx48$us+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$4$0$$sroa_idx48$us+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$4$0$$sroa_idx48$us+3>>0];$$sroa$4$0$copyload$us = +HEAPF32[tempDoublePtr>>2];
    $$sroa$5$0$$sroa_idx50$us = (((($10) + ($$04658$us<<5)|0)) + 8|0);
    HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$5$0$$sroa_idx50$us>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$5$0$$sroa_idx50$us+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$5$0$$sroa_idx50$us+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$5$0$$sroa_idx50$us+3>>0];$$sroa$5$0$copyload$us = +HEAPF32[tempDoublePtr>>2];
    $$sroa$6$0$$sroa_idx52$us = (((($10) + ($$04658$us<<5)|0)) + 12|0);
    HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$6$0$$sroa_idx52$us>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$6$0$$sroa_idx52$us+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$6$0$$sroa_idx52$us+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$6$0$$sroa_idx52$us+3>>0];$$sroa$6$0$copyload$us = +HEAPF32[tempDoublePtr>>2];
    $27 = $23 * $$sroa$0$0$copyload$us;
    $28 = $27;
    $29 = (($6) + (($19*40)|0)|0);
    $30 = +HEAPF64[$29>>3];
    $31 = $30 + $28;
    HEAPF64[$29>>3] = $31;
    $32 = $23 * $$sroa$4$0$copyload$us;
    $33 = $32;
    $34 = (((($6) + (($19*40)|0)|0)) + 8|0);
    $35 = +HEAPF64[$34>>3];
    $36 = $35 + $33;
    HEAPF64[$34>>3] = $36;
    $37 = $23 * $$sroa$5$0$copyload$us;
    $38 = $37;
    $39 = (((($6) + (($19*40)|0)|0)) + 16|0);
    $40 = +HEAPF64[$39>>3];
    $41 = $40 + $38;
    HEAPF64[$39>>3] = $41;
    $42 = $23 * $$sroa$6$0$copyload$us;
    $43 = $42;
    $44 = (((($6) + (($19*40)|0)|0)) + 24|0);
    $45 = +HEAPF64[$44>>3];
    $46 = $45 + $43;
    HEAPF64[$44>>3] = $46;
    $47 = $23;
    $48 = (((($6) + (($19*40)|0)|0)) + 32|0);
    $49 = +HEAPF64[$48>>3];
    $50 = $49 + $47;
    HEAPF64[$48>>3] = $50;
    $51 = (($$04658$us) + 1)|0;
    $exitcond = ($51|0)==($12|0);
    if ($exitcond) {
     $$0$lcssa = $26;
     break;
    } else {
     $$04658$us = $51;$$059$us = $26;
    }
   }
  } else {
   $$04658 = 0;$$059 = 0.0;
   while(1) {
    $89 = (($10) + ($$04658<<5)|0);
    $90 = (((($10) + ($$04658<<5)|0)) + 28|0);
    $91 = HEAP8[$90>>0]|0;
    $92 = $91&255;
    $93 = (_nearest_search($9,$89,$92,$3)|0);
    $94 = $93&255;
    HEAP8[$90>>0] = $94;
    $95 = +HEAPF32[$3>>2];
    $96 = (((($10) + ($$04658<<5)|0)) + 20|0);
    $97 = +HEAPF32[$96>>2];
    $98 = $95 * $97;
    $99 = $98;
    $100 = $$059 + $99;
    HEAP8[tempDoublePtr>>0]=HEAP8[$89>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$89+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$89+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$89+3>>0];$$sroa$0$0$copyload = +HEAPF32[tempDoublePtr>>2];
    $$sroa$4$0$$sroa_idx48 = (((($10) + ($$04658<<5)|0)) + 4|0);
    HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$4$0$$sroa_idx48>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$4$0$$sroa_idx48+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$4$0$$sroa_idx48+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$4$0$$sroa_idx48+3>>0];$$sroa$4$0$copyload = +HEAPF32[tempDoublePtr>>2];
    $$sroa$5$0$$sroa_idx50 = (((($10) + ($$04658<<5)|0)) + 8|0);
    HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$5$0$$sroa_idx50>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$5$0$$sroa_idx50+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$5$0$$sroa_idx50+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$5$0$$sroa_idx50+3>>0];$$sroa$5$0$copyload = +HEAPF32[tempDoublePtr>>2];
    $$sroa$6$0$$sroa_idx52 = (((($10) + ($$04658<<5)|0)) + 12|0);
    HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$6$0$$sroa_idx52>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$6$0$$sroa_idx52+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$6$0$$sroa_idx52+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$6$0$$sroa_idx52+3>>0];$$sroa$6$0$copyload = +HEAPF32[tempDoublePtr>>2];
    $101 = $97 * $$sroa$0$0$copyload;
    $102 = $101;
    $103 = (($6) + (($93*40)|0)|0);
    $104 = +HEAPF64[$103>>3];
    $105 = $104 + $102;
    HEAPF64[$103>>3] = $105;
    $106 = $97 * $$sroa$4$0$copyload;
    $107 = $106;
    $108 = (((($6) + (($93*40)|0)|0)) + 8|0);
    $109 = +HEAPF64[$108>>3];
    $110 = $109 + $107;
    HEAPF64[$108>>3] = $110;
    $111 = $97 * $$sroa$5$0$copyload;
    $112 = $111;
    $113 = (((($6) + (($93*40)|0)|0)) + 16|0);
    $114 = +HEAPF64[$113>>3];
    $115 = $114 + $112;
    HEAPF64[$113>>3] = $115;
    $116 = $97 * $$sroa$6$0$copyload;
    $117 = $116;
    $118 = (((($6) + (($93*40)|0)|0)) + 24|0);
    $119 = +HEAPF64[$118>>3];
    $120 = $119 + $117;
    HEAPF64[$118>>3] = $120;
    $121 = $97;
    $122 = (((($6) + (($93*40)|0)|0)) + 32|0);
    $123 = +HEAPF64[$122>>3];
    $124 = $123 + $121;
    HEAPF64[$122>>3] = $124;
    FUNCTION_TABLE_vid[$2 & 63]($89,$95);
    $125 = (($$04658) + 1)|0;
    $exitcond68 = ($125|0)==($12|0);
    if ($exitcond68) {
     $$0$lcssa = $100;
     break;
    } else {
     $$04658 = $125;$$059 = $100;
    }
   }
  }
 } else {
  $$0$lcssa = 0.0;
 }
 _nearest_free($9);
 $52 = HEAP32[$1>>2]|0;
 $53 = ($52|0)==(0);
 if ($53) {
  $86 = ((($0)) + 8|0);
  $87 = +HEAPF64[$86>>3];
  $88 = $$0$lcssa / $87;
  STACKTOP = sp;return (+$88);
 }
 $$073$us$i = 0;$126 = $52;
 while(1) {
  $54 = (($6) + (($$073$us$i*40)|0)|0);
  $55 = +HEAPF64[$54>>3];
  $56 = $55 + 0.0;
  $57 = (((($6) + (($$073$us$i*40)|0)|0)) + 8|0);
  $58 = +HEAPF64[$57>>3];
  $59 = $58 + 0.0;
  $60 = (((($6) + (($$073$us$i*40)|0)|0)) + 16|0);
  $61 = +HEAPF64[$60>>3];
  $62 = $61 + 0.0;
  $63 = (((($6) + (($$073$us$i*40)|0)|0)) + 24|0);
  $64 = +HEAPF64[$63>>3];
  $65 = $64 + 0.0;
  $66 = (((($6) + (($$073$us$i*40)|0)|0)) + 32|0);
  $67 = +HEAPF64[$66>>3];
  $68 = $67 + 0.0;
  $69 = $68 != 0.0;
  if ($69) {
   $70 = (((((($1)) + 12|0) + (($$073$us$i*24)|0)|0)) + 20|0);
   $71 = HEAP8[$70>>0]|0;
   $72 = ($71<<24>>24)==(0);
   if ($72) {
    $73 = $56 / $68;
    $74 = $73;
    $75 = $59 / $68;
    $76 = $75;
    $77 = $62 / $68;
    $78 = $77;
    $79 = $65 / $68;
    $80 = $79;
    $$sroa$0$0$$sroa_idx$us$i = (((($1)) + 12|0) + (($$073$us$i*24)|0)|0);
    HEAPF32[$$sroa$0$0$$sroa_idx$us$i>>2] = $74;
    $$sroa$2$0$$sroa_idx1$us$i = (((((($1)) + 12|0) + (($$073$us$i*24)|0)|0)) + 4|0);
    HEAPF32[$$sroa$2$0$$sroa_idx1$us$i>>2] = $76;
    $$sroa$3$0$$sroa_idx2$us$i = (((((($1)) + 12|0) + (($$073$us$i*24)|0)|0)) + 8|0);
    HEAPF32[$$sroa$3$0$$sroa_idx2$us$i>>2] = $78;
    $$sroa$4$0$$sroa_idx3$us$i = (((((($1)) + 12|0) + (($$073$us$i*24)|0)|0)) + 12|0);
    HEAPF32[$$sroa$4$0$$sroa_idx3$us$i>>2] = $80;
    $81 = $68;
    $82 = (((((($1)) + 12|0) + (($$073$us$i*24)|0)|0)) + 16|0);
    HEAPF32[$82>>2] = $81;
    $$pre$i = HEAP32[$1>>2]|0;
    $85 = $$pre$i;
   } else {
    $85 = $126;
   }
  } else {
   $85 = $126;
  }
  $83 = (($$073$us$i) + 1)|0;
  $84 = ($83>>>0)<($85>>>0);
  if ($84) {
   $$073$us$i = $83;$126 = $85;
  } else {
   break;
  }
 }
 $86 = ((($0)) + 8|0);
 $87 = +HEAPF64[$86>>3];
 $88 = $$0$lcssa / $87;
 STACKTOP = sp;return (+$88);
}
function _nearest_init($0) {
 $0 = $0|0;
 var $$03638 = 0, $$037 = 0, $$alloca_mul = 0, $$lcssa = 0, $$sroa$3$0$$sroa_idx6 = 0, $$sroa$4$0$$sroa_idx = 0, $$sroa$48$0$$sroa_idx9 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp + 12|0;
 $2 = sp;
 HEAP32[$1>>2] = 0;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 << 5;
 $5 = (($4) + 1052)|0;
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($0)) + 8|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_mempool_create($1,1036,$5,$7,$9)|0);
 $11 = HEAP32[$0>>2]|0;
 $12 = (_llvm_stacksave()|0);
 $$alloca_mul = $11<<3;
 $13 = STACKTOP; STACKTOP = STACKTOP + ((((1*$$alloca_mul)|0)+15)&-16)|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(((((1*$$alloca_mul)|0)+15)&-16)|0);;
 $14 = HEAP32[$0>>2]|0;
 $15 = ($14|0)==(0);
 if ($15) {
  $$lcssa = 0;
 } else {
  $$03638 = 0;
  while(1) {
   $23 = (((($13) + ($$03638<<3)|0)) + 4|0);
   HEAP32[$23>>2] = $$03638;
   $24 = (($$03638) + 1)|0;
   $25 = ($24>>>0)<($14>>>0);
   if ($25) {
    $$03638 = $24;
   } else {
    $$lcssa = $14;
    break;
   }
  }
 }
 $16 = ((($0)) + 12|0);
 $17 = (_vp_create_node($1,$13,$$lcssa,$16)|0);
 $18 = HEAP32[$1>>2]|0;
 HEAP32[$10>>2] = $17;
 $$sroa$3$0$$sroa_idx6 = ((($10)) + 4|0);
 HEAP32[$$sroa$3$0$$sroa_idx6>>2] = $16;
 $$sroa$4$0$$sroa_idx = ((($10)) + 8|0);
 _memset(($$sroa$4$0$$sroa_idx|0),0,1024)|0;
 $$sroa$48$0$$sroa_idx9 = ((($10)) + 1032|0);
 HEAP32[$$sroa$48$0$$sroa_idx9>>2] = $18;
 $19 = HEAP32[$0>>2]|0;
 $20 = ($19|0)==(0);
 if ($20) {
  _llvm_stackrestore(($12|0));
  STACKTOP = sp;return ($10|0);
 }
 $21 = ((($2)) + 4|0);
 $22 = ((($2)) + 8|0);
 $$037 = 0;
 while(1) {
  HEAPF32[$2>>2] = 1.0000000200408773E+20;
  HEAP32[$21>>2] = 0;
  HEAP32[$22>>2] = $$037;
  $26 = (((($0)) + 12|0) + (($$037*24)|0)|0);
  _vp_search_node($17,$26,$2);
  $27 = +HEAPF32[$2>>2];
  $28 = $27 * $27;
  $29 = $28 * 0.25;
  $30 = (($$sroa$4$0$$sroa_idx) + ($$037<<2)|0);
  HEAPF32[$30>>2] = $29;
  $31 = (($$037) + 1)|0;
  $32 = HEAP32[$0>>2]|0;
  $33 = ($31>>>0)<($32>>>0);
  if ($33) {
   $$037 = $31;
  } else {
   break;
  }
 }
 _llvm_stackrestore(($12|0));
 STACKTOP = sp;return ($10|0);
}
function _vp_create_node($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$i$i$i$i = 0.0, $$$i4$i$i$i = 0.0, $$$i5$i$i$i = 0.0, $$017$i = 0, $$01822$i = 0.0, $$01921$i = 0, $$023$i = 0, $$1 = 0, $$1$i = 0.0, $$120$i = 0, $$sroa$0$0$$sroa_idx$i = 0, $$sroa$0$0$copyload = 0.0, $$sroa$0$0$copyload$i = 0.0, $$sroa$2$0$$sroa_idx1 = 0, $$sroa$218$0$$sroa_idx19 = 0, $$sroa$3 = 0, $$sroa$3$0$$sroa_idx = 0, $$sroa$320 = 0, $$sroa$320$0$$sroa_idx = 0, $$sroa$4$0$$sroa_idx11$i = 0;
 var $$sroa$4$0$$sroa_idx2 = 0, $$sroa$4$0$$sroa_idx65 = 0, $$sroa$4$0$copyload = 0.0, $$sroa$4$0$copyload$i = 0.0, $$sroa$421$0$$sroa_idx22 = 0, $$sroa$5$0$$sroa_idx13$i = 0, $$sroa$5$0$$sroa_idx3 = 0, $$sroa$5$0$$sroa_idx67 = 0, $$sroa$5$0$copyload = 0.0, $$sroa$5$0$copyload$i = 0.0, $$sroa$523$0$$sroa_idx24 = 0, $$sroa$6$0$$sroa_idx15$i = 0, $$sroa$6$0$$sroa_idx69 = 0, $$sroa$6$0$copyload = 0.0, $$sroa$6$0$copyload$i = 0.0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0.0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0.0, $36 = 0.0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0;
 var $53 = 0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $8 = 0, $9 = 0, $exitcond$i = 0, $exitcond$i62 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$sroa$320 = sp + 16|0;
 $$sroa$3 = sp;
 $4 = ($2|0)<(1);
 if ($4) {
  $$1 = 0;
  STACKTOP = sp;return ($$1|0);
 }
 $5 = (_mempool_alloc($0,32,0)|0);
 $6 = ($2|0)==(1);
 $7 = ((($1)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 if ($6) {
  $9 = (($3) + (($8*24)|0)|0);
  ;HEAP32[$$sroa$320>>2]=HEAP32[$9>>2]|0;HEAP32[$$sroa$320+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$$sroa$320+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$$sroa$320+12>>2]=HEAP32[$9+12>>2]|0;
  HEAP32[$5>>2] = 0;
  $$sroa$218$0$$sroa_idx19 = ((($5)) + 4|0);
  HEAP32[$$sroa$218$0$$sroa_idx19>>2] = 0;
  $$sroa$320$0$$sroa_idx = ((($5)) + 8|0);
  ;HEAP32[$$sroa$320$0$$sroa_idx>>2]=HEAP32[$$sroa$320>>2]|0;HEAP32[$$sroa$320$0$$sroa_idx+4>>2]=HEAP32[$$sroa$320+4>>2]|0;HEAP32[$$sroa$320$0$$sroa_idx+8>>2]=HEAP32[$$sroa$320+8>>2]|0;HEAP32[$$sroa$320$0$$sroa_idx+12>>2]=HEAP32[$$sroa$320+12>>2]|0;
  $$sroa$421$0$$sroa_idx22 = ((($5)) + 24|0);
  HEAPF32[$$sroa$421$0$$sroa_idx22>>2] = 1.0000000200408773E+20;
  $$sroa$523$0$$sroa_idx24 = ((($5)) + 28|0);
  HEAP32[$$sroa$523$0$$sroa_idx24>>2] = $8;
  $$1 = $5;
  STACKTOP = sp;return ($$1|0);
 }
 $10 = (((($3) + (($8*24)|0)|0)) + 16|0);
 $11 = +HEAPF32[$10>>2];
 $$01822$i = $11;$$01921$i = 0;$$023$i = 1;
 while(1) {
  $12 = (((($1) + ($$023$i<<3)|0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = (((($3) + (($13*24)|0)|0)) + 16|0);
  $15 = +HEAPF32[$14>>2];
  $16 = $15 > $$01822$i;
  $$120$i = $16 ? $$023$i : $$01921$i;
  $$1$i = $16 ? $15 : $$01822$i;
  $17 = (($$023$i) + 1)|0;
  $exitcond$i = ($17|0)==($2|0);
  if ($exitcond$i) {
   break;
  } else {
   $$01822$i = $$1$i;$$01921$i = $$120$i;$$023$i = $17;
  }
 }
 $18 = (($1) + ($$120$i<<3)|0);
 $19 = (((($1) + ($$120$i<<3)|0)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($2) + -1)|0;
 $22 = (($1) + ($21<<3)|0);
 $23 = $22;
 $24 = $23;
 $25 = HEAP32[$24>>2]|0;
 $26 = (($23) + 4)|0;
 $27 = $26;
 $28 = HEAP32[$27>>2]|0;
 $29 = $18;
 $30 = $29;
 HEAP32[$30>>2] = $25;
 $31 = (($29) + 4)|0;
 $32 = $31;
 HEAP32[$32>>2] = $28;
 $33 = (($3) + (($20*24)|0)|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$33>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$33+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$33+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$33+3>>0];$$sroa$0$0$copyload = +HEAPF32[tempDoublePtr>>2];
 $34 = ($2|0)>(1);
 if ($34) {
  $$sroa$6$0$$sroa_idx69 = (((($3) + (($20*24)|0)|0)) + 12|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$6$0$$sroa_idx69>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$6$0$$sroa_idx69+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$6$0$$sroa_idx69+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$6$0$$sroa_idx69+3>>0];$$sroa$6$0$copyload = +HEAPF32[tempDoublePtr>>2];
  $$sroa$5$0$$sroa_idx67 = (((($3) + (($20*24)|0)|0)) + 8|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$5$0$$sroa_idx67>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$5$0$$sroa_idx67+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$5$0$$sroa_idx67+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$5$0$$sroa_idx67+3>>0];$$sroa$5$0$copyload = +HEAPF32[tempDoublePtr>>2];
  $$sroa$4$0$$sroa_idx65 = (((($3) + (($20*24)|0)|0)) + 4|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$4$0$$sroa_idx65>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$4$0$$sroa_idx65+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$4$0$$sroa_idx65+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$4$0$$sroa_idx65+3>>0];$$sroa$4$0$copyload = +HEAPF32[tempDoublePtr>>2];
  $35 = $$sroa$4$0$copyload;
  $36 = $$sroa$5$0$copyload;
  $37 = $$sroa$6$0$copyload;
  $$017$i = 0;
  while(1) {
   $38 = (((($1) + ($$017$i<<3)|0)) + 4|0);
   $39 = HEAP32[$38>>2]|0;
   $$sroa$0$0$$sroa_idx$i = (($3) + (($39*24)|0)|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$0$0$$sroa_idx$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$0$0$$sroa_idx$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$0$0$$sroa_idx$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$0$0$$sroa_idx$i+3>>0];$$sroa$0$0$copyload$i = +HEAPF32[tempDoublePtr>>2];
   $$sroa$4$0$$sroa_idx11$i = (((($3) + (($39*24)|0)|0)) + 4|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$4$0$$sroa_idx11$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$4$0$$sroa_idx11$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$4$0$$sroa_idx11$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$4$0$$sroa_idx11$i+3>>0];$$sroa$4$0$copyload$i = +HEAPF32[tempDoublePtr>>2];
   $$sroa$5$0$$sroa_idx13$i = (((($3) + (($39*24)|0)|0)) + 8|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$5$0$$sroa_idx13$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$5$0$$sroa_idx13$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$5$0$$sroa_idx13$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$5$0$$sroa_idx13$i+3>>0];$$sroa$5$0$copyload$i = +HEAPF32[tempDoublePtr>>2];
   $$sroa$6$0$$sroa_idx15$i = (((($3) + (($39*24)|0)|0)) + 12|0);
   HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$6$0$$sroa_idx15$i>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$6$0$$sroa_idx15$i+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$6$0$$sroa_idx15$i+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$6$0$$sroa_idx15$i+3>>0];$$sroa$6$0$copyload$i = +HEAPF32[tempDoublePtr>>2];
   $40 = $$sroa$0$0$copyload$i - $$sroa$0$0$copyload;
   $41 = $40;
   $42 = $$sroa$4$0$copyload$i;
   $43 = $35 - $42;
   $44 = $43 + $41;
   $45 = $43 * $43;
   $46 = $44 * $44;
   $47 = $45 > $46;
   $$$i$i$i$i = $47 ? $45 : $46;
   $48 = $$sroa$5$0$copyload$i;
   $49 = $36 - $48;
   $50 = $49 + $41;
   $51 = $49 * $49;
   $52 = $50 * $50;
   $53 = $51 > $52;
   $$$i5$i$i$i = $53 ? $51 : $52;
   $54 = $$$i$i$i$i + $$$i5$i$i$i;
   $55 = $$sroa$6$0$copyload$i;
   $56 = $37 - $55;
   $57 = $56 + $41;
   $58 = $56 * $56;
   $59 = $57 * $57;
   $60 = $58 > $59;
   $$$i4$i$i$i = $60 ? $58 : $59;
   $61 = $54 + $$$i4$i$i$i;
   $62 = $61;
   $63 = (($1) + ($$017$i<<3)|0);
   HEAPF32[$63>>2] = $62;
   $64 = (($$017$i) + 1)|0;
   $exitcond$i62 = ($64|0)==($21|0);
   if ($exitcond$i62) {
    break;
   } else {
    $$017$i = $64;
   }
  }
 }
 _qsort($1,$21,8,51);
 $65 = (($21|0) / 2)&-1;
 ;HEAP32[$$sroa$3>>2]=HEAP32[$33>>2]|0;HEAP32[$$sroa$3+4>>2]=HEAP32[$33+4>>2]|0;HEAP32[$$sroa$3+8>>2]=HEAP32[$33+8>>2]|0;HEAP32[$$sroa$3+12>>2]=HEAP32[$33+12>>2]|0;
 $66 = (($1) + ($65<<3)|0);
 $67 = +HEAPF32[$66>>2];
 $68 = (+Math_sqrt((+$67)));
 HEAP32[$5>>2] = 0;
 $$sroa$2$0$$sroa_idx1 = ((($5)) + 4|0);
 HEAP32[$$sroa$2$0$$sroa_idx1>>2] = 0;
 $$sroa$3$0$$sroa_idx = ((($5)) + 8|0);
 ;HEAP32[$$sroa$3$0$$sroa_idx>>2]=HEAP32[$$sroa$3>>2]|0;HEAP32[$$sroa$3$0$$sroa_idx+4>>2]=HEAP32[$$sroa$3+4>>2]|0;HEAP32[$$sroa$3$0$$sroa_idx+8>>2]=HEAP32[$$sroa$3+8>>2]|0;HEAP32[$$sroa$3$0$$sroa_idx+12>>2]=HEAP32[$$sroa$3+12>>2]|0;
 $$sroa$4$0$$sroa_idx2 = ((($5)) + 24|0);
 HEAPF32[$$sroa$4$0$$sroa_idx2>>2] = $68;
 $$sroa$5$0$$sroa_idx3 = ((($5)) + 28|0);
 HEAP32[$$sroa$5$0$$sroa_idx3>>2] = $20;
 $69 = (_vp_create_node($0,$1,$65,$3)|0);
 HEAP32[$5>>2] = $69;
 $70 = (($21) - ($65))|0;
 $71 = (_vp_create_node($0,$66,$70,$3)|0);
 HEAP32[$$sroa$2$0$$sroa_idx1>>2] = $71;
 $$1 = $5;
 STACKTOP = sp;return ($$1|0);
}
function _vp_search_node($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$i$i$i = 0.0, $$$i4$i$i = 0.0, $$$i5$i$i = 0.0, $$030 = 0, $$030$be = 0, $$be = 0.0, $$pre = 0.0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0.0, $$sroa$038$0$copyload = 0.0, $$sroa$4$0$$sroa_idx32 = 0, $$sroa$4$0$copyload = 0.0, $$sroa$440$0$$sroa_idx41 = 0, $$sroa$440$0$copyload = 0.0, $$sroa$5$0$$sroa_idx34 = 0, $$sroa$5$0$copyload = 0.0, $$sroa$543$0$$sroa_idx44 = 0, $$sroa$543$0$copyload = 0.0, $$sroa$6$0$$sroa_idx36 = 0, $$sroa$6$0$copyload = 0.0;
 var $$sroa$646$0$$sroa_idx47 = 0, $$sroa$646$0$copyload = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0.0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $$sroa$440$0$$sroa_idx41 = ((($1)) + 4|0);
 $$sroa$543$0$$sroa_idx44 = ((($1)) + 8|0);
 $$sroa$646$0$$sroa_idx47 = ((($1)) + 12|0);
 $3 = ((($2)) + 8|0);
 $4 = ((($2)) + 4|0);
 $$pre = +HEAPF32[$2>>2];
 $$030 = $0;$33 = $$pre;
 while(1) {
  HEAP8[tempDoublePtr>>0]=HEAP8[$1>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1+3>>0];$$sroa$038$0$copyload = +HEAPF32[tempDoublePtr>>2];
  HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$440$0$$sroa_idx41>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$440$0$$sroa_idx41+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$440$0$$sroa_idx41+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$440$0$$sroa_idx41+3>>0];$$sroa$440$0$copyload = +HEAPF32[tempDoublePtr>>2];
  HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$543$0$$sroa_idx44>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$543$0$$sroa_idx44+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$543$0$$sroa_idx44+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$543$0$$sroa_idx44+3>>0];$$sroa$543$0$copyload = +HEAPF32[tempDoublePtr>>2];
  HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$646$0$$sroa_idx47>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$646$0$$sroa_idx47+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$646$0$$sroa_idx47+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$646$0$$sroa_idx47+3>>0];$$sroa$646$0$copyload = +HEAPF32[tempDoublePtr>>2];
  $$sroa$0$0$$sroa_idx = ((($$030)) + 8|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$0$0$$sroa_idx>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$0$0$$sroa_idx+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$0$0$$sroa_idx+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$0$0$$sroa_idx+3>>0];$$sroa$0$0$copyload = +HEAPF32[tempDoublePtr>>2];
  $$sroa$4$0$$sroa_idx32 = ((($$030)) + 12|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$4$0$$sroa_idx32>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$4$0$$sroa_idx32+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$4$0$$sroa_idx32+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$4$0$$sroa_idx32+3>>0];$$sroa$4$0$copyload = +HEAPF32[tempDoublePtr>>2];
  $$sroa$5$0$$sroa_idx34 = ((($$030)) + 16|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$5$0$$sroa_idx34>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$5$0$$sroa_idx34+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$5$0$$sroa_idx34+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$5$0$$sroa_idx34+3>>0];$$sroa$5$0$copyload = +HEAPF32[tempDoublePtr>>2];
  $$sroa$6$0$$sroa_idx36 = ((($$030)) + 20|0);
  HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$6$0$$sroa_idx36>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$6$0$$sroa_idx36+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$6$0$$sroa_idx36+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$6$0$$sroa_idx36+3>>0];$$sroa$6$0$copyload = +HEAPF32[tempDoublePtr>>2];
  $5 = $$sroa$038$0$copyload - $$sroa$0$0$copyload;
  $6 = $5;
  $7 = $$sroa$4$0$copyload;
  $8 = $$sroa$440$0$copyload;
  $9 = $7 - $8;
  $10 = $9 + $6;
  $11 = $9 * $9;
  $12 = $10 * $10;
  $13 = $11 > $12;
  $$$i$i$i = $13 ? $11 : $12;
  $14 = $$sroa$5$0$copyload;
  $15 = $$sroa$543$0$copyload;
  $16 = $14 - $15;
  $17 = $16 + $6;
  $18 = $16 * $16;
  $19 = $17 * $17;
  $20 = $18 > $19;
  $$$i5$i$i = $20 ? $18 : $19;
  $21 = $$$i$i$i + $$$i5$i$i;
  $22 = $$sroa$6$0$copyload;
  $23 = $$sroa$646$0$copyload;
  $24 = $22 - $23;
  $25 = $24 + $6;
  $26 = $24 * $24;
  $27 = $25 * $25;
  $28 = $26 > $27;
  $$$i4$i$i = $28 ? $26 : $27;
  $29 = $21 + $$$i4$i$i;
  $30 = $29;
  $31 = (+Math_sqrt((+$30)));
  $32 = $31 < $33;
  if ($32) {
   $34 = HEAP32[$3>>2]|0;
   $35 = ((($$030)) + 28|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($34|0)==($36|0);
   if (!($37)) {
    HEAPF32[$2>>2] = $31;
    HEAP32[$4>>2] = $36;
   }
  }
  $38 = ((($$030)) + 24|0);
  $39 = +HEAPF32[$38>>2];
  $40 = $31 < $39;
  if ($40) {
   $41 = HEAP32[$$030>>2]|0;
   $42 = ($41|0)==(0|0);
   if (!($42)) {
    _vp_search_node($41,$1,$2);
   }
   $43 = ((($$030)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(0|0);
   if ($45) {
    label = 15;
    break;
   }
   $46 = +HEAPF32[$38>>2];
   $47 = +HEAPF32[$2>>2];
   $48 = $46 - $47;
   $49 = !($31 >= $48);
   if ($49) {
    label = 15;
    break;
   } else {
    $$030$be = $44;$$be = $47;
   }
  } else {
   $50 = ((($$030)) + 4|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ($51|0)==(0|0);
   if (!($52)) {
    _vp_search_node($51,$1,$2);
   }
   $53 = HEAP32[$$030>>2]|0;
   $54 = ($53|0)==(0|0);
   if ($54) {
    label = 15;
    break;
   }
   $55 = +HEAPF32[$38>>2];
   $56 = +HEAPF32[$2>>2];
   $57 = $55 + $56;
   $58 = !($31 <= $57);
   if ($58) {
    label = 15;
    break;
   } else {
    $$030$be = $53;$$be = $56;
   }
  }
  $$030 = $$030$be;$33 = $$be;
 }
 if ((label|0) == 15) {
  return;
 }
}
function _vp_compare_distance($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = +HEAPF32[$0>>2];
 $3 = +HEAPF32[$1>>2];
 $4 = $2 > $3;
 $5 = $4 ? 1 : -1;
 return ($5|0);
}
function _nearest_search($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$i$i$i = 0.0, $$$i4$i$i = 0.0, $$$i5$i$i = 0.0, $$0 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$copyload = 0.0, $$sroa$024$0$copyload = 0.0, $$sroa$4$0$$sroa_idx18 = 0, $$sroa$4$0$copyload = 0.0, $$sroa$426$0$$sroa_idx27 = 0, $$sroa$426$0$copyload = 0.0, $$sroa$5$0$$sroa_idx20 = 0, $$sroa$5$0$copyload = 0.0, $$sroa$529$0$$sroa_idx30 = 0, $$sroa$529$0$copyload = 0.0, $$sroa$6$0$$sroa_idx22 = 0, $$sroa$6$0$copyload = 0.0, $$sroa$632$0$$sroa_idx33 = 0, $$sroa$632$0$copyload = 0.0, $10 = 0.0;
 var $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $30 = 0;
 var $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0.0, $43 = 0.0, $44 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 HEAP8[tempDoublePtr>>0]=HEAP8[$1>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$1+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$1+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$1+3>>0];$$sroa$024$0$copyload = +HEAPF32[tempDoublePtr>>2];
 $$sroa$426$0$$sroa_idx27 = ((($1)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$426$0$$sroa_idx27>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$426$0$$sroa_idx27+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$426$0$$sroa_idx27+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$426$0$$sroa_idx27+3>>0];$$sroa$426$0$copyload = +HEAPF32[tempDoublePtr>>2];
 $$sroa$529$0$$sroa_idx30 = ((($1)) + 8|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$529$0$$sroa_idx30>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$529$0$$sroa_idx30+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$529$0$$sroa_idx30+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$529$0$$sroa_idx30+3>>0];$$sroa$529$0$copyload = +HEAPF32[tempDoublePtr>>2];
 $$sroa$632$0$$sroa_idx33 = ((($1)) + 12|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$632$0$$sroa_idx33>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$632$0$$sroa_idx33+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$632$0$$sroa_idx33+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$632$0$$sroa_idx33+3>>0];$$sroa$632$0$copyload = +HEAPF32[tempDoublePtr>>2];
 $$sroa$0$0$$sroa_idx = (($6) + (($2*24)|0)|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$0$0$$sroa_idx>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$0$0$$sroa_idx+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$0$0$$sroa_idx+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$0$0$$sroa_idx+3>>0];$$sroa$0$0$copyload = +HEAPF32[tempDoublePtr>>2];
 $$sroa$4$0$$sroa_idx18 = (((($6) + (($2*24)|0)|0)) + 4|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$4$0$$sroa_idx18>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$4$0$$sroa_idx18+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$4$0$$sroa_idx18+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$4$0$$sroa_idx18+3>>0];$$sroa$4$0$copyload = +HEAPF32[tempDoublePtr>>2];
 $$sroa$5$0$$sroa_idx20 = (((($6) + (($2*24)|0)|0)) + 8|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$5$0$$sroa_idx20>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$5$0$$sroa_idx20+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$5$0$$sroa_idx20+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$5$0$$sroa_idx20+3>>0];$$sroa$5$0$copyload = +HEAPF32[tempDoublePtr>>2];
 $$sroa$6$0$$sroa_idx22 = (((($6) + (($2*24)|0)|0)) + 12|0);
 HEAP8[tempDoublePtr>>0]=HEAP8[$$sroa$6$0$$sroa_idx22>>0];HEAP8[tempDoublePtr+1>>0]=HEAP8[$$sroa$6$0$$sroa_idx22+1>>0];HEAP8[tempDoublePtr+2>>0]=HEAP8[$$sroa$6$0$$sroa_idx22+2>>0];HEAP8[tempDoublePtr+3>>0]=HEAP8[$$sroa$6$0$$sroa_idx22+3>>0];$$sroa$6$0$copyload = +HEAPF32[tempDoublePtr>>2];
 $7 = $$sroa$024$0$copyload - $$sroa$0$0$copyload;
 $8 = $7;
 $9 = $$sroa$4$0$copyload;
 $10 = $$sroa$426$0$copyload;
 $11 = $9 - $10;
 $12 = $11 + $8;
 $13 = $11 * $11;
 $14 = $12 * $12;
 $15 = $13 > $14;
 $$$i$i$i = $15 ? $13 : $14;
 $16 = $$sroa$5$0$copyload;
 $17 = $$sroa$529$0$copyload;
 $18 = $16 - $17;
 $19 = $18 + $8;
 $20 = $18 * $18;
 $21 = $19 * $19;
 $22 = $20 > $21;
 $$$i5$i$i = $22 ? $20 : $21;
 $23 = $$$i$i$i + $$$i5$i$i;
 $24 = $$sroa$6$0$copyload;
 $25 = $$sroa$632$0$copyload;
 $26 = $24 - $25;
 $27 = $26 + $8;
 $28 = $26 * $26;
 $29 = $27 * $27;
 $30 = $28 > $29;
 $$$i4$i$i = $30 ? $28 : $29;
 $31 = $23 + $$$i4$i$i;
 $32 = $31;
 $33 = (((($0)) + 8|0) + ($2<<2)|0);
 $34 = +HEAPF32[$33>>2];
 $35 = $34 > $32;
 if ($35) {
  $36 = ($3|0)==(0|0);
  if ($36) {
   $$0 = $2;
   STACKTOP = sp;return ($$0|0);
  }
  HEAPF32[$3>>2] = $32;
  $$0 = $2;
  STACKTOP = sp;return ($$0|0);
 } else {
  $37 = (+Math_sqrt((+$32)));
  HEAPF32[$4>>2] = $37;
  $38 = ((($4)) + 4|0);
  HEAP32[$38>>2] = $2;
  $39 = ((($4)) + 8|0);
  HEAP32[$39>>2] = -1;
  $40 = HEAP32[$0>>2]|0;
  _vp_search_node($40,$1,$4);
  $41 = ($3|0)==(0|0);
  if (!($41)) {
   $42 = +HEAPF32[$4>>2];
   $43 = $42 * $42;
   HEAPF32[$3>>2] = $43;
  }
  $44 = HEAP32[$38>>2]|0;
  $$0 = $44;
  STACKTOP = sp;return ($$0|0);
 }
 return (0)|0;
}
function _nearest_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 1032|0);
 $2 = HEAP32[$1>>2]|0;
 _mempool_destroy($2);
 return;
}
function _png_error($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if (!($2)) {
  $3 = ((($0)) + 168|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   FUNCTION_TABLE_vii[$4 & 127]($0,$1);
  }
 }
 _png_default_error($0,$1);
 // unreachable;
}
function _png_default_error($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = HEAP32[2490]|0;
 $3 = ($1|0)==(0|0);
 $4 = $3 ? 19148 : $1;
 HEAP32[$vararg_buffer>>2] = $4;
 (_fprintf($2,19158,$vararg_buffer)|0);
 (_fputc(10,$2)|0);
 _png_longjmp($0,1);
 // unreachable;
}
function _png_longjmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if (!($2)) {
  $3 = ((($0)) + 156|0);
  $4 = HEAP32[$3>>2]|0;
  $5 = ($4|0)==(0|0);
  if (!($5)) {
   $6 = ((($0)) + 160|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)==(0|0);
   if (!($8)) {
    FUNCTION_TABLE_vii[$4 & 127]($7,$1);
   }
  }
 }
 _abort();
 // unreachable;
}
function _png_read_sig($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 441|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3&255;
 $5 = ($3&255)>(7);
 if ($5) {
  return;
 }
 $6 = (8 - ($4))|0;
 $7 = ((($0)) + 800|0);
 HEAP32[$7>>2] = 17;
 $8 = (((($1)) + 32|0) + ($4)|0);
 _png_read_data($0,$8,$6);
 HEAP8[$2>>0] = 8;
 $9 = ((($1)) + 32|0);
 $10 = (_png_sig_cmp($9,$4,$6)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  $16 = ($3&255)<(3);
  if (!($16)) {
   return;
  }
  $17 = ((($0)) + 208|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 | 4096;
  HEAP32[$17>>2] = $19;
  return;
 }
 $12 = ($3&255)<(4);
 if (!($12)) {
  _png_error($0,19190);
  // unreachable;
 }
 $13 = (($6) + -4)|0;
 $14 = (_png_sig_cmp($9,$4,$13)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  _png_error($0,19190);
  // unreachable;
 } else {
  _png_error($0,19175);
  // unreachable;
 }
}
function _png_read_data($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 184|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  _png_error($0,19237);
  // unreachable;
 } else {
  FUNCTION_TABLE_viii[$4 & 127]($0,$1,$2);
  return;
 }
}
function _png_sig_cmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$010 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2>>>0)>(8);
 if ($3) {
  $$0 = 8;
 } else {
  $4 = ($2|0)==(0);
  if ($4) {
   $$010 = -1;
   return ($$010|0);
  } else {
   $$0 = $2;
  }
 }
 $5 = ($1>>>0)>(7);
 if ($5) {
  $$010 = -1;
  return ($$010|0);
 }
 $6 = (19229 + ($1)|0);
 $7 = (($0) + ($1)|0);
 $8 = (($$0) + ($1))|0;
 $9 = ($8>>>0)>(8);
 $10 = (8 - ($1))|0;
 $spec$select = $9 ? $10 : $$0;
 $11 = (_memcmp($7,$6,$spec$select)|0);
 $$010 = $11;
 return ($$010|0);
}
function _png_read_chunk_header($0) {
 $0 = $0|0;
 var $$off$1$i = 0, $$off$2$i = 0, $$off$3$i = 0, $$off$i = 0, $$off15$1$i = 0, $$off15$2$i = 0, $$off15$3$i = 0, $$off15$i = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond$1$i = 0, $or$cond$2$i = 0, $or$cond$3$i = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 800|0);
 HEAP32[$2>>2] = 33;
 _png_read_data($0,$1,8);
 $3 = HEAP8[$1>>0]|0;
 $4 = $3&255;
 $5 = $4 << 24;
 $6 = ((($1)) + 1|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = $8 << 16;
 $10 = $9 | $5;
 $11 = ((($1)) + 2|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $13 << 8;
 $15 = $10 | $14;
 $16 = ((($1)) + 3|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $15 | $18;
 $20 = ($19|0)<(0);
 if ($20) {
  _png_error($0,19114);
  // unreachable;
 }
 $21 = ((($1)) + 4|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $23 << 24;
 $25 = ((($1)) + 5|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $28 = $27 << 16;
 $29 = $28 | $24;
 $30 = ((($1)) + 6|0);
 $31 = HEAP8[$30>>0]|0;
 $32 = $31&255;
 $33 = $32 << 8;
 $34 = $29 | $33;
 $35 = ((($1)) + 7|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = $34 | $37;
 $39 = ((($0)) + 376|0);
 HEAP32[$39>>2] = $38;
 _png_reset_crc($0);
 _png_calculate_crc($0,$21,4);
 $40 = HEAP32[$39>>2]|0;
 $41 = $40 & 255;
 $$off$i = (($41) + -65)|0;
 $42 = ($$off$i>>>0)>(57);
 $$off15$i = (($41) + -91)|0;
 $43 = ($$off15$i>>>0)<(6);
 $or$cond$i = $42 | $43;
 if ($or$cond$i) {
  _png_chunk_error($0,19264);
  // unreachable;
 }
 $44 = $40 >>> 8;
 $45 = $44 & 255;
 $$off$1$i = (($45) + -65)|0;
 $46 = ($$off$1$i>>>0)>(57);
 $$off15$1$i = (($45) + -91)|0;
 $47 = ($$off15$1$i>>>0)<(6);
 $or$cond$1$i = $46 | $47;
 if ($or$cond$1$i) {
  _png_chunk_error($0,19264);
  // unreachable;
 }
 $48 = $40 >>> 16;
 $49 = $48 & 255;
 $$off$2$i = (($49) + -65)|0;
 $50 = ($$off$2$i>>>0)>(57);
 $$off15$2$i = (($49) + -91)|0;
 $51 = ($$off15$2$i>>>0)<(6);
 $or$cond$2$i = $50 | $51;
 if ($or$cond$2$i) {
  _png_chunk_error($0,19264);
  // unreachable;
 }
 $52 = $40 >>> 24;
 $$off$3$i = (($52) + -65)|0;
 $53 = ($$off$3$i>>>0)>(57);
 $$off15$3$i = (($52) + -91)|0;
 $54 = ($$off15$3$i>>>0)<(6);
 $or$cond$3$i = $53 | $54;
 if ($or$cond$3$i) {
  _png_chunk_error($0,19264);
  // unreachable;
 } else {
  HEAP32[$2>>2] = 65;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _png_reset_crc($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_crc32(0,0,0)|0);
 $2 = ((($0)) + 412|0);
 HEAP32[$2>>2] = $1;
 return;
}
function _png_calculate_crc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$022 = 0, $$023 = 0, $$024 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 376|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 536870912;
 $6 = ($5|0)==(0);
 $7 = ((($0)) + 212|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 768;
 $10 = ($9|0)!=(768);
 $11 = $8 & 2048;
 $12 = ($11|0)==(0);
 $$023 = $6 ? $12 : $10;
 $13 = ($2|0)!=(0);
 $or$cond = $13 & $$023;
 if (!($or$cond)) {
  return;
 }
 $14 = ((($0)) + 412|0);
 $15 = HEAP32[$14>>2]|0;
 $$0 = $1;$$022 = $15;$$024 = $2;
 while(1) {
  $16 = ($$024|0)==(0);
  $spec$store$select = $16 ? -1 : $$024;
  $17 = (_crc32($$022,$$0,$spec$store$select)|0);
  $18 = (($$0) + ($spec$store$select)|0);
  $19 = (($$024) - ($spec$store$select))|0;
  $20 = ($19|0)==(0);
  if ($20) {
   break;
  } else {
   $$0 = $18;$$022 = $17;$$024 = $19;
  }
 }
 HEAP32[$14>>2] = $17;
 return;
}
function _png_chunk_error($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx = 0, $$idx$val = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  _png_error(0,$1);
  // unreachable;
 } else {
  $$idx = ((($0)) + 376|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  _png_format_buffer($$idx$val,$2,$1);
  _png_error($0,$2);
  // unreachable;
 }
}
function _png_format_buffer($$0$44$val,$0,$1) {
 $$0$44$val = $$0$44$val|0;
 $0 = $0|0;
 $1 = $1|0;
 var $$02 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$in = 0, $$1$in$1 = 0, $$1$in$2 = 0, $$1$in$3 = 0, $$2$lcssa$sink = 0, $$21 = 0, $$off = 0, $$off$1 = 0, $$off$2 = 0, $$off$3 = 0, $$off49 = 0, $$off49$1 = 0, $$off49$2 = 0, $$off49$3 = 0, $$sink = 0, $$sink5 = 0;
 var $$sink6 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $$0$44$val >>> 24;
 $$off = (($2) + -65)|0;
 $3 = ($$off>>>0)>(57);
 $$off49 = (($2) + -91)|0;
 $4 = ($$off49>>>0)<(6);
 $5 = $3 | $4;
 if ($5) {
  HEAP8[$0>>0] = 91;
  $6 = $$0$44$val >>> 28;
  $7 = (29356 + ($6)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ((($0)) + 1|0);
  HEAP8[$9>>0] = $8;
  $10 = $2 & 15;
  $11 = (29356 + ($10)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ((($0)) + 2|0);
  HEAP8[$13>>0] = $12;
  $14 = ((($0)) + 3|0);
  HEAP8[$14>>0] = 93;
  $$1$in = 4;
 } else {
  $15 = $2&255;
  HEAP8[$0>>0] = $15;
  $$1$in = 1;
 }
 $16 = $$0$44$val >>> 16;
 $17 = $16 & 255;
 $$off$1 = (($17) + -65)|0;
 $18 = ($$off$1>>>0)>(57);
 $$off49$1 = (($17) + -91)|0;
 $19 = ($$off49$1>>>0)<(6);
 $20 = $18 | $19;
 if ($20) {
  $34 = (($$1$in) + 1)|0;
  $35 = $$0$44$val >>> 20;
  $36 = $35 & 15;
  $37 = (29356 + ($36)|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $$1$in | 2;
  $40 = (($0) + ($34)|0);
  HEAP8[$40>>0] = $38;
  $41 = $16 & 15;
  $42 = (29356 + ($41)|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = (($$1$in) + 3)|0;
  $45 = (($0) + ($39)|0);
  HEAP8[$45>>0] = $43;
  $46 = (($0) + ($44)|0);
  HEAP8[$46>>0] = 93;
  $$1$in$1 = $44;$$sink = 91;
 } else {
  $33 = $16&255;
  $$1$in$1 = $$1$in;$$sink = $33;
 }
 $47 = (($0) + ($$1$in)|0);
 HEAP8[$47>>0] = $$sink;
 $$1$1 = (($$1$in$1) + 1)|0;
 $48 = $$0$44$val >>> 8;
 $49 = $48 & 255;
 $$off$2 = (($49) + -65)|0;
 $50 = ($$off$2>>>0)>(57);
 $$off49$2 = (($49) + -91)|0;
 $51 = ($$off49$2>>>0)<(6);
 $52 = $50 | $51;
 if ($52) {
  $54 = (($$1$in$1) + 2)|0;
  $55 = $$0$44$val >>> 12;
  $56 = $55 & 15;
  $57 = (29356 + ($56)|0);
  $58 = HEAP8[$57>>0]|0;
  $59 = (($$1$in$1) + 3)|0;
  $60 = (($0) + ($54)|0);
  HEAP8[$60>>0] = $58;
  $61 = $48 & 15;
  $62 = (29356 + ($61)|0);
  $63 = HEAP8[$62>>0]|0;
  $64 = (($$1$in$1) + 4)|0;
  $65 = (($0) + ($59)|0);
  HEAP8[$65>>0] = $63;
  $66 = (($0) + ($64)|0);
  HEAP8[$66>>0] = 93;
  $$1$in$2 = $64;$$sink5 = 91;
 } else {
  $53 = $48&255;
  $$1$in$2 = $$1$1;$$sink5 = $53;
 }
 $67 = (($0) + ($$1$1)|0);
 HEAP8[$67>>0] = $$sink5;
 $$1$2 = (($$1$in$2) + 1)|0;
 $68 = $$0$44$val & 255;
 $$off$3 = (($68) + -65)|0;
 $69 = ($$off$3>>>0)>(57);
 $$off49$3 = (($68) + -91)|0;
 $70 = ($$off49$3>>>0)<(6);
 $71 = $69 | $70;
 if ($71) {
  $73 = (($$1$in$2) + 2)|0;
  $74 = $$0$44$val >>> 4;
  $75 = $74 & 15;
  $76 = (29356 + ($75)|0);
  $77 = HEAP8[$76>>0]|0;
  $78 = (($$1$in$2) + 3)|0;
  $79 = (($0) + ($73)|0);
  HEAP8[$79>>0] = $77;
  $80 = $$0$44$val & 15;
  $81 = (29356 + ($80)|0);
  $82 = HEAP8[$81>>0]|0;
  $83 = (($$1$in$2) + 4)|0;
  $84 = (($0) + ($78)|0);
  HEAP8[$84>>0] = $82;
  $85 = (($0) + ($83)|0);
  HEAP8[$85>>0] = 93;
  $$1$in$3 = $83;$$sink6 = 91;
 } else {
  $72 = $$0$44$val&255;
  $$1$in$3 = $$1$2;$$sink6 = $72;
 }
 $86 = (($0) + ($$1$2)|0);
 HEAP8[$86>>0] = $$sink6;
 $$1$3 = (($$1$in$3) + 1)|0;
 $87 = ($1|0)==(0|0);
 if ($87) {
  $$2$lcssa$sink = $$1$3;
  $32 = (($0) + ($$2$lcssa$sink)|0);
  HEAP8[$32>>0] = 0;
  return;
 }
 $21 = (($$1$in$3) + 2)|0;
 $22 = (($0) + ($$1$3)|0);
 HEAP8[$22>>0] = 58;
 $23 = (($$1$in$3) + 3)|0;
 $24 = (($0) + ($21)|0);
 HEAP8[$24>>0] = 32;
 $$02 = 0;$$21 = $23;
 while(1) {
  $25 = (($1) + ($$02)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = ($26<<24>>24)==(0);
  if ($27) {
   $$2$lcssa$sink = $$21;
   label = 8;
   break;
  }
  $28 = (($$02) + 1)|0;
  $29 = (($$21) + 1)|0;
  $30 = (($0) + ($$21)|0);
  HEAP8[$30>>0] = $26;
  $31 = ($28>>>0)<(195);
  if ($31) {
   $$02 = $28;$$21 = $29;
  } else {
   $$2$lcssa$sink = $29;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  $32 = (($0) + ($$2$lcssa$sink)|0);
  HEAP8[$32>>0] = 0;
  return;
 }
}
function _png_crc_finish($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01416 = 0, $$01416$us = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $spec$select$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1040|0);
 $2 = sp + 1024|0;
 $3 = sp;
 $4 = ($1|0)==(0);
 if (!($4)) {
  $5 = ($0|0)==(0|0);
  if ($5) {
   $$01416$us = $1;
   while(1) {
    $6 = ($$01416$us>>>0)<(1024);
    $spec$select$us = $6 ? $$01416$us : 1024;
    $7 = (($$01416$us) - ($spec$select$us))|0;
    $8 = ($7|0)==(0);
    if ($8) {
     break;
    } else {
     $$01416$us = $7;
    }
   }
  } else {
   $$01416 = $1;
   while(1) {
    $9 = ($$01416>>>0)<(1024);
    $spec$select = $9 ? $$01416 : 1024;
    $10 = (($$01416) - ($spec$select))|0;
    _png_read_data($0,$3,$spec$select);
    _png_calculate_crc($0,$3,$spec$select);
    $11 = ($10|0)==(0);
    if ($11) {
     break;
    } else {
     $$01416 = $10;
    }
   }
  }
 }
 $12 = ((($0)) + 376|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 & 536870912;
 $15 = ($14|0)==(0);
 $16 = ((($0)) + 212|0);
 $17 = HEAP32[$16>>2]|0;
 if ($15) {
  $21 = $17 & 2048;
  $22 = ($21|0)==(0);
  $23 = ((($0)) + 800|0);
  HEAP32[$23>>2] = 129;
  _png_read_data($0,$2,4);
  if (!($22)) {
   label = 10;
  }
 } else {
  $18 = $17 & 768;
  $19 = ($18|0)==(768);
  $20 = ((($0)) + 800|0);
  HEAP32[$20>>2] = 129;
  _png_read_data($0,$2,4);
  if ($19) {
   label = 10;
  }
 }
 if ((label|0) == 10) {
  $$015 = 0;
  STACKTOP = sp;return ($$015|0);
 }
 $24 = HEAP8[$2>>0]|0;
 $25 = $24&255;
 $26 = $25 << 24;
 $27 = ((($2)) + 1|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $29 << 16;
 $31 = $30 | $26;
 $32 = ((($2)) + 2|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $34 << 8;
 $36 = $31 | $35;
 $37 = ((($2)) + 3|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = $36 | $39;
 $41 = ((($0)) + 412|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($40|0)==($42|0);
 if ($43) {
  $$015 = 0;
  STACKTOP = sp;return ($$015|0);
 }
 $44 = HEAP32[$12>>2]|0;
 $45 = $44 & 536870912;
 $46 = ($45|0)==(0);
 $47 = HEAP32[$16>>2]|0;
 if ($46) {
  $50 = $47 & 1024;
  $51 = ($50|0)==(0);
  if ($51) {
   _png_chunk_error($0,19283);
   // unreachable;
  }
 } else {
  $48 = $47 & 512;
  $49 = ($48|0)==(0);
  if (!($49)) {
   _png_chunk_error($0,19283);
   // unreachable;
  }
 }
 _png_chunk_warning($0,19283);
 $$015 = 1;
 STACKTOP = sp;return ($$015|0);
}
function _png_chunk_warning($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx = 0, $$idx$val = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  _png_warning(0,$1);
  STACKTOP = sp;return;
 } else {
  $$idx = ((($0)) + 376|0);
  $$idx$val = HEAP32[$$idx>>2]|0;
  _png_format_buffer($$idx$val,$2,$1);
  _png_warning($0,$2);
  STACKTOP = sp;return;
 }
}
function _png_warning($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$115 = 0, $$116 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$116 = 0;
 } else {
  $3 = HEAP8[$1>>0]|0;
  $4 = ($3<<24>>24)==(35);
  if ($4) {
   $5 = ((($1)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(32);
   if ($7) {
    $$115 = 1;
   } else {
    $8 = ((($1)) + 2|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(32);
    if ($10) {
     $$115 = 2;
    } else {
     $17 = ((($1)) + 3|0);
     $18 = HEAP8[$17>>0]|0;
     $19 = ($18<<24>>24)==(32);
     if ($19) {
      $$115 = 3;
     } else {
      $20 = ((($1)) + 4|0);
      $21 = HEAP8[$20>>0]|0;
      $22 = ($21<<24>>24)==(32);
      if ($22) {
       $$115 = 4;
      } else {
       $23 = ((($1)) + 5|0);
       $24 = HEAP8[$23>>0]|0;
       $25 = ($24<<24>>24)==(32);
       if ($25) {
        $$115 = 5;
       } else {
        $26 = ((($1)) + 6|0);
        $27 = HEAP8[$26>>0]|0;
        $28 = ($27<<24>>24)==(32);
        if ($28) {
         $$115 = 6;
        } else {
         $29 = ((($1)) + 7|0);
         $30 = HEAP8[$29>>0]|0;
         $31 = ($30<<24>>24)==(32);
         if ($31) {
          $$115 = 7;
         } else {
          $32 = ((($1)) + 8|0);
          $33 = HEAP8[$32>>0]|0;
          $34 = ($33<<24>>24)==(32);
          if ($34) {
           $$115 = 8;
          } else {
           $35 = ((($1)) + 9|0);
           $36 = HEAP8[$35>>0]|0;
           $37 = ($36<<24>>24)==(32);
           if ($37) {
            $$115 = 9;
           } else {
            $38 = ((($1)) + 10|0);
            $39 = HEAP8[$38>>0]|0;
            $40 = ($39<<24>>24)==(32);
            if ($40) {
             $$115 = 10;
            } else {
             $41 = ((($1)) + 11|0);
             $42 = HEAP8[$41>>0]|0;
             $43 = ($42<<24>>24)==(32);
             if ($43) {
              $$115 = 11;
             } else {
              $44 = ((($1)) + 12|0);
              $45 = HEAP8[$44>>0]|0;
              $46 = ($45<<24>>24)==(32);
              if ($46) {
               $$115 = 12;
              } else {
               $47 = ((($1)) + 13|0);
               $48 = HEAP8[$47>>0]|0;
               $49 = ($48<<24>>24)==(32);
               if ($49) {
                $$115 = 13;
               } else {
                $50 = ((($1)) + 14|0);
                $51 = HEAP8[$50>>0]|0;
                $52 = ($51<<24>>24)==(32);
                $spec$select = $52 ? 14 : 15;
                $$115 = $spec$select;
               }
              }
             }
            }
           }
          }
         }
        }
       }
      }
     }
    }
   }
  } else {
   $$115 = 0;
  }
  $11 = ((($0)) + 172|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0|0);
  if ($13) {
   $$116 = $$115;
  } else {
   $14 = (($1) + ($$115)|0);
   FUNCTION_TABLE_vii[$12 & 127]($0,$14);
   STACKTOP = sp;return;
  }
 }
 $15 = (($1) + ($$116)|0);
 $16 = HEAP32[2490]|0;
 HEAP32[$vararg_buffer>>2] = $15;
 (_fprintf($16,19293,$vararg_buffer)|0);
 (_fputc(10,$16)|0);
 STACKTOP = sp;return;
}
function _png_handle_IHDR($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 if (!($7)) {
  _png_chunk_error($0,19312);
  // unreachable;
 }
 $8 = ($2|0)==(13);
 if (!($8)) {
  _png_chunk_error($0,19325);
  // unreachable;
 }
 $9 = $5 | 1;
 HEAP32[$4>>2] = $9;
 _png_read_data($0,$3,13);
 _png_calculate_crc($0,$3,13);
 (_png_crc_finish($0,0)|0);
 $10 = HEAP8[$3>>0]|0;
 $11 = $10&255;
 $12 = $11 << 24;
 $13 = ((($3)) + 1|0);
 $14 = HEAP8[$13>>0]|0;
 $15 = $14&255;
 $16 = $15 << 16;
 $17 = $16 | $12;
 $18 = ((($3)) + 2|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $19&255;
 $21 = $20 << 8;
 $22 = $17 | $21;
 $23 = ((($3)) + 3|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = $22 | $25;
 $27 = ($26|0)<(0);
 if ($27) {
  _png_error($0,19114);
  // unreachable;
 }
 $28 = ((($3)) + 4|0);
 $29 = HEAP8[$28>>0]|0;
 $30 = $29&255;
 $31 = $30 << 24;
 $32 = ((($3)) + 5|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = $33&255;
 $35 = $34 << 16;
 $36 = $35 | $31;
 $37 = ((($3)) + 6|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = $39 << 8;
 $41 = $36 | $40;
 $42 = ((($3)) + 7|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = $41 | $44;
 $46 = ($45|0)<(0);
 if ($46) {
  _png_error($0,19114);
  // unreachable;
 }
 $47 = ((($3)) + 8|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = ((($3)) + 9|0);
 $51 = HEAP8[$50>>0]|0;
 $52 = $51&255;
 $53 = ((($3)) + 10|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = ((($3)) + 11|0);
 $57 = HEAP8[$56>>0]|0;
 $58 = $57&255;
 $59 = ((($3)) + 12|0);
 $60 = HEAP8[$59>>0]|0;
 $61 = $60&255;
 $62 = ((($0)) + 348|0);
 HEAP32[$62>>2] = $26;
 $63 = ((($0)) + 352|0);
 HEAP32[$63>>2] = $45;
 $64 = ((($0)) + 436|0);
 HEAP8[$64>>0] = $48;
 $65 = ((($0)) + 432|0);
 HEAP8[$65>>0] = $60;
 $66 = ((($0)) + 435|0);
 HEAP8[$66>>0] = $51;
 $67 = ((($0)) + 712|0);
 HEAP8[$67>>0] = $57;
 $68 = ((($0)) + 744|0);
 HEAP8[$68>>0] = $54;
 switch ($51<<24>>24) {
 case 6:  {
  $$sink = 4;$71 = 4;
  break;
 }
 case 4:  {
  $$sink = 2;$71 = 2;
  break;
 }
 case 2:  {
  $$sink = 3;$71 = 3;
  break;
 }
 default: {
  $$sink = 1;$71 = 1;
 }
 }
 $69 = ((($0)) + 439|0);
 HEAP8[$69>>0] = $$sink;
 $70 = Math_imul($71, $49)|0;
 $72 = $70&255;
 $73 = ((($0)) + 438|0);
 HEAP8[$73>>0] = $72;
 $74 = $70 & 255;
 $75 = ($74>>>0)>(7);
 if ($75) {
  $76 = $74 >>> 3;
  $77 = Math_imul($76, $26)|0;
  $82 = $77;
  $81 = ((($0)) + 364|0);
  HEAP32[$81>>2] = $82;
  _png_set_IHDR($0,$1,$26,$45,$49,$52,$61,$55,$58);
  STACKTOP = sp;return;
 } else {
  $78 = Math_imul($74, $26)|0;
  $79 = (($78) + 7)|0;
  $80 = $79 >>> 3;
  $82 = $80;
  $81 = ((($0)) + 364|0);
  HEAP32[$81>>2] = $82;
  _png_set_IHDR($0,$1,$26,$45,$49,$52,$61,$55,$58);
  STACKTOP = sp;return;
 }
}
function _png_set_IHDR($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $9 = ($0|0)==(0|0);
 $10 = ($1|0)==(0|0);
 $or$cond = $9 | $10;
 if ($or$cond) {
  return;
 }
 HEAP32[$1>>2] = $2;
 $11 = ((($1)) + 4|0);
 HEAP32[$11>>2] = $3;
 $12 = $4&255;
 $13 = ((($1)) + 24|0);
 HEAP8[$13>>0] = $12;
 $14 = $5&255;
 $15 = ((($1)) + 25|0);
 HEAP8[$15>>0] = $14;
 $16 = $7&255;
 $17 = ((($1)) + 26|0);
 HEAP8[$17>>0] = $16;
 $18 = $8&255;
 $19 = ((($1)) + 27|0);
 HEAP8[$19>>0] = $18;
 $20 = $6&255;
 $21 = ((($1)) + 28|0);
 HEAP8[$21>>0] = $20;
 $22 = $4 & 255;
 $23 = $5 & 255;
 $24 = $6 & 255;
 $25 = $7 & 255;
 $26 = $8 & 255;
 _png_check_IHDR($0,$2,$3,$22,$23,$24,$25,$26);
 $27 = HEAP8[$15>>0]|0;
 $28 = ($27<<24>>24)==(3);
 if ($28) {
  $29 = ((($1)) + 29|0);
  HEAP8[$29>>0] = 1;
  $37 = 1;
 } else {
  $30 = $27 & 2;
  $31 = ((($1)) + 29|0);
  $32 = $30 | 1;
  HEAP8[$31>>0] = $32;
  $33 = $27 & 4;
  $34 = ($33<<24>>24)==(0);
  if ($34) {
   $37 = $32;
  } else {
   $35 = (($32) + 1)<<24>>24;
   HEAP8[$31>>0] = $35;
   $37 = $35;
  }
 }
 $36 = $37&255;
 $38 = HEAP8[$13>>0]|0;
 $39 = $38&255;
 $40 = Math_imul($39, $36)|0;
 $41 = $40&255;
 $42 = ((($1)) + 30|0);
 HEAP8[$42>>0] = $41;
 $43 = $40 & 255;
 $44 = ($43>>>0)>(7);
 if ($44) {
  $45 = $43 >>> 3;
  $46 = Math_imul($45, $2)|0;
  $51 = $46;
 } else {
  $47 = Math_imul($43, $2)|0;
  $48 = (($47) + 7)|0;
  $49 = $48 >>> 3;
  $51 = $49;
 }
 $50 = ((($1)) + 12|0);
 HEAP32[$50>>2] = $51;
 return;
}
function _png_check_IHDR($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$1 = 0, $$10 = 0, $$11 = 0, $$2 = 0, $$3 = 0, $$5 = 0, $$6 = 0, $$7 = 0, $$8 = 0, $$9 = 0, $$pre = 0, $$pre81 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond15 = 0, $or$cond21 = 0, $or$cond23 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $8 = ($1|0)==(0);
 if ($8) {
  _png_warning($0,19333);
  $$2 = 1;
 } else {
  $9 = ($1|0)<(0);
  if ($9) {
   _png_warning($0,19361);
   $$1 = 1;
  } else {
   $$1 = 0;
  }
  $10 = (($1) + 7)|0;
  $11 = $10 & -8;
  $12 = ($11>>>0)<(536870905);
  if ($12) {
   $$2 = $$1;
  } else {
   _png_warning($0,19389);
   $$2 = 1;
  }
 }
 $13 = ((($0)) + 748|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14>>>0)<($1>>>0);
 if ($15) {
  _png_warning($0,19436);
  $$3 = 1;
 } else {
  $$3 = $$2;
 }
 $16 = ($2|0)==(0);
 if ($16) {
  _png_warning($0,19475);
  $$5 = 1;
 } else {
  $17 = ($2|0)<(0);
  if ($17) {
   _png_warning($0,19504);
   $$5 = 1;
  } else {
   $$5 = $$3;
  }
 }
 $18 = ((($0)) + 752|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19>>>0)<($2>>>0);
 if ($20) {
  _png_warning($0,19533);
  $$6 = 1;
 } else {
  $$6 = $$5;
 }
 switch ($3|0) {
 case 1: case 2: case 4: case 8: case 16:  {
  $$7 = $$6;
  break;
 }
 default: {
  _png_warning($0,19573);
  $$7 = 1;
 }
 }
 $21 = $4 | 4;
 $22 = ($21|0)==(5);
 $23 = ($4>>>0)>(6);
 $24 = $23 | $22;
 if ($24) {
  _png_warning($0,19599);
  $$8 = 1;
 } else {
  $$8 = $$7;
 }
 $25 = ($4|0)==(3);
 $26 = ($3|0)>(8);
 $or$cond15 = $26 & $25;
 if ($or$cond15) {
  label = 21;
 } else {
  $27 = ($4|0)==(4);
  $28 = ($21|0)==(6);
  $29 = $27 | $28;
  $30 = ($3|0)<(8);
  $or$cond21 = $30 & $29;
  if ($or$cond21) {
   label = 21;
  } else {
   $$9 = $$8;
  }
 }
 if ((label|0) == 21) {
  _png_warning($0,19626);
  $$9 = 1;
 }
 $31 = ($5|0)>(1);
 if ($31) {
  _png_warning($0,19675);
  $$10 = 1;
 } else {
  $$10 = $$9;
 }
 $32 = ($6|0)==(0);
 if ($32) {
  $$11 = $$10;
 } else {
  _png_warning($0,19708);
  $$11 = 1;
 }
 $33 = ((($0)) + 208|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $34 & 4096;
 $36 = ($35|0)==(0);
 if (!($36)) {
  $37 = ((($0)) + 708|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0);
  if (!($39)) {
   _png_warning($0,25255);
  }
 }
 $40 = ($7|0)==(0);
 do {
  if (!($40)) {
   $41 = ((($0)) + 708|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = $42 & 4;
   $44 = ($43|0)!=(0);
   $45 = ($7|0)==(64);
   $or$cond23 = $45 & $44;
   if ($or$cond23) {
    $46 = HEAP32[$33>>2]|0;
    $47 = $46 & 4096;
    $48 = ($47|0)==(0);
    $49 = ($21|0)==(6);
    $or$cond = $49 & $48;
    if ($or$cond) {
     break;
    }
   }
   _png_warning($0,19743);
   $$pre = HEAP32[$33>>2]|0;
   $$pre81 = $$pre & 4096;
   $50 = ($$pre81|0)==(0);
   if ($50) {
    _png_error($0,19803);
    // unreachable;
   }
   _png_warning($0,19773);
   _png_error($0,19803);
   // unreachable;
  }
 } while(0);
 $51 = ($$11|0)==(1);
 if ($51) {
  _png_error($0,19803);
  // unreachable;
 } else {
  return;
 }
}
function _png_handle_PLTE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$04651 = 0, $$052 = 0, $$phi$trans$insert$pre$phiZZZZ2D = 0, $$pre$phiZ2D = 0, $$pre54 = 0, $$pre55 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 784|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(784|0);
 $3 = sp + 8|0;
 $4 = sp;
 $5 = ((($0)) + 208|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  _png_chunk_error($0,19821);
  // unreachable;
 }
 $9 = $6 & 2;
 $10 = ($9|0)==(0);
 if (!($10)) {
  _png_chunk_error($0,20069);
  // unreachable;
 }
 $11 = $6 & 4;
 $12 = ($11|0)==(0);
 if (!($12)) {
  (_png_crc_finish($0,$2)|0);
  _png_chunk_benign_error($0,19312);
  STACKTOP = sp;return;
 }
 $13 = $6 | 2;
 HEAP32[$5>>2] = $13;
 $14 = ((($0)) + 435|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15 & 2;
 $17 = ($16<<24>>24)==(0);
 if ($17) {
  (_png_crc_finish($0,$2)|0);
  _png_chunk_benign_error($0,19834);
  STACKTOP = sp;return;
 }
 $18 = ($2>>>0)<(769);
 $19 = (($2>>>0) / 3)&-1;
 $20 = ($19*3)|0;
 $21 = (($2) - ($20))|0;
 $22 = ($21|0)==(0);
 $or$cond = $18 & $22;
 if (!($or$cond)) {
  (_png_crc_finish($0,$2)|0);
  $23 = HEAP8[$14>>0]|0;
  $24 = ($23<<24>>24)==(3);
  if ($24) {
   _png_chunk_error($0,19325);
   // unreachable;
  }
  _png_chunk_benign_error($0,19325);
  STACKTOP = sp;return;
 }
 $25 = ($2>>>0)>(2);
 if ($25) {
  $26 = ((($4)) + 1|0);
  $27 = ((($4)) + 2|0);
  $$04651 = 0;$$052 = $3;
  while(1) {
   _png_read_data($0,$4,3);
   _png_calculate_crc($0,$4,3);
   $28 = HEAP8[$4>>0]|0;
   HEAP8[$$052>>0] = $28;
   $29 = HEAP8[$26>>0]|0;
   $30 = ((($$052)) + 1|0);
   HEAP8[$30>>0] = $29;
   $31 = HEAP8[$27>>0]|0;
   $32 = ((($$052)) + 2|0);
   HEAP8[$32>>0] = $31;
   $33 = (($$04651) + 1)|0;
   $34 = ((($$052)) + 3|0);
   $35 = ($33>>>0)<($19>>>0);
   if ($35) {
    $$04651 = $33;$$052 = $34;
   } else {
    break;
   }
  }
 }
 (_png_crc_finish($0,0)|0);
 _png_set_PLTE($0,$1,$3,$19);
 $36 = ((($0)) + 428|0);
 $37 = HEAP16[$36>>1]|0;
 $38 = ($37<<16>>16)==(0);
 do {
  if ($38) {
   $39 = ($1|0)==(0|0);
   if ($39) {
    STACKTOP = sp;return;
   }
   $40 = ((($1)) + 8|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = $41 & 16;
   $43 = ($42|0)==(0);
   if ($43) {
    $$pre$phiZ2D = $40;$47 = $41;
   } else {
    HEAP16[$36>>1] = 0;
    $$phi$trans$insert$pre$phiZZZZ2D = $40;
    label = 22;
   }
  } else {
   HEAP16[$36>>1] = 0;
   $44 = ($1|0)==(0|0);
   if (!($44)) {
    $$pre55 = ((($1)) + 8|0);
    $$phi$trans$insert$pre$phiZZZZ2D = $$pre55;
    label = 22;
    break;
   }
   _png_chunk_benign_error($0,19859);
   STACKTOP = sp;return;
  }
 } while(0);
 if ((label|0) == 22) {
  $45 = ((($1)) + 22|0);
  HEAP16[$45>>1] = 0;
  _png_chunk_benign_error($0,19859);
  $$pre54 = HEAP32[$$phi$trans$insert$pre$phiZZZZ2D>>2]|0;
  $$pre$phiZ2D = $$phi$trans$insert$pre$phiZZZZ2D;$47 = $$pre54;
 }
 $46 = $47 & 64;
 $48 = ($46|0)==(0);
 if (!($48)) {
  _png_chunk_benign_error($0,19878);
 }
 $49 = HEAP32[$$pre$phiZ2D>>2]|0;
 $50 = $49 & 32;
 $51 = ($50|0)==(0);
 if ($51) {
  STACKTOP = sp;return;
 }
 _png_chunk_benign_error($0,19897);
 STACKTOP = sp;return;
}
function _png_chunk_benign_error($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$idx$i = 0, $$idx$val$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $2 = sp;
 $3 = ((($0)) + 212|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1048576;
 $6 = ($5|0)==(0);
 if ($6) {
  _png_chunk_error($0,$1);
  // unreachable;
 } else {
  $$idx$i = ((($0)) + 376|0);
  $$idx$val$i = HEAP32[$$idx$i>>2]|0;
  _png_format_buffer($$idx$val$i,$2,$1);
  _png_warning($0,$2);
  STACKTOP = sp;return;
 }
}
function _png_set_PLTE($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 $5 = ($1|0)==(0|0);
 $or$cond = $4 | $5;
 if ($or$cond) {
  return;
 }
 $6 = ($3>>>0)>(256);
 if ($6) {
  $7 = ((($1)) + 25|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)==(3);
  if ($9) {
   _png_error($0,19916);
   // unreachable;
  }
  _png_warning($0,19916);
  return;
 }
 $10 = ($3|0)!=(0);
 $11 = ($2|0)==(0|0);
 $or$cond5 = $11 & $10;
 if ($or$cond5) {
  _png_error($0,19939);
  // unreachable;
 }
 $12 = ($3|0)==(0);
 if ($12) {
  $13 = ((($0)) + 708|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & 1;
  $16 = ($15|0)==(0);
  if ($16) {
   _png_error($0,19939);
   // unreachable;
  }
 }
 _png_free_data($0,$1,4096,0);
 $17 = (_png_calloc($0,768)|0);
 $18 = ((($0)) + 416|0);
 HEAP32[$18>>2] = $17;
 $19 = $17;
 if ($10) {
  $20 = ($3*3)|0;
  _memcpy(($17|0),($2|0),($20|0))|0;
 }
 $21 = ((($1)) + 16|0);
 HEAP32[$21>>2] = $19;
 $22 = $3&65535;
 $23 = ((($0)) + 420|0);
 HEAP16[$23>>1] = $22;
 $24 = ((($1)) + 20|0);
 HEAP16[$24>>1] = $22;
 $25 = ((($1)) + 232|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 | 4096;
 HEAP32[$25>>2] = $27;
 $28 = ((($1)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = $29 | 8;
 HEAP32[$28>>2] = $30;
 return;
}
function _png_free_data($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0141154 = 0, $$0142160 = 0, $$0143166 = 0, $$0144171 = 0, $$0153 = 0, $$lcssa = 0, $$lcssa146 = 0, $$lcssa148 = 0, $$lcssa150 = 0, $$lcssa151 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre182 = 0, $$pre183 = 0, $$pre184 = 0, $$pre185 = 0, $$pre186 = 0, $$pre186$pre = 0, $$pre189 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 $5 = ($1|0)==(0|0);
 $or$cond = $4 | $5;
 if ($or$cond) {
  return;
 }
 $6 = ((($1)) + 136|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 do {
  if ($8) {
   $$pre189 = ((($1)) + 232|0);
   $$pre$phiZ2D = $$pre189;
  } else {
   $9 = $2 & 16384;
   $10 = ((($1)) + 232|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = $9 & $11;
   $13 = ($12|0)==(0);
   if ($13) {
    $$pre$phiZ2D = $10;
   } else {
    $14 = ($3|0)==(-1);
    if (!($14)) {
     $15 = (((($7) + (($3*28)|0)|0)) + 4|0);
     $16 = HEAP32[$15>>2]|0;
     _png_free($0,$16);
     $17 = HEAP32[$6>>2]|0;
     $18 = (((($17) + (($3*28)|0)|0)) + 4|0);
     HEAP32[$18>>2] = 0;
     $$pre$phiZ2D = $10;
     break;
    }
    $19 = ((($1)) + 128|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)>(0);
    if ($21) {
     $$0144171 = 0;$23 = $7;
     while(1) {
      $22 = (((($23) + (($$0144171*28)|0)|0)) + 4|0);
      $24 = HEAP32[$22>>2]|0;
      _png_free($0,$24);
      $25 = (($$0144171) + 1)|0;
      $26 = HEAP32[$19>>2]|0;
      $27 = ($25|0)<($26|0);
      $28 = HEAP32[$6>>2]|0;
      if ($27) {
       $$0144171 = $25;$23 = $28;
      } else {
       $$lcssa151 = $28;
       break;
      }
     }
    } else {
     $$lcssa151 = $7;
    }
    _png_free($0,$$lcssa151);
    HEAP32[$6>>2] = 0;
    HEAP32[$19>>2] = 0;
    $$pre$phiZ2D = $10;
   }
  }
 } while(0);
 $29 = $2 & 8192;
 $30 = HEAP32[$$pre$phiZ2D>>2]|0;
 $31 = $29 & $30;
 $32 = ($31|0)==(0);
 if ($32) {
  $41 = $30;
 } else {
  $33 = ((($1)) + 8|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = $34 & -17;
  HEAP32[$33>>2] = $35;
  $36 = ((($1)) + 156|0);
  $37 = HEAP32[$36>>2]|0;
  _png_free($0,$37);
  HEAP32[$36>>2] = 0;
  $38 = ((($1)) + 22|0);
  HEAP16[$38>>1] = 0;
  $$pre = HEAP32[$$pre$phiZ2D>>2]|0;
  $41 = $$pre;
 }
 $39 = $2 & 256;
 $40 = $39 & $41;
 $42 = ($40|0)==(0);
 if ($42) {
  $52 = $41;
 } else {
  $43 = ((($1)) + 256|0);
  $44 = HEAP32[$43>>2]|0;
  _png_free($0,$44);
  $45 = ((($1)) + 260|0);
  $46 = HEAP32[$45>>2]|0;
  _png_free($0,$46);
  HEAP32[$43>>2] = 0;
  HEAP32[$45>>2] = 0;
  $47 = ((($1)) + 8|0);
  $48 = HEAP32[$47>>2]|0;
  $49 = $48 & -16385;
  HEAP32[$47>>2] = $49;
  $$pre182 = HEAP32[$$pre$phiZ2D>>2]|0;
  $52 = $$pre182;
 }
 $50 = $2 & 128;
 $51 = $50 & $52;
 $53 = ($51|0)==(0);
 if ($53) {
  $77 = $52;
 } else {
  $54 = ((($1)) + 208|0);
  $55 = HEAP32[$54>>2]|0;
  _png_free($0,$55);
  $56 = ((($1)) + 220|0);
  $57 = HEAP32[$56>>2]|0;
  _png_free($0,$57);
  HEAP32[$54>>2] = 0;
  HEAP32[$56>>2] = 0;
  $58 = ((($1)) + 224|0);
  $59 = HEAP32[$58>>2]|0;
  $60 = ($59|0)==(0|0);
  if (!($60)) {
   $61 = ((($1)) + 229|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = ($62<<24>>24)==(0);
   if ($63) {
    $$lcssa150 = $59;
   } else {
    $$0143166 = 0;$65 = $59;
    while(1) {
     $64 = (($65) + ($$0143166<<2)|0);
     $66 = HEAP32[$64>>2]|0;
     _png_free($0,$66);
     $67 = (($$0143166) + 1)|0;
     $68 = HEAP8[$61>>0]|0;
     $69 = $68&255;
     $70 = ($67>>>0)<($69>>>0);
     $71 = HEAP32[$58>>2]|0;
     if ($70) {
      $$0143166 = $67;$65 = $71;
     } else {
      $$lcssa150 = $71;
      break;
     }
    }
   }
   _png_free($0,$$lcssa150);
   HEAP32[$58>>2] = 0;
  }
  $72 = ((($1)) + 8|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = $73 & -1025;
  HEAP32[$72>>2] = $74;
  $$pre183 = HEAP32[$$pre$phiZ2D>>2]|0;
  $77 = $$pre183;
 }
 $75 = $2 & 16;
 $76 = $75 & $77;
 $78 = ($76|0)==(0);
 if (!($78)) {
  $79 = ((($1)) + 116|0);
  $80 = HEAP32[$79>>2]|0;
  _png_free($0,$80);
  $81 = ((($1)) + 120|0);
  $82 = HEAP32[$81>>2]|0;
  _png_free($0,$82);
  HEAP32[$79>>2] = 0;
  HEAP32[$81>>2] = 0;
  $83 = ((($1)) + 8|0);
  $84 = HEAP32[$83>>2]|0;
  $85 = $84 & -4097;
  HEAP32[$83>>2] = $85;
 }
 $86 = ((($1)) + 244|0);
 $87 = HEAP32[$86>>2]|0;
 $88 = ($87|0)==(0|0);
 do {
  if (!($88)) {
   $89 = $2 & 32;
   $90 = HEAP32[$$pre$phiZ2D>>2]|0;
   $91 = $89 & $90;
   $92 = ($91|0)==(0);
   if (!($92)) {
    $93 = ($3|0)==(-1);
    if (!($93)) {
     $94 = (($87) + ($3<<4)|0);
     $95 = HEAP32[$94>>2]|0;
     _png_free($0,$95);
     $96 = HEAP32[$86>>2]|0;
     $97 = (((($96) + ($3<<4)|0)) + 8|0);
     $98 = HEAP32[$97>>2]|0;
     _png_free($0,$98);
     $99 = HEAP32[$86>>2]|0;
     $100 = (($99) + ($3<<4)|0);
     HEAP32[$100>>2] = 0;
     $101 = (((($99) + ($3<<4)|0)) + 8|0);
     HEAP32[$101>>2] = 0;
     break;
    }
    $102 = ((($1)) + 248|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = ($103|0)>(0);
    if ($104) {
     $$0142160 = 0;$106 = $87;
     while(1) {
      $105 = (($106) + ($$0142160<<4)|0);
      $107 = HEAP32[$105>>2]|0;
      _png_free($0,$107);
      $108 = HEAP32[$86>>2]|0;
      $109 = (((($108) + ($$0142160<<4)|0)) + 8|0);
      $110 = HEAP32[$109>>2]|0;
      _png_free($0,$110);
      $111 = (($$0142160) + 1)|0;
      $112 = HEAP32[$102>>2]|0;
      $113 = ($111|0)<($112|0);
      $114 = HEAP32[$86>>2]|0;
      if ($113) {
       $$0142160 = $111;$106 = $114;
      } else {
       $$lcssa148 = $114;
       break;
      }
     }
    } else {
     $$lcssa148 = $87;
    }
    _png_free($0,$$lcssa148);
    HEAP32[$86>>2] = 0;
    HEAP32[$102>>2] = 0;
    $115 = ((($1)) + 8|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = $116 & -8193;
    HEAP32[$115>>2] = $117;
   }
  }
 } while(0);
 $118 = ((($1)) + 236|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = ($119|0)==(0|0);
 do {
  if (!($120)) {
   $121 = $2 & 512;
   $122 = HEAP32[$$pre$phiZ2D>>2]|0;
   $123 = $121 & $122;
   $124 = ($123|0)==(0);
   if (!($124)) {
    $125 = ($3|0)==(-1);
    if (!($125)) {
     $126 = (((($119) + (($3*20)|0)|0)) + 8|0);
     $127 = HEAP32[$126>>2]|0;
     _png_free($0,$127);
     $128 = HEAP32[$118>>2]|0;
     $129 = (((($128) + (($3*20)|0)|0)) + 8|0);
     HEAP32[$129>>2] = 0;
     break;
    }
    $130 = ((($1)) + 240|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($131|0)>(0);
    if ($132) {
     $$0141154 = 0;$134 = $119;
     while(1) {
      $133 = (((($134) + (($$0141154*20)|0)|0)) + 8|0);
      $135 = HEAP32[$133>>2]|0;
      _png_free($0,$135);
      $136 = (($$0141154) + 1)|0;
      $137 = HEAP32[$130>>2]|0;
      $138 = ($136|0)<($137|0);
      $139 = HEAP32[$118>>2]|0;
      if ($138) {
       $$0141154 = $136;$134 = $139;
      } else {
       $$lcssa146 = $139;
       break;
      }
     }
    } else {
     $$lcssa146 = $119;
    }
    _png_free($0,$$lcssa146);
    HEAP32[$118>>2] = 0;
    HEAP32[$130>>2] = 0;
   }
  }
 } while(0);
 $140 = $2 & 8;
 $141 = HEAP32[$$pre$phiZ2D>>2]|0;
 $142 = $140 & $141;
 $143 = ($142|0)==(0);
 if ($143) {
  $151 = $141;
 } else {
  $144 = ((($1)) + 204|0);
  $145 = HEAP32[$144>>2]|0;
  _png_free($0,$145);
  HEAP32[$144>>2] = 0;
  $146 = ((($1)) + 8|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 & -65;
  HEAP32[$146>>2] = $148;
  $$pre184 = HEAP32[$$pre$phiZ2D>>2]|0;
  $151 = $$pre184;
 }
 $149 = $2 & 4096;
 $150 = $149 & $151;
 $152 = ($150|0)==(0);
 if ($152) {
  $161 = $151;
 } else {
  $153 = ((($1)) + 16|0);
  $154 = HEAP32[$153>>2]|0;
  _png_free($0,$154);
  HEAP32[$153>>2] = 0;
  $155 = ((($1)) + 8|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = $156 & -9;
  HEAP32[$155>>2] = $157;
  $158 = ((($1)) + 20|0);
  HEAP16[$158>>1] = 0;
  $$pre185 = HEAP32[$$pre$phiZ2D>>2]|0;
  $161 = $$pre185;
 }
 $159 = $2 & 64;
 $160 = $159 & $161;
 $162 = ($160|0)==(0);
 if ($162) {
  $183 = $161;
 } else {
  $163 = ((($1)) + 264|0);
  $164 = HEAP32[$163>>2]|0;
  $165 = ($164|0)==(0|0);
  if ($165) {
   $$pre186 = $161;
  } else {
   $166 = ((($1)) + 4|0);
   $167 = HEAP32[$166>>2]|0;
   $168 = ($167|0)==(0);
   if ($168) {
    $$lcssa = $164;
   } else {
    $$0153 = 0;$170 = $164;
    while(1) {
     $169 = (($170) + ($$0153<<2)|0);
     $171 = HEAP32[$169>>2]|0;
     _png_free($0,$171);
     $172 = (($$0153) + 1)|0;
     $173 = HEAP32[$166>>2]|0;
     $174 = ($172>>>0)<($173>>>0);
     $175 = HEAP32[$163>>2]|0;
     if ($174) {
      $$0153 = $172;$170 = $175;
     } else {
      $$lcssa = $175;
      break;
     }
    }
   }
   _png_free($0,$$lcssa);
   HEAP32[$163>>2] = 0;
   $$pre186$pre = HEAP32[$$pre$phiZ2D>>2]|0;
   $$pre186 = $$pre186$pre;
  }
  $176 = ((($1)) + 8|0);
  $177 = HEAP32[$176>>2]|0;
  $178 = $177 & -32769;
  HEAP32[$176>>2] = $178;
  $183 = $$pre186;
 }
 $179 = ($3|0)==(-1);
 $180 = $2 & -16929;
 $spec$select = $179 ? $2 : $180;
 $181 = $spec$select ^ -1;
 $182 = $183 & $181;
 HEAP32[$$pre$phiZ2D>>2] = $182;
 return;
}
function _png_calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i$i = 0, $$0$i6 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0$i6 = 0;
  return ($$0$i6|0);
 }
 $3 = ($1|0)==(0);
 if ($3) {
  _png_error($0,19955);
  // unreachable;
 }
 $4 = ((($0)) + 720|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $8 = (_malloc($1)|0);
  $$0$i$i = $8;
 } else {
  $7 = (FUNCTION_TABLE_iii[$5 & 63]($0,$1)|0);
  $$0$i$i = $7;
 }
 $9 = ($$0$i$i|0)==(0|0);
 if ($9) {
  _png_error($0,19955);
  // unreachable;
 }
 _memset(($$0$i$i|0),0,($1|0))|0;
 $$0$i6 = $$0$i$i;
 return ($$0$i6|0);
}
function _png_free($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 $3 = ($1|0)==(0|0);
 $or$cond = $2 | $3;
 if ($or$cond) {
  return;
 }
 $4 = ((($0)) + 724|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  _free($1);
  return;
 } else {
  FUNCTION_TABLE_vii[$5 & 127]($0,$1);
  return;
 }
}
function _png_handle_IEND($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 208|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 5;
 $6 = ($5|0)==(5);
 if (!($6)) {
  _png_chunk_error($0,19312);
  // unreachable;
 }
 $7 = $4 | 24;
 HEAP32[$3>>2] = $7;
 (_png_crc_finish($0,$2)|0);
 $8 = ($2|0)==(0);
 if ($8) {
  return;
 }
 _png_chunk_benign_error($0,19325);
 return;
}
function _png_handle_gAMA($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  _png_chunk_error($0,19821);
  // unreachable;
 }
 $8 = $5 & 6;
 $9 = ($8|0)==(0);
 if (!($9)) {
  (_png_crc_finish($0,$2)|0);
  _png_chunk_benign_error($0,19312);
  STACKTOP = sp;return;
 }
 $10 = ($2|0)==(4);
 if (!($10)) {
  (_png_crc_finish($0,$2)|0);
  _png_chunk_benign_error($0,19325);
  STACKTOP = sp;return;
 }
 _png_read_data($0,$3,4);
 _png_calculate_crc($0,$3,4);
 $11 = (_png_crc_finish($0,0)|0);
 $12 = ($11|0)==(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = HEAP8[$3>>0]|0;
 $14 = $13&255;
 $15 = $14 << 24;
 $16 = ((($3)) + 1|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 << 16;
 $20 = $19 | $15;
 $21 = ((($3)) + 2|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $23 << 8;
 $25 = $20 | $24;
 $26 = ((($3)) + 3|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $25 | $28;
 $30 = ($29|0)>(-1);
 $$0$i = $30 ? $29 : -1;
 $31 = ((($0)) + 824|0);
 _png_colorspace_set_gamma($0,$31,$$0$i);
 _png_colorspace_sync($0,$1);
 STACKTOP = sp;return;
}
function _png_colorspace_set_gamma($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$off = 0, $$off$i$i = 0, $$phi$trans$insert = 0, $$phi$trans$insert17 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre18 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $19 = 0.0, $20 = 0.0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$off = (($2) + -16)|0;
 $3 = ($$off>>>0)>(624999984);
 if ($3) {
  $$phi$trans$insert17 = ((($1)) + 74|0);
  $$pre18 = HEAP16[$$phi$trans$insert17>>1]|0;
  $$0 = 20044;$$pre$phiZ2D = $$phi$trans$insert17;$29 = $$pre18;
 } else {
  $4 = ((($0)) + 208|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 32768;
  $7 = ($6|0)==(0);
  $$phi$trans$insert = ((($1)) + 74|0);
  $$pre = HEAP16[$$phi$trans$insert>>1]|0;
  $8 = $$pre & 8;
  $9 = ($8<<16>>16)==(0);
  $or$cond = $7 | $9;
  if ($or$cond) {
   $10 = ($$pre<<16>>16)<(0);
   if ($10) {
    return;
   }
   $11 = $$pre & 1;
   $12 = ($11<<16>>16)==(0);
   do {
    if (!($12)) {
     $13 = HEAP32[$1>>2]|0;
     $14 = ($13|0)==(0);
     if (!($14)) {
      $15 = (+($13|0));
      $16 = $15 * 1.0E+5;
      $17 = (+($2|0));
      $18 = $16 / $17;
      $19 = $18 + 0.5;
      $20 = (+Math_floor((+$19)));
      $21 = $20 <= 2147483647.0;
      $22 = $20 >= -2147483648.0;
      $or$cond3$i$i = $21 & $22;
      if ($or$cond3$i$i) {
       $23 = (~~(($20)));
       $$off$i$i = (($23) + -95000)|0;
       $24 = ($$off$i$i>>>0)<(10001);
       if ($24) {
        break;
       }
      }
     }
     $25 = $$pre & 32;
     $26 = ($25<<16>>16)==(0);
     if ($26) {
      _png_chunk_report($0,19969,0);
      break;
     }
     _png_chunk_report($0,20012,2);
     return;
    }
   } while(0);
   $27 = $$pre | 9;
   HEAP32[$1>>2] = $2;
   HEAP16[$$phi$trans$insert>>1] = $27;
   return;
  } else {
   $$0 = 20069;$$pre$phiZ2D = $$phi$trans$insert;$29 = $$pre;
  }
 }
 $28 = $29 | -32768;
 HEAP16[$$pre$phiZ2D>>1] = $28;
 _png_chunk_report($0,$$0,1);
 return;
}
function _png_colorspace_sync($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre189$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge$i = 0, $storemerge9$i = 0, dest = 0, label = 0, sp = 0, src = 0;
 var stop = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($1)) + 40|0);
 $4 = ((($0)) + 824|0);
 dest=$3; src=$4; stop=dest+76|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $5 = ((($1)) + 114|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = $7 & 32768;
 $9 = ($8|0)==(0);
 if (!($9)) {
  $10 = ((($1)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & -6150;
  HEAP32[$10>>2] = $12;
  $$pre189$i$i = ((($1)) + 232|0);
  $13 = HEAP32[$$pre189$i$i>>2]|0;
  $14 = $13 & 16;
  $15 = ($14|0)==(0);
  if (!($15)) {
   $16 = ((($1)) + 116|0);
   $17 = HEAP32[$16>>2]|0;
   _png_free($0,$17);
   $18 = ((($1)) + 120|0);
   $19 = HEAP32[$18>>2]|0;
   _png_free($0,$19);
   HEAP32[$16>>2] = 0;
   HEAP32[$18>>2] = 0;
   HEAP32[$10>>2] = $12;
  }
  $20 = $13 & -17;
  HEAP32[$$pre189$i$i>>2] = $20;
  return;
 }
 $21 = $7 & 128;
 $22 = ($21|0)==(0);
 $23 = ((($1)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 & -2049;
 $26 = $24 | 2048;
 $storemerge$i = $22 ? $25 : $26;
 $27 = $6 & 2;
 $28 = ($27<<16>>16)==(0);
 $29 = $storemerge$i & -5;
 $30 = $storemerge$i | 4;
 $storemerge9$i = $28 ? $29 : $30;
 HEAP32[$23>>2] = $storemerge9$i;
 $31 = $6 & 1;
 $32 = ($31<<16>>16)==(0);
 if ($32) {
  $34 = $storemerge9$i & -2;
  HEAP32[$23>>2] = $34;
  return;
 } else {
  $33 = $storemerge9$i | 1;
  HEAP32[$23>>2] = $33;
  return;
 }
}
function _png_chunk_report($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$idx$i = 0, $$idx$i$i = 0, $$idx$val$i = 0, $$idx$val$i$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp;
 $4 = ((($0)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 32768;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $8 = ($2|0)<(2);
  if ($8) {
   $$idx$i = ((($0)) + 376|0);
   $$idx$val$i = HEAP32[$$idx$i>>2]|0;
   _png_format_buffer($$idx$val$i,$3,$1);
   _png_warning($0,$3);
   STACKTOP = sp;return;
  }
  $9 = ((($0)) + 212|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = $10 & 1048576;
  $12 = ($11|0)==(0);
  if ($12) {
   _png_chunk_error($0,$1);
   // unreachable;
  }
  $$idx$i$i = ((($0)) + 376|0);
  $$idx$val$i$i = HEAP32[$$idx$i$i>>2]|0;
  _png_format_buffer($$idx$val$i$i,$3,$1);
  _png_warning($0,$3);
  STACKTOP = sp;return;
 }
 $13 = ($2|0)<(1);
 $14 = ((($0)) + 212|0);
 $15 = HEAP32[$14>>2]|0;
 if ($13) {
  $16 = $15 & 2097152;
  $17 = ($16|0)==(0);
  if ($17) {
   _png_error($0,$1);
   // unreachable;
  }
  _png_warning($0,$1);
  STACKTOP = sp;return;
 } else {
  $18 = $15 & 4194304;
  $19 = ($18|0)==(0);
  if ($19) {
   _png_error($0,$1);
   // unreachable;
  }
  _png_warning($0,$1);
  STACKTOP = sp;return;
 }
}
function _png_handle_sBIT($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04548 = 0, $$046 = 0, $$sink49 = 0, $$sink50 = 0, $$sink51 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  _png_chunk_error($0,19821);
  // unreachable;
 }
 $8 = $5 & 6;
 $9 = ($8|0)==(0);
 if (!($9)) {
  (_png_crc_finish($0,$2)|0);
  _png_chunk_benign_error($0,19312);
  STACKTOP = sp;return;
 }
 $10 = ($1|0)==(0|0);
 if (!($10)) {
  $11 = ((($1)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 & 2;
  $14 = ($13|0)==(0);
  if (!($14)) {
   (_png_crc_finish($0,$2)|0);
   _png_chunk_benign_error($0,20069);
   STACKTOP = sp;return;
  }
 }
 $15 = ((($0)) + 435|0);
 $16 = HEAP8[$15>>0]|0;
 $17 = ($16<<24>>24)==(3);
 if ($17) {
  $$0 = 8;$$046 = 3;
 } else {
  $18 = ((($0)) + 439|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = ((($0)) + 436|0);
  $22 = HEAP8[$21>>0]|0;
  $$0 = $22;$$046 = $20;
 }
 $23 = ($$046|0)!=($2|0);
 $24 = ($2>>>0)>(4);
 $or$cond = $24 | $23;
 if ($or$cond) {
  _png_chunk_benign_error($0,19325);
  (_png_crc_finish($0,$2)|0);
  STACKTOP = sp;return;
 }
 $25 = ((($3)) + 3|0);
 $26 = ((($3)) + 2|0);
 $27 = ((($3)) + 1|0);
 _memset(($3|0),($$0|0),4)|0;
 _png_read_data($0,$3,$2);
 _png_calculate_crc($0,$3,$2);
 $28 = (_png_crc_finish($0,0)|0);
 $29 = ($28|0)==(0);
 if (!($29)) {
  STACKTOP = sp;return;
 }
 $30 = ($2|0)==(0);
 L23: do {
  if (!($30)) {
   $$04548 = 0;
   while(1) {
    $33 = (($3) + ($$04548)|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = (($34) + -1)<<24>>24;
    $36 = ($35&255)<($$0&255);
    $31 = (($$04548) + 1)|0;
    if (!($36)) {
     break;
    }
    $32 = ($31>>>0)<($2>>>0);
    if ($32) {
     $$04548 = $31;
    } else {
     break L23;
    }
   }
   _png_chunk_benign_error($0,19325);
   STACKTOP = sp;return;
  }
 } while(0);
 $37 = HEAP8[$15>>0]|0;
 $38 = $37 & 2;
 $39 = ($38<<24>>24)==(0);
 $40 = HEAP8[$3>>0]|0;
 $41 = ((($0)) + 516|0);
 if ($39) {
  $44 = ((($0)) + 519|0);
  HEAP8[$44>>0] = $40;
  $$sink49 = $40;$$sink50 = $40;$$sink51 = $27;
 } else {
  $42 = HEAP8[$27>>0]|0;
  $43 = HEAP8[$26>>0]|0;
  $$sink49 = $43;$$sink50 = $42;$$sink51 = $25;
 }
 $45 = HEAP8[$$sink51>>0]|0;
 HEAP8[$41>>0] = $40;
 $46 = ((($0)) + 517|0);
 HEAP8[$46>>0] = $$sink50;
 $47 = ((($0)) + 518|0);
 HEAP8[$47>>0] = $$sink49;
 $48 = ((($0)) + 520|0);
 HEAP8[$48>>0] = $45;
 _png_set_sBIT($0,$1,$41);
 STACKTOP = sp;return;
}
function _png_set_sBIT($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 $4 = ($1|0)==(0|0);
 $or$cond = $3 | $4;
 $5 = ($2|0)==(0|0);
 $or$cond3 = $or$cond | $5;
 if ($or$cond3) {
  return;
 }
 $6 = ((($1)) + 148|0);
 ;HEAP8[$6>>0]=HEAP8[$2>>0]|0;HEAP8[$6+1>>0]=HEAP8[$2+1>>0]|0;HEAP8[$6+2>>0]=HEAP8[$2+2>>0]|0;HEAP8[$6+3>>0]=HEAP8[$2+3>>0]|0;HEAP8[$6+4>>0]=HEAP8[$2+4>>0]|0;
 $7 = ((($1)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 | 2;
 HEAP32[$7>>2] = $9;
 return;
}
function _png_handle_cHRM($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$0$i32 = 0, $$0$i33 = 0, $$0$i34 = 0, $$0$i35 = 0, $$0$i36 = 0, $$0$i37 = 0, $$0$i38 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 32|0;
 $4 = sp;
 $5 = ((($0)) + 208|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  _png_chunk_error($0,19821);
  // unreachable;
 }
 $9 = $6 & 6;
 $10 = ($9|0)==(0);
 if (!($10)) {
  (_png_crc_finish($0,$2)|0);
  _png_chunk_benign_error($0,19312);
  STACKTOP = sp;return;
 }
 $11 = ($2|0)==(32);
 if (!($11)) {
  (_png_crc_finish($0,$2)|0);
  _png_chunk_benign_error($0,19325);
  STACKTOP = sp;return;
 }
 _png_read_data($0,$3,32);
 _png_calculate_crc($0,$3,32);
 $12 = (_png_crc_finish($0,0)|0);
 $13 = ($12|0)==(0);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = HEAP8[$3>>0]|0;
 $15 = $14&255;
 $16 = $15 << 24;
 $17 = ((($3)) + 1|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 << 16;
 $21 = $20 | $16;
 $22 = ((($3)) + 2|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $24 << 8;
 $26 = $21 | $25;
 $27 = ((($3)) + 3|0);
 $28 = HEAP8[$27>>0]|0;
 $29 = $28&255;
 $30 = $26 | $29;
 $31 = ($30|0)>(-1);
 $$0$i = $31 ? $30 : -1;
 $32 = ((($4)) + 24|0);
 HEAP32[$32>>2] = $$0$i;
 $33 = ((($3)) + 4|0);
 $34 = HEAP8[$33>>0]|0;
 $35 = $34&255;
 $36 = $35 << 24;
 $37 = ((($3)) + 5|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = $39 << 16;
 $41 = $40 | $36;
 $42 = ((($3)) + 6|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = $44 << 8;
 $46 = $41 | $45;
 $47 = ((($3)) + 7|0);
 $48 = HEAP8[$47>>0]|0;
 $49 = $48&255;
 $50 = $46 | $49;
 $51 = ($50|0)>(-1);
 $$0$i32 = $51 ? $50 : -1;
 $52 = ((($4)) + 28|0);
 HEAP32[$52>>2] = $$0$i32;
 $53 = ((($3)) + 8|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = $55 << 24;
 $57 = ((($3)) + 9|0);
 $58 = HEAP8[$57>>0]|0;
 $59 = $58&255;
 $60 = $59 << 16;
 $61 = $60 | $56;
 $62 = ((($3)) + 10|0);
 $63 = HEAP8[$62>>0]|0;
 $64 = $63&255;
 $65 = $64 << 8;
 $66 = $61 | $65;
 $67 = ((($3)) + 11|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = $68&255;
 $70 = $66 | $69;
 $71 = ($70|0)>(-1);
 $$0$i38 = $71 ? $70 : -1;
 HEAP32[$4>>2] = $$0$i38;
 $72 = ((($3)) + 12|0);
 $73 = HEAP8[$72>>0]|0;
 $74 = $73&255;
 $75 = $74 << 24;
 $76 = ((($3)) + 13|0);
 $77 = HEAP8[$76>>0]|0;
 $78 = $77&255;
 $79 = $78 << 16;
 $80 = $79 | $75;
 $81 = ((($3)) + 14|0);
 $82 = HEAP8[$81>>0]|0;
 $83 = $82&255;
 $84 = $83 << 8;
 $85 = $80 | $84;
 $86 = ((($3)) + 15|0);
 $87 = HEAP8[$86>>0]|0;
 $88 = $87&255;
 $89 = $85 | $88;
 $90 = ($89|0)>(-1);
 $$0$i37 = $90 ? $89 : -1;
 $91 = ((($4)) + 4|0);
 HEAP32[$91>>2] = $$0$i37;
 $92 = ((($3)) + 16|0);
 $93 = HEAP8[$92>>0]|0;
 $94 = $93&255;
 $95 = $94 << 24;
 $96 = ((($3)) + 17|0);
 $97 = HEAP8[$96>>0]|0;
 $98 = $97&255;
 $99 = $98 << 16;
 $100 = $99 | $95;
 $101 = ((($3)) + 18|0);
 $102 = HEAP8[$101>>0]|0;
 $103 = $102&255;
 $104 = $103 << 8;
 $105 = $100 | $104;
 $106 = ((($3)) + 19|0);
 $107 = HEAP8[$106>>0]|0;
 $108 = $107&255;
 $109 = $105 | $108;
 $110 = ($109|0)>(-1);
 $$0$i36 = $110 ? $109 : -1;
 $111 = ((($4)) + 8|0);
 HEAP32[$111>>2] = $$0$i36;
 $112 = ((($3)) + 20|0);
 $113 = HEAP8[$112>>0]|0;
 $114 = $113&255;
 $115 = $114 << 24;
 $116 = ((($3)) + 21|0);
 $117 = HEAP8[$116>>0]|0;
 $118 = $117&255;
 $119 = $118 << 16;
 $120 = $119 | $115;
 $121 = ((($3)) + 22|0);
 $122 = HEAP8[$121>>0]|0;
 $123 = $122&255;
 $124 = $123 << 8;
 $125 = $120 | $124;
 $126 = ((($3)) + 23|0);
 $127 = HEAP8[$126>>0]|0;
 $128 = $127&255;
 $129 = $125 | $128;
 $130 = ($129|0)>(-1);
 $$0$i35 = $130 ? $129 : -1;
 $131 = ((($4)) + 12|0);
 HEAP32[$131>>2] = $$0$i35;
 $132 = ((($3)) + 24|0);
 $133 = HEAP8[$132>>0]|0;
 $134 = $133&255;
 $135 = $134 << 24;
 $136 = ((($3)) + 25|0);
 $137 = HEAP8[$136>>0]|0;
 $138 = $137&255;
 $139 = $138 << 16;
 $140 = $139 | $135;
 $141 = ((($3)) + 26|0);
 $142 = HEAP8[$141>>0]|0;
 $143 = $142&255;
 $144 = $143 << 8;
 $145 = $140 | $144;
 $146 = ((($3)) + 27|0);
 $147 = HEAP8[$146>>0]|0;
 $148 = $147&255;
 $149 = $145 | $148;
 $150 = ($149|0)>(-1);
 $$0$i34 = $150 ? $149 : -1;
 $151 = ((($4)) + 16|0);
 HEAP32[$151>>2] = $$0$i34;
 $152 = ((($3)) + 28|0);
 $153 = HEAP8[$152>>0]|0;
 $154 = $153&255;
 $155 = $154 << 24;
 $156 = ((($3)) + 29|0);
 $157 = HEAP8[$156>>0]|0;
 $158 = $157&255;
 $159 = $158 << 16;
 $160 = $159 | $155;
 $161 = ((($3)) + 30|0);
 $162 = HEAP8[$161>>0]|0;
 $163 = $162&255;
 $164 = $163 << 8;
 $165 = $160 | $164;
 $166 = ((($3)) + 31|0);
 $167 = HEAP8[$166>>0]|0;
 $168 = $167&255;
 $169 = $165 | $168;
 $170 = ($169|0)>(-1);
 $$0$i33 = $170 ? $169 : -1;
 $171 = ((($4)) + 20|0);
 HEAP32[$171>>2] = $$0$i33;
 $172 = $36 | $16;
 $173 = $172 | $56;
 $174 = $173 | $75;
 $175 = $174 | $95;
 $176 = $175 | $115;
 $177 = $176 | $135;
 $178 = $177 | $155;
 $179 = ($178|0)<(0);
 if ($179) {
  _png_chunk_benign_error($0,20079);
  STACKTOP = sp;return;
 }
 $180 = ((($0)) + 824|0);
 $181 = ((($0)) + 898|0);
 $182 = HEAP16[$181>>1]|0;
 $183 = $182&65535;
 $184 = $183 & 32768;
 $185 = ($184|0)==(0);
 if (!($185)) {
  STACKTOP = sp;return;
 }
 $186 = $183 & 16;
 $187 = ($186|0)==(0);
 if ($187) {
  $190 = $183 | 16;
  $191 = $190&65535;
  HEAP16[$181>>1] = $191;
  (_png_colorspace_set_chromaticities($0,$180,$4,1)|0);
  _png_colorspace_sync($0,$1);
  STACKTOP = sp;return;
 } else {
  $188 = $183 | 32768;
  $189 = $188&65535;
  HEAP16[$181>>1] = $189;
  _png_colorspace_sync($0,$1);
  _png_chunk_benign_error($0,20069);
  STACKTOP = sp;return;
 }
}
function _png_colorspace_set_chromaticities($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i = 0, $storemerge$i = 0, $storemerge$in$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp;
 $5 = (_png_colorspace_check_xy($4,$2)|0);
 switch ($5|0) {
 case 0:  {
  $6 = ((($1)) + 74|0);
  $7 = HEAP16[$6>>1]|0;
  $8 = $7&65535;
  $9 = $8 & 32768;
  $10 = ($9|0)==(0);
  if (!($10)) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
  $11 = ($3|0)>(1);
  $12 = $8 & 2;
  $13 = ($12|0)==(0);
  $or$cond$i = $11 | $13;
  $$pre$i = ((($1)) + 4|0);
  do {
   if (!($or$cond$i)) {
    $14 = (_png_colorspace_endpoints_match($2,$$pre$i,100)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     $16 = $7 | -32768;
     HEAP16[$6>>1] = $16;
     _png_benign_error($0,20094);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    } else {
     $17 = ($3|0)==(0);
     if ($17) {
      $$0 = 1;
     } else {
      break;
     }
     STACKTOP = sp;return ($$0|0);
    }
   }
  } while(0);
  ;HEAP32[$$pre$i>>2]=HEAP32[$2>>2]|0;HEAP32[$$pre$i+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$pre$i+8>>2]=HEAP32[$2+8>>2]|0;HEAP32[$$pre$i+12>>2]=HEAP32[$2+12>>2]|0;HEAP32[$$pre$i+16>>2]=HEAP32[$2+16>>2]|0;HEAP32[$$pre$i+20>>2]=HEAP32[$2+20>>2]|0;HEAP32[$$pre$i+24>>2]=HEAP32[$2+24>>2]|0;HEAP32[$$pre$i+28>>2]=HEAP32[$2+28>>2]|0;
  $18 = ((($1)) + 36|0);
  dest=$18; src=$4; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
  $19 = $7 | 2;
  $20 = (_png_colorspace_endpoints_match($2,328,1000)|0);
  $21 = ($20|0)==(0);
  $22 = $19&65535;
  $23 = $22 & 65471;
  $24 = $22 | 64;
  $storemerge$in$i = $21 ? $23 : $24;
  $storemerge$i = $storemerge$in$i&65535;
  HEAP16[$6>>1] = $storemerge$i;
  $$0 = 2;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 1:  {
  $25 = ((($1)) + 74|0);
  $26 = HEAP16[$25>>1]|0;
  $27 = $26 | -32768;
  HEAP16[$25>>1] = $27;
  _png_benign_error($0,20122);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $28 = ((($1)) + 74|0);
  $29 = HEAP16[$28>>1]|0;
  $30 = $29 | -32768;
  HEAP16[$28>>1] = $30;
  _png_error($0,20145);
  // unreachable;
 }
 }
 return (0)|0;
}
function _png_colorspace_check_xy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i$neg$i = 0, $$0$i131$i = 0, $$0$i133$i = 0, $$0191$ph$i = 0, $$0192$ph$i = 0, $$0195$i = 0, $$0196$i = 0, $$1$ph$i = 0, $$1193$ph$i = 0, $$2$ph$i = 0, $$2194$ph$i = 0, $$op$i = 0, $10 = 0, $100 = 0.0, $101 = 0.0, $102 = 0.0, $103 = 0.0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0;
 var $124 = 0.0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0.0, $167 = 0.0, $168 = 0.0, $169 = 0.0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0.0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0.0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0.0, $218 = 0.0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0.0, $229 = 0.0, $23 = 0, $230 = 0.0, $231 = 0.0;
 var $232 = 0.0, $233 = 0.0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0.0, $241 = 0.0, $242 = 0.0, $243 = 0.0, $244 = 0.0, $245 = 0.0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0.0, $256 = 0.0, $257 = 0.0, $258 = 0.0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0.0, $77 = 0.0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0;
 var $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0.0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i129$i = 0, $or$cond$i130$i = 0, $or$cond$i132$i = 0, $or$cond$i139$i = 0, $or$cond$i144$i = 0;
 var $or$cond$i149$i = 0, $or$cond$i154$i = 0, $or$cond$i159$i = 0, $or$cond$i164$i = 0, $or$cond3$i$i = 0, $or$cond3$i101$i = 0, $or$cond3$i105$i = 0, $or$cond3$i109$i = 0, $or$cond3$i113$i = 0, $or$cond3$i117$i = 0, $or$cond3$i121$i = 0, $or$cond3$i125$i = 0, $or$cond3$i135$i = 0, $or$cond3$i140$i = 0, $or$cond3$i145$i = 0, $or$cond3$i150$i = 0, $or$cond3$i155$i = 0, $or$cond3$i160$i = 0, $or$cond3$i165$i = 0, $or$cond3$i91$i = 0;
 var $or$cond3$i96$i = 0, $or$cond50$i = 0, $or$cond52$i = 0, $or$cond54$i = 0, $or$cond56$i = 0, $or$cond58$i = 0, $or$cond60$i = 0, $or$cond80$i = 0, $or$cond83$i = 0, $or$cond86$i = 0, $or$cond89$i = 0, $storemerge = 0, $storemerge$i = 0, $storemerge203$i = 0, $storemerge204$i = 0, $storemerge205$i = 0, $storemerge206$i = 0, $storemerge207$i = 0, $storemerge208$i = 0, $storemerge209$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = HEAP32[$1>>2]|0;
 $4 = ($3>>>0)>(100000);
 if ($4) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = ((($1)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)<(0);
 $8 = (100000 - ($3))|0;
 $9 = ($6|0)>($8|0);
 $or$cond80$i = $7 | $9;
 if ($or$cond80$i) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $10 = ((($1)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11>>>0)>(100000);
 if ($12) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $13 = ((($1)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)<(0);
 $16 = (100000 - ($11))|0;
 $17 = ($14|0)>($16|0);
 $or$cond83$i = $15 | $17;
 if ($or$cond83$i) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $18 = ((($1)) + 16|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19>>>0)>(100000);
 if ($20) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $21 = ((($1)) + 20|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)<(0);
 $24 = (100000 - ($19))|0;
 $25 = ($22|0)>($24|0);
 $or$cond86$i = $23 | $25;
 if ($or$cond86$i) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = ((($1)) + 24|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27>>>0)>(100000);
 if ($28) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $29 = ((($1)) + 28|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ($30|0)<(0);
 $32 = (100000 - ($27))|0;
 $33 = ($30|0)>($32|0);
 $or$cond89$i = $31 | $33;
 if ($or$cond89$i) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $34 = (($11) - ($19))|0;
 $35 = (($6) - ($22))|0;
 $36 = ($34|0)==(0);
 $37 = ($35|0)==(0);
 $or$cond$i$i = $36 | $37;
 if ($or$cond$i$i) {
  $$0192$ph$i = 0;
 } else {
  $38 = (+($34|0));
  $39 = (+($35|0));
  $40 = $38 * $39;
  $41 = $40 / 7.0;
  $42 = $41 + 0.5;
  $43 = (+Math_floor((+$42)));
  $44 = $43 <= 2147483647.0;
  $45 = $43 >= -2147483648.0;
  $or$cond3$i$i = $44 & $45;
  $46 = (~~(($43)));
  if ($or$cond3$i$i) {
   $$0192$ph$i = $46;
  } else {
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $47 = (($14) - ($22))|0;
 $48 = (($3) - ($19))|0;
 $49 = ($47|0)==(0);
 $50 = ($48|0)==(0);
 $or$cond$i164$i = $50 | $49;
 if ($or$cond$i164$i) {
  $$0191$ph$i = 0;
 } else {
  $51 = (+($47|0));
  $52 = (+($48|0));
  $53 = $52 * $51;
  $54 = $53 / 7.0;
  $55 = $54 + 0.5;
  $56 = (+Math_floor((+$55)));
  $57 = $56 <= 2147483647.0;
  $58 = $56 >= -2147483648.0;
  $or$cond3$i165$i = $57 & $58;
  $59 = (~~(($56)));
  if ($or$cond3$i165$i) {
   $$0191$ph$i = $59;
  } else {
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $60 = (($$0192$ph$i) - ($$0191$ph$i))|0;
 $61 = (($30) - ($22))|0;
 $62 = ($61|0)==(0);
 $or$cond$i159$i = $36 | $62;
 if ($or$cond$i159$i) {
  $$1193$ph$i = 0;
 } else {
  $63 = (+($34|0));
  $64 = (+($61|0));
  $65 = $63 * $64;
  $66 = $65 / 7.0;
  $67 = $66 + 0.5;
  $68 = (+Math_floor((+$67)));
  $69 = $68 <= 2147483647.0;
  $70 = $68 >= -2147483648.0;
  $or$cond3$i160$i = $69 & $70;
  $71 = (~~(($68)));
  if ($or$cond3$i160$i) {
   $$1193$ph$i = $71;
  } else {
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $72 = (($27) - ($19))|0;
 $73 = ($72|0)==(0);
 $or$cond$i154$i = $49 | $73;
 if ($or$cond$i154$i) {
  $$1$ph$i = 0;
 } else {
  $74 = (+($47|0));
  $75 = (+($72|0));
  $76 = $74 * $75;
  $77 = $76 / 7.0;
  $78 = $77 + 0.5;
  $79 = (+Math_floor((+$78)));
  $80 = $79 <= 2147483647.0;
  $81 = $79 >= -2147483648.0;
  $or$cond3$i155$i = $80 & $81;
  $82 = (~~(($79)));
  if ($or$cond3$i155$i) {
   $$1$ph$i = $82;
  } else {
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $83 = (($$1193$ph$i) - ($$1$ph$i))|0;
 $84 = ($83|0)==(0);
 if ($84) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $85 = ($30|0)==(0);
 $86 = ($60|0)==(0);
 $or$cond$i149$i = $85 | $86;
 if ($or$cond$i149$i) {
  $$0196$i = 0;
 } else {
  $87 = (+($30|0));
  $88 = (+($60|0));
  $89 = $87 * $88;
  $90 = (+($83|0));
  $91 = $89 / $90;
  $92 = $91 + 0.5;
  $93 = (+Math_floor((+$92)));
  $94 = $93 <= 2147483647.0;
  $95 = $93 >= -2147483648.0;
  $or$cond3$i150$i = $94 & $95;
  $96 = (~~(($93)));
  if ($or$cond3$i150$i) {
   $$0196$i = $96;
  } else {
   $$0 = 1;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $97 = ($$0196$i|0)>($30|0);
 if (!($97)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $or$cond$i144$i = $37 | $73;
 if ($or$cond$i144$i) {
  $$2194$ph$i = 0;
 } else {
  $98 = (+($35|0));
  $99 = (+($72|0));
  $100 = $98 * $99;
  $101 = $100 / 7.0;
  $102 = $101 + 0.5;
  $103 = (+Math_floor((+$102)));
  $104 = $103 <= 2147483647.0;
  $105 = $103 >= -2147483648.0;
  $or$cond3$i145$i = $104 & $105;
  $106 = (~~(($103)));
  if ($or$cond3$i145$i) {
   $$2194$ph$i = $106;
  } else {
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $or$cond$i139$i = $50 | $62;
 if ($or$cond$i139$i) {
  $$2$ph$i = 0;
 } else {
  $107 = (+($48|0));
  $108 = (+($61|0));
  $109 = $107 * $108;
  $110 = $109 / 7.0;
  $111 = $110 + 0.5;
  $112 = (+Math_floor((+$111)));
  $113 = $112 <= 2147483647.0;
  $114 = $112 >= -2147483648.0;
  $or$cond3$i140$i = $113 & $114;
  $115 = (~~(($112)));
  if ($or$cond3$i140$i) {
   $$2$ph$i = $115;
  } else {
   $$0 = 2;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $116 = (($$2194$ph$i) - ($$2$ph$i))|0;
 $117 = ($116|0)==(0);
 if ($117) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 do {
  if ($or$cond$i149$i) {
   $$0195$i = 0;
  } else {
   $118 = (+($30|0));
   $119 = (+($60|0));
   $120 = $118 * $119;
   $121 = (+($116|0));
   $122 = $120 / $121;
   $123 = $122 + 0.5;
   $124 = (+Math_floor((+$123)));
   $125 = $124 <= 2147483647.0;
   $126 = $124 >= -2147483648.0;
   $or$cond3$i135$i = $125 & $126;
   $127 = (~~(($124)));
   if ($or$cond3$i135$i) {
    $$0195$i = $127;
    break;
   } else {
    $$0 = 1;
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $128 = ($$0195$i|0)>($30|0);
 if (!($128)) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $129 = (+($30|0));
 $130 = 1.0E+10 / $129;
 $131 = $130 + 0.5;
 $132 = (+Math_floor((+$131)));
 $133 = $132 <= 2147483647.0;
 $134 = $132 >= -2147483648.0;
 $or$cond$i132$i = $133 & $134;
 $135 = (~~(($132)));
 $$0$i133$i = $or$cond$i132$i ? $135 : 0;
 $136 = (+($$0196$i|0));
 $137 = 1.0E+10 / $136;
 $138 = $137 + 0.5;
 $139 = (+Math_floor((+$138)));
 $140 = $139 <= 2147483647.0;
 $141 = $139 >= -2147483648.0;
 $or$cond$i130$i = $140 & $141;
 $142 = (~~(($139)));
 $$0$i131$i = $or$cond$i130$i ? $142 : 0;
 $143 = (($$0$i133$i) - ($$0$i131$i))|0;
 $144 = (+($$0195$i|0));
 $145 = 1.0E+10 / $144;
 $146 = $145 + 0.5;
 $147 = (+Math_floor((+$146)));
 $148 = $147 <= 2147483647.0;
 $149 = $147 >= -2147483648.0;
 $or$cond$i129$i = $148 & $149;
 $150 = (~~(($147)));
 $$op$i = (0 - ($150))|0;
 $$0$i$neg$i = $or$cond$i129$i ? $$op$i : 0;
 $151 = (($$0$i$neg$i) + ($143))|0;
 $152 = ($151|0)<(1);
 if ($152) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $153 = ($$0196$i|0)==(0);
 if ($153) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $154 = ($3|0)==(0);
 do {
  if ($154) {
   $storemerge$i = 0;
  } else {
   $155 = (+($3|0));
   $156 = $155 * 1.0E+5;
   $157 = $156 / $136;
   $158 = $157 + 0.5;
   $159 = (+Math_floor((+$158)));
   $160 = $159 <= 2147483647.0;
   $161 = $159 >= -2147483648.0;
   $or$cond3$i125$i = $160 & $161;
   if ($or$cond3$i125$i) {
    $162 = (~~(($159)));
    $storemerge$i = $162;
    break;
   } else {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$0>>2] = $storemerge$i;
 $163 = ((($0)) + 4|0);
 $164 = HEAP32[$5>>2]|0;
 $165 = ($164|0)==(0);
 do {
  if ($165) {
   $storemerge203$i = 0;
  } else {
   $166 = (+($164|0));
   $167 = $166 * 1.0E+5;
   $168 = $167 / $136;
   $169 = $168 + 0.5;
   $170 = (+Math_floor((+$169)));
   $171 = $170 <= 2147483647.0;
   $172 = $170 >= -2147483648.0;
   $or$cond3$i121$i = $171 & $172;
   if ($or$cond3$i121$i) {
    $173 = (~~(($170)));
    $storemerge203$i = $173;
    break;
   } else {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$163>>2] = $storemerge203$i;
 $174 = ((($0)) + 8|0);
 $175 = HEAP32[$1>>2]|0;
 $176 = (100000 - ($175))|0;
 $177 = HEAP32[$5>>2]|0;
 $178 = (($176) - ($177))|0;
 $179 = ($178|0)==(0);
 do {
  if ($179) {
   $storemerge204$i = 0;
  } else {
   $180 = (+($178|0));
   $181 = $180 * 1.0E+5;
   $182 = $181 / $136;
   $183 = $182 + 0.5;
   $184 = (+Math_floor((+$183)));
   $185 = $184 <= 2147483647.0;
   $186 = $184 >= -2147483648.0;
   $or$cond3$i117$i = $185 & $186;
   if ($or$cond3$i117$i) {
    $187 = (~~(($184)));
    $storemerge204$i = $187;
    break;
   } else {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$174>>2] = $storemerge204$i;
 $188 = ((($0)) + 12|0);
 $189 = HEAP32[$10>>2]|0;
 $190 = ($$0195$i|0)==(0);
 if ($190) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $191 = ($189|0)==(0);
 do {
  if ($191) {
   $storemerge205$i = 0;
  } else {
   $192 = (+($189|0));
   $193 = $192 * 1.0E+5;
   $194 = $193 / $144;
   $195 = $194 + 0.5;
   $196 = (+Math_floor((+$195)));
   $197 = $196 <= 2147483647.0;
   $198 = $196 >= -2147483648.0;
   $or$cond3$i113$i = $197 & $198;
   if ($or$cond3$i113$i) {
    $199 = (~~(($196)));
    $storemerge205$i = $199;
    break;
   } else {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$188>>2] = $storemerge205$i;
 $200 = ((($0)) + 16|0);
 $201 = HEAP32[$13>>2]|0;
 $202 = ($201|0)==(0);
 do {
  if ($202) {
   $storemerge206$i = 0;
  } else {
   $203 = (+($201|0));
   $204 = $203 * 1.0E+5;
   $205 = $204 / $144;
   $206 = $205 + 0.5;
   $207 = (+Math_floor((+$206)));
   $208 = $207 <= 2147483647.0;
   $209 = $207 >= -2147483648.0;
   $or$cond3$i109$i = $208 & $209;
   if ($or$cond3$i109$i) {
    $210 = (~~(($207)));
    $storemerge206$i = $210;
    break;
   } else {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$200>>2] = $storemerge206$i;
 $211 = ((($0)) + 20|0);
 $212 = HEAP32[$10>>2]|0;
 $213 = (100000 - ($212))|0;
 $214 = HEAP32[$13>>2]|0;
 $215 = (($213) - ($214))|0;
 $216 = ($215|0)==(0);
 do {
  if ($216) {
   $storemerge207$i = 0;
  } else {
   $217 = (+($215|0));
   $218 = $217 * 1.0E+5;
   $219 = $218 / $144;
   $220 = $219 + 0.5;
   $221 = (+Math_floor((+$220)));
   $222 = $221 <= 2147483647.0;
   $223 = $221 >= -2147483648.0;
   $or$cond3$i105$i = $222 & $223;
   if ($or$cond3$i105$i) {
    $224 = (~~(($221)));
    $storemerge207$i = $224;
    break;
   } else {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$211>>2] = $storemerge207$i;
 $225 = ((($0)) + 24|0);
 $226 = HEAP32[$18>>2]|0;
 $227 = ($226|0)==(0);
 do {
  if ($227) {
   $storemerge208$i = 0;
  } else {
   $228 = (+($226|0));
   $229 = (+($151|0));
   $230 = $229 * $228;
   $231 = $230 / 1.0E+5;
   $232 = $231 + 0.5;
   $233 = (+Math_floor((+$232)));
   $234 = $233 <= 2147483647.0;
   $235 = $233 >= -2147483648.0;
   $or$cond3$i101$i = $234 & $235;
   if ($or$cond3$i101$i) {
    $236 = (~~(($233)));
    $storemerge208$i = $236;
    break;
   } else {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$225>>2] = $storemerge208$i;
 $237 = ((($0)) + 28|0);
 $238 = HEAP32[$21>>2]|0;
 $239 = ($238|0)==(0);
 do {
  if ($239) {
   $storemerge209$i = 0;
  } else {
   $240 = (+($238|0));
   $241 = (+($151|0));
   $242 = $241 * $240;
   $243 = $242 / 1.0E+5;
   $244 = $243 + 0.5;
   $245 = (+Math_floor((+$244)));
   $246 = $245 <= 2147483647.0;
   $247 = $245 >= -2147483648.0;
   $or$cond3$i96$i = $246 & $247;
   if ($or$cond3$i96$i) {
    $248 = (~~(($245)));
    $storemerge209$i = $248;
    break;
   } else {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$237>>2] = $storemerge209$i;
 $249 = ((($0)) + 32|0);
 $250 = HEAP32[$18>>2]|0;
 $251 = (100000 - ($250))|0;
 $252 = HEAP32[$21>>2]|0;
 $253 = (($251) - ($252))|0;
 $254 = ($253|0)==(0);
 do {
  if ($254) {
   $storemerge = 0;
  } else {
   $255 = (+($253|0));
   $256 = (+($151|0));
   $257 = $256 * $255;
   $258 = $257 / 1.0E+5;
   $259 = $258 + 0.5;
   $260 = (+Math_floor((+$259)));
   $261 = $260 <= 2147483647.0;
   $262 = $260 >= -2147483648.0;
   $or$cond3$i91$i = $261 & $262;
   if ($or$cond3$i91$i) {
    $263 = (~~(($260)));
    $storemerge = $263;
    break;
   } else {
    $$0 = 1;
    STACKTOP = sp;return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$249>>2] = $storemerge;
 $264 = (_png_xy_from_XYZ($2,$0)|0);
 $265 = ($264|0)==(0);
 if (!($265)) {
  $$0 = $264;
  STACKTOP = sp;return ($$0|0);
 }
 $266 = HEAP32[$26>>2]|0;
 $267 = ((($2)) + 24|0);
 $268 = HEAP32[$267>>2]|0;
 $269 = (($268) + -5)|0;
 $270 = ($266|0)<($269|0);
 $271 = (($268) + 5)|0;
 $272 = ($266|0)>($271|0);
 $or$cond$i = $270 | $272;
 do {
  if (!($or$cond$i)) {
   $273 = HEAP32[$29>>2]|0;
   $274 = ((($2)) + 28|0);
   $275 = HEAP32[$274>>2]|0;
   $276 = (($275) + -5)|0;
   $277 = ($273|0)<($276|0);
   $278 = (($275) + 5)|0;
   $279 = ($273|0)>($278|0);
   $or$cond50$i = $277 | $279;
   if ($or$cond50$i) {
    break;
   }
   $280 = HEAP32[$1>>2]|0;
   $281 = HEAP32[$2>>2]|0;
   $282 = (($281) + -5)|0;
   $283 = ($280|0)<($282|0);
   $284 = (($281) + 5)|0;
   $285 = ($280|0)>($284|0);
   $or$cond52$i = $283 | $285;
   if ($or$cond52$i) {
    break;
   }
   $286 = HEAP32[$5>>2]|0;
   $287 = ((($2)) + 4|0);
   $288 = HEAP32[$287>>2]|0;
   $289 = (($288) + -5)|0;
   $290 = ($286|0)<($289|0);
   $291 = (($288) + 5)|0;
   $292 = ($286|0)>($291|0);
   $or$cond54$i = $290 | $292;
   if ($or$cond54$i) {
    break;
   }
   $293 = HEAP32[$10>>2]|0;
   $294 = ((($2)) + 8|0);
   $295 = HEAP32[$294>>2]|0;
   $296 = (($295) + -5)|0;
   $297 = ($293|0)<($296|0);
   $298 = (($295) + 5)|0;
   $299 = ($293|0)>($298|0);
   $or$cond56$i = $297 | $299;
   if ($or$cond56$i) {
    break;
   }
   $300 = HEAP32[$13>>2]|0;
   $301 = ((($2)) + 12|0);
   $302 = HEAP32[$301>>2]|0;
   $303 = (($302) + -5)|0;
   $304 = ($300|0)<($303|0);
   $305 = (($302) + 5)|0;
   $306 = ($300|0)>($305|0);
   $or$cond58$i = $304 | $306;
   if ($or$cond58$i) {
    break;
   }
   $307 = HEAP32[$18>>2]|0;
   $308 = ((($2)) + 16|0);
   $309 = HEAP32[$308>>2]|0;
   $310 = (($309) + -5)|0;
   $311 = ($307|0)<($310|0);
   $312 = (($309) + 5)|0;
   $313 = ($307|0)>($312|0);
   $or$cond60$i = $311 | $313;
   if ($or$cond60$i) {
    break;
   }
   $314 = HEAP32[$21>>2]|0;
   $315 = ((($2)) + 20|0);
   $316 = HEAP32[$315>>2]|0;
   $317 = (($316) + -5)|0;
   $318 = ($314|0)<($317|0);
   $319 = (($316) + 5)|0;
   $320 = ($314|0)>($319|0);
   $321 = $318 | $320;
   if ($321) {
    break;
   } else {
    $$0 = 0;
   }
   STACKTOP = sp;return ($$0|0);
  }
 } while(0);
 $$0 = 1;
 STACKTOP = sp;return ($$0|0);
}
function _png_colorspace_endpoints_match($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$or$cond62 = 0, $or$cond = 0, $or$cond50 = 0, $or$cond52 = 0, $or$cond54 = 0, $or$cond56 = 0, $or$cond58 = 0, $or$cond60 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 24|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($1)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($6) - ($2))|0;
 $8 = ($4|0)<($7|0);
 $9 = (($6) + ($2))|0;
 $10 = ($4|0)>($9|0);
 $or$cond = $8 | $10;
 if ($or$cond) {
  return 0;
 }
 $11 = ((($0)) + 28|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($1)) + 28|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - ($2))|0;
 $16 = ($12|0)<($15|0);
 $17 = (($14) + ($2))|0;
 $18 = ($12|0)>($17|0);
 $or$cond50 = $16 | $18;
 if ($or$cond50) {
  return 0;
 }
 $19 = HEAP32[$0>>2]|0;
 $20 = HEAP32[$1>>2]|0;
 $21 = (($20) - ($2))|0;
 $22 = ($19|0)<($21|0);
 $23 = (($20) + ($2))|0;
 $24 = ($19|0)>($23|0);
 $or$cond52 = $22 | $24;
 if ($or$cond52) {
  return 0;
 }
 $25 = ((($0)) + 4|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($1)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) - ($2))|0;
 $30 = ($26|0)<($29|0);
 $31 = (($28) + ($2))|0;
 $32 = ($26|0)>($31|0);
 $or$cond54 = $30 | $32;
 if ($or$cond54) {
  return 0;
 }
 $33 = ((($0)) + 8|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($1)) + 8|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = (($36) - ($2))|0;
 $38 = ($34|0)<($37|0);
 $39 = (($36) + ($2))|0;
 $40 = ($34|0)>($39|0);
 $or$cond56 = $38 | $40;
 if ($or$cond56) {
  return 0;
 }
 $41 = ((($0)) + 12|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ((($1)) + 12|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = (($44) - ($2))|0;
 $46 = ($42|0)<($45|0);
 $47 = (($44) + ($2))|0;
 $48 = ($42|0)>($47|0);
 $or$cond58 = $46 | $48;
 if ($or$cond58) {
  return 0;
 }
 $49 = ((($0)) + 16|0);
 $50 = HEAP32[$49>>2]|0;
 $51 = ((($1)) + 16|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = (($52) - ($2))|0;
 $54 = ($50|0)<($53|0);
 $55 = (($52) + ($2))|0;
 $56 = ($50|0)>($55|0);
 $or$cond60 = $54 | $56;
 if ($or$cond60) {
  return 0;
 } else {
  $57 = ((($0)) + 20|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ((($1)) + 20|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = (($60) - ($2))|0;
  $62 = ($58|0)>=($61|0);
  $63 = (($60) + ($2))|0;
  $64 = ($58|0)<=($63|0);
  $not$or$cond62 = $64 & $62;
  $spec$select = $not$or$cond62&1;
  return ($spec$select|0);
 }
 return (0)|0;
}
function _png_benign_error($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $2 = sp;
 $3 = ((($0)) + 212|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1048576;
 $6 = ($5|0)==(0);
 $7 = ((($0)) + 208|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & 32768;
 $10 = ($9|0)!=(0);
 if ($6) {
  if (!($10)) {
   _png_error($0,$1);
   // unreachable;
  }
  $14 = ((($0)) + 376|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)==(0);
  if ($16) {
   _png_error($0,$1);
   // unreachable;
  } else {
   _png_chunk_error($0,$1);
   // unreachable;
  }
 }
 if ($10) {
  $11 = ((($0)) + 376|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  if (!($13)) {
   _png_format_buffer($12,$2,$1);
   _png_warning($0,$2);
   STACKTOP = sp;return;
  }
 }
 _png_warning($0,$1);
 STACKTOP = sp;return;
}
function _png_xy_from_XYZ($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0.0, $110 = 0.0, $111 = 0.0, $112 = 0.0, $113 = 0.0, $114 = 0.0, $115 = 0.0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0.0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0.0, $130 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0.0, $83 = 0.0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0.0, $99 = 0.0, $or$cond3$i = 0, $or$cond3$i55 = 0, $or$cond3$i59 = 0, $or$cond3$i63 = 0, $or$cond3$i67 = 0, $or$cond3$i71 = 0, $or$cond3$i75 = 0, $or$cond3$i79 = 0, $storemerge = 0, $storemerge83 = 0;
 var $storemerge84 = 0, $storemerge85 = 0, $storemerge86 = 0, $storemerge87 = 0, $storemerge88 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($1)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($4) + ($2))|0;
 $6 = ((($1)) + 8|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + ($7))|0;
 $9 = ($8|0)==(0);
 if ($9) {
  $$0 = 1;
  return ($$0|0);
 }
 $10 = ($2|0)==(0);
 do {
  if ($10) {
   $storemerge = 0;
  } else {
   $11 = (+($2|0));
   $12 = $11 * 1.0E+5;
   $13 = (+($8|0));
   $14 = $12 / $13;
   $15 = $14 + 0.5;
   $16 = (+Math_floor((+$15)));
   $17 = $16 <= 2147483647.0;
   $18 = $16 >= -2147483648.0;
   $or$cond3$i = $17 & $18;
   if ($or$cond3$i) {
    $19 = (~~(($16)));
    $storemerge = $19;
    break;
   } else {
    $$0 = 1;
    return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$0>>2] = $storemerge;
 $20 = ((($0)) + 4|0);
 $21 = HEAP32[$3>>2]|0;
 $22 = ($21|0)==(0);
 do {
  if ($22) {
   $storemerge83 = 0;
  } else {
   $23 = (+($21|0));
   $24 = $23 * 1.0E+5;
   $25 = (+($8|0));
   $26 = $24 / $25;
   $27 = $26 + 0.5;
   $28 = (+Math_floor((+$27)));
   $29 = $28 <= 2147483647.0;
   $30 = $28 >= -2147483648.0;
   $or$cond3$i79 = $29 & $30;
   if ($or$cond3$i79) {
    $31 = (~~(($28)));
    $storemerge83 = $31;
    break;
   } else {
    $$0 = 1;
    return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$20>>2] = $storemerge83;
 $32 = HEAP32[$1>>2]|0;
 $33 = HEAP32[$3>>2]|0;
 $34 = ((($1)) + 12|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($1)) + 16|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = (($37) + ($35))|0;
 $39 = ((($1)) + 20|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = (($38) + ($40))|0;
 $42 = ((($0)) + 8|0);
 $43 = ($41|0)==(0);
 if ($43) {
  $$0 = 1;
  return ($$0|0);
 }
 $44 = ($35|0)==(0);
 do {
  if ($44) {
   $storemerge84 = 0;
  } else {
   $45 = (+($35|0));
   $46 = $45 * 1.0E+5;
   $47 = (+($41|0));
   $48 = $46 / $47;
   $49 = $48 + 0.5;
   $50 = (+Math_floor((+$49)));
   $51 = $50 <= 2147483647.0;
   $52 = $50 >= -2147483648.0;
   $or$cond3$i75 = $51 & $52;
   if ($or$cond3$i75) {
    $53 = (~~(($50)));
    $storemerge84 = $53;
    break;
   } else {
    $$0 = 1;
    return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$42>>2] = $storemerge84;
 $54 = ((($0)) + 12|0);
 $55 = HEAP32[$36>>2]|0;
 $56 = ($55|0)==(0);
 do {
  if ($56) {
   $storemerge85 = 0;
  } else {
   $57 = (+($55|0));
   $58 = $57 * 1.0E+5;
   $59 = (+($41|0));
   $60 = $58 / $59;
   $61 = $60 + 0.5;
   $62 = (+Math_floor((+$61)));
   $63 = $62 <= 2147483647.0;
   $64 = $62 >= -2147483648.0;
   $or$cond3$i71 = $63 & $64;
   if ($or$cond3$i71) {
    $65 = (~~(($62)));
    $storemerge85 = $65;
    break;
   } else {
    $$0 = 1;
    return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$54>>2] = $storemerge85;
 $66 = (($41) + ($8))|0;
 $67 = HEAP32[$34>>2]|0;
 $68 = (($67) + ($32))|0;
 $69 = HEAP32[$36>>2]|0;
 $70 = (($69) + ($33))|0;
 $71 = ((($1)) + 24|0);
 $72 = HEAP32[$71>>2]|0;
 $73 = ((($1)) + 28|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = (($74) + ($72))|0;
 $76 = ((($1)) + 32|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = (($75) + ($77))|0;
 $79 = ((($0)) + 16|0);
 $80 = ($78|0)==(0);
 if ($80) {
  $$0 = 1;
  return ($$0|0);
 }
 $81 = ($72|0)==(0);
 do {
  if ($81) {
   $storemerge86 = 0;
  } else {
   $82 = (+($72|0));
   $83 = $82 * 1.0E+5;
   $84 = (+($78|0));
   $85 = $83 / $84;
   $86 = $85 + 0.5;
   $87 = (+Math_floor((+$86)));
   $88 = $87 <= 2147483647.0;
   $89 = $87 >= -2147483648.0;
   $or$cond3$i67 = $88 & $89;
   if ($or$cond3$i67) {
    $90 = (~~(($87)));
    $storemerge86 = $90;
    break;
   } else {
    $$0 = 1;
    return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$79>>2] = $storemerge86;
 $91 = ((($0)) + 20|0);
 $92 = HEAP32[$73>>2]|0;
 $93 = ($92|0)==(0);
 do {
  if ($93) {
   $storemerge87 = 0;
  } else {
   $94 = (+($92|0));
   $95 = $94 * 1.0E+5;
   $96 = (+($78|0));
   $97 = $95 / $96;
   $98 = $97 + 0.5;
   $99 = (+Math_floor((+$98)));
   $100 = $99 <= 2147483647.0;
   $101 = $99 >= -2147483648.0;
   $or$cond3$i63 = $100 & $101;
   if ($or$cond3$i63) {
    $102 = (~~(($99)));
    $storemerge87 = $102;
    break;
   } else {
    $$0 = 1;
    return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$91>>2] = $storemerge87;
 $103 = (($66) + ($78))|0;
 $104 = HEAP32[$71>>2]|0;
 $105 = (($68) + ($104))|0;
 $106 = HEAP32[$73>>2]|0;
 $107 = ((($0)) + 24|0);
 $108 = ($103|0)==(0);
 if ($108) {
  $$0 = 1;
  return ($$0|0);
 }
 $109 = ($105|0)==(0);
 do {
  if ($109) {
   $storemerge88 = 0;
  } else {
   $110 = (+($105|0));
   $111 = $110 * 1.0E+5;
   $112 = (+($103|0));
   $113 = $111 / $112;
   $114 = $113 + 0.5;
   $115 = (+Math_floor((+$114)));
   $116 = $115 <= 2147483647.0;
   $117 = $115 >= -2147483648.0;
   $or$cond3$i59 = $116 & $117;
   if ($or$cond3$i59) {
    $118 = (~~(($115)));
    $storemerge88 = $118;
    break;
   } else {
    $$0 = 1;
    return ($$0|0);
   }
  }
 } while(0);
 HEAP32[$107>>2] = $storemerge88;
 $119 = (($70) + ($106))|0;
 $120 = ((($0)) + 28|0);
 $121 = ($119|0)==(0);
 if ($121) {
  HEAP32[$120>>2] = 0;
  $$0 = 0;
  return ($$0|0);
 }
 $122 = (+($119|0));
 $123 = $122 * 1.0E+5;
 $124 = (+($103|0));
 $125 = $123 / $124;
 $126 = $125 + 0.5;
 $127 = (+Math_floor((+$126)));
 $128 = $127 <= 2147483647.0;
 $129 = $127 >= -2147483648.0;
 $or$cond3$i55 = $128 & $129;
 if (!($or$cond3$i55)) {
  $$0 = 1;
  return ($$0|0);
 }
 $130 = (~~(($127)));
 HEAP32[$120>>2] = $130;
 $$0 = 0;
 return ($$0|0);
}
function _png_handle_sRGB($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  _png_chunk_error($0,19821);
  // unreachable;
 }
 $8 = $5 & 6;
 $9 = ($8|0)==(0);
 if (!($9)) {
  (_png_crc_finish($0,$2)|0);
  _png_chunk_benign_error($0,19312);
  STACKTOP = sp;return;
 }
 $10 = ($2|0)==(1);
 if (!($10)) {
  (_png_crc_finish($0,$2)|0);
  _png_chunk_benign_error($0,19325);
  STACKTOP = sp;return;
 }
 _png_read_data($0,$3,1);
 _png_calculate_crc($0,$3,1);
 $11 = (_png_crc_finish($0,0)|0);
 $12 = ($11|0)==(0);
 if (!($12)) {
  STACKTOP = sp;return;
 }
 $13 = ((($0)) + 824|0);
 $14 = ((($0)) + 898|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = $16 & 32768;
 $18 = ($17|0)==(0);
 if (!($18)) {
  STACKTOP = sp;return;
 }
 $19 = $16 & 4;
 $20 = ($19|0)==(0);
 if ($20) {
  $23 = HEAP8[$3>>0]|0;
  $24 = $23&255;
  (_png_colorspace_set_sRGB($0,$13,$24)|0);
  _png_colorspace_sync($0,$1);
  STACKTOP = sp;return;
 } else {
  $21 = $16 | 32768;
  $22 = $21&65535;
  HEAP16[$14>>1] = $22;
  _png_colorspace_sync($0,$1);
  _png_chunk_benign_error($0,20184);
  STACKTOP = sp;return;
 }
}
function _png_colorspace_set_sRGB($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$off$i$i = 0, $$pre = 0, $$pre29 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond3$i$i = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 74|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = $4&65535;
 $6 = $5 & 32768;
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$0 = 0;
  return ($$0|0);
 }
 $8 = ($2>>>0)>(3);
 if ($8) {
  _png_icc_profile_error($0,$1,20202,$2,20207);
  $$0 = 0;
  return ($$0|0);
 }
 $9 = $5 & 4;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $11 = ((($1)) + 72|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = $12&65535;
  $14 = ($13|0)==($2|0);
  if (!($14)) {
   _png_icc_profile_error($0,$1,20202,$2,20237);
   $$0 = 0;
   return ($$0|0);
  }
 }
 $15 = $5 & 32;
 $16 = ($15|0)==(0);
 if (!($16)) {
  _png_benign_error($0,20268);
  $$0 = 0;
  return ($$0|0);
 }
 $17 = $5 & 2;
 $18 = ($17|0)==(0);
 if ($18) {
  $23 = $4;
 } else {
  $19 = ((($1)) + 4|0);
  $20 = (_png_colorspace_endpoints_match(328,$19,100)|0);
  $21 = ($20|0)==(0);
  if ($21) {
   _png_chunk_report($0,20303,2);
   $$pre = HEAP16[$3>>1]|0;
   $23 = $$pre;
  } else {
   $23 = $4;
  }
 }
 $22 = $23 & 1;
 $24 = ($22<<16>>16)==(0);
 do {
  if ($24) {
   $41 = $23;
  } else {
   $25 = HEAP32[$1>>2]|0;
   $26 = ($25|0)==(0);
   if (!($26)) {
    $27 = (+($25|0));
    $28 = $27 * 1.0E+5;
    $29 = $28 / 45455.0;
    $30 = $29 + 0.5;
    $31 = (+Math_floor((+$30)));
    $32 = $31 <= 2147483647.0;
    $33 = $31 >= -2147483648.0;
    $or$cond3$i$i = $32 & $33;
    if ($or$cond3$i$i) {
     $34 = (~~(($31)));
     $$off$i$i = (($34) + -95000)|0;
     $35 = ($$off$i$i>>>0)<(10001);
     if ($35) {
      $41 = $23;
      break;
     }
    }
   }
   _png_chunk_report($0,20012,2);
   $$pre29 = HEAP16[$3>>1]|0;
   $41 = $$pre29;
  }
 } while(0);
 $36 = $2&65535;
 $37 = ((($1)) + 72|0);
 HEAP16[$37>>1] = $36;
 $38 = ((($1)) + 4|0);
 ;HEAP32[$38>>2]=HEAP32[328>>2]|0;HEAP32[$38+4>>2]=HEAP32[328+4>>2]|0;HEAP32[$38+8>>2]=HEAP32[328+8>>2]|0;HEAP32[$38+12>>2]=HEAP32[328+12>>2]|0;HEAP32[$38+16>>2]=HEAP32[328+16>>2]|0;HEAP32[$38+20>>2]=HEAP32[328+20>>2]|0;HEAP32[$38+24>>2]=HEAP32[328+24>>2]|0;HEAP32[$38+28>>2]=HEAP32[328+28>>2]|0;
 $39 = ((($1)) + 36|0);
 dest=$39; src=360; stop=dest+36|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 HEAP32[$1>>2] = 45455;
 $40 = $41 | 231;
 HEAP16[$3>>1] = $40;
 $$0 = 1;
 return ($$0|0);
}
function _png_icc_profile_error($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$i$i = 0, $$0$i10$i = 0, $$0$i12$i = 0, $$0$i14$i = 0, $$off$i$i = 0, $$off$i$i1 = 0, $$off$i11$i = 0, $$off$i13$i = 0, $$off$i4$i = 0, $$off$i6$i = 0, $$off$i8$i = 0, $$off$i9$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond$i$i = 0, $or$cond$i5$i = 0, $or$cond$i7$i = 0;
 var $or$cond$i9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $5 = sp + 24|0;
 $6 = sp;
 $7 = ($1|0)!=(0|0);
 if ($7) {
  $8 = ((($1)) + 74|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9 | -32768;
  HEAP16[$8>>1] = $10;
 }
 $11 = (_png_safecat($5,196,0,20334)|0);
 $12 = (($11) + 79)|0;
 $13 = (_png_safecat($5,$12,$11,$2)|0);
 $14 = (_png_safecat($5,196,$13,20344)|0);
 $15 = $3 >>> 24;
 $16 = ($15|0)==(32);
 $$off$i$i = (($15) + -48)|0;
 $17 = ($$off$i$i>>>0)<(10);
 $or$cond$i$i = $16 | $17;
 $18 = $15 & 223;
 $19 = (($18) + -65)|0;
 $20 = ($19>>>0)<(26);
 $21 = $20 | $or$cond$i$i;
 if ($21) {
  $22 = $3 >>> 16;
  $23 = $22 & 255;
  $24 = ($23|0)==(32);
  $$off$i8$i = (($23) + -48)|0;
  $25 = ($$off$i8$i>>>0)<(10);
  $or$cond$i9$i = $24 | $25;
  $26 = $22 & 223;
  $27 = (($26) + -65)|0;
  $28 = ($27>>>0)<(26);
  $29 = $28 | $or$cond$i9$i;
  if ($29) {
   $30 = $3 >>> 8;
   $31 = $30 & 255;
   $32 = ($31|0)==(32);
   $$off$i6$i = (($31) + -48)|0;
   $33 = ($$off$i6$i>>>0)<(10);
   $or$cond$i7$i = $32 | $33;
   $34 = $30 & 223;
   $35 = (($34) + -65)|0;
   $36 = ($35>>>0)<(26);
   $37 = $36 | $or$cond$i7$i;
   if ($37) {
    $38 = $3 & 255;
    $39 = ($38|0)==(32);
    $$off$i4$i = (($38) + -48)|0;
    $40 = ($$off$i4$i>>>0)<(10);
    $or$cond$i5$i = $39 | $40;
    $41 = $3 & 223;
    $42 = (($41) + -65)|0;
    $43 = ($42>>>0)<(26);
    $44 = $43 | $or$cond$i5$i;
    if ($44) {
     $45 = (($5) + ($14)|0);
     HEAP8[$45>>0] = 39;
     $$off$i$i1 = (($15) + -32)|0;
     $46 = ($$off$i$i1>>>0)<(95);
     $47 = $15&255;
     $$0$i$i = $46 ? $47 : 63;
     $48 = ((($45)) + 1|0);
     HEAP8[$48>>0] = $$0$i$i;
     $$off$i13$i = (($23) + -32)|0;
     $49 = ($$off$i13$i>>>0)<(95);
     $50 = $22&255;
     $$0$i14$i = $49 ? $50 : 63;
     $51 = ((($45)) + 2|0);
     HEAP8[$51>>0] = $$0$i14$i;
     $$off$i11$i = (($31) + -32)|0;
     $52 = ($$off$i11$i>>>0)<(95);
     $53 = $30&255;
     $$0$i12$i = $52 ? $53 : 63;
     $54 = ((($45)) + 3|0);
     HEAP8[$54>>0] = $$0$i12$i;
     $$off$i9$i = (($38) + -32)|0;
     $55 = ($$off$i9$i>>>0)<(95);
     $56 = $3&255;
     $$0$i10$i = $55 ? $56 : 63;
     $57 = ((($45)) + 4|0);
     HEAP8[$57>>0] = $$0$i10$i;
     $58 = ((($45)) + 5|0);
     HEAP8[$58>>0] = 39;
     $59 = (($14) + 6)|0;
     $60 = (($14) + 7)|0;
     $61 = (($5) + ($59)|0);
     HEAP8[$61>>0] = 58;
     $62 = (($14) + 8)|0;
     $63 = (($5) + ($60)|0);
     HEAP8[$63>>0] = 32;
     $$0 = $62;
     (_png_safecat($5,196,$$0,$4)|0);
     $68 = $7 ? 2 : 1;
     _png_chunk_report($0,$5,$68);
     STACKTOP = sp;return;
    }
   }
  }
 }
 $64 = ((($6)) + 24|0);
 $65 = (_png_format_number($6,$64,3,$3)|0);
 $66 = (_png_safecat($5,196,$14,$65)|0);
 $67 = (_png_safecat($5,196,$66,20348)|0);
 $$0 = $67;
 (_png_safecat($5,196,$$0,$4)|0);
 $68 = $7 ? 2 : 1;
 _png_chunk_report($0,$5,$68);
 STACKTOP = sp;return;
}
function _png_safecat($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$01216 = 0, $$017 = 0, $$1 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond14 = 0, $or$cond1415 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)!=(0|0);
 $5 = ($2>>>0)<($1>>>0);
 $or$cond = $4 & $5;
 if (!($or$cond)) {
  $$2 = $2;
  return ($$2|0);
 }
 $6 = ($3|0)==(0|0);
 if ($6) {
  $$1 = $2;
 } else {
  $7 = HEAP8[$3>>0]|0;
  $8 = ($7<<24>>24)!=(0);
  $9 = (($1) + -1)|0;
  $10 = ($9>>>0)>($2>>>0);
  $or$cond1415 = $10 & $8;
  if ($or$cond1415) {
   $$01216 = $2;$$017 = $3;$14 = $7;
   while(1) {
    $11 = ((($$017)) + 1|0);
    $12 = (($$01216) + 1)|0;
    $13 = (($0) + ($$01216)|0);
    HEAP8[$13>>0] = $14;
    $15 = HEAP8[$11>>0]|0;
    $16 = ($15<<24>>24)!=(0);
    $17 = ($12>>>0)<($9>>>0);
    $or$cond14 = $17 & $16;
    if ($or$cond14) {
     $$01216 = $12;$$017 = $11;$14 = $15;
    } else {
     $$1 = $12;
     break;
    }
   }
  } else {
   $$1 = $2;
  }
 }
 $18 = (($0) + ($$1)|0);
 HEAP8[$18>>0] = 0;
 $$2 = $$1;
 return ($$2|0);
}
function _png_format_number($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$03456 = 0, $$03456$us = 0, $$03755 = 0, $$03755$us = 0, $$03854 = 0, $$03854$us = 0, $$040$lcssa = 0, $$04053 = 0, $$04053$us = 0, $$057$us = 0, $$1$us = 0, $$135 = 0, $$13950 = 0, $$13950$us = 0, $$141$us = 0, $$236 = 0, $$252$us = 0, $$343 = 0, $$343$us = 0, $$351 = 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond44 = 0, $or$cond44$us = 0, $or$cond47$us = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($1)) + -1|0);
 HEAP8[$4>>0] = 0;
 $5 = ($4>>>0)>($0>>>0);
 if (!($5)) {
  $$040$lcssa = $4;
  return ($$040$lcssa|0);
 }
 $6 = ($2|0)==(5);
 if (!($6)) {
  $$03456 = 1;$$03755 = 0;$$03854 = $3;$$04053 = $4;
  while(1) {
   $25 = ($$03854|0)!=(0);
   $26 = ($$03755|0)<($$03456|0);
   $or$cond44 = $25 | $26;
   if (!($or$cond44)) {
    $$040$lcssa = $$04053;
    label = 21;
    break;
   }
   switch ($2|0) {
   case 3:  {
    $$236 = $$03456;
    label = 19;
    break;
   }
   case 2:  {
    $$135 = 2;
    label = 17;
    break;
   }
   case 1:  {
    $$135 = $$03456;
    label = 17;
    break;
   }
   case 4:  {
    $$236 = 2;
    label = 19;
    break;
   }
   default: {
    $$13950 = 0;$$343 = $$04053;$$351 = $$03456;
   }
   }
   if ((label|0) == 17) {
    label = 0;
    $27 = (($$03854>>>0) / 10)&-1;
    $28 = ($27*10)|0;
    $29 = (($$03854) - ($28))|0;
    $30 = (20352 + ($29)|0);
    $31 = HEAP8[$30>>0]|0;
    $32 = ((($$04053)) + -1|0);
    HEAP8[$32>>0] = $31;
    $$13950 = $27;$$343 = $32;$$351 = $$135;
   }
   else if ((label|0) == 19) {
    label = 0;
    $33 = $$03854 & 15;
    $34 = (20352 + ($33)|0);
    $35 = HEAP8[$34>>0]|0;
    $36 = ((($$04053)) + -1|0);
    HEAP8[$36>>0] = $35;
    $37 = $$03854 >>> 4;
    $$13950 = $37;$$343 = $36;$$351 = $$236;
   }
   $38 = (($$03755) + 1)|0;
   $39 = ($$343>>>0)>($0>>>0);
   if ($39) {
    $$03456 = $$351;$$03755 = $38;$$03854 = $$13950;$$04053 = $$343;
   } else {
    $$040$lcssa = $$343;
    label = 21;
    break;
   }
  }
  if ((label|0) == 21) {
   return ($$040$lcssa|0);
  }
 }
 $$03456$us = 1;$$03755$us = 0;$$03854$us = $3;$$04053$us = $4;$$057$us = 0;
 while(1) {
  $7 = ($$03854$us|0)!=(0);
  $8 = ($$03755$us|0)<($$03456$us|0);
  $or$cond44$us = $7 | $8;
  if (!($or$cond44$us)) {
   $$040$lcssa = $$04053$us;
   label = 21;
   break;
  }
  $9 = (($$03854$us>>>0) / 10)&-1;
  $10 = ($9*10)|0;
  $11 = (($$03854$us) - ($10))|0;
  $12 = $$057$us | $11;
  $13 = ($12|0)==(0);
  $14 = ((($$04053$us)) + -1|0);
  if ($13) {
   $$1$us = 0;$$141$us = $$04053$us;
  } else {
   $15 = (20352 + ($11)|0);
   $16 = HEAP8[$15>>0]|0;
   HEAP8[$14>>0] = $16;
   $$1$us = 1;$$141$us = $14;
  }
  $17 = (($$03755$us) + 1)|0;
  $18 = ($17|0)==(5);
  $19 = ($$141$us>>>0)>($0>>>0);
  $or$cond47$us = $18 & $19;
  do {
   if ($or$cond47$us) {
    $20 = ($$1$us|0)==(0);
    if (!($20)) {
     $21 = ((($$141$us)) + -1|0);
     HEAP8[$21>>0] = 46;
     $$13950$us = $9;$$252$us = 1;$$343$us = $21;$40 = 5;
     break;
    }
    $22 = ($$03854$us>>>0)<(10);
    if ($22) {
     $23 = ((($$141$us)) + -1|0);
     HEAP8[$23>>0] = 48;
     $$13950$us = 0;$$252$us = 0;$$343$us = $23;$40 = 5;
    } else {
     $$13950$us = $9;$$252$us = 0;$$343$us = $$141$us;$40 = 5;
    }
   } else {
    $$13950$us = $9;$$252$us = $$1$us;$$343$us = $$141$us;$40 = $17;
   }
  } while(0);
  $24 = ($$343$us>>>0)>($0>>>0);
  if ($24) {
   $$03456$us = 5;$$03755$us = $40;$$03854$us = $$13950$us;$$04053$us = $$343$us;$$057$us = $$252$us;
  } else {
   $$040$lcssa = $$343$us;
   label = 21;
   break;
  }
 }
 if ((label|0) == 21) {
  return ($$040$lcssa|0);
 }
 return (0)|0;
}
function _png_handle_iCCP($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0125$lcssa = 0, $$0125$off = 0, $$0125227 = 0, $$0174 = 0, $$0182 = 0, $$045$i = 0, $$045$i128 = 0, $$045$i138 = 0, $$1 = 0, $$1$i$ph = 0, $$1183 = 0, $$12 = 0, $$16207 = 0, $$2$i = 0, $$2$i130 = 0, $$2$i140 = 0, $$3176 = 0, $$3185 = 0, $$4116 = 0, $$4177 = 0;
 var $$4186 = 0, $$5 = 0, $$5178 = 0, $$5187 = 0, $$6179 = 0, $$6188 = 0, $$7180 = 0, $$7189 = 0, $$8$ph$ph = 0, $$8181 = 0, $$8190 = 0, $$9208 = 0, $$9209 = 0, $$lcssa$i = 0, $$lcssa$i134 = 0, $$lcssa$i144 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$i = 0, $$pre$i131 = 0;
 var $$pre$i141 = 0, $$pre244 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0;
 var $spec$select = 0, $spec$select$i = 0, $spec$select$i129 = 0, $spec$select$i139 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1248|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1248|0);
 $3 = sp + 1156|0;
 $4 = sp + 1024|0;
 $5 = sp;
 $6 = ((($0)) + 208|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  _png_chunk_error($0,19821);
  // unreachable;
 }
 $10 = $7 & 6;
 $11 = ($10|0)==(0);
 if (!($11)) {
  (_png_crc_finish($0,$2)|0);
  _png_chunk_benign_error($0,19312);
  STACKTOP = sp;return;
 }
 $12 = ($2>>>0)<(9);
 if ($12) {
  (_png_crc_finish($0,$2)|0);
  _png_chunk_benign_error($0,21133);
  STACKTOP = sp;return;
 }
 $13 = ((($0)) + 824|0);
 $14 = ((($0)) + 898|0);
 $15 = HEAP16[$14>>1]|0;
 $16 = $15&65535;
 $17 = $16 & 32768;
 $18 = ($17|0)==(0);
 if (!($18)) {
  (_png_crc_finish($0,$2)|0);
  STACKTOP = sp;return;
 }
 $19 = $16 & 4;
 $20 = ($19|0)==(0);
 L16: do {
  if ($20) {
   $21 = ($2>>>0)<(81);
   $spec$select = $21 ? $2 : 81;
   _png_read_data($0,$3,$spec$select);
   _png_calculate_crc($0,$3,$spec$select);
   $22 = (($2) - ($spec$select))|0;
   $23 = ($spec$select|0)==(0);
   do {
    if ($23) {
     $$8$ph$ph = 20432;
    } else {
     $$0125227 = 0;
     while(1) {
      $24 = (($3) + ($$0125227)|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = ($25<<24>>24)==(0);
      if ($26) {
       $$0125$lcssa = $$0125227;
       break;
      }
      $27 = (($$0125227) + 1)|0;
      $28 = ($27>>>0)<(80);
      $29 = ($27>>>0)<($spec$select>>>0);
      $or$cond = $28 & $29;
      if ($or$cond) {
       $$0125227 = $27;
      } else {
       $$0125$lcssa = $27;
       break;
      }
     }
     $$0125$off = (($$0125$lcssa) + -1)|0;
     $30 = ($$0125$off>>>0)<(79);
     if ($30) {
      $31 = (($$0125$lcssa) + 1)|0;
      $32 = ($31>>>0)<($spec$select>>>0);
      if ($32) {
       $33 = (($3) + ($31)|0);
       $34 = HEAP8[$33>>0]|0;
       $35 = ($34<<24>>24)==(0);
       if ($35) {
        $36 = (($$0125$lcssa) + 2)|0;
        $37 = (_png_inflate_claim($0,1766015824)|0);
        $38 = ($37|0)==(0);
        if (!($38)) {
         $195 = ((($0)) + 248|0);
         $196 = HEAP32[$195>>2]|0;
         $$8$ph$ph = $196;
         break;
        }
        $39 = (($spec$select) - ($36))|0;
        $40 = (($3) + ($36)|0);
        $41 = ((($0)) + 224|0);
        HEAP32[$41>>2] = $40;
        $42 = ((($0)) + 228|0);
        HEAP32[$42>>2] = $39;
        $43 = ((($0)) + 220|0);
        $44 = HEAP32[$43>>2]|0;
        $45 = ((($0)) + 376|0);
        $46 = HEAP32[$45>>2]|0;
        $47 = ($44|0)==($46|0);
        L30: do {
         if ($47) {
          $48 = ((($0)) + 224|0);
          $49 = ((($0)) + 236|0);
          HEAP32[$49>>2] = $4;
          $50 = ((($0)) + 240|0);
          HEAP32[$50>>2] = 0;
          $$0174 = 132;$$0182 = $22;$$045$i = 1024;$51 = $39;
          while(1) {
           $52 = ($51|0)==(0);
           if ($52) {
            $53 = ($$045$i>>>0)>($$0182>>>0);
            $spec$select$i = $53 ? $$0182 : $$045$i;
            $54 = (($$0182) - ($spec$select$i))|0;
            $55 = ($spec$select$i|0)==(0);
            if (!($55)) {
             _png_read_data($0,$5,$spec$select$i);
             _png_calculate_crc($0,$5,$spec$select$i);
            }
            HEAP32[$48>>2] = $5;
            HEAP32[$42>>2] = $spec$select$i;
            $$1183 = $54;$$2$i = $spec$select$i;
           } else {
            $$1183 = $$0182;$$2$i = $$045$i;
           }
           $56 = HEAP32[$50>>2]|0;
           $57 = ($56|0)==(0);
           if ($57) {
            HEAP32[$50>>2] = $$0174;
            $$1 = 0;
           } else {
            $$1 = $$0174;
           }
           $58 = ($$1183|0)==(0);
           $59 = $58 ? 2 : 0;
           $60 = (_inflate($48,$59)|0);
           $61 = ($60|0)==(0);
           if (!($61)) {
            label = 28;
            break;
           }
           $62 = ($$1|0)==(0);
           if ($62) {
            $63 = HEAP32[$50>>2]|0;
            $64 = ($63|0)==(0);
            if ($64) {
             $$lcssa$i = 0;$67 = 0;$68 = 0;
             break;
            }
           }
           $$pre = HEAP32[$42>>2]|0;
           $$0174 = $$1;$$0182 = $$1183;$$045$i = $$2$i;$51 = $$pre;
          }
          if ((label|0) == 28) {
           $$pre$i = HEAP32[$50>>2]|0;
           $$lcssa$i = $60;$67 = $$pre$i;$68 = $$1;
          }
          HEAP32[$50>>2] = 0;
          _png_zstream_error($0,$$lcssa$i);
          $66 = (0 - ($67))|0;
          $69 = ($68|0)==($66|0);
          if (!($69)) {
           $$phi$trans$insert = ((($0)) + 248|0);
           $$pre244 = HEAP32[$$phi$trans$insert>>2]|0;
           $$12 = $$1183;$$4116 = 1;$$5 = $$pre244;
           break;
          }
          $70 = HEAP8[$4>>0]|0;
          $71 = $70&255;
          $72 = $71 << 24;
          $73 = ((($4)) + 1|0);
          $74 = HEAP8[$73>>0]|0;
          $75 = $74&255;
          $76 = $75 << 16;
          $77 = $76 | $72;
          $78 = ((($4)) + 2|0);
          $79 = HEAP8[$78>>0]|0;
          $80 = $79&255;
          $81 = $80 << 8;
          $82 = $77 | $81;
          $83 = ((($4)) + 3|0);
          $84 = HEAP8[$83>>0]|0;
          $85 = $84&255;
          $86 = $82 | $85;
          $87 = (_png_icc_check_length($0,$13,$3,$86)|0);
          $88 = ($87|0)==(0);
          if ($88) {
           $$12 = $$1183;$$4116 = 1;$$5 = 0;
          } else {
           $89 = ((($0)) + 435|0);
           $90 = HEAP8[$89>>0]|0;
           $91 = $90&255;
           $92 = (_png_icc_check_header($0,$13,$3,$86,$4,$91)|0);
           $93 = ($92|0)==(0);
           if ($93) {
            $$12 = $$1183;$$4116 = 1;$$5 = 0;
           } else {
            $94 = ((($4)) + 128|0);
            $95 = HEAP8[$94>>0]|0;
            $96 = ((($4)) + 129|0);
            $97 = HEAP8[$96>>0]|0;
            $98 = ((($4)) + 130|0);
            $99 = HEAP8[$98>>0]|0;
            $100 = ((($4)) + 131|0);
            $101 = HEAP8[$100>>0]|0;
            $102 = ((($0)) + 788|0);
            $103 = HEAP32[$102>>2]|0;
            $104 = ($103|0)==(0|0);
            if ($104) {
             label = 39;
            } else {
             $105 = ((($0)) + 792|0);
             $106 = HEAP32[$105>>2]|0;
             $107 = ($106>>>0)<($86>>>0);
             if ($107) {
              HEAP32[$102>>2] = 0;
              HEAP32[$105>>2] = 0;
              _png_free($0,$103);
              label = 39;
             } else {
              $$1$i$ph = $103;
             }
            }
            if ((label|0) == 39) {
             $108 = (_png_malloc_base($0,$86)|0);
             $109 = ($108|0)==(0|0);
             if ($109) {
              $$12 = $$1183;$$4116 = 1;$$5 = 20444;
              break;
             }
             HEAP32[$102>>2] = $108;
             $110 = ((($0)) + 792|0);
             HEAP32[$110>>2] = $86;
             $$1$i$ph = $108;
            }
            $111 = $95&255;
            $112 = $111 << 24;
            $113 = $97&255;
            $114 = $113 << 16;
            $115 = $114 | $112;
            $116 = $99&255;
            $117 = $116 << 8;
            $118 = $115 | $117;
            $119 = $101&255;
            $120 = $118 | $119;
            _memcpy(($$1$i$ph|0),($4|0),132)|0;
            $121 = ($120*12)|0;
            $122 = ((($$1$i$ph)) + 132|0);
            $123 = HEAP32[$43>>2]|0;
            $124 = HEAP32[$45>>2]|0;
            $125 = ($123|0)==($124|0);
            if ($125) {
             HEAP32[$49>>2] = $122;
             HEAP32[$50>>2] = 0;
             $$045$i128 = 1024;$$3176 = $121;$$3185 = $$1183;
             while(1) {
              $126 = HEAP32[$42>>2]|0;
              $127 = ($126|0)==(0);
              if ($127) {
               $128 = ($$045$i128>>>0)>($$3185>>>0);
               $spec$select$i129 = $128 ? $$3185 : $$045$i128;
               $129 = (($$3185) - ($spec$select$i129))|0;
               $130 = ($spec$select$i129|0)==(0);
               if (!($130)) {
                _png_read_data($0,$5,$spec$select$i129);
                _png_calculate_crc($0,$5,$spec$select$i129);
               }
               HEAP32[$48>>2] = $5;
               HEAP32[$42>>2] = $spec$select$i129;
               $$2$i130 = $spec$select$i129;$$4186 = $129;
              } else {
               $$2$i130 = $$045$i128;$$4186 = $$3185;
              }
              $131 = HEAP32[$50>>2]|0;
              $132 = ($131|0)==(0);
              if ($132) {
               HEAP32[$50>>2] = $$3176;
               $$4177 = 0;
              } else {
               $$4177 = $$3176;
              }
              $133 = ($$4186|0)==(0);
              $134 = $133 ? 2 : 0;
              $135 = (_inflate($48,$134)|0);
              $136 = ($135|0)==(0);
              if (!($136)) {
               label = 50;
               break;
              }
              $137 = ($$4177|0)==(0);
              if ($137) {
               $138 = HEAP32[$50>>2]|0;
               $139 = ($138|0)==(0);
               if ($139) {
                $$lcssa$i134 = 0;$141 = 0;$142 = 0;
                break;
               }
              }
              $$045$i128 = $$2$i130;$$3176 = $$4177;$$3185 = $$4186;
             }
             if ((label|0) == 50) {
              $$pre$i131 = HEAP32[$50>>2]|0;
              $$lcssa$i134 = $135;$141 = $$4177;$142 = $$pre$i131;
             }
             $140 = (($142) + ($141))|0;
             HEAP32[$50>>2] = 0;
             _png_zstream_error($0,$$lcssa$i134);
             $$5178 = $140;$$5187 = $$4186;
            } else {
             $143 = ((($0)) + 248|0);
             HEAP32[$143>>2] = 20369;
             $$5178 = $121;$$5187 = $$1183;
            }
            $144 = ($$5178|0)==(0);
            if (!($144)) {
             $193 = ((($0)) + 248|0);
             $194 = HEAP32[$193>>2]|0;
             $$12 = $$5187;$$4116 = 1;$$5 = $194;
             break;
            }
            $145 = (_png_icc_check_tag_table($0,$13,$3,$86,$$1$i$ph)|0);
            $146 = ($145|0)==(0);
            if ($146) {
             $$12 = $$5187;$$4116 = 1;$$5 = 0;
             break;
            }
            $147 = (($86) + -132)|0;
            $148 = (($147) - ($121))|0;
            $149 = HEAP32[$43>>2]|0;
            $150 = HEAP32[$45>>2]|0;
            $151 = ($149|0)==($150|0);
            if ($151) {
             $152 = (($122) + ($121)|0);
             HEAP32[$49>>2] = $152;
             HEAP32[$50>>2] = 0;
             $$045$i138 = 1024;$$6179 = $148;$$6188 = $$5187;
             while(1) {
              $153 = HEAP32[$42>>2]|0;
              $154 = ($153|0)==(0);
              if ($154) {
               $155 = ($$045$i138>>>0)>($$6188>>>0);
               $spec$select$i139 = $155 ? $$6188 : $$045$i138;
               $156 = (($$6188) - ($spec$select$i139))|0;
               $157 = ($spec$select$i139|0)==(0);
               if (!($157)) {
                _png_read_data($0,$5,$spec$select$i139);
                _png_calculate_crc($0,$5,$spec$select$i139);
               }
               HEAP32[$48>>2] = $5;
               HEAP32[$42>>2] = $spec$select$i139;
               $$2$i140 = $spec$select$i139;$$7189 = $156;
              } else {
               $$2$i140 = $$045$i138;$$7189 = $$6188;
              }
              $158 = HEAP32[$50>>2]|0;
              $159 = ($158|0)==(0);
              if ($159) {
               HEAP32[$50>>2] = $$6179;
               $$7180 = 0;
              } else {
               $$7180 = $$6179;
              }
              $160 = ($$7189|0)==(0);
              $161 = $160 ? 4 : 0;
              $162 = (_inflate($48,$161)|0);
              $163 = ($162|0)==(0);
              if (!($163)) {
               label = 67;
               break;
              }
              $164 = ($$7180|0)==(0);
              if ($164) {
               $165 = HEAP32[$50>>2]|0;
               $166 = ($165|0)==(0);
               if ($166) {
                $$lcssa$i144 = 0;$168 = 0;$169 = 0;
                break;
               }
              }
              $$045$i138 = $$2$i140;$$6179 = $$7180;$$6188 = $$7189;
             }
             if ((label|0) == 67) {
              $$pre$i141 = HEAP32[$50>>2]|0;
              $$lcssa$i144 = $162;$168 = $$7180;$169 = $$pre$i141;
             }
             $167 = (($169) + ($168))|0;
             HEAP32[$50>>2] = 0;
             _png_zstream_error($0,$$lcssa$i144);
             $$8181 = $167;$$8190 = $$7189;
            } else {
             $170 = ((($0)) + 248|0);
             HEAP32[$170>>2] = 20369;
             $$8181 = $148;$$8190 = $$5187;
            }
            $171 = ($$8190|0)==(0);
            if (!($171)) {
             $172 = ((($0)) + 212|0);
             $173 = HEAP32[$172>>2]|0;
             $174 = $173 & 1048576;
             $175 = ($174|0)==(0);
             if ($175) {
              $$12 = $$8190;$$4116 = 1;$$5 = 20387;
              break;
             }
            }
            $176 = ($$8181|0)==(0);
            if (!($176)) {
             $$12 = $$8190;$$4116 = 1;$$5 = 21248;
             break;
            }
            if (!($171)) {
             _png_chunk_warning($0,20387);
            }
            (_png_crc_finish($0,$$8190)|0);
            $177 = ((($0)) + 272|0);
            $178 = HEAP32[$177>>2]|0;
            _png_icc_set_sRGB($0,$13,$$1$i$ph,$178);
            $179 = ($1|0)==(0|0);
            do {
             if (!($179)) {
              _png_free_data($0,$1,16,0);
              $180 = (_png_malloc_base($0,$31)|0);
              $181 = ((($1)) + 116|0);
              HEAP32[$181>>2] = $180;
              $182 = ($180|0)==(0|0);
              if ($182) {
               $191 = HEAP16[$14>>1]|0;
               $192 = $191 | -32768;
               HEAP16[$14>>1] = $192;
               _png_colorspace_sync($0,$1);
               $$12 = $$8190;$$4116 = 0;$$5 = 20444;
               break L30;
              } else {
               _memcpy(($180|0),($3|0),($31|0))|0;
               $183 = ((($1)) + 124|0);
               HEAP32[$183>>2] = $86;
               $184 = ((($1)) + 120|0);
               HEAP32[$184>>2] = $$1$i$ph;
               HEAP32[$102>>2] = 0;
               $185 = ((($1)) + 232|0);
               $186 = HEAP32[$185>>2]|0;
               $187 = $186 | 16;
               HEAP32[$185>>2] = $187;
               $188 = ((($1)) + 8|0);
               $189 = HEAP32[$188>>2]|0;
               $190 = $189 | 4096;
               HEAP32[$188>>2] = $190;
               _png_colorspace_sync($0,$1);
               break;
              }
             }
            } while(0);
            HEAP32[$43>>2] = 0;
            STACKTOP = sp;return;
           }
          }
         } else {
          $65 = ((($0)) + 248|0);
          HEAP32[$65>>2] = 20369;
          $$12 = $22;$$4116 = 1;$$5 = 20369;
         }
        } while(0);
        HEAP32[$43>>2] = 0;
        if ($$4116) {
         $$16207 = $$12;$$9209 = $$5;
         label = 87;
         break L16;
        } else {
         $$9208 = $$5;
         break L16;
        }
       } else {
        $$8$ph$ph = 20409;
       }
      } else {
       $$8$ph$ph = 20409;
      }
     } else {
      $$8$ph$ph = 20432;
     }
    }
   } while(0);
   $$16207 = $22;$$9209 = $$8$ph$ph;
   label = 87;
  } else {
   $$16207 = $2;$$9209 = 20184;
   label = 87;
  }
 } while(0);
 if ((label|0) == 87) {
  (_png_crc_finish($0,$$16207)|0);
  $$9208 = $$9209;
 }
 $197 = HEAP16[$14>>1]|0;
 $198 = $197 | -32768;
 HEAP16[$14>>1] = $198;
 _png_colorspace_sync($0,$1);
 $199 = ($$9208|0)==(0|0);
 if ($199) {
  STACKTOP = sp;return;
 }
 _png_chunk_benign_error($0,$$9208);
 STACKTOP = sp;return;
}
function _png_inflate_claim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$021 = 0, $$024 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $2 = sp;
 $3 = ((($0)) + 220|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if (!($5)) {
  $6 = $4 >>> 24;
  $7 = $6&255;
  HEAP8[$2>>0] = $7;
  $8 = $4 >>> 16;
  $9 = $8&255;
  $10 = ((($2)) + 1|0);
  HEAP8[$10>>0] = $9;
  $11 = $4 >>> 8;
  $12 = $11&255;
  $13 = ((($2)) + 2|0);
  HEAP8[$13>>0] = $12;
  $14 = $4&255;
  $15 = ((($2)) + 3|0);
  HEAP8[$15>>0] = $14;
  (_png_safecat($2,64,4,25672)|0);
  _png_chunk_warning($0,$2);
  HEAP32[$3>>2] = 0;
 }
 $16 = ((($0)) + 224|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($0)) + 228|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($0)) + 236|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($0)) + 240|0);
 HEAP32[$19>>2] = 0;
 $20 = ((($0)) + 212|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 & 2;
 $23 = ($22|0)==(0);
 if ($23) {
  $24 = (_inflateInit_($16,25730,56)|0);
  $25 = ($24|0)==(0);
  if ($25) {
   $26 = HEAP32[$20>>2]|0;
   $27 = $26 | 2;
   HEAP32[$20>>2] = $27;
   label = 7;
  } else {
   $$024 = $24;
   label = 8;
  }
 } else {
  $28 = (_inflateReset($16)|0);
  $29 = ($28|0)==(0);
  if ($29) {
   label = 7;
  } else {
   $$024 = $28;
   label = 8;
  }
 }
 if ((label|0) == 7) {
  HEAP32[$3>>2] = $1;
  $$021 = 0;
  STACKTOP = sp;return ($$021|0);
 }
 else if ((label|0) == 8) {
  _png_zstream_error($0,$$024);
  $$021 = $$024;
  STACKTOP = sp;return ($$021|0);
 }
 return (0)|0;
}
function _png_zstream_error($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$sink = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 248|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  return;
 }
 switch ($1|0) {
 case -7:  {
  $$sink = 21283;
  break;
 }
 case 1:  {
  $$sink = 21143;
  break;
 }
 case 2:  {
  $$sink = 21171;
  break;
 }
 case -1:  {
  $$sink = 21193;
  break;
 }
 case -2:  {
  $$sink = 21207;
  break;
 }
 case -3:  {
  $$sink = 21230;
  break;
 }
 case -4:  {
  $$sink = 28710;
  break;
 }
 case -5:  {
  $$sink = 21248;
  break;
 }
 case -6:  {
  $$sink = 21258;
  break;
 }
 default: {
  $$sink = 21306;
 }
 }
 HEAP32[$2>>2] = $$sink;
 return;
}
function _png_icc_check_length($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3>>>0)<(132);
 if (!($4)) {
  $$0 = 1;
  return ($$0|0);
 }
 _png_icc_profile_error($0,$1,$2,$3,21133);
 $$0 = 0;
 return ($$0|0);
}
function _png_icc_check_header($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $switch$split112D = 0, $switch$split142D = 0, $switch$split172D = 0;
 var $switch$split202D = 0, $switch$split22D = 0, $switch$split2D = 0, $switch$split52D = 0, $switch$split82D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $6 = sp + 24|0;
 $7 = sp;
 $8 = HEAP8[$4>>0]|0;
 $9 = $8&255;
 $10 = $9 << 24;
 $11 = ((($4)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $13 << 16;
 $15 = $14 | $10;
 $16 = ((($4)) + 2|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 << 8;
 $20 = $15 | $19;
 $21 = ((($4)) + 3|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $20 | $23;
 $25 = ($24|0)==($3|0);
 if (!($25)) {
  _png_icc_profile_error($0,$1,$2,$24,20660);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $26 = ((($4)) + 8|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = ($27&255)<(4);
 $29 = $3 & 3;
 $30 = ($29|0)==(0);
 $or$cond = $30 | $28;
 if (!($or$cond)) {
  _png_icc_profile_error($0,$1,$2,$3,20690);
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $31 = ((($4)) + 128|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $33 << 24;
 $35 = ((($4)) + 129|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = $37 << 16;
 $39 = $38 | $34;
 $40 = ((($4)) + 130|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = $42 << 8;
 $44 = $39 | $43;
 $45 = ((($4)) + 131|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = $44 | $47;
 $49 = ($48>>>0)>(357913930);
 if (!($49)) {
  $50 = ($48*12)|0;
  $51 = (($50) + 132)|0;
  $52 = ($51>>>0)>($3>>>0);
  if (!($52)) {
   $53 = ((($4)) + 64|0);
   $54 = HEAP8[$53>>0]|0;
   $55 = $54&255;
   $56 = $55 << 24;
   $57 = ((($4)) + 65|0);
   $58 = HEAP8[$57>>0]|0;
   $59 = $58&255;
   $60 = $59 << 16;
   $61 = $60 | $56;
   $62 = ((($4)) + 66|0);
   $63 = HEAP8[$62>>0]|0;
   $64 = $63&255;
   $65 = $64 << 8;
   $66 = $61 | $65;
   $67 = ((($4)) + 67|0);
   $68 = HEAP8[$67>>0]|0;
   $69 = $68&255;
   $70 = $66 | $69;
   $71 = ($70>>>0)>(65534);
   if ($71) {
    _png_icc_profile_error($0,$1,$2,$70,20725);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $72 = ($70>>>0)>(3);
   if ($72) {
    _png_icc_profile_error($0,0,$2,$70,20750);
   }
   $73 = ((($4)) + 36|0);
   $74 = HEAP8[$73>>0]|0;
   $75 = $74&255;
   $76 = $75 << 24;
   $77 = ((($4)) + 37|0);
   $78 = HEAP8[$77>>0]|0;
   $79 = $78&255;
   $80 = $79 << 16;
   $81 = $80 | $76;
   $82 = ((($4)) + 38|0);
   $83 = HEAP8[$82>>0]|0;
   $84 = $83&255;
   $85 = $84 << 8;
   $86 = $81 | $85;
   $87 = ((($4)) + 39|0);
   $88 = HEAP8[$87>>0]|0;
   $89 = $88&255;
   $90 = $86 | $89;
   $91 = ($90|0)==(1633907568);
   if (!($91)) {
    _png_icc_profile_error($0,$1,$2,$90,20779);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $92 = ((($4)) + 68|0);
   $93 = (_memcmp($92,20797,12)|0);
   $94 = ($93|0)==(0);
   if (!($94)) {
    $95 = (_png_safecat($6,196,0,20334)|0);
    $96 = (($95) + 79)|0;
    $97 = (_png_safecat($6,$96,$95,$2)|0);
    $98 = (_png_safecat($6,196,$97,20344)|0);
    $99 = ((($7)) + 24|0);
    $100 = (_png_format_number($7,$99,3,0)|0);
    $101 = (_png_safecat($6,196,$98,$100)|0);
    $102 = (_png_safecat($6,196,$101,20348)|0);
    (_png_safecat($6,196,$102,20809)|0);
    _png_chunk_report($0,$6,1);
   }
   $103 = ((($4)) + 16|0);
   $104 = HEAP8[$103>>0]|0;
   $105 = $104&255;
   $106 = $105 << 24;
   $107 = ((($4)) + 17|0);
   $108 = HEAP8[$107>>0]|0;
   $109 = $108&255;
   $110 = $109 << 16;
   $111 = $110 | $106;
   $112 = ((($4)) + 18|0);
   $113 = HEAP8[$112>>0]|0;
   $114 = $113&255;
   $115 = $114 << 8;
   $116 = $111 | $115;
   $117 = ((($4)) + 19|0);
   $118 = HEAP8[$117>>0]|0;
   $119 = $118&255;
   $120 = $116 | $119;
   $switch$split2D = ($120|0)<(1380401696);
   L26: do {
    if ($switch$split2D) {
     switch ($120|0) {
     case 1196573017:  {
      break;
     }
     default: {
      label = 21;
      break L26;
     }
     }
     $123 = $5 & 2;
     $124 = ($123|0)==(0);
     if (!($124)) {
      _png_icc_profile_error($0,$1,$2,1196573017,20882);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
    } else {
     switch ($120|0) {
     case 1380401696:  {
      break;
     }
     default: {
      label = 21;
      break L26;
     }
     }
     $121 = $5 & 2;
     $122 = ($121|0)==(0);
     if ($122) {
      _png_icc_profile_error($0,$1,$2,1380401696,20835);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
    }
   } while(0);
   if ((label|0) == 21) {
    _png_icc_profile_error($0,$1,$2,$120,20924);
    $$0 = 0;
    STACKTOP = sp;return ($$0|0);
   }
   $125 = ((($4)) + 12|0);
   $126 = HEAP8[$125>>0]|0;
   $127 = $126&255;
   $128 = $127 << 24;
   $129 = ((($4)) + 13|0);
   $130 = HEAP8[$129>>0]|0;
   $131 = $130&255;
   $132 = $131 << 16;
   $133 = $132 | $128;
   $134 = ((($4)) + 14|0);
   $135 = HEAP8[$134>>0]|0;
   $136 = $135&255;
   $137 = $136 << 8;
   $138 = $133 | $137;
   $139 = ((($4)) + 15|0);
   $140 = HEAP8[$139>>0]|0;
   $141 = $140&255;
   $142 = $138 | $141;
   $switch$split22D = ($142|0)<(1852662636);
   L39: do {
    if ($switch$split22D) {
     $switch$split82D = ($142|0)<(1818848875);
     if ($switch$split82D) {
      switch ($142|0) {
      case 1633842036:  {
       break;
      }
      default: {
       label = 26;
       break L39;
      }
      }
      _png_icc_profile_error($0,$1,$2,1633842036,20956);
      $$0 = 0;
      STACKTOP = sp;return ($$0|0);
     }
     $switch$split142D = ($142|0)<(1835955314);
     if (!($switch$split142D)) {
      switch ($142|0) {
      case 1835955314:  {
       break L39;
       break;
      }
      default: {
       label = 26;
       break L39;
      }
      }
     }
     switch ($142|0) {
     case 1818848875:  {
      break;
     }
     default: {
      label = 26;
      break L39;
     }
     }
     _png_icc_profile_error($0,$1,$2,1818848875,20994);
     $$0 = 0;
     STACKTOP = sp;return ($$0|0);
    } else {
     $switch$split112D = ($142|0)<(1935896178);
     if (!($switch$split112D)) {
      $switch$split202D = ($142|0)<(1936744803);
      if ($switch$split202D) {
       switch ($142|0) {
       case 1935896178:  {
        break L39;
        break;
       }
       default: {
        label = 26;
        break L39;
       }
       }
      } else {
       switch ($142|0) {
       case 1936744803:  {
        break L39;
        break;
       }
       default: {
        label = 26;
        break L39;
       }
       }
      }
     }
     $switch$split172D = ($142|0)<(1886549106);
     if (!($switch$split172D)) {
      switch ($142|0) {
      case 1886549106:  {
       break L39;
       break;
      }
      default: {
       label = 26;
       break L39;
      }
      }
     }
     switch ($142|0) {
     case 1852662636:  {
      break;
     }
     default: {
      label = 26;
      break L39;
     }
     }
     _png_icc_profile_error($0,0,$2,1852662636,21034);
    }
   } while(0);
   if ((label|0) == 26) {
    _png_icc_profile_error($0,0,$2,$142,21074);
   }
   $143 = ((($4)) + 20|0);
   $144 = HEAP8[$143>>0]|0;
   $145 = $144&255;
   $146 = $145 << 24;
   $147 = ((($4)) + 21|0);
   $148 = HEAP8[$147>>0]|0;
   $149 = $148&255;
   $150 = $149 << 16;
   $151 = $150 | $146;
   $152 = ((($4)) + 22|0);
   $153 = HEAP8[$152>>0]|0;
   $154 = $153&255;
   $155 = $154 << 8;
   $156 = $151 | $155;
   $157 = ((($4)) + 23|0);
   $158 = HEAP8[$157>>0]|0;
   $159 = $158&255;
   $160 = $156 | $159;
   $switch$split52D = ($160|0)<(1482250784);
   L65: do {
    if ($switch$split52D) {
     switch ($160|0) {
     case 1281450528:  {
      $$0 = 1;
      break;
     }
     default: {
      break L65;
     }
     }
     STACKTOP = sp;return ($$0|0);
    } else {
     switch ($160|0) {
     case 1482250784:  {
      $$0 = 1;
      break;
     }
     default: {
      break L65;
     }
     }
     STACKTOP = sp;return ($$0|0);
    }
   } while(0);
   _png_icc_profile_error($0,$1,$2,$160,21105);
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 _png_icc_profile_error($0,$1,$2,$48,20705);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _png_malloc_base($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ($0|0)==(0|0);
 if (!($3)) {
  $4 = ((($0)) + 720|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if (!($6)) {
   $7 = (FUNCTION_TABLE_iii[$5 & 63]($0,$1)|0);
   $$0 = $7;
   return ($$0|0);
  }
 }
 $8 = (_malloc($1)|0);
 $$0 = $8;
 return ($$0|0);
}
function _png_icc_check_tag_table($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$04751 = 0, $$04850 = 0, $$2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($4)) + 128|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = $7 << 24;
 $9 = ((($4)) + 129|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 << 16;
 $13 = $12 | $8;
 $14 = ((($4)) + 130|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 << 8;
 $18 = $13 | $17;
 $19 = ((($4)) + 131|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $18 | $21;
 $23 = ($22|0)==(0);
 if ($23) {
  $$2 = 1;
  return ($$2|0);
 }
 $24 = ((($4)) + 132|0);
 $$04751 = 0;$$04850 = $24;
 while(1) {
  $25 = HEAP8[$$04850>>0]|0;
  $26 = $25&255;
  $27 = $26 << 24;
  $28 = ((($$04850)) + 1|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29&255;
  $31 = $30 << 16;
  $32 = $31 | $27;
  $33 = ((($$04850)) + 2|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = $35 << 8;
  $37 = $32 | $36;
  $38 = ((($$04850)) + 3|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39&255;
  $41 = $37 | $40;
  $42 = ((($$04850)) + 4|0);
  $43 = HEAP8[$42>>0]|0;
  $44 = $43&255;
  $45 = $44 << 24;
  $46 = ((($$04850)) + 5|0);
  $47 = HEAP8[$46>>0]|0;
  $48 = $47&255;
  $49 = $48 << 16;
  $50 = $49 | $45;
  $51 = ((($$04850)) + 6|0);
  $52 = HEAP8[$51>>0]|0;
  $53 = $52&255;
  $54 = $53 << 8;
  $55 = $50 | $54;
  $56 = ((($$04850)) + 7|0);
  $57 = HEAP8[$56>>0]|0;
  $58 = $57&255;
  $59 = $55 | $58;
  $60 = ((($$04850)) + 8|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $63 = $62 << 24;
  $64 = ((($$04850)) + 9|0);
  $65 = HEAP8[$64>>0]|0;
  $66 = $65&255;
  $67 = $66 << 16;
  $68 = $67 | $63;
  $69 = ((($$04850)) + 10|0);
  $70 = HEAP8[$69>>0]|0;
  $71 = $70&255;
  $72 = $71 << 8;
  $73 = $68 | $72;
  $74 = ((($$04850)) + 11|0);
  $75 = HEAP8[$74>>0]|0;
  $76 = $75&255;
  $77 = $73 | $76;
  $78 = $58 & 3;
  $79 = ($78|0)==(0);
  if (!($79)) {
   _png_icc_profile_error($0,0,$2,$41,20586);
  }
  $80 = ($59>>>0)>($3>>>0);
  $81 = (($3) - ($59))|0;
  $82 = ($77>>>0)>($81>>>0);
  $or$cond = $80 | $82;
  if ($or$cond) {
   break;
  }
  $83 = (($$04751) + 1)|0;
  $84 = ((($$04850)) + 12|0);
  $85 = ($83>>>0)<($22>>>0);
  if ($85) {
   $$04751 = $83;$$04850 = $84;
  } else {
   $$2 = 1;
   label = 8;
   break;
  }
 }
 if ((label|0) == 8) {
  return ($$2|0);
 }
 _png_icc_profile_error($0,$1,$2,$41,20628);
 $$2 = 0;
 return ($$2|0);
}
function _png_icc_set_sRGB($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$06270$i = 0, $$06369$i = 0, $$066$i = 0, $$071$i = 0, $$1$i = 0, $$164$i = 0, $$2$i = 0, $$265$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 644|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5 & 48;
 $7 = ($6<<24>>24)==(48);
 if ($7) {
  return;
 }
 $8 = ((($2)) + 84|0);
 $9 = HEAP8[$8>>0]|0;
 $10 = $9&255;
 $11 = $10 << 24;
 $12 = ((($2)) + 85|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $14 << 16;
 $16 = $15 | $11;
 $17 = ((($2)) + 86|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = $19 << 8;
 $21 = $16 | $20;
 $22 = ((($2)) + 87|0);
 $23 = HEAP8[$22>>0]|0;
 $24 = $23&255;
 $25 = $21 | $24;
 $26 = ((($2)) + 88|0);
 $27 = ((($2)) + 89|0);
 $28 = ((($2)) + 90|0);
 $29 = ((($2)) + 91|0);
 $30 = ((($2)) + 92|0);
 $31 = ((($2)) + 93|0);
 $32 = ((($2)) + 94|0);
 $33 = ((($2)) + 95|0);
 $34 = ((($2)) + 96|0);
 $35 = ((($2)) + 97|0);
 $36 = ((($2)) + 98|0);
 $37 = ((($2)) + 99|0);
 $38 = ((($2)) + 1|0);
 $39 = ((($2)) + 2|0);
 $40 = ((($2)) + 3|0);
 $41 = ((($2)) + 64|0);
 $42 = ((($2)) + 65|0);
 $43 = ((($2)) + 66|0);
 $44 = ((($2)) + 67|0);
 $$06270$i = 65536;$$06369$i = 0;$$071$i = 0;
 while(1) {
  $45 = (((396 + ($$071$i<<5)|0)) + 12|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($25|0)==($46|0);
  if ($47) {
   $48 = HEAP8[$26>>0]|0;
   $49 = $48&255;
   $50 = $49 << 24;
   $51 = HEAP8[$27>>0]|0;
   $52 = $51&255;
   $53 = $52 << 16;
   $54 = $53 | $50;
   $55 = HEAP8[$28>>0]|0;
   $56 = $55&255;
   $57 = $56 << 8;
   $58 = $54 | $57;
   $59 = HEAP8[$29>>0]|0;
   $60 = $59&255;
   $61 = $58 | $60;
   $62 = (((396 + ($$071$i<<5)|0)) + 16|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($61|0)==($63|0);
   if ($64) {
    $65 = HEAP8[$30>>0]|0;
    $66 = $65&255;
    $67 = $66 << 24;
    $68 = HEAP8[$31>>0]|0;
    $69 = $68&255;
    $70 = $69 << 16;
    $71 = $70 | $67;
    $72 = HEAP8[$32>>0]|0;
    $73 = $72&255;
    $74 = $73 << 8;
    $75 = $71 | $74;
    $76 = HEAP8[$33>>0]|0;
    $77 = $76&255;
    $78 = $75 | $77;
    $79 = (((396 + ($$071$i<<5)|0)) + 20|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = ($78|0)==($80|0);
    if ($81) {
     $82 = HEAP8[$34>>0]|0;
     $83 = $82&255;
     $84 = $83 << 24;
     $85 = HEAP8[$35>>0]|0;
     $86 = $85&255;
     $87 = $86 << 16;
     $88 = $87 | $84;
     $89 = HEAP8[$36>>0]|0;
     $90 = $89&255;
     $91 = $90 << 8;
     $92 = $88 | $91;
     $93 = HEAP8[$37>>0]|0;
     $94 = $93&255;
     $95 = $92 | $94;
     $96 = (((396 + ($$071$i<<5)|0)) + 24|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = ($95|0)==($97|0);
     if ($98) {
      $99 = ($$06369$i|0)==(0);
      if ($99) {
       $100 = HEAP8[$2>>0]|0;
       $101 = $100&255;
       $102 = $101 << 24;
       $103 = HEAP8[$38>>0]|0;
       $104 = $103&255;
       $105 = $104 << 16;
       $106 = $105 | $102;
       $107 = HEAP8[$39>>0]|0;
       $108 = $107&255;
       $109 = $108 << 8;
       $110 = $106 | $109;
       $111 = HEAP8[$40>>0]|0;
       $112 = $111&255;
       $113 = $110 | $112;
       $114 = HEAP8[$41>>0]|0;
       $115 = $114&255;
       $116 = $115 << 24;
       $117 = HEAP8[$42>>0]|0;
       $118 = $117&255;
       $119 = $118 << 16;
       $120 = $119 | $116;
       $121 = HEAP8[$43>>0]|0;
       $122 = $121&255;
       $123 = $122 << 8;
       $124 = $120 | $123;
       $125 = HEAP8[$44>>0]|0;
       $126 = $125&255;
       $127 = $124 | $126;
       $$1$i = $127;$$164$i = $113;
      } else {
       $$1$i = $$06270$i;$$164$i = $$06369$i;
      }
      $128 = (((396 + ($$071$i<<5)|0)) + 8|0);
      $129 = HEAP32[$128>>2]|0;
      $130 = ($$164$i|0)==($129|0);
      if ($130) {
       $131 = (((396 + ($$071$i<<5)|0)) + 30|0);
       $132 = HEAP16[$131>>1]|0;
       $133 = $132&65535;
       $134 = ($$1$i|0)==($133|0);
       if ($134) {
        break;
       } else {
        $$2$i = $$1$i;$$265$i = $$164$i;
       }
      } else {
       $$2$i = $$1$i;$$265$i = $$164$i;
      }
     } else {
      $$2$i = $$06270$i;$$265$i = $$06369$i;
     }
    } else {
     $$2$i = $$06270$i;$$265$i = $$06369$i;
    }
   } else {
    $$2$i = $$06270$i;$$265$i = $$06369$i;
   }
  } else {
   $$2$i = $$06270$i;$$265$i = $$06369$i;
  }
  $150 = (($$071$i) + 1)|0;
  $151 = ($150>>>0)<(7);
  if ($151) {
   $$06270$i = $$2$i;$$06369$i = $$265$i;$$071$i = $150;
  } else {
   label = 22;
   break;
  }
 }
 if ((label|0) == 22) {
  return;
 }
 $135 = ($3|0)==(0);
 if ($135) {
  $136 = (_adler32(0,0,0)|0);
  $137 = (_adler32($136,$2,$$164$i)|0);
  $$066$i = $137;
 } else {
  $$066$i = $3;
 }
 $138 = (396 + ($$071$i<<5)|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = ($$066$i|0)==($139|0);
 if ($140) {
  $141 = (_crc32(0,0,0)|0);
  $142 = (_crc32($141,$2,$$164$i)|0);
  $143 = (((396 + ($$071$i<<5)|0)) + 4|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = ($142|0)==($144|0);
  if ($145) {
   $146 = (($$071$i) + -5)|0;
   $147 = ($146>>>0)<(2);
   if ($147) {
    _png_chunk_report($0,20458,2);
   } else {
    $148 = (($$071$i) + -4)|0;
    $149 = ($148>>>0)<(3);
    if ($149) {
     _png_chunk_report($0,20487,0);
    }
   }
   $152 = HEAP8[$41>>0]|0;
   $153 = $152&255;
   $154 = $153 << 24;
   $155 = HEAP8[$42>>0]|0;
   $156 = $155&255;
   $157 = $156 << 16;
   $158 = $157 | $154;
   $159 = HEAP8[$43>>0]|0;
   $160 = $159&255;
   $161 = $160 << 8;
   $162 = $158 | $161;
   $163 = HEAP8[$44>>0]|0;
   $164 = $163&255;
   $165 = $162 | $164;
   (_png_colorspace_set_sRGB($0,$1,$165)|0);
   return;
  }
 }
 _png_chunk_report($0,20530,0);
 return;
}
function _png_handle_sPLT($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$09597 = 0, $$1$i$ph = 0, $$198 = 0, $$2 = 0, $$pre = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 756|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($5|0) {
 case 0:  {
  break;
 }
 case 1:  {
  (_png_crc_finish($0,$2)|0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  label = 3;
 }
 }
 if ((label|0) == 3) {
  $6 = (($5) + -1)|0;
  HEAP32[$4>>2] = $6;
  $7 = ($6|0)==(1);
  if ($7) {
   _png_warning($0,21334);
   (_png_crc_finish($0,$2)|0);
   STACKTOP = sp;return;
  }
 }
 $8 = ((($0)) + 208|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  _png_chunk_error($0,19821);
  // unreachable;
 }
 $12 = $9 & 4;
 $13 = ($12|0)==(0);
 if (!($13)) {
  (_png_crc_finish($0,$2)|0);
  _png_chunk_benign_error($0,19312);
  STACKTOP = sp;return;
 }
 $14 = (($2) + 1)|0;
 $15 = ((($0)) + 788|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  label = 12;
 } else {
  $18 = ((($0)) + 792|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19>>>0)<($14>>>0);
  if ($20) {
   HEAP32[$15>>2] = 0;
   HEAP32[$18>>2] = 0;
   _png_free($0,$16);
   label = 12;
  } else {
   $$1$i$ph = $16;
  }
 }
 do {
  if ((label|0) == 12) {
   $21 = (_png_malloc_base($0,$14)|0);
   $22 = ($21|0)==(0|0);
   if (!($22)) {
    HEAP32[$15>>2] = $21;
    $23 = ((($0)) + 792|0);
    HEAP32[$23>>2] = $14;
    $$1$i$ph = $21;
    break;
   }
   (_png_crc_finish($0,$2)|0);
   _png_chunk_benign_error($0,20444);
   STACKTOP = sp;return;
  }
 } while(0);
 _png_read_data($0,$$1$i$ph,$2);
 _png_calculate_crc($0,$$1$i$ph,$2);
 $24 = (_png_crc_finish($0,0)|0);
 $25 = ($24|0)==(0);
 if (!($25)) {
  STACKTOP = sp;return;
 }
 $26 = (($$1$i$ph) + ($2)|0);
 HEAP8[$26>>0] = 0;
 $$0 = $$1$i$ph;
 while(1) {
  $27 = HEAP8[$$0>>0]|0;
  $28 = ($27<<24>>24)==(0);
  $29 = ((($$0)) + 1|0);
  if ($28) {
   break;
  } else {
   $$0 = $29;
  }
 }
 $30 = ((($26)) + -2|0);
 $31 = ($29>>>0)>($30>>>0);
 if ($31) {
  _png_warning($0,21367);
  STACKTOP = sp;return;
 }
 $32 = ((($$0)) + 2|0);
 $33 = HEAP8[$29>>0]|0;
 $34 = ((($3)) + 4|0);
 HEAP8[$34>>0] = $33;
 $35 = ($33<<24>>24)==(8);
 $36 = $35 ? 6 : 10;
 $37 = $32;
 $38 = $$1$i$ph;
 $39 = (($38) - ($37))|0;
 $40 = (($39) + ($2))|0;
 $41 = (($40>>>0) / ($36>>>0))&-1;
 $42 = Math_imul($41, $36)|0;
 $43 = (($40) - ($42))|0;
 $44 = ($43|0)==(0);
 if (!($44)) {
  _png_warning($0,21388);
  STACKTOP = sp;return;
 }
 $45 = ($41>>>0)>(429496729);
 if ($45) {
  _png_warning($0,21414);
  STACKTOP = sp;return;
 }
 $46 = ((($3)) + 12|0);
 HEAP32[$46>>2] = $41;
 $47 = ($41*10)|0;
 $48 = (_png_malloc_warn($0,$47)|0);
 $49 = ((($3)) + 8|0);
 HEAP32[$49>>2] = $48;
 $50 = ($48|0)==(0|0);
 if ($50) {
  _png_warning($0,21434);
  STACKTOP = sp;return;
 }
 $51 = ($36>>>0)>($40>>>0);
 L48: do {
  if (!($51)) {
   $$09597 = 0;$$198 = $32;$53 = $48;
   while(1) {
    $52 = (($53) + (($$09597*10)|0)|0);
    if ($35) {
     $54 = ((($$198)) + 1|0);
     $55 = HEAP8[$$198>>0]|0;
     $56 = $55&255;
     HEAP16[$52>>1] = $56;
     $57 = ((($$198)) + 2|0);
     $58 = HEAP8[$54>>0]|0;
     $59 = $58&255;
     $60 = (((($53) + (($$09597*10)|0)|0)) + 2|0);
     HEAP16[$60>>1] = $59;
     $61 = ((($$198)) + 3|0);
     $62 = HEAP8[$57>>0]|0;
     $63 = $62&255;
     $64 = (((($53) + (($$09597*10)|0)|0)) + 4|0);
     HEAP16[$64>>1] = $63;
     $65 = ((($$198)) + 4|0);
     $66 = HEAP8[$61>>0]|0;
     $67 = $66&255;
     $$2 = $65;$$sink = $67;
    } else {
     $68 = HEAP8[$$198>>0]|0;
     $69 = $68&255;
     $70 = $69 << 8;
     $71 = ((($$198)) + 1|0);
     $72 = HEAP8[$71>>0]|0;
     $73 = $72&255;
     $74 = $70 | $73;
     $75 = $74&65535;
     HEAP16[$52>>1] = $75;
     $76 = ((($$198)) + 2|0);
     $77 = HEAP8[$76>>0]|0;
     $78 = $77&255;
     $79 = $78 << 8;
     $80 = ((($$198)) + 3|0);
     $81 = HEAP8[$80>>0]|0;
     $82 = $81&255;
     $83 = $79 | $82;
     $84 = $83&65535;
     $85 = (((($53) + (($$09597*10)|0)|0)) + 2|0);
     HEAP16[$85>>1] = $84;
     $86 = ((($$198)) + 4|0);
     $87 = HEAP8[$86>>0]|0;
     $88 = $87&255;
     $89 = $88 << 8;
     $90 = ((($$198)) + 5|0);
     $91 = HEAP8[$90>>0]|0;
     $92 = $91&255;
     $93 = $89 | $92;
     $94 = $93&65535;
     $95 = (((($53) + (($$09597*10)|0)|0)) + 4|0);
     HEAP16[$95>>1] = $94;
     $96 = ((($$198)) + 6|0);
     $97 = HEAP8[$96>>0]|0;
     $98 = $97&255;
     $99 = $98 << 8;
     $100 = ((($$198)) + 7|0);
     $101 = HEAP8[$100>>0]|0;
     $102 = $101&255;
     $103 = $99 | $102;
     $104 = $103&65535;
     $105 = ((($$198)) + 8|0);
     $$2 = $105;$$sink = $104;
    }
    $106 = (((($53) + (($$09597*10)|0)|0)) + 6|0);
    HEAP16[$106>>1] = $$sink;
    $107 = HEAP8[$$2>>0]|0;
    $108 = $107&255;
    $109 = $108 << 8;
    $110 = ((($$2)) + 1|0);
    $111 = HEAP8[$110>>0]|0;
    $112 = $111&255;
    $113 = $109 | $112;
    $114 = $113&65535;
    $115 = (((($53) + (($$09597*10)|0)|0)) + 8|0);
    HEAP16[$115>>1] = $114;
    $116 = (($$09597) + 1)|0;
    $117 = HEAP32[$46>>2]|0;
    $118 = ($116|0)<($117|0);
    if (!($118)) {
     break L48;
    }
    $119 = ((($$2)) + 2|0);
    $$pre = HEAP32[$49>>2]|0;
    $$09597 = $116;$$198 = $119;$53 = $$pre;
   }
  }
 } while(0);
 HEAP32[$3>>2] = $$1$i$ph;
 _png_set_sPLT($0,$1,$3,1);
 $120 = HEAP32[$49>>2]|0;
 _png_free($0,$120);
 STACKTOP = sp;return;
}
function _png_malloc_warn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$1 = 0;
  return ($$1|0);
 }
 $3 = ($1|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 720|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  if ($6) {
   $8 = (_malloc($1)|0);
   $$0$i = $8;
  } else {
   $7 = (FUNCTION_TABLE_iii[$5 & 63]($0,$1)|0);
   $$0$i = $7;
  }
  $9 = ($$0$i|0)==(0|0);
  if (!($9)) {
   $$1 = $$0$i;
   return ($$1|0);
  }
 }
 _png_warning($0,19955);
 $$1 = 0;
 return ($$1|0);
}
function _png_set_sPLT($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$057 = 0, $$058 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 $5 = ($1|0)==(0|0);
 $or$cond = $4 | $5;
 $6 = ($3|0)<(1);
 $or$cond3 = $or$cond | $6;
 $7 = ($2|0)==(0|0);
 $or$cond5 = $7 | $or$cond3;
 if ($or$cond5) {
  return;
 }
 $8 = ((($1)) + 244|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 248|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_png_realloc_array($0,$9,$11,$3,16)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  _png_chunk_report($0,21470,1);
  return;
 }
 $14 = HEAP32[$8>>2]|0;
 _png_free($0,$14);
 HEAP32[$8>>2] = $12;
 $15 = ((($1)) + 232|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 | 32;
 HEAP32[$15>>2] = $17;
 $18 = HEAP32[$10>>2]|0;
 $19 = (($12) + ($18<<4)|0);
 $20 = ((($1)) + 8|0);
 $$0 = $2;$$057 = $19;$$058 = $3;
 while(1) {
  $21 = HEAP32[$$0>>2]|0;
  $22 = ($21|0)==(0|0);
  if ($22) {
   label = 7;
  } else {
   $23 = ((($$0)) + 8|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0|0);
   if ($25) {
    label = 7;
   } else {
    $26 = ((($$0)) + 4|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = ((($$057)) + 4|0);
    HEAP8[$28>>0] = $27;
    $29 = (_strlen($21)|0);
    $30 = (($29) + 1)|0;
    $31 = (_png_malloc_base($0,$30)|0);
    HEAP32[$$057>>2] = $31;
    $32 = ($31|0)==(0|0);
    if ($32) {
     break;
    }
    $33 = HEAP32[$$0>>2]|0;
    _memcpy(($31|0),($33|0),($30|0))|0;
    $34 = ((($$0)) + 12|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = (_png_malloc_array($0,$35,10)|0);
    $37 = ((($$057)) + 8|0);
    HEAP32[$37>>2] = $36;
    $38 = ($36|0)==(0|0);
    if ($38) {
     label = 10;
     break;
    }
    $40 = HEAP32[$34>>2]|0;
    $41 = ((($$057)) + 12|0);
    HEAP32[$41>>2] = $40;
    $42 = HEAP32[$23>>2]|0;
    $43 = HEAP32[$34>>2]|0;
    $44 = ($43*10)|0;
    _memcpy(($36|0),($42|0),($44|0))|0;
    $45 = HEAP32[$20>>2]|0;
    $46 = $45 | 8192;
    HEAP32[$20>>2] = $46;
    $47 = HEAP32[$10>>2]|0;
    $48 = (($47) + 1)|0;
    HEAP32[$10>>2] = $48;
    $49 = ((($$057)) + 16|0);
    $$1 = $49;
   }
  }
  if ((label|0) == 7) {
   label = 0;
   _png_app_error($0,21491);
   $$1 = $$057;
  }
  $50 = ((($$0)) + 16|0);
  $51 = (($$058) + -1)|0;
  $52 = ($51|0)==(0);
  if ($52) {
   label = 15;
   break;
  } else {
   $$0 = $50;$$057 = $$1;$$058 = $51;
  }
 }
 if ((label|0) == 10) {
  $39 = HEAP32[$$057>>2]|0;
  _png_free($0,$39);
  HEAP32[$$057>>2] = 0;
 }
 else if ((label|0) == 15) {
  return;
 }
 $53 = ($$058|0)>(0);
 if (!($53)) {
  return;
 }
 _png_chunk_report($0,21518,1);
 return;
}
function _png_realloc_array($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$i = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($3|0)<(1);
 $6 = ($4|0)==(0);
 $or$cond = $5 | $6;
 $7 = ($2|0)<(0);
 $or$cond3 = $7 | $or$cond;
 if ($or$cond3) {
  _png_error($0,21565);
  // unreachable;
 }
 $8 = ($1|0)==(0|0);
 $9 = ($2|0)>(0);
 $or$cond5 = $8 & $9;
 if ($or$cond5) {
  _png_error($0,21565);
  // unreachable;
 }
 $10 = (2147483647 - ($2))|0;
 $11 = ($10|0)<($3|0);
 if ($11) {
  $$1 = 0;
  return ($$1|0);
 }
 $12 = (($3) + ($2))|0;
 $13 = (4294967295 / ($4>>>0))&-1;
 $14 = ($13>>>0)<($12>>>0);
 if ($14) {
  $$1 = 0;
  return ($$1|0);
 }
 $15 = Math_imul($12, $4)|0;
 $16 = ($15|0)==(0);
 if ($16) {
  $$1 = 0;
  return ($$1|0);
 }
 $17 = ($0|0)==(0|0);
 if ($17) {
  label = 10;
 } else {
  $18 = ((($0)) + 720|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0|0);
  if ($20) {
   label = 10;
  } else {
   $21 = (FUNCTION_TABLE_iii[$19 & 63]($0,$15)|0);
   $$0$i = $21;
  }
 }
 if ((label|0) == 10) {
  $22 = (_malloc($15)|0);
  $$0$i = $22;
 }
 $23 = ($$0$i|0)==(0|0);
 if ($23) {
  $$1 = 0;
  return ($$1|0);
 }
 $24 = Math_imul($4, $2)|0;
 if ($9) {
  _memcpy(($$0$i|0),($1|0),($24|0))|0;
 }
 $25 = (($$0$i) + ($24)|0);
 $26 = Math_imul($4, $3)|0;
 _memset(($25|0),0,($26|0))|0;
 $$1 = $$0$i;
 return ($$1|0);
}
function _png_app_error($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 212|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 4194304;
 $5 = ($4|0)==(0);
 if ($5) {
  _png_error($0,$1);
  // unreachable;
 } else {
  _png_warning($0,$1);
  return;
 }
}
function _png_malloc_array($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)<(1);
 $4 = ($2|0)==(0);
 $or$cond = $3 | $4;
 if ($or$cond) {
  _png_error($0,21537);
  // unreachable;
 }
 $5 = (4294967295 / ($2>>>0))&-1;
 $6 = ($5>>>0)<($1>>>0);
 if ($6) {
  $$0$i = 0;
  return ($$0$i|0);
 }
 $7 = Math_imul($2, $1)|0;
 $8 = ($7|0)==(0);
 if ($8) {
  $$0$i = 0;
  return ($$0$i|0);
 }
 $9 = ($0|0)==(0|0);
 if (!($9)) {
  $10 = ((($0)) + 720|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)==(0|0);
  if (!($12)) {
   $13 = (FUNCTION_TABLE_iii[$11 & 63]($0,$7)|0);
   $$0$i = $13;
   return ($$0$i|0);
  }
 }
 $14 = (_malloc($7)|0);
 $$0$i = $14;
 return ($$0$i|0);
}
function _png_handle_tRNS($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $3 = sp + 8|0;
 $4 = sp + 6|0;
 $5 = sp;
 $6 = ((($0)) + 208|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = ($8|0)==(0);
 if ($9) {
  _png_chunk_error($0,19821);
  // unreachable;
 }
 $10 = $7 & 4;
 $11 = ($10|0)==(0);
 if (!($11)) {
  (_png_crc_finish($0,$2)|0);
  _png_chunk_benign_error($0,19312);
  STACKTOP = sp;return;
 }
 $12 = ($1|0)==(0|0);
 if (!($12)) {
  $13 = ((($1)) + 8|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = $14 & 16;
  $16 = ($15|0)==(0);
  if (!($16)) {
   (_png_crc_finish($0,$2)|0);
   _png_chunk_benign_error($0,20069);
   STACKTOP = sp;return;
  }
 }
 $17 = ((($0)) + 435|0);
 $18 = HEAP8[$17>>0]|0;
 L13: do {
  switch ($18<<24>>24) {
  case 0:  {
   $19 = ($2|0)==(2);
   if ($19) {
    _png_read_data($0,$4,2);
    _png_calculate_crc($0,$4,2);
    $20 = ((($0)) + 428|0);
    HEAP16[$20>>1] = 1;
    $21 = HEAP8[$4>>0]|0;
    $22 = $21&255;
    $23 = $22 << 8;
    $24 = ((($4)) + 1|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = $25&255;
    $27 = $23 | $26;
    $28 = $27&65535;
    $29 = ((($0)) + 540|0);
    HEAP16[$29>>1] = $28;
    $$pre$phiZ2D = $20;
    break L13;
   }
   (_png_crc_finish($0,$2)|0);
   _png_chunk_benign_error($0,19325);
   STACKTOP = sp;return;
   break;
  }
  case 2:  {
   $30 = ($2|0)==(6);
   if ($30) {
    _png_read_data($0,$5,6);
    _png_calculate_crc($0,$5,6);
    $31 = ((($0)) + 428|0);
    HEAP16[$31>>1] = 1;
    $32 = HEAP8[$5>>0]|0;
    $33 = $32&255;
    $34 = $33 << 8;
    $35 = ((($5)) + 1|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = $36&255;
    $38 = $34 | $37;
    $39 = $38&65535;
    $40 = ((($0)) + 534|0);
    HEAP16[$40>>1] = $39;
    $41 = ((($5)) + 2|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $44 = $43 << 8;
    $45 = ((($5)) + 3|0);
    $46 = HEAP8[$45>>0]|0;
    $47 = $46&255;
    $48 = $44 | $47;
    $49 = $48&65535;
    $50 = ((($0)) + 536|0);
    HEAP16[$50>>1] = $49;
    $51 = ((($5)) + 4|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52&255;
    $54 = $53 << 8;
    $55 = ((($5)) + 5|0);
    $56 = HEAP8[$55>>0]|0;
    $57 = $56&255;
    $58 = $54 | $57;
    $59 = $58&65535;
    $60 = ((($0)) + 538|0);
    HEAP16[$60>>1] = $59;
    $$pre$phiZ2D = $31;
    break L13;
   }
   (_png_crc_finish($0,$2)|0);
   _png_chunk_benign_error($0,19325);
   STACKTOP = sp;return;
   break;
  }
  case 3:  {
   $61 = $7 & 2;
   $62 = ($61|0)==(0);
   if ($62) {
    (_png_crc_finish($0,$2)|0);
    _png_chunk_benign_error($0,19312);
    STACKTOP = sp;return;
   }
   $63 = ((($0)) + 420|0);
   $64 = HEAP16[$63>>1]|0;
   $65 = $64&65535;
   $66 = ($2>>>0)>(256);
   $67 = (($2) + -1)|0;
   $68 = ($67>>>0)>=($65>>>0);
   $69 = $66 | $68;
   if (!($69)) {
    _png_read_data($0,$3,$2);
    _png_calculate_crc($0,$3,$2);
    $70 = $2&65535;
    $71 = ((($0)) + 428|0);
    HEAP16[$71>>1] = $70;
    $$pre$phiZ2D = $71;
    break L13;
   }
   (_png_crc_finish($0,$2)|0);
   _png_chunk_benign_error($0,19325);
   STACKTOP = sp;return;
   break;
  }
  default: {
   (_png_crc_finish($0,$2)|0);
   _png_chunk_benign_error($0,21595);
   STACKTOP = sp;return;
  }
  }
 } while(0);
 $72 = (_png_crc_finish($0,0)|0);
 $73 = ($72|0)==(0);
 if ($73) {
  $74 = HEAP16[$$pre$phiZ2D>>1]|0;
  $75 = $74&65535;
  $76 = ((($0)) + 532|0);
  _png_set_tRNS($0,$1,$3,$75,$76);
  STACKTOP = sp;return;
 } else {
  HEAP16[$$pre$phiZ2D>>1] = 0;
  STACKTOP = sp;return;
 }
}
function _png_set_tRNS($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($0|0)==(0|0);
 $6 = ($1|0)==(0|0);
 $or$cond = $5 | $6;
 if ($or$cond) {
  return;
 }
 $7 = ($2|0)==(0|0);
 if (!($7)) {
  _png_free_data($0,$1,8192,0);
  $8 = (_png_malloc($0,256)|0);
  $9 = ((($1)) + 156|0);
  HEAP32[$9>>2] = $8;
  $10 = ((($0)) + 528|0);
  HEAP32[$10>>2] = $8;
  $$off = (($3) + -1)|0;
  $11 = ($$off>>>0)<(256);
  if ($11) {
   _memcpy(($8|0),($2|0),($3|0))|0;
  }
 }
 $12 = ($4|0)==(0|0);
 if ($12) {
  $41 = $3&65535;
  $42 = ((($1)) + 22|0);
  HEAP16[$42>>1] = $41;
  $43 = ($3|0)==(0);
  if ($43) {
   return;
  }
 } else {
  $13 = ((($1)) + 24|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14&255)<(16);
  L12: do {
   if ($15) {
    $16 = $14&255;
    $17 = 1 << $16;
    $18 = ((($1)) + 25|0);
    $19 = HEAP8[$18>>0]|0;
    switch ($19<<24>>24) {
    case 0:  {
     $20 = ((($4)) + 8|0);
     $21 = HEAP16[$20>>1]|0;
     $22 = $21&65535;
     $23 = ($17|0)>($22|0);
     if ($23) {
      break L12;
     }
     break;
    }
    case 2:  {
     $24 = ((($4)) + 2|0);
     $25 = HEAP16[$24>>1]|0;
     $26 = $25&65535;
     $27 = ($17|0)>($26|0);
     if ($27) {
      $28 = ((($4)) + 4|0);
      $29 = HEAP16[$28>>1]|0;
      $30 = $29&65535;
      $31 = ($17|0)>($30|0);
      if ($31) {
       $32 = ((($4)) + 6|0);
       $33 = HEAP16[$32>>1]|0;
       $34 = $33&65535;
       $35 = ($17|0)>($34|0);
       if ($35) {
        break L12;
       }
      }
     }
     break;
    }
    default: {
     break L12;
    }
    }
    _png_warning($0,21622);
   }
  } while(0);
  $36 = ((($1)) + 160|0);
  ;HEAP16[$36>>1]=HEAP16[$4>>1]|0;HEAP16[$36+2>>1]=HEAP16[$4+2>>1]|0;HEAP16[$36+4>>1]=HEAP16[$4+4>>1]|0;HEAP16[$36+6>>1]=HEAP16[$4+6>>1]|0;HEAP16[$36+8>>1]=HEAP16[$4+8>>1]|0;
  $37 = ($3|0)==(0);
  $38 = $3&65535;
  $39 = $37 ? 1 : $38;
  $40 = ((($1)) + 22|0);
  HEAP16[$40>>1] = $39;
 }
 $44 = ((($1)) + 8|0);
 $45 = HEAP32[$44>>2]|0;
 $46 = $45 | 16;
 HEAP32[$44>>2] = $46;
 $47 = ((($1)) + 232|0);
 $48 = HEAP32[$47>>2]|0;
 $49 = $48 | 8192;
 HEAP32[$47>>2] = $49;
 return;
}
function _png_malloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
  return ($$0|0);
 }
 $3 = ($1|0)==(0);
 if ($3) {
  _png_error($0,19955);
  // unreachable;
 }
 $4 = ((($0)) + 720|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $8 = (_malloc($1)|0);
  $$0$i = $8;
 } else {
  $7 = (FUNCTION_TABLE_iii[$5 & 63]($0,$1)|0);
  $$0$i = $7;
 }
 $9 = ($$0$i|0)==(0|0);
 if ($9) {
  _png_error($0,19955);
  // unreachable;
 } else {
  $$0 = $$0$i;
  return ($$0|0);
 }
 return (0)|0;
}
function _png_handle_bKGD($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $or$cond = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 10|0;
 $4 = sp;
 $5 = ((($0)) + 208|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  _png_chunk_error($0,19821);
  // unreachable;
 }
 $9 = $6 & 4;
 $10 = ($9|0)==(0);
 if ($10) {
  $11 = ((($0)) + 435|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = ($12<<24>>24)==(3);
  $14 = $6 & 2;
  $15 = ($14|0)==(0);
  $or$cond = $15 & $13;
  if (!($or$cond)) {
   $16 = ($1|0)!=(0|0);
   if ($16) {
    $17 = ((($1)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = $18 & 32;
    $20 = ($19|0)==(0);
    if (!($20)) {
     (_png_crc_finish($0,$2)|0);
     _png_chunk_benign_error($0,20069);
     STACKTOP = sp;return;
    }
   }
   $21 = ($12 << 1)&255;
   $22 = $21 & 4;
   $23 = $22 | 2;
   $24 = $23&255;
   $spec$select = $13 ? 1 : $24;
   $25 = ($spec$select|0)==($2|0);
   if (!($25)) {
    (_png_crc_finish($0,$2)|0);
    _png_chunk_benign_error($0,19325);
    STACKTOP = sp;return;
   }
   _png_read_data($0,$3,$2);
   _png_calculate_crc($0,$3,$2);
   $26 = (_png_crc_finish($0,0)|0);
   $27 = ($26|0)==(0);
   if (!($27)) {
    STACKTOP = sp;return;
   }
   $28 = HEAP8[$11>>0]|0;
   $29 = ($28<<24>>24)==(3);
   do {
    if ($29) {
     $30 = HEAP8[$3>>0]|0;
     HEAP8[$4>>0] = $30;
     do {
      if ($16) {
       $31 = ((($1)) + 20|0);
       $32 = HEAP16[$31>>1]|0;
       $33 = ($32<<16>>16)==(0);
       if ($33) {
        label = 18;
       } else {
        $34 = $32&65535;
        $35 = $30&255;
        $36 = ($35>>>0)<($34>>>0);
        if ($36) {
         $37 = ((($0)) + 416|0);
         $38 = HEAP32[$37>>2]|0;
         $39 = (($38) + (($35*3)|0)|0);
         $40 = HEAP8[$39>>0]|0;
         $41 = $40&255;
         $42 = ((($4)) + 2|0);
         HEAP16[$42>>1] = $41;
         $43 = (((($38) + (($35*3)|0)|0)) + 1|0);
         $44 = HEAP8[$43>>0]|0;
         $45 = $44&255;
         $46 = ((($4)) + 4|0);
         HEAP16[$46>>1] = $45;
         $47 = (((($38) + (($35*3)|0)|0)) + 2|0);
         $48 = HEAP8[$47>>0]|0;
         $49 = $48&255;
         $50 = ((($4)) + 6|0);
         HEAP16[$50>>1] = $49;
         break;
        }
        _png_chunk_benign_error($0,21672);
        STACKTOP = sp;return;
       }
      } else {
       label = 18;
      }
     } while(0);
     if ((label|0) == 18) {
      $51 = ((($4)) + 6|0);
      HEAP16[$51>>1] = 0;
      $52 = ((($4)) + 4|0);
      HEAP16[$52>>1] = 0;
      $53 = ((($4)) + 2|0);
      HEAP16[$53>>1] = 0;
     }
     $54 = ((($4)) + 8|0);
     HEAP16[$54>>1] = 0;
    } else {
     $55 = $28 & 2;
     $56 = ($55<<24>>24)==(0);
     HEAP8[$4>>0] = 0;
     $57 = HEAP8[$3>>0]|0;
     $58 = $57&255;
     $59 = $58 << 8;
     $60 = ((($3)) + 1|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = $59 | $62;
     $64 = $63&65535;
     if ($56) {
      $65 = ((($4)) + 8|0);
      HEAP16[$65>>1] = $64;
      $66 = ((($4)) + 6|0);
      HEAP16[$66>>1] = $64;
      $67 = ((($4)) + 4|0);
      HEAP16[$67>>1] = $64;
      $68 = ((($4)) + 2|0);
      HEAP16[$68>>1] = $64;
      break;
     } else {
      $69 = ((($4)) + 2|0);
      HEAP16[$69>>1] = $64;
      $70 = ((($3)) + 2|0);
      $71 = HEAP8[$70>>0]|0;
      $72 = $71&255;
      $73 = $72 << 8;
      $74 = ((($3)) + 3|0);
      $75 = HEAP8[$74>>0]|0;
      $76 = $75&255;
      $77 = $73 | $76;
      $78 = $77&65535;
      $79 = ((($4)) + 4|0);
      HEAP16[$79>>1] = $78;
      $80 = ((($3)) + 4|0);
      $81 = HEAP8[$80>>0]|0;
      $82 = $81&255;
      $83 = $82 << 8;
      $84 = ((($3)) + 5|0);
      $85 = HEAP8[$84>>0]|0;
      $86 = $85&255;
      $87 = $83 | $86;
      $88 = $87&65535;
      $89 = ((($4)) + 6|0);
      HEAP16[$89>>1] = $88;
      $90 = ((($4)) + 8|0);
      HEAP16[$90>>1] = 0;
      break;
     }
    }
   } while(0);
   _png_set_bKGD($0,$1,$4);
   STACKTOP = sp;return;
  }
 }
 (_png_crc_finish($0,$2)|0);
 _png_chunk_benign_error($0,19312);
 STACKTOP = sp;return;
}
function _png_set_bKGD($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 $4 = ($1|0)==(0|0);
 $or$cond = $3 | $4;
 $5 = ($2|0)==(0|0);
 $or$cond3 = $or$cond | $5;
 if ($or$cond3) {
  return;
 }
 $6 = ((($1)) + 170|0);
 ;HEAP16[$6>>1]=HEAP16[$2>>1]|0;HEAP16[$6+2>>1]=HEAP16[$2+2>>1]|0;HEAP16[$6+4>>1]=HEAP16[$2+4>>1]|0;HEAP16[$6+6>>1]=HEAP16[$2+6>>1]|0;HEAP16[$6+8>>1]=HEAP16[$2+8>>1]|0;
 $7 = ((($1)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 | 32;
 HEAP32[$7>>2] = $9;
 return;
}
function _png_handle_hIST($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$031 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond33 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $3 = sp;
 $4 = sp + 512|0;
 $5 = ((($0)) + 208|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  _png_chunk_error($0,19821);
  // unreachable;
 }
 $9 = $6 & 6;
 $10 = ($9|0)==(2);
 if (!($10)) {
  (_png_crc_finish($0,$2)|0);
  _png_chunk_benign_error($0,19312);
  STACKTOP = sp;return;
 }
 $11 = ($1|0)==(0|0);
 if (!($11)) {
  $12 = ((($1)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & 64;
  $15 = ($14|0)==(0);
  if (!($15)) {
   (_png_crc_finish($0,$2)|0);
   _png_chunk_benign_error($0,20069);
   STACKTOP = sp;return;
  }
 }
 $16 = $2 >>> 1;
 $17 = ((($0)) + 420|0);
 $18 = HEAP16[$17>>1]|0;
 $19 = $18&65535;
 $20 = ($16|0)!=($19|0);
 $21 = ($2>>>0)>(513);
 $or$cond = $21 | $20;
 if ($or$cond) {
  (_png_crc_finish($0,$2)|0);
  _png_chunk_benign_error($0,19325);
  STACKTOP = sp;return;
 }
 $22 = ($16|0)==(0);
 if (!($22)) {
  $23 = ((($4)) + 1|0);
  $$031 = 0;
  while(1) {
   _png_read_data($0,$4,2);
   _png_calculate_crc($0,$4,2);
   $24 = HEAP8[$4>>0]|0;
   $25 = $24&255;
   $26 = $25 << 8;
   $27 = HEAP8[$23>>0]|0;
   $28 = $27&255;
   $29 = $26 | $28;
   $30 = $29&65535;
   $31 = (($3) + ($$031<<1)|0);
   HEAP16[$31>>1] = $30;
   $32 = (($$031) + 1)|0;
   $exitcond33 = ($32|0)==($16|0);
   if ($exitcond33) {
    break;
   } else {
    $$031 = $32;
   }
  }
 }
 $33 = (_png_crc_finish($0,0)|0);
 $34 = ($33|0)==(0);
 if (!($34)) {
  STACKTOP = sp;return;
 }
 _png_set_hIST($0,$1,$3);
 STACKTOP = sp;return;
}
function _png_set_hIST($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$022 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 $4 = ($1|0)==(0|0);
 $or$cond = $3 | $4;
 if ($or$cond) {
  return;
 }
 $5 = ((($1)) + 20|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = (($6) + -1)<<16>>16;
 $8 = ($7&65535)>(255);
 if ($8) {
  _png_warning($0,21686);
  return;
 }
 _png_free_data($0,$1,8,0);
 $9 = (_png_malloc_warn($0,512)|0);
 $10 = ((($1)) + 204|0);
 HEAP32[$10>>2] = $9;
 $11 = ($9|0)==(0|0);
 if ($11) {
  _png_warning($0,21732);
  return;
 }
 $12 = ((($1)) + 232|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = $13 | 8;
 HEAP32[$12>>2] = $14;
 $15 = HEAP16[$5>>1]|0;
 $16 = ($15<<16>>16)==(0);
 if (!($16)) {
  $17 = $15&65535;
  $$022 = 0;
  while(1) {
   $18 = (($2) + ($$022<<1)|0);
   $19 = HEAP16[$18>>1]|0;
   $20 = (($9) + ($$022<<1)|0);
   HEAP16[$20>>1] = $19;
   $21 = (($$022) + 1)|0;
   $22 = ($21>>>0)<($17>>>0);
   if ($22) {
    $$022 = $21;
   } else {
    break;
   }
  }
 }
 $23 = ((($1)) + 8|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $24 | 64;
 HEAP32[$23>>2] = $25;
 return;
}
function _png_handle_pHYs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  _png_chunk_error($0,19821);
  // unreachable;
 }
 $8 = $5 & 4;
 $9 = ($8|0)==(0);
 if (!($9)) {
  (_png_crc_finish($0,$2)|0);
  _png_chunk_benign_error($0,19312);
  STACKTOP = sp;return;
 }
 $10 = ($1|0)==(0|0);
 if (!($10)) {
  $11 = ((($1)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 & 128;
  $14 = ($13|0)==(0);
  if (!($14)) {
   (_png_crc_finish($0,$2)|0);
   _png_chunk_benign_error($0,20069);
   STACKTOP = sp;return;
  }
 }
 $15 = ($2|0)==(9);
 if (!($15)) {
  (_png_crc_finish($0,$2)|0);
  _png_chunk_benign_error($0,19325);
  STACKTOP = sp;return;
 }
 _png_read_data($0,$3,9);
 _png_calculate_crc($0,$3,9);
 $16 = (_png_crc_finish($0,0)|0);
 $17 = ($16|0)==(0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = HEAP8[$3>>0]|0;
 $19 = $18&255;
 $20 = $19 << 24;
 $21 = ((($3)) + 1|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $23 << 16;
 $25 = $24 | $20;
 $26 = ((($3)) + 2|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $28 << 8;
 $30 = $25 | $29;
 $31 = ((($3)) + 3|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $30 | $33;
 $35 = ((($3)) + 4|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = $37 << 24;
 $39 = ((($3)) + 5|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = $41 << 16;
 $43 = $42 | $38;
 $44 = ((($3)) + 6|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $45&255;
 $47 = $46 << 8;
 $48 = $43 | $47;
 $49 = ((($3)) + 7|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $48 | $51;
 $53 = ((($3)) + 8|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 _png_set_pHYs($0,$1,$34,$52,$55);
 STACKTOP = sp;return;
}
function _png_set_pHYs($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($0|0)==(0|0);
 $6 = ($1|0)==(0|0);
 $or$cond = $5 | $6;
 if ($or$cond) {
  return;
 }
 $7 = ((($1)) + 192|0);
 HEAP32[$7>>2] = $2;
 $8 = ((($1)) + 196|0);
 HEAP32[$8>>2] = $3;
 $9 = $4&255;
 $10 = ((($1)) + 200|0);
 HEAP8[$10>>0] = $9;
 $11 = ((($1)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 | 128;
 HEAP32[$11>>2] = $13;
 return;
}
function _png_handle_oFFs($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ((($0)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)==(0);
 if ($7) {
  _png_chunk_error($0,19821);
  // unreachable;
 }
 $8 = $5 & 4;
 $9 = ($8|0)==(0);
 if (!($9)) {
  (_png_crc_finish($0,$2)|0);
  _png_chunk_benign_error($0,19312);
  STACKTOP = sp;return;
 }
 $10 = ($1|0)==(0|0);
 if (!($10)) {
  $11 = ((($1)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = $12 & 256;
  $14 = ($13|0)==(0);
  if (!($14)) {
   (_png_crc_finish($0,$2)|0);
   _png_chunk_benign_error($0,20069);
   STACKTOP = sp;return;
  }
 }
 $15 = ($2|0)==(9);
 if (!($15)) {
  (_png_crc_finish($0,$2)|0);
  _png_chunk_benign_error($0,19325);
  STACKTOP = sp;return;
 }
 _png_read_data($0,$3,9);
 _png_calculate_crc($0,$3,9);
 $16 = (_png_crc_finish($0,0)|0);
 $17 = ($16|0)==(0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = HEAP8[$3>>0]|0;
 $19 = $18&255;
 $20 = $19 << 24;
 $21 = ((($3)) + 1|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $23 << 16;
 $25 = $24 | $20;
 $26 = ((($3)) + 2|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = $28 << 8;
 $30 = $25 | $29;
 $31 = ((($3)) + 3|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = $32&255;
 $34 = $30 | $33;
 $35 = ((($3)) + 4|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = $37 << 24;
 $39 = ((($3)) + 5|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = $41 << 16;
 $43 = $42 | $38;
 $44 = ((($3)) + 6|0);
 $45 = HEAP8[$44>>0]|0;
 $46 = $45&255;
 $47 = $46 << 8;
 $48 = $43 | $47;
 $49 = ((($3)) + 7|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $48 | $51;
 $53 = ((($3)) + 8|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 _png_set_oFFs($0,$1,$34,$52,$55);
 STACKTOP = sp;return;
}
function _png_set_oFFs($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($0|0)==(0|0);
 $6 = ($1|0)==(0|0);
 $or$cond = $5 | $6;
 if ($or$cond) {
  return;
 }
 $7 = ((($1)) + 180|0);
 HEAP32[$7>>2] = $2;
 $8 = ((($1)) + 184|0);
 HEAP32[$8>>2] = $3;
 $9 = $4&255;
 $10 = ((($1)) + 188|0);
 HEAP8[$10>>0] = $9;
 $11 = ((($1)) + 8|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = $12 | 256;
 HEAP32[$11>>2] = $13;
 return;
}
function _png_handle_pCAL($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0101 = 0, $$0112 = 0, $$1 = 0, $$1$i$ph = 0, $$2111 = 0, $$3109 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $or$cond = 0, $or$cond104 = 0, $or$cond106 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 208|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 if ($6) {
  _png_chunk_error($0,19821);
  // unreachable;
 }
 $7 = $4 & 4;
 $8 = ($7|0)==(0);
 if (!($8)) {
  (_png_crc_finish($0,$2)|0);
  _png_chunk_benign_error($0,19312);
  return;
 }
 $9 = ($1|0)==(0|0);
 if (!($9)) {
  $10 = ((($1)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & 1024;
  $13 = ($12|0)==(0);
  if (!($13)) {
   (_png_crc_finish($0,$2)|0);
   _png_chunk_benign_error($0,20069);
   return;
  }
 }
 $14 = (($2) + 1)|0;
 $15 = ((($0)) + 788|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0|0);
 if ($17) {
  label = 11;
 } else {
  $18 = ((($0)) + 792|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19>>>0)<($14>>>0);
  if ($20) {
   HEAP32[$15>>2] = 0;
   HEAP32[$18>>2] = 0;
   _png_free($0,$16);
   label = 11;
  } else {
   $$1$i$ph = $16;
  }
 }
 do {
  if ((label|0) == 11) {
   $21 = (_png_malloc_base($0,$14)|0);
   $22 = ($21|0)==(0|0);
   if (!($22)) {
    HEAP32[$15>>2] = $21;
    $23 = ((($0)) + 792|0);
    HEAP32[$23>>2] = $14;
    $$1$i$ph = $21;
    break;
   }
   (_png_crc_finish($0,$2)|0);
   _png_chunk_benign_error($0,20444);
   return;
  }
 } while(0);
 _png_read_data($0,$$1$i$ph,$2);
 _png_calculate_crc($0,$$1$i$ph,$2);
 $24 = (_png_crc_finish($0,0)|0);
 $25 = ($24|0)==(0);
 if (!($25)) {
  return;
 }
 $26 = (($$1$i$ph) + ($2)|0);
 HEAP8[$26>>0] = 0;
 $$0101 = $$1$i$ph;
 while(1) {
  $27 = HEAP8[$$0101>>0]|0;
  $28 = ($27<<24>>24)==(0);
  $29 = ((($$0101)) + 1|0);
  if ($28) {
   break;
  } else {
   $$0101 = $29;
  }
 }
 $30 = ((($$0101)) + 12|0);
 $31 = ($26>>>0)>($30>>>0);
 if (!($31)) {
  _png_chunk_benign_error($0,19325);
  return;
 }
 $32 = HEAP8[$29>>0]|0;
 $33 = $32&255;
 $34 = $33 << 24;
 $35 = ((($$0101)) + 2|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = $37 << 16;
 $39 = $38 | $34;
 $40 = ((($$0101)) + 3|0);
 $41 = HEAP8[$40>>0]|0;
 $42 = $41&255;
 $43 = $42 << 8;
 $44 = $39 | $43;
 $45 = ((($$0101)) + 4|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 $48 = $44 | $47;
 $49 = ((($$0101)) + 5|0);
 $50 = HEAP8[$49>>0]|0;
 $51 = $50&255;
 $52 = $51 << 24;
 $53 = ((($$0101)) + 6|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = $54&255;
 $56 = $55 << 16;
 $57 = $56 | $52;
 $58 = ((($$0101)) + 7|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = $59&255;
 $61 = $60 << 8;
 $62 = $57 | $61;
 $63 = ((($$0101)) + 8|0);
 $64 = HEAP8[$63>>0]|0;
 $65 = $64&255;
 $66 = $62 | $65;
 $67 = ((($$0101)) + 9|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = ((($$0101)) + 10|0);
 $70 = HEAP8[$69>>0]|0;
 $71 = ((($$0101)) + 11|0);
 $72 = $68&255;
 $73 = ($68<<24>>24)!=(0);
 $74 = ($70<<24>>24)==(2);
 $or$cond = $73 | $74;
 if ($or$cond) {
  $75 = ($70<<24>>24)==(3);
  $76 = (($68) + -1)<<24>>24;
  $77 = ($76&255)>(1);
  $or$cond106 = $77 | $75;
  if ($or$cond106) {
   $78 = ($68<<24>>24)!=(3);
   $79 = ($70<<24>>24)==(4);
   $or$cond104 = $78 | $79;
   if ($or$cond104) {
    $80 = ($68&255)>(3);
    if ($80) {
     _png_chunk_benign_error($0,21796);
    }
    $$1 = $71;
    while(1) {
     $81 = HEAP8[$$1>>0]|0;
     $82 = ($81<<24>>24)==(0);
     $83 = ((($$1)) + 1|0);
     if ($82) {
      break;
     } else {
      $$1 = $83;
     }
    }
    $84 = $70&255;
    $85 = $84 << 2;
    $86 = (_png_malloc_warn($0,$85)|0);
    $87 = ($86|0)==(0|0);
    if ($87) {
     _png_chunk_benign_error($0,20444);
     return;
    }
    $88 = ($70<<24>>24)==(0);
    L47: do {
     if (!($88)) {
      $$0112 = 0;$$2111 = $$1;
      L49: while(1) {
       $89 = ((($$2111)) + 1|0);
       $90 = (($86) + ($$0112<<2)|0);
       HEAP32[$90>>2] = $89;
       $91 = ($89>>>0)>($26>>>0);
       if ($91) {
        break;
       }
       $$3109 = $89;
       while(1) {
        $92 = HEAP8[$$3109>>0]|0;
        $93 = ($92<<24>>24)==(0);
        if ($93) {
         break;
        }
        $94 = ((($$3109)) + 1|0);
        $95 = ($94>>>0)>($26>>>0);
        if ($95) {
         break L49;
        } else {
         $$3109 = $94;
        }
       }
       $96 = (($$0112) + 1)|0;
       $97 = ($96>>>0)<($84>>>0);
       if ($97) {
        $$0112 = $96;$$2111 = $$3109;
       } else {
        break L47;
       }
      }
      _png_free($0,$86);
      _png_chunk_benign_error($0,21823);
      return;
     }
    } while(0);
    _png_set_pCAL($0,$1,$$1$i$ph,$48,$66,$72,$84,$71,$86);
    _png_free($0,$86);
    return;
   }
  }
 }
 _png_chunk_benign_error($0,21772);
 return;
}
function _png_set_pCAL($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$088 = 0, $$187 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $9 = 0;
 var $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $9 = ($0|0)==(0|0);
 $10 = ($1|0)==(0|0);
 $or$cond = $9 | $10;
 $11 = ($2|0)==(0|0);
 $or$cond3 = $or$cond | $11;
 $12 = ($7|0)==(0|0);
 $or$cond5 = $or$cond3 | $12;
 if ($or$cond5) {
  return;
 }
 $13 = ($6|0)>(0);
 $14 = ($8|0)==(0|0);
 $or$cond7 = $13 & $14;
 if ($or$cond7) {
  return;
 }
 $15 = (_strlen($2)|0);
 $16 = (($15) + 1)|0;
 $17 = ($5>>>0)>(3);
 if ($17) {
  _png_error($0,21836);
  // unreachable;
 }
 $18 = ($6>>>0)>(255);
 if ($18) {
  _png_error($0,21863);
  // unreachable;
 }
 $19 = ($6|0)==(0);
 L13: do {
  if (!($19)) {
   $$088 = 0;
   while(1) {
    $22 = (($8) + ($$088<<2)|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==(0|0);
    if ($24) {
     label = 12;
     break;
    }
    $25 = (_strlen($23)|0);
    $26 = (_png_check_fp_string($23,$25)|0);
    $27 = ($26|0)==(0);
    $20 = (($$088) + 1)|0;
    if ($27) {
     label = 12;
     break;
    }
    $21 = ($20|0)<($6|0);
    if ($21) {
     $$088 = $20;
    } else {
     break L13;
    }
   }
   if ((label|0) == 12) {
    _png_error($0,21892);
    // unreachable;
   }
  }
 } while(0);
 $28 = (_png_malloc_warn($0,$16)|0);
 $29 = ((($1)) + 208|0);
 HEAP32[$29>>2] = $28;
 $30 = ($28|0)==(0|0);
 if ($30) {
  _png_warning($0,21926);
  return;
 }
 _memcpy(($28|0),($2|0),($16|0))|0;
 $31 = ((($1)) + 212|0);
 HEAP32[$31>>2] = $3;
 $32 = ((($1)) + 216|0);
 HEAP32[$32>>2] = $4;
 $33 = $5&255;
 $34 = ((($1)) + 228|0);
 HEAP8[$34>>0] = $33;
 $35 = $6&255;
 $36 = ((($1)) + 229|0);
 HEAP8[$36>>0] = $35;
 $37 = (_strlen($7)|0);
 $38 = (($37) + 1)|0;
 $39 = (_png_malloc_warn($0,$38)|0);
 $40 = ((($1)) + 220|0);
 HEAP32[$40>>2] = $39;
 $41 = ($39|0)==(0|0);
 if ($41) {
  _png_warning($0,21963);
  return;
 }
 _memcpy(($39|0),($7|0),($38|0))|0;
 $42 = $6 << 2;
 $43 = (($42) + 4)|0;
 $44 = (_png_malloc_warn($0,$43)|0);
 $45 = ((($1)) + 224|0);
 HEAP32[$45>>2] = $44;
 $46 = ($44|0)==(0|0);
 if ($46) {
  _png_warning($0,21998);
  return;
 }
 _memset(($44|0),0,($43|0))|0;
 L35: do {
  if ($13) {
   $$187 = 0;
   while(1) {
    $47 = (($8) + ($$187<<2)|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (_strlen($48)|0);
    $50 = (($49) + 1)|0;
    $51 = (_png_malloc_warn($0,$50)|0);
    $52 = HEAP32[$45>>2]|0;
    $53 = (($52) + ($$187<<2)|0);
    HEAP32[$53>>2] = $51;
    $54 = HEAP32[$45>>2]|0;
    $55 = (($54) + ($$187<<2)|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($56|0)==(0|0);
    if ($57) {
     break;
    }
    $58 = HEAP32[$47>>2]|0;
    _memcpy(($56|0),($58|0),($50|0))|0;
    $59 = (($$187) + 1)|0;
    $60 = ($59|0)<($6|0);
    if ($60) {
     $$187 = $59;
    } else {
     break L35;
    }
   }
   _png_warning($0,22034);
   return;
  }
 } while(0);
 $61 = ((($1)) + 8|0);
 $62 = HEAP32[$61>>2]|0;
 $63 = $62 | 1024;
 HEAP32[$61>>2] = $63;
 $64 = ((($1)) + 232|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $65 | 128;
 HEAP32[$64>>2] = $66;
 return;
}
function _png_check_fp_string($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp + 4|0;
 $3 = sp;
 HEAP32[$2>>2] = 0;
 HEAP32[$3>>2] = 0;
 $4 = (_png_check_fp_number($0,$1,$2,$3)|0);
 $5 = ($4|0)==(0);
 do {
  if ($5) {
   $$0 = 0;
  } else {
   $6 = HEAP32[$3>>2]|0;
   $7 = ($6|0)==($1|0);
   if (!($7)) {
    $8 = (($0) + ($6)|0);
    $9 = HEAP8[$8>>0]|0;
    $10 = ($9<<24>>24)==(0);
    if (!($10)) {
     $$0 = 0;
     break;
    }
   }
   $11 = HEAP32[$2>>2]|0;
   $$0 = $11;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _png_check_fp_number($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$041 = 0, $$042$lcssa = 0, $$04249 = 0, $$043$lcssa = 0, $$04348 = 0, $$144 = 0, $$245 = 0, $$lobit = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[$2>>2]|0;
 $5 = HEAP32[$3>>2]|0;
 $6 = ($5>>>0)<($1>>>0);
 L1: do {
  if ($6) {
   $$04249 = $5;$$04348 = $4;
   while(1) {
    $7 = (($0) + ($$04249)|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = $8 << 24 >> 24;
    switch ($9|0) {
    case 43:  {
     $$041 = 4;
     break;
    }
    case 45:  {
     $$041 = 132;
     break;
    }
    case 46:  {
     $$041 = 16;
     break;
    }
    case 48:  {
     $$041 = 8;
     break;
    }
    case 57: case 56: case 55: case 54: case 53: case 52: case 51: case 50: case 49:  {
     $$041 = 264;
     break;
    }
    case 101: case 69:  {
     $$041 = 32;
     break;
    }
    default: {
     $$042$lcssa = $$04249;$$043$lcssa = $$04348;
     break L1;
    }
    }
    $10 = $$04348 & 3;
    $11 = $$041 | $10;
    $trunc = $11&255;
    $trunc$clear = $trunc & 63;
    L12: do {
     switch ($trunc$clear<<24>>24) {
     case 4:  {
      $12 = $$04348 & 60;
      $13 = ($12|0)==(0);
      if (!($13)) {
       $$042$lcssa = $$04249;$$043$lcssa = $$04348;
       break L1;
      }
      $14 = $$041 | $$04348;
      $$245 = $14;
      break;
     }
     case 16:  {
      $15 = $$04348 & 16;
      $16 = ($15|0)==(0);
      if (!($16)) {
       $$042$lcssa = $$04249;$$043$lcssa = $$04348;
       break L1;
      }
      $17 = $$04348 & 8;
      $18 = ($17|0)==(0);
      if ($18) {
       $20 = $$04348 & 448;
       $21 = $20 | $$041;
       $22 = $21 | 1;
       $$245 = $22;
       break L12;
      } else {
       $19 = $$041 | $$04348;
       $$245 = $19;
       break L12;
      }
      break;
     }
     case 8:  {
      $23 = $$04348 & 16;
      $24 = ($23|0)==(0);
      $25 = $$04348 & 384;
      $26 = $25 | 17;
      $$144 = $24 ? $$04348 : $26;
      $27 = $$041 | $$144;
      $28 = $27 | 64;
      $$245 = $28;
      break;
     }
     case 32:  {
      $29 = $$04348 & 8;
      $30 = ($29|0)==(0);
      if ($30) {
       $$042$lcssa = $$04249;$$043$lcssa = $$04348;
       break L1;
      }
      $31 = $$04348 & 448;
      $32 = $31 | 2;
      $$245 = $32;
      break;
     }
     case 9:  {
      $33 = $$041 | $$04348;
      $34 = $33 | 64;
      $$245 = $34;
      break;
     }
     case 33:  {
      $35 = $$04348 & 8;
      $36 = ($35|0)==(0);
      if ($36) {
       $$042$lcssa = $$04249;$$043$lcssa = $$04348;
       break L1;
      }
      $37 = $$04348 & 448;
      $38 = $37 | 2;
      $$245 = $38;
      break;
     }
     case 6:  {
      $39 = $$04348 & 60;
      $40 = ($39|0)==(0);
      if (!($40)) {
       $$042$lcssa = $$04249;$$043$lcssa = $$04348;
       break L1;
      }
      $41 = $$04348 | 4;
      $$245 = $41;
      break;
     }
     case 10:  {
      $42 = $$04348 | 72;
      $$245 = $42;
      break;
     }
     default: {
      $$042$lcssa = $$04249;$$043$lcssa = $$04348;
      break L1;
     }
     }
    } while(0);
    $43 = (($$04249) + 1)|0;
    $44 = ($43>>>0)<($1>>>0);
    if ($44) {
     $$04249 = $43;$$04348 = $$245;
    } else {
     $$042$lcssa = $43;$$043$lcssa = $$245;
     break L1;
    }
   }
  } else {
   $$042$lcssa = $5;$$043$lcssa = $4;
  }
 } while(0);
 HEAP32[$2>>2] = $$043$lcssa;
 HEAP32[$3>>2] = $$042$lcssa;
 $45 = $$043$lcssa >>> 3;
 $$lobit = $45 & 1;
 return ($$lobit|0);
}
function _png_handle_sCAL($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$1$i$ph = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $switch = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $4 = sp;
 $5 = ((($0)) + 208|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  _png_chunk_error($0,19821);
  // unreachable;
 }
 $9 = $6 & 4;
 $10 = ($9|0)==(0);
 if (!($10)) {
  (_png_crc_finish($0,$2)|0);
  _png_chunk_benign_error($0,19312);
  STACKTOP = sp;return;
 }
 $11 = ($1|0)==(0|0);
 if (!($11)) {
  $12 = ((($1)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = $13 & 16384;
  $15 = ($14|0)==(0);
  if (!($15)) {
   (_png_crc_finish($0,$2)|0);
   _png_chunk_benign_error($0,20069);
   STACKTOP = sp;return;
  }
 }
 $16 = ($2>>>0)<(4);
 if ($16) {
  (_png_crc_finish($0,$2)|0);
  _png_chunk_benign_error($0,19325);
  STACKTOP = sp;return;
 }
 $17 = (($2) + 1)|0;
 $18 = ((($0)) + 788|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  label = 13;
 } else {
  $21 = ((($0)) + 792|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = ($22>>>0)<($17>>>0);
  if ($23) {
   HEAP32[$18>>2] = 0;
   HEAP32[$21>>2] = 0;
   _png_free($0,$19);
   label = 13;
  } else {
   $$1$i$ph = $19;
  }
 }
 do {
  if ((label|0) == 13) {
   $24 = (_png_malloc_base($0,$17)|0);
   $25 = ($24|0)==(0|0);
   if (!($25)) {
    HEAP32[$18>>2] = $24;
    $26 = ((($0)) + 792|0);
    HEAP32[$26>>2] = $17;
    $$1$i$ph = $24;
    break;
   }
   _png_chunk_benign_error($0,20444);
   (_png_crc_finish($0,$2)|0);
   STACKTOP = sp;return;
  }
 } while(0);
 _png_read_data($0,$$1$i$ph,$2);
 _png_calculate_crc($0,$$1$i$ph,$2);
 $27 = (($$1$i$ph) + ($2)|0);
 HEAP8[$27>>0] = 0;
 $28 = (_png_crc_finish($0,0)|0);
 $29 = ($28|0)==(0);
 if (!($29)) {
  STACKTOP = sp;return;
 }
 $30 = HEAP8[$$1$i$ph>>0]|0;
 $$off = (($30) + -1)<<24>>24;
 $switch = ($$off&255)<(2);
 if (!($switch)) {
  _png_chunk_benign_error($0,22073);
  STACKTOP = sp;return;
 }
 HEAP32[$3>>2] = 1;
 HEAP32[$4>>2] = 0;
 $31 = (_png_check_fp_number($$1$i$ph,$2,$4,$3)|0);
 $32 = ($31|0)==(0);
 if (!($32)) {
  $33 = HEAP32[$3>>2]|0;
  $34 = ($33>>>0)<($2>>>0);
  if ($34) {
   $35 = (($33) + 1)|0;
   HEAP32[$3>>2] = $35;
   $36 = (($$1$i$ph) + ($33)|0);
   $37 = HEAP8[$36>>0]|0;
   $38 = ($37<<24>>24)==(0);
   if ($38) {
    $39 = HEAP32[$4>>2]|0;
    $40 = $39 & 392;
    $41 = ($40|0)==(264);
    if (!($41)) {
     _png_chunk_benign_error($0,22103);
     STACKTOP = sp;return;
    }
    HEAP32[$4>>2] = 0;
    $42 = (_png_check_fp_number($$1$i$ph,$2,$4,$3)|0);
    $43 = ($42|0)!=(0);
    $44 = HEAP32[$3>>2]|0;
    $45 = ($44|0)==($2|0);
    $or$cond = $43 & $45;
    if (!($or$cond)) {
     _png_chunk_benign_error($0,22122);
     STACKTOP = sp;return;
    }
    $46 = HEAP32[$4>>2]|0;
    $47 = $46 & 392;
    $48 = ($47|0)==(264);
    if ($48) {
     $49 = HEAP8[$$1$i$ph>>0]|0;
     $50 = $49&255;
     $51 = ((($$1$i$ph)) + 1|0);
     $52 = (($$1$i$ph) + ($35)|0);
     _png_set_sCAL_s($0,$1,$50,$51,$52);
     STACKTOP = sp;return;
    } else {
     _png_chunk_benign_error($0,22140);
     STACKTOP = sp;return;
    }
   }
  }
 }
 _png_chunk_benign_error($0,22086);
 STACKTOP = sp;return;
}
function _png_set_sCAL_s($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($0|0)==(0|0);
 $6 = ($1|0)==(0|0);
 $or$cond = $5 | $6;
 if ($or$cond) {
  return;
 }
 $7 = (($2) + -1)|0;
 $8 = ($7>>>0)>(1);
 if ($8) {
  _png_error($0,22160);
  // unreachable;
 }
 $9 = ($3|0)==(0|0);
 if ($9) {
  _png_error($0,22178);
  // unreachable;
 }
 $10 = (_strlen($3)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  _png_error($0,22178);
  // unreachable;
 }
 $12 = HEAP8[$3>>0]|0;
 $13 = ($12<<24>>24)==(45);
 if ($13) {
  _png_error($0,22178);
  // unreachable;
 }
 $14 = (_png_check_fp_string($3,$10)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  _png_error($0,22178);
  // unreachable;
 }
 $16 = ($4|0)==(0|0);
 if ($16) {
  _png_error($0,22197);
  // unreachable;
 }
 $17 = (_strlen($4)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  _png_error($0,22197);
  // unreachable;
 }
 $19 = HEAP8[$4>>0]|0;
 $20 = ($19<<24>>24)==(45);
 if ($20) {
  _png_error($0,22197);
  // unreachable;
 }
 $21 = (_png_check_fp_string($4,$17)|0);
 $22 = ($21|0)==(0);
 if ($22) {
  _png_error($0,22197);
  // unreachable;
 }
 $23 = $2&255;
 $24 = ((($1)) + 252|0);
 HEAP8[$24>>0] = $23;
 $25 = (($10) + 1)|0;
 $26 = (_png_malloc_warn($0,$25)|0);
 $27 = ((($1)) + 256|0);
 HEAP32[$27>>2] = $26;
 $28 = ($26|0)==(0|0);
 if ($28) {
  _png_warning($0,22217);
  return;
 }
 _memcpy(($26|0),($3|0),($25|0))|0;
 $29 = (($17) + 1)|0;
 $30 = (_png_malloc_warn($0,$29)|0);
 $31 = ((($1)) + 260|0);
 HEAP32[$31>>2] = $30;
 $32 = ($30|0)==(0|0);
 if ($32) {
  $33 = HEAP32[$27>>2]|0;
  _png_free($0,$33);
  HEAP32[$27>>2] = 0;
  _png_warning($0,22217);
  return;
 } else {
  _memcpy(($30|0),($4|0),($29|0))|0;
  $34 = ((($1)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = $35 | 16384;
  HEAP32[$34>>2] = $36;
  $37 = ((($1)) + 232|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = $38 | 256;
  HEAP32[$37>>2] = $39;
  return;
 }
}
function _png_handle_tIME($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 8|0;
 $4 = sp;
 $5 = ((($0)) + 208|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1;
 $8 = ($7|0)==(0);
 if ($8) {
  _png_chunk_error($0,19821);
  // unreachable;
 }
 $9 = ($1|0)==(0|0);
 if (!($9)) {
  $10 = ((($1)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = $11 & 512;
  $13 = ($12|0)==(0);
  if (!($13)) {
   (_png_crc_finish($0,$2)|0);
   _png_chunk_benign_error($0,20069);
   STACKTOP = sp;return;
  }
 }
 $14 = $6 & 4;
 $15 = ($14|0)==(0);
 if (!($15)) {
  $16 = $6 | 8;
  HEAP32[$5>>2] = $16;
 }
 $17 = ($2|0)==(7);
 if (!($17)) {
  (_png_crc_finish($0,$2)|0);
  _png_chunk_benign_error($0,19325);
  STACKTOP = sp;return;
 }
 _png_read_data($0,$3,7);
 _png_calculate_crc($0,$3,7);
 $18 = (_png_crc_finish($0,0)|0);
 $19 = ($18|0)==(0);
 if (!($19)) {
  STACKTOP = sp;return;
 }
 $20 = ((($3)) + 6|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ((($4)) + 6|0);
 HEAP8[$22>>0] = $21;
 $23 = ((($3)) + 5|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = ((($4)) + 5|0);
 HEAP8[$25>>0] = $24;
 $26 = ((($3)) + 4|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = ((($4)) + 4|0);
 HEAP8[$28>>0] = $27;
 $29 = ((($3)) + 3|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = ((($4)) + 3|0);
 HEAP8[$31>>0] = $30;
 $32 = ((($3)) + 2|0);
 $33 = HEAP8[$32>>0]|0;
 $34 = ((($4)) + 2|0);
 HEAP8[$34>>0] = $33;
 $35 = HEAP8[$3>>0]|0;
 $36 = $35&255;
 $37 = $36 << 8;
 $38 = ((($3)) + 1|0);
 $39 = HEAP8[$38>>0]|0;
 $40 = $39&255;
 $41 = $37 | $40;
 $42 = $41&65535;
 HEAP16[$4>>1] = $42;
 _png_set_tIME($0,$1,$4);
 STACKTOP = sp;return;
}
function _png_set_tIME($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 $4 = ($1|0)==(0|0);
 $or$cond = $3 | $4;
 $5 = ($2|0)==(0|0);
 $or$cond3 = $or$cond | $5;
 if ($or$cond3) {
  return;
 }
 $6 = ((($0)) + 208|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 512;
 $9 = ($8|0)==(0);
 if (!($9)) {
  return;
 }
 $10 = ((($2)) + 2|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = (($11) + -1)<<24>>24;
 $13 = ($12&255)>(11);
 if (!($13)) {
  $14 = ((($2)) + 3|0);
  $15 = HEAP8[$14>>0]|0;
  $16 = (($15) + -1)<<24>>24;
  $17 = ($16&255)>(30);
  if (!($17)) {
   $18 = ((($2)) + 4|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19&255)>(23);
   if (!($20)) {
    $21 = ((($2)) + 5|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = ($22&255)>(59);
    if (!($23)) {
     $24 = ((($2)) + 6|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = ($25&255)>(60);
     if (!($26)) {
      $27 = ((($1)) + 140|0);
      $28 = $2;
      $29 = $28;
      $30 = HEAPU16[$29>>1]|(HEAPU16[$29+2>>1]<<16);
      $31 = (($28) + 4)|0;
      $32 = $31;
      $33 = HEAPU16[$32>>1]|(HEAPU16[$32+2>>1]<<16);
      $34 = $27;
      $35 = $34;
      HEAP16[$35>>1]=$30&65535;HEAP16[$35+2>>1]=$30>>>16;
      $36 = (($34) + 4)|0;
      $37 = $36;
      HEAP16[$37>>1]=$33&65535;HEAP16[$37+2>>1]=$33>>>16;
      $38 = ((($1)) + 8|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = $39 | 512;
      HEAP32[$38>>2] = $40;
      return;
     }
    }
   }
  }
 }
 _png_warning($0,22264);
 return;
}
function _png_handle_tEXt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1$i$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp;
 $4 = ((($0)) + 756|0);
 $5 = HEAP32[$4>>2]|0;
 switch ($5|0) {
 case 0:  {
  break;
 }
 case 1:  {
  (_png_crc_finish($0,$2)|0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  label = 3;
 }
 }
 if ((label|0) == 3) {
  $6 = (($5) + -1)|0;
  HEAP32[$4>>2] = $6;
  $7 = ($6|0)==(1);
  if ($7) {
   (_png_crc_finish($0,$2)|0);
   _png_chunk_benign_error($0,22292);
   STACKTOP = sp;return;
  }
 }
 $8 = ((($0)) + 208|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 & 1;
 $11 = ($10|0)==(0);
 if ($11) {
  _png_chunk_error($0,19821);
  // unreachable;
 }
 $12 = $9 & 4;
 $13 = ($12|0)==(0);
 if (!($13)) {
  $14 = $9 | 8;
  HEAP32[$8>>2] = $14;
 }
 $15 = (($2) + 1)|0;
 $16 = ((($0)) + 788|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  label = 12;
 } else {
  $19 = ((($0)) + 792|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20>>>0)<($15>>>0);
  if ($21) {
   HEAP32[$16>>2] = 0;
   HEAP32[$19>>2] = 0;
   _png_free($0,$17);
   label = 12;
  } else {
   $$1$i$ph = $17;
  }
 }
 do {
  if ((label|0) == 12) {
   $22 = (_png_malloc_base($0,$15)|0);
   $23 = ($22|0)==(0|0);
   if (!($23)) {
    HEAP32[$16>>2] = $22;
    $24 = ((($0)) + 792|0);
    HEAP32[$24>>2] = $15;
    $$1$i$ph = $22;
    break;
   }
   _png_chunk_warning($0,22316);
   _png_chunk_benign_error($0,20444);
   STACKTOP = sp;return;
  }
 } while(0);
 _png_read_data($0,$$1$i$ph,$2);
 _png_calculate_crc($0,$$1$i$ph,$2);
 $25 = (_png_crc_finish($0,0)|0);
 $26 = ($25|0)==(0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = (($$1$i$ph) + ($2)|0);
 HEAP8[$27>>0] = 0;
 $$0 = $$1$i$ph;
 while(1) {
  $28 = HEAP8[$$0>>0]|0;
  $29 = ($28<<24>>24)==(0);
  $30 = ((($$0)) + 1|0);
  if ($29) {
   break;
  } else {
   $$0 = $30;
  }
 }
 $31 = ($$0|0)==($27|0);
 $spec$select = $31 ? $$0 : $30;
 HEAP32[$3>>2] = -1;
 $32 = ((($3)) + 4|0);
 HEAP32[$32>>2] = $$1$i$ph;
 $33 = ((($3)) + 20|0);
 HEAP32[$33>>2] = 0;
 $34 = ((($3)) + 24|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($3)) + 16|0);
 HEAP32[$35>>2] = 0;
 $36 = ((($3)) + 8|0);
 HEAP32[$36>>2] = $spec$select;
 $37 = (_strlen($spec$select)|0);
 $38 = ((($3)) + 12|0);
 HEAP32[$38>>2] = $37;
 $39 = (_png_set_text_2($0,$1,$3,1)|0);
 $40 = ($39|0)==(0);
 if ($40) {
  STACKTOP = sp;return;
 }
 _png_warning($0,22350);
 STACKTOP = sp;return;
}
function _png_set_text_2($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0144 = 0, $$0145 = 0, $$0147156 = 0, $$0148 = 0, $$0150 = 0, $$1146 = 0, $$4 = 0, $$off = 0, $$pre = 0, $$sink159 = 0, $$sink160 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $spec$select = 0, $spec$select158 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 $5 = ($1|0)==(0|0);
 $or$cond = $4 | $5;
 $6 = ($3|0)<(1);
 $or$cond3 = $or$cond | $6;
 $7 = ($2|0)==(0|0);
 $or$cond5 = $7 | $or$cond3;
 if ($or$cond5) {
  $$4 = 0;
  return ($$4|0);
 }
 $8 = ((($1)) + 132|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 128|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (($9) - ($11))|0;
 $13 = ($12|0)<($3|0);
 do {
  if ($13) {
   $14 = (2147483647 - ($11))|0;
   $15 = ($14|0)<($3|0);
   $16 = (($11) + ($3))|0;
   $17 = ($16|0)<(2147483639);
   $18 = (($16) + 8)|0;
   $19 = $18 & -8;
   $$0150 = $17 ? $19 : 2147483647;
   if (!($15)) {
    $20 = (($$0150) - ($11))|0;
    $21 = ((($1)) + 136|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (_png_realloc_array($0,$22,$11,$20,28)|0);
    $24 = ($23|0)==(0|0);
    if (!($24)) {
     $25 = HEAP32[$21>>2]|0;
     _png_free($0,$25);
     HEAP32[$21>>2] = $23;
     $26 = ((($1)) + 232|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = $27 | 16384;
     HEAP32[$26>>2] = $28;
     HEAP32[$8>>2] = $$0150;
     break;
    }
   }
   _png_chunk_report($0,22392,1);
   $$4 = 1;
   return ($$4|0);
  }
 } while(0);
 $29 = ((($1)) + 136|0);
 $$0147156 = 0;
 L12: while(1) {
  $30 = HEAP32[$29>>2]|0;
  $31 = HEAP32[$10>>2]|0;
  $32 = (($30) + (($31*28)|0)|0);
  $33 = (((($2) + (($$0147156*28)|0)|0)) + 4|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = ($34|0)==(0|0);
  do {
   if (!($35)) {
    $36 = (($2) + (($$0147156*28)|0)|0);
    $37 = HEAP32[$36>>2]|0;
    $$off = (($37) + 1)|0;
    $38 = ($$off>>>0)>(3);
    if ($38) {
     _png_chunk_report($0,22413,1);
     break;
    }
    $39 = (_strlen($34)|0);
    $40 = ($37|0)<(1);
    if ($40) {
     $$0144 = 0;$$1146 = 0;
    } else {
     $41 = (((($2) + (($$0147156*28)|0)|0)) + 20|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==(0|0);
     if ($43) {
      $$0145 = 0;
     } else {
      $44 = (_strlen($42)|0);
      $$0145 = $44;
     }
     $45 = (((($2) + (($$0147156*28)|0)|0)) + 24|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = ($46|0)==(0|0);
     if ($47) {
      $$0144 = 0;$$1146 = $$0145;
     } else {
      $48 = (_strlen($46)|0);
      $$0144 = $48;$$1146 = $$0145;
     }
    }
    $49 = (((($2) + (($$0147156*28)|0)|0)) + 8|0);
    $50 = HEAP32[$49>>2]|0;
    $51 = ($50|0)==(0|0);
    if ($51) {
     label = 18;
    } else {
     $52 = HEAP8[$50>>0]|0;
     $53 = ($52<<24>>24)==(0);
     if ($53) {
      label = 18;
     } else {
      $55 = (_strlen($50)|0);
      HEAP32[$32>>2] = $37;
      $$0148 = $55;
     }
    }
    do {
     if ((label|0) == 18) {
      label = 0;
      $54 = ($37|0)>(0);
      if ($54) {
       HEAP32[$32>>2] = 1;
       $$0148 = 0;
       break;
      } else {
       HEAP32[$32>>2] = -1;
       $$0148 = 0;
       break;
      }
     }
    } while(0);
    $56 = (($39) + 4)|0;
    $57 = (($56) + ($$1146))|0;
    $58 = (($57) + ($$0144))|0;
    $59 = (($58) + ($$0148))|0;
    $60 = (_png_malloc_base($0,$59)|0);
    $61 = (((($30) + (($31*28)|0)|0)) + 4|0);
    HEAP32[$61>>2] = $60;
    $62 = ($60|0)==(0|0);
    if ($62) {
     break L12;
    }
    $63 = HEAP32[$33>>2]|0;
    _memcpy(($60|0),($63|0),($39|0))|0;
    $64 = HEAP32[$61>>2]|0;
    $65 = (($64) + ($39)|0);
    HEAP8[$65>>0] = 0;
    $66 = HEAP32[$36>>2]|0;
    $67 = ($66|0)>(0);
    if ($67) {
     $68 = HEAP32[$61>>2]|0;
     $69 = (($68) + ($39)|0);
     $70 = ((($69)) + 1|0);
     $71 = (((($30) + (($31*28)|0)|0)) + 20|0);
     HEAP32[$71>>2] = $70;
     $72 = (((($2) + (($$0147156*28)|0)|0)) + 20|0);
     $73 = HEAP32[$72>>2]|0;
     _memcpy(($70|0),($73|0),($$1146|0))|0;
     $74 = HEAP32[$71>>2]|0;
     $75 = (($74) + ($$1146)|0);
     HEAP8[$75>>0] = 0;
     $76 = HEAP32[$71>>2]|0;
     $77 = (($76) + ($$1146)|0);
     $78 = ((($77)) + 1|0);
     $79 = (((($30) + (($31*28)|0)|0)) + 24|0);
     HEAP32[$79>>2] = $78;
     $80 = (((($2) + (($$0147156*28)|0)|0)) + 24|0);
     $81 = HEAP32[$80>>2]|0;
     _memcpy(($78|0),($81|0),($$0144|0))|0;
     $82 = HEAP32[$79>>2]|0;
     $83 = (($82) + ($$0144)|0);
     HEAP8[$83>>0] = 0;
     $$sink159 = $$0144;$$sink160 = $79;
    } else {
     $84 = (((($30) + (($31*28)|0)|0)) + 20|0);
     HEAP32[$84>>2] = 0;
     $85 = (((($30) + (($31*28)|0)|0)) + 24|0);
     HEAP32[$85>>2] = 0;
     $$sink159 = $39;$$sink160 = $61;
    }
    $86 = HEAP32[$$sink160>>2]|0;
    $87 = (($86) + ($$sink159)|0);
    $88 = ((($87)) + 1|0);
    $89 = (((($30) + (($31*28)|0)|0)) + 8|0);
    HEAP32[$89>>2] = $88;
    $90 = ($$0148|0)==(0);
    if ($90) {
     $93 = $88;
    } else {
     $91 = HEAP32[$49>>2]|0;
     _memcpy(($88|0),($91|0),($$0148|0))|0;
     $$pre = HEAP32[$89>>2]|0;
     $93 = $$pre;
    }
    $92 = (($93) + ($$0148)|0);
    HEAP8[$92>>0] = 0;
    $94 = HEAP32[$32>>2]|0;
    $95 = ($94|0)>(0);
    $96 = (((($30) + (($31*28)|0)|0)) + 12|0);
    $spec$select = $95 ? 0 : $$0148;
    $spec$select158 = $95 ? $$0148 : 0;
    HEAP32[$96>>2] = $spec$select;
    $97 = (((($30) + (($31*28)|0)|0)) + 16|0);
    HEAP32[$97>>2] = $spec$select158;
    $98 = HEAP32[$10>>2]|0;
    $99 = (($98) + 1)|0;
    HEAP32[$10>>2] = $99;
   }
  } while(0);
  $100 = (($$0147156) + 1)|0;
  $101 = ($100|0)<($3|0);
  if ($101) {
   $$0147156 = $100;
  } else {
   $$4 = 0;
   label = 31;
   break;
  }
 }
 if ((label|0) == 31) {
  return ($$4|0);
 }
 _png_chunk_report($0,22451,1);
 $$4 = 1;
 return ($$4|0);
}
function _png_handle_zTXt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$055 = 0, $$1$i$ph = 0, $$252 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 28|0;
 $4 = sp;
 $5 = ((($0)) + 756|0);
 $6 = HEAP32[$5>>2]|0;
 switch ($6|0) {
 case 0:  {
  break;
 }
 case 1:  {
  (_png_crc_finish($0,$2)|0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  label = 3;
 }
 }
 if ((label|0) == 3) {
  $7 = (($6) + -1)|0;
  HEAP32[$5>>2] = $7;
  $8 = ($7|0)==(1);
  if ($8) {
   (_png_crc_finish($0,$2)|0);
   _png_chunk_benign_error($0,22292);
   STACKTOP = sp;return;
  }
 }
 $9 = ((($0)) + 208|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _png_chunk_error($0,19821);
  // unreachable;
 }
 $13 = $10 & 4;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $15 = $10 | 8;
  HEAP32[$9>>2] = $15;
 }
 $16 = ((($0)) + 788|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)==(0|0);
 if ($18) {
  label = 12;
 } else {
  $19 = ((($0)) + 792|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20>>>0)<($2>>>0);
  if ($21) {
   HEAP32[$16>>2] = 0;
   HEAP32[$19>>2] = 0;
   _png_free($0,$17);
   label = 12;
  } else {
   $$1$i$ph = $17;
  }
 }
 do {
  if ((label|0) == 12) {
   $22 = (_png_malloc_base($0,$2)|0);
   $23 = ($22|0)==(0|0);
   if (!($23)) {
    HEAP32[$16>>2] = $22;
    $24 = ((($0)) + 792|0);
    HEAP32[$24>>2] = $2;
    $$1$i$ph = $22;
    break;
   }
   (_png_crc_finish($0,$2)|0);
   _png_chunk_benign_error($0,20444);
   STACKTOP = sp;return;
  }
 } while(0);
 _png_read_data($0,$$1$i$ph,$2);
 _png_calculate_crc($0,$$1$i$ph,$2);
 $25 = (_png_crc_finish($0,0)|0);
 $26 = ($25|0)==(0);
 if (!($26)) {
  STACKTOP = sp;return;
 }
 $27 = ($2|0)==(0);
 do {
  if ($27) {
   $$252 = 20432;
  } else {
   $$055 = 0;
   while(1) {
    $28 = (($$1$i$ph) + ($$055)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = ($29<<24>>24)==(0);
    if ($30) {
     $$0$lcssa = $$055;
     break;
    }
    $31 = (($$055) + 1)|0;
    $32 = ($31>>>0)<($2>>>0);
    if ($32) {
     $$055 = $31;
    } else {
     $$0$lcssa = $31;
     break;
    }
   }
   $33 = (($$0$lcssa) + -1)|0;
   $34 = ($33>>>0)>(78);
   if ($34) {
    $$252 = 20432;
   } else {
    $35 = (($$0$lcssa) + 3)|0;
    $36 = ($35>>>0)>($2>>>0);
    if ($36) {
     $$252 = 21248;
    } else {
     $37 = (($$0$lcssa) + 1)|0;
     $38 = (($$1$i$ph) + ($37)|0);
     $39 = HEAP8[$38>>0]|0;
     $40 = ($39<<24>>24)==(0);
     if ($40) {
      HEAP32[$3>>2] = -1;
      $41 = (($$0$lcssa) + 2)|0;
      $42 = (_png_decompress_chunk($0,$2,$41,$3)|0);
      $43 = ($42|0)==(1);
      if ($43) {
       $44 = HEAP32[$16>>2]|0;
       $45 = HEAP32[$3>>2]|0;
       $46 = (($45) + ($41))|0;
       $47 = (($44) + ($46)|0);
       HEAP8[$47>>0] = 0;
       HEAP32[$4>>2] = 0;
       $48 = ((($4)) + 4|0);
       HEAP32[$48>>2] = $44;
       $49 = (($44) + ($$0$lcssa)|0);
       $50 = ((($49)) + 2|0);
       $51 = ((($4)) + 8|0);
       HEAP32[$51>>2] = $50;
       $52 = ((($4)) + 12|0);
       HEAP32[$52>>2] = $45;
       $53 = ((($4)) + 16|0);
       HEAP32[$53>>2] = 0;
       $54 = ((($4)) + 20|0);
       HEAP32[$54>>2] = 0;
       $55 = ((($4)) + 24|0);
       HEAP32[$55>>2] = 0;
       $56 = (_png_set_text_2($0,$1,$4,1)|0);
       $57 = ($56|0)==(0);
       if (!($57)) {
        $$252 = 28710;
        break;
       }
       STACKTOP = sp;return;
      } else {
       $58 = ((($0)) + 248|0);
       $59 = HEAP32[$58>>2]|0;
       $60 = ($59|0)==(0|0);
       if (!($60)) {
        $$252 = $59;
        break;
       }
       STACKTOP = sp;return;
      }
     } else {
      $$252 = 22477;
     }
    }
   }
  }
 } while(0);
 _png_chunk_benign_error($0,$$252);
 STACKTOP = sp;return;
}
function _png_decompress_chunk($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$060$us$i6 = 0, $$084 = 0, $$08526 = 0, $$086 = 0, $$2 = 0, $$327 = 0, $$lcssa16$i = 0, $$lcssa17$i11 = 0, $$lcssa215$i12 = 0, $$pre = 0, $$pre$i2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $cond = 0, $cond28 = 0, $or$cond = 0, $spec$select1$us$i7 = 0, $spec$select1$us$peel$i3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1024|0);
 $4 = sp;
 $5 = ((($0)) + 760|0);
 $6 = HEAP32[$5>>2]|0;
 switch ($6|0) {
 case -1: case 0:  {
  $7 = (($2) + 1)|0;
  $$08526 = -1;$11 = $7;
  break;
 }
 default: {
  $8 = (($2) + 1)|0;
  $9 = ($6>>>0)<($8>>>0);
  if ($9) {
   _png_zstream_error($0,-4);
   $$0 = -4;
   STACKTOP = sp;return ($$0|0);
  } else {
   $$08526 = $6;$11 = $8;
  }
 }
 }
 $10 = (($$08526) - ($11))|0;
 $12 = HEAP32[$3>>2]|0;
 $13 = ($10>>>0)<($12>>>0);
 if ($13) {
  HEAP32[$3>>2] = $10;
 }
 $14 = ((($0)) + 376|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (_png_inflate_claim($0,$15)|0);
 switch ($16|0) {
 case 0:  {
  $17 = (($1) - ($2))|0;
  $18 = HEAP32[$14>>2]|0;
  $19 = ((($0)) + 788|0);
  $20 = ((($0)) + 220|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==($18|0);
  do {
   if ($22) {
    $23 = HEAP32[$19>>2]|0;
    $24 = (($23) + ($2)|0);
    $25 = HEAP32[$3>>2]|0;
    $26 = ((($0)) + 224|0);
    HEAP32[$26>>2] = $24;
    $27 = ((($0)) + 228|0);
    $28 = ((($0)) + 240|0);
    $$pre$i2 = ((($0)) + 236|0);
    HEAP32[$27>>2] = $17;
    HEAP32[$$pre$i2>>2] = $4;
    $29 = ($25>>>0)<(1024);
    $spec$select1$us$peel$i3 = $29 ? $25 : 1024;
    HEAP32[$28>>2] = $spec$select1$us$peel$i3;
    $30 = (($25) - ($spec$select1$us$peel$i3))|0;
    $31 = ($30|0)==(0);
    $32 = $31 ? 4 : 0;
    $33 = (_inflate($26,$32)|0);
    $34 = ($33|0)==(0);
    if ($34) {
     $$060$us$i6 = $30;
     while(1) {
      $35 = HEAP32[$28>>2]|0;
      $36 = (($35) + ($$060$us$i6))|0;
      HEAP32[$$pre$i2>>2] = $4;
      $37 = ($36>>>0)<(1024);
      $spec$select1$us$i7 = $37 ? $36 : 1024;
      HEAP32[$28>>2] = $spec$select1$us$i7;
      $38 = (($36) - ($spec$select1$us$i7))|0;
      $39 = ($38|0)==(0);
      $40 = $39 ? 4 : 0;
      $41 = (_inflate($26,$40)|0);
      $42 = ($41|0)==(0);
      if ($42) {
       $$060$us$i6 = $38;
      } else {
       $$lcssa17$i11 = $41;$$lcssa215$i12 = $38;
       break;
      }
     }
    } else {
     $$lcssa17$i11 = $33;$$lcssa215$i12 = $30;
    }
    HEAP32[$$pre$i2>>2] = 0;
    $43 = HEAP32[$27>>2]|0;
    $44 = HEAP32[$28>>2]|0;
    $45 = (($44) + ($$lcssa215$i12))|0;
    $46 = ($45|0)==(0);
    if (!($46)) {
     $47 = HEAP32[$3>>2]|0;
     $48 = (($47) - ($45))|0;
     HEAP32[$3>>2] = $48;
    }
    $49 = (($17) - ($43))|0;
    _png_zstream_error($0,$$lcssa17$i11);
    $cond = ($$lcssa17$i11|0)==(1);
    if ($cond) {
     $51 = (_inflateReset($26)|0);
     $52 = ($51|0)==(0);
     if (!($52)) {
      _png_zstream_error($0,1);
      $$2 = -7;
      break;
     }
     $53 = HEAP32[$3>>2]|0;
     $54 = (($2) + 1)|0;
     $55 = (($54) + ($53))|0;
     $56 = (_png_malloc_base($0,$55)|0);
     $57 = ($56|0)==(0|0);
     if ($57) {
      _png_zstream_error($0,-4);
      $$2 = -4;
      break;
     }
     $58 = HEAP32[$14>>2]|0;
     $59 = HEAP32[$20>>2]|0;
     $60 = ($59|0)==($58|0);
     if ($60) {
      $61 = (($56) + ($2)|0);
      $62 = HEAP32[$19>>2]|0;
      $63 = (($62) + ($2)|0);
      $64 = HEAP32[$3>>2]|0;
      HEAP32[$26>>2] = $63;
      HEAP32[$$pre$i2>>2] = $61;
      HEAP32[$27>>2] = $49;
      HEAP32[$28>>2] = $64;
      $65 = (_inflate($26,4)|0);
      $66 = ($65|0)==(0);
      if ($66) {
       while(1) {
        $67 = (_inflate($26,4)|0);
        $68 = ($67|0)==(0);
        if (!($68)) {
         $$lcssa16$i = $67;
         break;
        }
       }
      } else {
       $$lcssa16$i = $65;
      }
      $69 = HEAP32[$27>>2]|0;
      $70 = HEAP32[$28>>2]|0;
      $71 = ($70|0)==(0);
      if (!($71)) {
       $72 = HEAP32[$3>>2]|0;
       $73 = (($72) - ($70))|0;
       HEAP32[$3>>2] = $73;
      }
      $74 = (($49) - ($69))|0;
      _png_zstream_error($0,$$lcssa16$i);
      $cond28 = ($$lcssa16$i|0)==(1);
      if ($cond28) {
       $76 = HEAP32[$3>>2]|0;
       $77 = ($53|0)==($76|0);
       if ($77) {
        $78 = (($53) + ($2))|0;
        $79 = (($56) + ($78)|0);
        HEAP8[$79>>0] = 0;
        $80 = ($2|0)==(0);
        $$pre = HEAP32[$19>>2]|0;
        if (!($80)) {
         _memcpy(($56|0),($$pre|0),($2|0))|0;
        }
        HEAP32[$19>>2] = $56;
        $81 = ((($0)) + 792|0);
        HEAP32[$81>>2] = $55;
        $$084 = $$pre;$$086 = 1;$$327 = $74;
       } else {
        $$084 = $56;$$086 = -7;$$327 = $74;
       }
      } else {
       $$084 = $56;$$086 = $$lcssa16$i;$$327 = $74;
      }
     } else {
      $75 = ((($0)) + 248|0);
      HEAP32[$75>>2] = 20369;
      $$084 = $56;$$086 = -2;$$327 = $49;
     }
     _png_free($0,$$084);
     $82 = ($$086|0)!=(1);
     $83 = ($17|0)==($$327|0);
     $or$cond = $83 | $82;
     if ($or$cond) {
      $$2 = $$086;
     } else {
      _png_chunk_benign_error($0,20387);
      $$2 = 1;
     }
    } else {
     $$2 = $$lcssa17$i11;
    }
   } else {
    $50 = ((($0)) + 248|0);
    HEAP32[$50>>2] = 20369;
    $$2 = -2;
   }
  } while(0);
  HEAP32[$20>>2] = 0;
  $$0 = $$2;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 case 1:  {
  $$0 = -7;
  STACKTOP = sp;return ($$0|0);
  break;
 }
 default: {
  $$0 = $16;
  STACKTOP = sp;return ($$0|0);
 }
 }
 return (0)|0;
}
function _png_handle_iTXt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$09197 = 0, $$092$lcssa = 0, $$092113 = 0, $$1$i$ph = 0, $$193$lcssa = 0, $$193108 = 0, $$2$ph = 0, $$294$lcssa = 0, $$294105 = 0, $$3102 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $or$cond = 0, $or$cond95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 28|0;
 $4 = sp;
 $5 = ((($0)) + 756|0);
 $6 = HEAP32[$5>>2]|0;
 switch ($6|0) {
 case 0:  {
  break;
 }
 case 1:  {
  (_png_crc_finish($0,$2)|0);
  STACKTOP = sp;return;
  break;
 }
 default: {
  label = 3;
 }
 }
 if ((label|0) == 3) {
  $7 = (($6) + -1)|0;
  HEAP32[$5>>2] = $7;
  $8 = ($7|0)==(1);
  if ($8) {
   (_png_crc_finish($0,$2)|0);
   _png_chunk_benign_error($0,22292);
   STACKTOP = sp;return;
  }
 }
 $9 = ((($0)) + 208|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _png_chunk_error($0,19821);
  // unreachable;
 }
 $13 = $10 & 4;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $15 = $10 | 8;
  HEAP32[$9>>2] = $15;
 }
 $16 = (($2) + 1)|0;
 $17 = ((($0)) + 788|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(0|0);
 if ($19) {
  label = 12;
 } else {
  $20 = ((($0)) + 792|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21>>>0)<($16>>>0);
  if ($22) {
   HEAP32[$17>>2] = 0;
   HEAP32[$20>>2] = 0;
   _png_free($0,$18);
   label = 12;
  } else {
   $$1$i$ph = $18;
  }
 }
 do {
  if ((label|0) == 12) {
   $23 = (_png_malloc_base($0,$16)|0);
   $24 = ($23|0)==(0|0);
   if (!($24)) {
    HEAP32[$17>>2] = $23;
    $25 = ((($0)) + 792|0);
    HEAP32[$25>>2] = $16;
    $$1$i$ph = $23;
    break;
   }
   _png_chunk_warning($0,22316);
   (_png_crc_finish($0,$2)|0);
   _png_chunk_benign_error($0,20444);
   STACKTOP = sp;return;
  }
 } while(0);
 _png_read_data($0,$$1$i$ph,$2);
 _png_calculate_crc($0,$$1$i$ph,$2);
 $26 = (_png_crc_finish($0,0)|0);
 $27 = ($26|0)==(0);
 if (!($27)) {
  STACKTOP = sp;return;
 }
 $28 = ($2|0)==(0);
 L28: do {
  if ($28) {
   $$3102 = 20432;
  } else {
   $$092113 = 0;
   while(1) {
    $29 = (($$1$i$ph) + ($$092113)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = ($30<<24>>24)==(0);
    if ($31) {
     $$092$lcssa = $$092113;
     break;
    }
    $32 = (($$092113) + 1)|0;
    $33 = ($32>>>0)<($2>>>0);
    if ($33) {
     $$092113 = $32;
    } else {
     $$092$lcssa = $32;
     break;
    }
   }
   $34 = (($$092$lcssa) + -1)|0;
   $35 = ($34>>>0)>(78);
   if ($35) {
    $$3102 = 20432;
   } else {
    $36 = (($$092$lcssa) + 5)|0;
    $37 = ($36>>>0)>($2>>>0);
    if ($37) {
     $$3102 = 21248;
    } else {
     $38 = (($$092$lcssa) + 1)|0;
     $39 = (($$1$i$ph) + ($38)|0);
     $40 = HEAP8[$39>>0]|0;
     switch ($40<<24>>24) {
     case 0:  {
      break;
     }
     case 1:  {
      $41 = (($$092$lcssa) + 2)|0;
      $42 = (($$1$i$ph) + ($41)|0);
      $43 = HEAP8[$42>>0]|0;
      $44 = ($43<<24>>24)==(0);
      if (!($44)) {
       $$3102 = 22502;
       break L28;
      }
      break;
     }
     default: {
      $$3102 = 22502;
      break L28;
     }
     }
     $45 = ($40<<24>>24)!=(0);
     HEAP32[$3>>2] = 0;
     $46 = (($$092$lcssa) + 3)|0;
     $47 = ($46>>>0)<($2>>>0);
     L39: do {
      if ($47) {
       $$193108 = $46;
       while(1) {
        $48 = (($$1$i$ph) + ($$193108)|0);
        $49 = HEAP8[$48>>0]|0;
        $50 = ($49<<24>>24)==(0);
        if ($50) {
         $$193$lcssa = $$193108;
         break L39;
        }
        $51 = (($$193108) + 1)|0;
        $52 = ($51>>>0)<($2>>>0);
        if ($52) {
         $$193108 = $51;
        } else {
         $$193$lcssa = $51;
         break;
        }
       }
      } else {
       $$193$lcssa = $46;
      }
     } while(0);
     $53 = (($$193$lcssa) + 1)|0;
     $54 = ($53>>>0)<($2>>>0);
     L45: do {
      if ($54) {
       $$294105 = $53;
       while(1) {
        $55 = (($$1$i$ph) + ($$294105)|0);
        $56 = HEAP8[$55>>0]|0;
        $57 = ($56<<24>>24)==(0);
        if ($57) {
         $$294$lcssa = $$294105;
         break L45;
        }
        $58 = (($$294105) + 1)|0;
        $59 = ($58>>>0)<($2>>>0);
        if ($59) {
         $$294105 = $58;
        } else {
         $$294$lcssa = $58;
         break;
        }
       }
      } else {
       $$294$lcssa = $53;
      }
     } while(0);
     $60 = (($$294$lcssa) + 1)|0;
     $61 = ($60>>>0)>($2>>>0);
     $or$cond = $45 | $61;
     do {
      if ($or$cond) {
       $63 = ($60>>>0)<($2>>>0);
       $or$cond95 = $45 & $63;
       if ($or$cond95) {
        HEAP32[$3>>2] = -1;
        $64 = (_png_decompress_chunk($0,$2,$60,$3)|0);
        $65 = ($64|0)==(1);
        if ($65) {
         $66 = HEAP32[$17>>2]|0;
         $$09197 = $66;
         label = 38;
         break;
        } else {
         $67 = ((($0)) + 248|0);
         $68 = HEAP32[$67>>2]|0;
         $69 = ($68|0)==(0|0);
         if ($69) {
          $$09197 = $$1$i$ph;
          label = 38;
          break;
         } else {
          $$2$ph = $68;
          break;
         }
        }
       } else {
        $$2$ph = 21248;
       }
      } else {
       $62 = (($2) - ($60))|0;
       HEAP32[$3>>2] = $62;
       $$09197 = $$1$i$ph;
       label = 38;
      }
     } while(0);
     if ((label|0) == 38) {
      $70 = HEAP32[$3>>2]|0;
      $71 = (($70) + ($60))|0;
      $72 = (($$09197) + ($71)|0);
      HEAP8[$72>>0] = 0;
      $$ = $45 ? 2 : 1;
      HEAP32[$4>>2] = $$;
      $73 = ((($4)) + 4|0);
      HEAP32[$73>>2] = $$09197;
      $74 = (($$09197) + ($46)|0);
      $75 = ((($4)) + 20|0);
      HEAP32[$75>>2] = $74;
      $76 = (($$09197) + ($53)|0);
      $77 = ((($4)) + 24|0);
      HEAP32[$77>>2] = $76;
      $78 = (($$09197) + ($60)|0);
      $79 = ((($4)) + 8|0);
      HEAP32[$79>>2] = $78;
      $80 = ((($4)) + 12|0);
      HEAP32[$80>>2] = 0;
      $81 = HEAP32[$3>>2]|0;
      $82 = ((($4)) + 16|0);
      HEAP32[$82>>2] = $81;
      $83 = (_png_set_text_2($0,$1,$4,1)|0);
      $84 = ($83|0)==(0);
      if ($84) {
       STACKTOP = sp;return;
      } else {
       $$2$ph = 28710;
      }
     }
     $$3102 = $$2$ph;
    }
   }
  }
 } while(0);
 _png_chunk_benign_error($0,$$3102);
 STACKTOP = sp;return;
}
function _png_handle_unknown($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$1 = 0, $$2 = 0, $$243 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 684|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 do {
  if ($6) {
   $18 = ($3|0)==(0);
   if ($18) {
    $19 = ((($0)) + 688|0);
    $20 = HEAP32[$19>>2]|0;
    $$1 = $20;
   } else {
    $$1 = $3;
   }
   switch ($$1|0) {
   case 3:  {
    label = 13;
    break;
   }
   case 2:  {
    $21 = ((($0)) + 376|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $22 & 536870912;
    $24 = ($23|0)==(0);
    if ($24) {
     label = 14;
    } else {
     label = 13;
    }
    break;
   }
   default: {
    label = 14;
   }
   }
   if ((label|0) == 13) {
    $25 = (_png_cache_unknown_chunk($0,$2)|0);
    $26 = ($25|0)==(0);
    $spec$select = $26 ? 1 : $$1;
    $$2 = $spec$select;
    label = 15;
    break;
   }
   else if ((label|0) == 14) {
    (_png_crc_finish($0,$2)|0);
    $$2 = $$1;
    label = 15;
    break;
   }
  } else {
   $7 = (_png_cache_unknown_chunk($0,$2)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    $$243 = 0;
   } else {
    $9 = HEAP32[$4>>2]|0;
    $10 = ((($0)) + 764|0);
    $11 = (FUNCTION_TABLE_iii[$9 & 63]($0,$10)|0);
    $12 = ($11|0)<(0);
    if ($12) {
     _png_chunk_error($0,22523);
     // unreachable;
    }
    $13 = ($11|0)==(0);
    if ($13) {
     $14 = ($3|0)<(2);
     if ($14) {
      $15 = ((($0)) + 688|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = ($16|0)<(2);
      if ($17) {
       _png_chunk_warning($0,22543);
       _png_app_warning($0,22565);
       label = 16;
      } else {
       label = 16;
      }
     } else {
      $$2 = $3;
      label = 15;
     }
    } else {
     $$243 = 1;
    }
   }
  }
 } while(0);
 if ((label|0) == 15) {
  switch ($$2|0) {
  case 3:  {
   label = 17;
   break;
  }
  case 2:  {
   label = 16;
   break;
  }
  default: {
   $$243 = 0;
  }
  }
 }
 if ((label|0) == 16) {
  $27 = ((($0)) + 376|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $28 & 536870912;
  $30 = ($29|0)==(0);
  if ($30) {
   $$243 = 0;
  } else {
   label = 17;
  }
 }
 L23: do {
  if ((label|0) == 17) {
   $31 = ((($0)) + 756|0);
   $32 = HEAP32[$31>>2]|0;
   switch ($32|0) {
   case 1:  {
    $$243 = 0;
    break L23;
    break;
   }
   case 2:  {
    HEAP32[$31>>2] = 1;
    _png_chunk_benign_error($0,22292);
    $$243 = 0;
    break L23;
    break;
   }
   case 0:  {
    break;
   }
   default: {
    $33 = (($32) + -1)|0;
    HEAP32[$31>>2] = $33;
   }
   }
   $34 = ((($0)) + 764|0);
   _png_set_unknown_chunks($0,$1,$34,1);
   $$243 = 1;
  }
 } while(0);
 $35 = ((($0)) + 772|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if (!($37)) {
  _png_free($0,$36);
 }
 HEAP32[$35>>2] = 0;
 $38 = ($$243|0)==(0);
 if (!($38)) {
  return;
 }
 $39 = ((($0)) + 376|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = $40 & 536870912;
 $42 = ($41|0)==(0);
 if ($42) {
  _png_chunk_error($0,22641);
  // unreachable;
 } else {
  return;
 }
}
function _png_cache_unknown_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$039 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 772|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if (!($4)) {
  _png_free($0,$3);
  HEAP32[$2>>2] = 0;
 }
 $5 = ((($0)) + 760|0);
 $6 = HEAP32[$5>>2]|0;
 switch ($6|0) {
 case -1: case 0:  {
  label = 5;
  break;
 }
 default: {
  $7 = ($6>>>0)<($1>>>0);
  if (!($7)) {
   label = 5;
  }
 }
 }
 do {
  if ((label|0) == 5) {
   $8 = ((($0)) + 376|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = $9 >>> 24;
   $11 = $10&255;
   $12 = ((($0)) + 764|0);
   HEAP8[$12>>0] = $11;
   $13 = $9 >>> 16;
   $14 = $13&255;
   $15 = ((($0)) + 765|0);
   HEAP8[$15>>0] = $14;
   $16 = $9 >>> 8;
   $17 = $16&255;
   $18 = ((($0)) + 766|0);
   HEAP8[$18>>0] = $17;
   $19 = $9&255;
   $20 = ((($0)) + 767|0);
   HEAP8[$20>>0] = $19;
   $21 = ((($0)) + 768|0);
   HEAP8[$21>>0] = 0;
   $22 = ((($0)) + 776|0);
   HEAP32[$22>>2] = $1;
   $23 = ((($0)) + 208|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = $24&255;
   $26 = ((($0)) + 780|0);
   HEAP8[$26>>0] = $25;
   $27 = ($1|0)==(0);
   if ($27) {
    HEAP32[$2>>2] = 0;
   } else {
    $28 = (_png_malloc_warn($0,$1)|0);
    HEAP32[$2>>2] = $28;
    $29 = ($28|0)==(0|0);
    if ($29) {
     break;
    }
    _png_read_data($0,$28,$1);
    _png_calculate_crc($0,$28,$1);
   }
   (_png_crc_finish($0,0)|0);
   $$039 = 1;
   return ($$039|0);
  }
 } while(0);
 (_png_crc_finish($0,$1)|0);
 _png_chunk_benign_error($0,22814);
 $$039 = 0;
 return ($$039|0);
}
function _png_app_warning($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 212|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 2097152;
 $5 = ($4|0)==(0);
 if ($5) {
  _png_error($0,$1);
  // unreachable;
 } else {
  _png_warning($0,$1);
  return;
 }
}
function _png_set_unknown_chunks($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$04548 = 0, $$04647 = 0, $$049 = 0, $$1 = 0, $$1$i = 0, $$1$i$ph = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 $5 = ($1|0)==(0|0);
 $or$cond = $4 | $5;
 $6 = ($3|0)<(1);
 $or$cond3 = $or$cond | $6;
 $7 = ($2|0)==(0|0);
 $or$cond5 = $7 | $or$cond3;
 if ($or$cond5) {
  return;
 }
 $8 = ((($1)) + 236|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($1)) + 240|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (_png_realloc_array($0,$9,$11,$3,20)|0);
 $13 = ($12|0)==(0|0);
 if ($13) {
  _png_chunk_report($0,22666,1);
  return;
 }
 $14 = HEAP32[$8>>2]|0;
 _png_free($0,$14);
 HEAP32[$8>>2] = $12;
 $15 = ((($1)) + 232|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = $16 | 512;
 HEAP32[$15>>2] = $17;
 $18 = HEAP32[$10>>2]|0;
 $19 = (($12) + (($18*20)|0)|0);
 $20 = ((($0)) + 208|0);
 $$04548 = $3;$$04647 = $2;$$049 = $19;
 while(1) {
  $21 = HEAP32[$$04647>>2]|0;
  HEAP32[$$049>>2] = $21;
  $22 = ((($$049)) + 4|0);
  HEAP8[$22>>0] = 0;
  $23 = ((($$04647)) + 16|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 & 11;
  $26 = $25&255;
  $27 = ($25<<24>>24)==(0);
  if ($27) {
   $28 = HEAP32[$20>>2]|0;
   $29 = $28 & 32768;
   $30 = ($29|0)==(0);
   if (!($30)) {
    label = 9;
    break;
   }
   _png_app_warning($0,22690);
   $31 = HEAP32[$20>>2]|0;
   $32 = $31 & 11;
   $33 = ($32|0)==(0);
   if ($33) {
    label = 9;
    break;
   } else {
    $$1$i$ph = $32;
   }
  } else {
   $$1$i$ph = $26;
  }
  $$1$i = $$1$i$ph;
  while(1) {
   $34 = (0 - ($$1$i))|0;
   $35 = $$1$i & $34;
   $36 = ($$1$i|0)==($35|0);
   $37 = $35 ^ $$1$i;
   if ($36) {
    break;
   } else {
    $$1$i = $37;
   }
  }
  $38 = $$1$i&255;
  $39 = ((($$049)) + 16|0);
  HEAP8[$39>>0] = $38;
  $40 = ((($$04647)) + 12|0);
  $41 = HEAP32[$40>>2]|0;
  $42 = ($41|0)==(0);
  do {
   if ($42) {
    $43 = ((($$049)) + 8|0);
    HEAP32[$43>>2] = 0;
    $$sink = 0;
    label = 16;
   } else {
    $44 = (_png_malloc_base($0,$41)|0);
    $45 = ((($$049)) + 8|0);
    HEAP32[$45>>2] = $44;
    $46 = ($44|0)==(0|0);
    if ($46) {
     _png_chunk_report($0,22785,1);
     $$1 = $$049;
     break;
    } else {
     $47 = ((($$04647)) + 8|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = HEAP32[$40>>2]|0;
     _memcpy(($44|0),($48|0),($49|0))|0;
     $50 = HEAP32[$40>>2]|0;
     $$sink = $50;
     label = 16;
     break;
    }
   }
  } while(0);
  if ((label|0) == 16) {
   label = 0;
   $51 = ((($$049)) + 12|0);
   HEAP32[$51>>2] = $$sink;
   $52 = ((($$049)) + 20|0);
   $53 = HEAP32[$10>>2]|0;
   $54 = (($53) + 1)|0;
   HEAP32[$10>>2] = $54;
   $$1 = $52;
  }
  $55 = (($$04548) + -1)|0;
  $56 = ((($$04647)) + 20|0);
  $57 = ($$04548|0)>(1);
  if ($57) {
   $$04548 = $55;$$04647 = $56;$$049 = $$1;
  } else {
   label = 18;
   break;
  }
 }
 if ((label|0) == 9) {
  _png_error($0,22742);
  // unreachable;
 }
 else if ((label|0) == 18) {
  return;
 }
}
function _png_combine_row($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0252 = 0, $$0253 = 0, $$0256 = 0, $$0259 = 0, $$0260 = 0, $$0263 = 0, $$0266 = 0, $$0274 = 0, $$0285 = 0, $$0285$in = 0, $$0287 = 0, $$0291 = 0, $$0292 = 0, $$10 = 0, $$11341 = 0, $$1254 = 0, $$1257 = 0, $$1261 = 0, $$1264 = 0;
 var $$1283340 = 0, $$1286 = 0, $$2268345 = 0, $$2276344 = 0, $$2346 = 0, $$3 = 0, $$3269 = 0, $$3277 = 0, $$4270349 = 0, $$4278348 = 0, $$4350 = 0, $$5 = 0, $$5271 = 0, $$5279 = 0, $$6 = 0, $$6272 = 0, $$7273342 = 0, $$7281 = 0, $$7343 = 0, $$8 = 0;
 var $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $spec$select = 0, $spec$select304 = 0, $spec$select314 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 443|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = ((($0)) + 384|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ((($7)) + 1|0);
 $9 = ((($0)) + 348|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 433|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = ($4<<24>>24)==(0);
 if ($14) {
  _png_error($0,22850);
  // unreachable;
 }
 $15 = ((($0)) + 404|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 if (!($17)) {
  $18 = ($4&255)>(7);
  if ($18) {
   $19 = $5 >>> 3;
   $20 = Math_imul($10, $19)|0;
   $25 = $20;
  } else {
   $21 = Math_imul($10, $5)|0;
   $22 = (($21) + 7)|0;
   $23 = $22 >>> 3;
   $25 = $23;
  }
  $24 = ($16|0)==($25|0);
  if (!($24)) {
   _png_error($0,22875);
   // unreachable;
  }
 }
 $26 = ($10|0)==(0);
 if ($26) {
  _png_error($0,22911);
  // unreachable;
 }
 $27 = Math_imul($10, $5)|0;
 $28 = $27 & 7;
 $29 = ($28|0)==(0);
 do {
  if ($29) {
   $$0287 = 0;$$0291 = 0;$$0292 = 0;
  } else {
   $30 = ($4&255)>(7);
   $31 = $5 >>> 3;
   $32 = Math_imul($10, $31)|0;
   $33 = (($27) + 7)|0;
   $34 = $33 >>> 3;
   $35 = $30 ? $32 : $34;
   $36 = (($1) + ($35)|0);
   $37 = ((($36)) + -1|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = ((($0)) + 216|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = $40 & 65536;
   $42 = ($41|0)==(0);
   if ($42) {
    $44 = 255 >>> $28;
    $$0287 = $37;$$0291 = $44;$$0292 = $38;
    break;
   } else {
    $43 = 255 << $28;
    $$0287 = $37;$$0291 = $43;$$0292 = $38;
    break;
   }
  }
 } while(0);
 $45 = ((($0)) + 432|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = ($46<<24>>24)==(0);
 L21: do {
  if ($47) {
   label = 70;
  } else {
   $48 = ((($0)) + 216|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $49 & 2;
   $51 = ($50|0)!=(0);
   $52 = ($12&255)<(6);
   $or$cond = $52 & $51;
   if ($or$cond) {
    switch ($2|0) {
    case 0:  {
     $$pre = $13 & 1;
     $$pre$phiZ2D = $$pre;
     break;
    }
    case 1:  {
     $53 = $13 & 1;
     $54 = ($53|0)==(0);
     if ($54) {
      label = 70;
      break L21;
     } else {
      $$pre$phiZ2D = 1;
     }
     break;
    }
    default: {
     label = 70;
     break L21;
    }
    }
    $55 = (($13) + 1)|0;
    $56 = $55 >>> 1;
    $57 = (3 - ($56))|0;
    $58 = $$pre$phiZ2D << $57;
    $59 = $58 & 7;
    $60 = ($10>>>0)>($59>>>0);
    if (!($60)) {
     return;
    }
    $61 = ($4&255)<(8);
    if ($61) {
     $62 = (8 / ($5>>>0))&-1;
     $63 = $49 & 65536;
     $64 = ($63|0)==(0);
     $65 = ($2|0)!=(0);
     $66 = ($4<<24>>24)==(1);
     $67 = ($4<<24>>24)==(2);
     $68 = $67 ? 1 : 2;
     $69 = $66 ? 0 : $68;
     do {
      if ($64) {
       if ($65) {
        $73 = $13 >>> 1;
        $74 = ((656 + (($69*12)|0)|0) + ($73<<2)|0);
        $$0285$in = $74;
        break;
       } else {
        $75 = ((764 + (($69*24)|0)|0) + ($13<<2)|0);
        $$0285$in = $75;
        break;
       }
      } else {
       if ($65) {
        $70 = $13 >>> 1;
        $71 = ((620 + (($69*12)|0)|0) + ($70<<2)|0);
        $$0285$in = $71;
        break;
       } else {
        $72 = ((692 + (($69*24)|0)|0) + ($13<<2)|0);
        $$0285$in = $72;
        break;
       }
      }
     } while(0);
     $$0285 = HEAP32[$$0285$in>>2]|0;
     $$0252 = $1;$$0266 = $8;$$0274 = $10;$$1286 = $$0285;
     while(1) {
      $76 = $$1286 >>> 8;
      $77 = $$1286 << 24;
      $78 = $76 | $77;
      $trunc = $$1286&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       break;
      }
      case -1:  {
       $88 = HEAP8[$$0266>>0]|0;
       $$sink = $88;
       label = 33;
       break;
      }
      default: {
       $79 = HEAP8[$$0252>>0]|0;
       $80 = $79&255;
       $81 = $$1286 ^ 255;
       $82 = $81 & $80;
       $83 = HEAP8[$$0266>>0]|0;
       $84 = $83&255;
       $85 = $$1286 & $84;
       $86 = $85 | $82;
       $87 = $86&255;
       $$sink = $87;
       label = 33;
      }
      }
      if ((label|0) == 33) {
       label = 0;
       HEAP8[$$0252>>0] = $$sink;
      }
      $89 = ($$0274>>>0)>($62>>>0);
      if (!($89)) {
       break L21;
      }
      $90 = ((($$0266)) + 1|0);
      $91 = ((($$0252)) + 1|0);
      $92 = (($$0274) - ($62))|0;
      $$0252 = $91;$$0266 = $90;$$0274 = $92;$$1286 = $78;
     }
    }
    $93 = $5 & 7;
    $94 = ($93|0)==(0);
    if (!($94)) {
     _png_error($0,22936);
     // unreachable;
    }
    $95 = $5 >>> 3;
    $96 = Math_imul($10, $95)|0;
    $97 = Math_imul($59, $95)|0;
    $98 = (($96) - ($97))|0;
    $99 = (($1) + ($97)|0);
    $100 = (($8) + ($97)|0);
    $101 = ($2|0)==(0);
    $102 = (6 - ($13))|0;
    $103 = $102 >>> 1;
    $104 = $95 << $103;
    $105 = ($104>>>0)>($98>>>0);
    $spec$select = $105 ? $98 : $104;
    $spec$select314 = $101 ? $95 : $spec$select;
    $106 = (7 - ($13))|0;
    $107 = $106 >>> 1;
    $108 = $95 << $107;
    switch ($spec$select314|0) {
    case 1:  {
     $109 = HEAP8[$100>>0]|0;
     HEAP8[$99>>0] = $109;
     $110 = ($98>>>0)>($108>>>0);
     if (!($110)) {
      return;
     }
     $$2268345 = $100;$$2276344 = $98;$$2346 = $99;
     while(1) {
      $111 = (($$2346) + ($108)|0);
      $112 = (($$2268345) + ($108)|0);
      $113 = (($$2276344) - ($108))|0;
      $114 = HEAP8[$112>>0]|0;
      HEAP8[$111>>0] = $114;
      $115 = ($113>>>0)>($108>>>0);
      if ($115) {
       $$2268345 = $112;$$2276344 = $113;$$2346 = $111;
      } else {
       break;
      }
     }
     return;
     break;
    }
    case 2:  {
     $$3 = $99;$$3269 = $100;$$3277 = $98;
     while(1) {
      $116 = HEAP8[$$3269>>0]|0;
      HEAP8[$$3>>0] = $116;
      $117 = ((($$3269)) + 1|0);
      $118 = HEAP8[$117>>0]|0;
      $119 = ((($$3)) + 1|0);
      HEAP8[$119>>0] = $118;
      $120 = ($$3277>>>0)>($108>>>0);
      if (!($120)) {
       label = 73;
       break;
      }
      $121 = (($$3269) + ($108)|0);
      $122 = (($$3) + ($108)|0);
      $123 = (($$3277) - ($108))|0;
      $124 = ($123>>>0)>(1);
      if ($124) {
       $$3 = $122;$$3269 = $121;$$3277 = $123;
      } else {
       break;
      }
     }
     if ((label|0) == 73) {
      return;
     }
     $125 = HEAP8[$121>>0]|0;
     HEAP8[$122>>0] = $125;
     return;
     break;
    }
    case 3:  {
     $126 = HEAP8[$100>>0]|0;
     HEAP8[$99>>0] = $126;
     $127 = ((($100)) + 1|0);
     $128 = HEAP8[$127>>0]|0;
     $129 = ((($99)) + 1|0);
     HEAP8[$129>>0] = $128;
     $130 = ((($100)) + 2|0);
     $131 = HEAP8[$130>>0]|0;
     $132 = ((($99)) + 2|0);
     HEAP8[$132>>0] = $131;
     $133 = ($98>>>0)>($108>>>0);
     if (!($133)) {
      return;
     }
     $$4270349 = $100;$$4278348 = $98;$$4350 = $99;
     while(1) {
      $134 = (($$4270349) + ($108)|0);
      $135 = (($$4350) + ($108)|0);
      $136 = (($$4278348) - ($108))|0;
      $137 = HEAP8[$134>>0]|0;
      HEAP8[$135>>0] = $137;
      $138 = ((($134)) + 1|0);
      $139 = HEAP8[$138>>0]|0;
      $140 = ((($135)) + 1|0);
      HEAP8[$140>>0] = $139;
      $141 = ((($134)) + 2|0);
      $142 = HEAP8[$141>>0]|0;
      $143 = ((($135)) + 2|0);
      HEAP8[$143>>0] = $142;
      $144 = ($136>>>0)>($108>>>0);
      if ($144) {
       $$4270349 = $134;$$4278348 = $136;$$4350 = $135;
      } else {
       break;
      }
     }
     return;
     break;
    }
    default: {
     $145 = ($spec$select314>>>0)<(16);
     if ($145) {
      $146 = $99;
      $147 = $146 & 1;
      $148 = ($147|0)==(0);
      if ($148) {
       $149 = $100;
       $150 = $108 | $149;
       $151 = $150 | $spec$select314;
       $152 = $151 & 1;
       $153 = ($152|0)==(0);
       if ($153) {
        $154 = $150 | $146;
        $155 = $154 | $spec$select314;
        $156 = $155 & 3;
        $157 = ($156|0)==(0);
        if ($157) {
         $158 = (($108) - ($spec$select314))|0;
         $159 = $158 >>> 2;
         $$0260 = $100;$$0263 = $99;$$5279 = $98;
         while(1) {
          $$0259 = $spec$select314;$$1261 = $$0260;$$1264 = $$0263;
          while(1) {
           $160 = ((($$1261)) + 4|0);
           $161 = HEAP32[$$1261>>2]|0;
           $162 = ((($$1264)) + 4|0);
           HEAP32[$$1264>>2] = $161;
           $163 = (($$0259) + -4)|0;
           $164 = ($163|0)==(0);
           if ($164) {
            break;
           } else {
            $$0259 = $163;$$1261 = $160;$$1264 = $162;
           }
          }
          $165 = ($$5279>>>0)>($108>>>0);
          $166 = (($162) + ($159<<2)|0);
          $167 = (($160) + ($159<<2)|0);
          $168 = (($$5279) - ($108))|0;
          if (!($165)) {
           label = 73;
           break;
          }
          $169 = ($spec$select314>>>0)>($168>>>0);
          if ($169) {
           break;
          } else {
           $$0260 = $167;$$0263 = $166;$$5279 = $168;
          }
         }
         if ((label|0) == 73) {
          return;
         }
         $$5 = $166;$$5271 = $167;$$7281 = $168;
         while(1) {
          $170 = ((($$5271)) + 1|0);
          $171 = HEAP8[$$5271>>0]|0;
          $172 = ((($$5)) + 1|0);
          HEAP8[$$5>>0] = $171;
          $173 = (($$7281) + -1)|0;
          $174 = ($173|0)==(0);
          if ($174) {
           break;
          } else {
           $$5 = $172;$$5271 = $170;$$7281 = $173;
          }
         }
         return;
        } else {
         $175 = (($108) - ($spec$select314))|0;
         $176 = $175 >>> 1;
         $$0253 = $100;$$0256 = $99;$$8 = $98;
         while(1) {
          $$0 = $spec$select314;$$1254 = $$0253;$$1257 = $$0256;
          while(1) {
           $177 = ((($$1254)) + 2|0);
           $178 = HEAP16[$$1254>>1]|0;
           $179 = ((($$1257)) + 2|0);
           HEAP16[$$1257>>1] = $178;
           $180 = (($$0) + -2)|0;
           $181 = ($180|0)==(0);
           if ($181) {
            break;
           } else {
            $$0 = $180;$$1254 = $177;$$1257 = $179;
           }
          }
          $182 = ($$8>>>0)>($108>>>0);
          $183 = (($179) + ($176<<1)|0);
          $184 = (($177) + ($176<<1)|0);
          $185 = (($$8) - ($108))|0;
          if (!($182)) {
           label = 73;
           break;
          }
          $186 = ($spec$select314>>>0)>($185>>>0);
          if ($186) {
           break;
          } else {
           $$0253 = $184;$$0256 = $183;$$8 = $185;
          }
         }
         if ((label|0) == 73) {
          return;
         }
         $$10 = $185;$$6 = $183;$$6272 = $184;
         while(1) {
          $187 = ((($$6272)) + 1|0);
          $188 = HEAP8[$$6272>>0]|0;
          $189 = ((($$6)) + 1|0);
          HEAP8[$$6>>0] = $188;
          $190 = (($$10) + -1)|0;
          $191 = ($190|0)==(0);
          if ($191) {
           break;
          } else {
           $$10 = $190;$$6 = $189;$$6272 = $187;
          }
         }
         return;
        }
       }
      }
     }
     _memcpy(($99|0),($100|0),($spec$select314|0))|0;
     $192 = ($98>>>0)>($108>>>0);
     if (!($192)) {
      return;
     }
     $$11341 = $98;$$1283340 = $spec$select314;$$7273342 = $100;$$7343 = $99;
     while(1) {
      $193 = (($$7273342) + ($108)|0);
      $194 = (($$7343) + ($108)|0);
      $195 = (($$11341) - ($108))|0;
      $196 = ($$1283340>>>0)>($195>>>0);
      $spec$select304 = $196 ? $195 : $$1283340;
      _memcpy(($194|0),($193|0),($spec$select304|0))|0;
      $197 = ($195>>>0)>($108>>>0);
      if ($197) {
       $$11341 = $195;$$1283340 = $spec$select304;$$7273342 = $193;$$7343 = $194;
      } else {
       break;
      }
     }
     return;
    }
    }
   } else {
    label = 70;
   }
  }
 } while(0);
 if ((label|0) == 70) {
  $198 = ($4&255)>(7);
  $199 = $5 >>> 3;
  $200 = Math_imul($10, $199)|0;
  $201 = (($27) + 7)|0;
  $202 = $201 >>> 3;
  $203 = $198 ? $200 : $202;
  _memcpy(($1|0),($8|0),($203|0))|0;
 }
 $204 = ($$0287|0)==(0|0);
 if ($204) {
  return;
 }
 $205 = $$0292&255;
 $206 = $$0291 & $205;
 $207 = HEAP8[$$0287>>0]|0;
 $208 = $207&255;
 $209 = $$0291 ^ 255;
 $210 = $209 & $208;
 $211 = $210 | $206;
 $212 = $211&255;
 HEAP8[$$0287>>0] = $212;
 return;
}
function _png_do_read_interlace($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0223287$us = 0, $$0224302$us = 0, $$0225286$us = 0, $$0227285$us = 0, $$0228301$us = 0, $$0230 = 0, $$0233322$us = 0, $$0234 = 0, $$0237 = 0, $$0238332$us = 0, $$0239 = 0, $$0240 = 0, $$0241 = 0, $$0242 = 0, $$0242$in = 0, $$0246 = 0, $$0246$in = 0, $$0249329$us = 0, $$0252328$us = 0, $$0254 = 0;
 var $$0255307$us = 0, $$0256 = 0, $$0257317$us = 0, $$0258298$us = 0, $$0259 = 0, $$0260 = 0, $$0261 = 0, $$0262 = 0, $$0266 = 0, $$0269314$us = 0, $$0272313$us = 0, $$0274290$us = 0, $$0284$us = 0, $$1$us = 0, $$1226283$us = 0, $$1229292$us = 0, $$1231300$us = 0, $$1235299$us = 0, $$1243331$us = 0, $$1247330$us = 0;
 var $$1250320$us = 0, $$1253$us = 0, $$1263316$us = 0, $$1267315$us = 0, $$1270305$us = 0, $$1273$us = 0, $$2$us = 0, $$2232$us = 0, $$2236291$us = 0, $$2244321$us = 0, $$2248$us = 0, $$2251$us = 0, $$2264306$us = 0, $$2268$us = 0, $$2271$us = 0, $$3$us = 0, $$3245$us = 0, $$3265$us = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp;
 $5 = ($1|0)!=(0|0);
 $6 = ($0|0)!=(0|0);
 $or$cond = $6 & $5;
 if (!($or$cond)) {
  STACKTOP = sp;return;
 }
 $7 = HEAP32[$0>>2]|0;
 $8 = (836 + ($2<<2)|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = Math_imul($9, $7)|0;
 $11 = ((($0)) + 11|0);
 $12 = HEAP8[$11>>0]|0;
 switch ($12<<24>>24) {
 case 1:  {
  $13 = (($7) + -1)|0;
  $14 = $13 >>> 3;
  $15 = (($1) + ($14)|0);
  $16 = (($10) + -1)|0;
  $17 = $16 >>> 3;
  $18 = (($1) + ($17)|0);
  $19 = $3 & 65536;
  $20 = ($19|0)==(0);
  $21 = (($7) + 7)|0;
  $22 = $21 & 7;
  if ($20) {
   $25 = $22 ^ 7;
   $26 = (($10) + 7)|0;
   $27 = $26 & 7;
   $28 = $27 ^ 7;
   $$0230 = $25;$$0234 = $28;$$0237 = 0;$$0254 = 7;$$0256 = 1;
  } else {
   $23 = (($10) + 7)|0;
   $24 = $23 & 7;
   $$0230 = $22;$$0234 = $24;$$0237 = 7;$$0254 = 0;$$0256 = -1;
  }
  $29 = ($7|0)==(0);
  if (!($29)) {
   $$0224302$us = $15;$$0228301$us = $18;$$0258298$us = 0;$$1231300$us = $$0230;$$1235299$us = $$0234;
   while(1) {
    $30 = HEAP8[$$0224302$us>>0]|0;
    $31 = $30&255;
    $32 = $31 >>> $$1231300$us;
    $33 = $32 & 1;
    $$0274290$us = 0;$$1229292$us = $$0228301$us;$$2236291$us = $$1235299$us;
    while(1) {
     $34 = HEAP8[$$1229292$us>>0]|0;
     $35 = $34&255;
     $36 = (7 - ($$2236291$us))|0;
     $37 = 32639 >>> $36;
     $38 = $37 & $35;
     $39 = $33 << $$2236291$us;
     $40 = $38 | $39;
     $41 = $40&255;
     HEAP8[$$1229292$us>>0] = $41;
     $42 = ($$2236291$us|0)==($$0254|0);
     $43 = ((($$1229292$us)) + -1|0);
     $44 = (($$2236291$us) + ($$0256))|0;
     $$3$us = $42 ? $$0237 : $44;
     $$2$us = $42 ? $43 : $$1229292$us;
     $45 = (($$0274290$us) + 1)|0;
     $46 = ($45|0)<($9|0);
     if ($46) {
      $$0274290$us = $45;$$1229292$us = $$2$us;$$2236291$us = $$3$us;
     } else {
      break;
     }
    }
    $47 = ($$1231300$us|0)==($$0254|0);
    $48 = ((($$0224302$us)) + -1|0);
    $49 = (($$1231300$us) + ($$0256))|0;
    $$2232$us = $47 ? $$0237 : $49;
    $$1$us = $47 ? $48 : $$0224302$us;
    $50 = (($$0258298$us) + 1)|0;
    $51 = HEAP32[$0>>2]|0;
    $52 = ($50>>>0)<($51>>>0);
    if ($52) {
     $$0224302$us = $$1$us;$$0228301$us = $$2$us;$$0258298$us = $50;$$1231300$us = $$2232$us;$$1235299$us = $$3$us;
    } else {
     break;
    }
   }
  }
  break;
 }
 case 2:  {
  $53 = (($7) + -1)|0;
  $54 = $53 >>> 2;
  $55 = (($1) + ($54)|0);
  $56 = (($10) + -1)|0;
  $57 = $56 >>> 2;
  $58 = (($1) + ($57)|0);
  $59 = $3 & 65536;
  $60 = ($59|0)==(0);
  $61 = $7 << 1;
  $62 = (($61) + 6)|0;
  $63 = $62 & 6;
  if ($60) {
   $67 = $63 ^ 6;
   $68 = $10 << 1;
   $69 = (($68) + 6)|0;
   $70 = $69 & 6;
   $71 = $70 ^ 6;
   $$0259 = 2;$$0260 = 6;$$0261 = 0;$$0262 = $71;$$0266 = $67;
  } else {
   $64 = $10 << 1;
   $65 = (($64) + 6)|0;
   $66 = $65 & 6;
   $$0259 = -2;$$0260 = 0;$$0261 = 6;$$0262 = $66;$$0266 = $63;
  }
  $72 = ($7|0)==(0);
  if (!($72)) {
   $$0257317$us = 0;$$0269314$us = $58;$$0272313$us = $55;$$1263316$us = $$0262;$$1267315$us = $$0266;
   while(1) {
    $73 = HEAP8[$$0272313$us>>0]|0;
    $74 = $73&255;
    $75 = $74 >>> $$1267315$us;
    $76 = $75 & 3;
    $$0255307$us = 0;$$1270305$us = $$0269314$us;$$2264306$us = $$1263316$us;
    while(1) {
     $77 = HEAP8[$$1270305$us>>0]|0;
     $78 = $77&255;
     $79 = (6 - ($$2264306$us))|0;
     $80 = 16191 >>> $79;
     $81 = $80 & $78;
     $82 = $76 << $$2264306$us;
     $83 = $81 | $82;
     $84 = $83&255;
     HEAP8[$$1270305$us>>0] = $84;
     $85 = ($$2264306$us|0)==($$0260|0);
     $86 = ((($$1270305$us)) + -1|0);
     $87 = (($$2264306$us) + ($$0259))|0;
     $$2271$us = $85 ? $86 : $$1270305$us;
     $$3265$us = $85 ? $$0261 : $87;
     $88 = (($$0255307$us) + 1)|0;
     $89 = ($88|0)<($9|0);
     if ($89) {
      $$0255307$us = $88;$$1270305$us = $$2271$us;$$2264306$us = $$3265$us;
     } else {
      break;
     }
    }
    $90 = ($$1267315$us|0)==($$0260|0);
    $91 = ((($$0272313$us)) + -1|0);
    $92 = (($$1267315$us) + ($$0259))|0;
    $$1273$us = $90 ? $91 : $$0272313$us;
    $$2268$us = $90 ? $$0261 : $92;
    $93 = (($$0257317$us) + 1)|0;
    $94 = HEAP32[$0>>2]|0;
    $95 = ($93>>>0)<($94>>>0);
    if ($95) {
     $$0257317$us = $93;$$0269314$us = $$2271$us;$$0272313$us = $$1273$us;$$1263316$us = $$3265$us;$$1267315$us = $$2268$us;
    } else {
     break;
    }
   }
  }
  break;
 }
 case 4:  {
  $96 = (($7) + -1)|0;
  $97 = $96 >>> 1;
  $98 = (($1) + ($97)|0);
  $99 = (($10) + -1)|0;
  $100 = $99 >>> 1;
  $101 = (($1) + ($100)|0);
  $102 = $3 & 65536;
  $103 = ($102|0)==(0);
  $104 = $7 & 1;
  if ($103) {
   $108 = $10 & 1;
   $$0239 = 4;$$0240 = 4;$$0241 = 0;$$0242$in = $108;$$0246$in = $104;
  } else {
   $105 = $104 ^ 1;
   $106 = $10 & 1;
   $107 = $106 ^ 1;
   $$0239 = -4;$$0240 = 0;$$0241 = 4;$$0242$in = $107;$$0246$in = $105;
  }
  $109 = ($7|0)==(0);
  if (!($109)) {
   $$0246 = $$0246$in << 2;
   $$0242 = $$0242$in << 2;
   $$0238332$us = 0;$$0249329$us = $101;$$0252328$us = $98;$$1243331$us = $$0242;$$1247330$us = $$0246;
   while(1) {
    $110 = HEAP8[$$0252328$us>>0]|0;
    $111 = $110&255;
    $112 = $111 >>> $$1247330$us;
    $113 = $112 & 15;
    $$0233322$us = 0;$$1250320$us = $$0249329$us;$$2244321$us = $$1243331$us;
    while(1) {
     $114 = HEAP8[$$1250320$us>>0]|0;
     $115 = $114&255;
     $116 = (4 - ($$2244321$us))|0;
     $117 = 3855 >>> $116;
     $118 = $117 & $115;
     $119 = $113 << $$2244321$us;
     $120 = $118 | $119;
     $121 = $120&255;
     HEAP8[$$1250320$us>>0] = $121;
     $122 = ($$2244321$us|0)==($$0240|0);
     $123 = ((($$1250320$us)) + -1|0);
     $124 = (($$2244321$us) + ($$0239))|0;
     $$2251$us = $122 ? $123 : $$1250320$us;
     $$3245$us = $122 ? $$0241 : $124;
     $125 = (($$0233322$us) + 1)|0;
     $126 = ($125|0)<($9|0);
     if ($126) {
      $$0233322$us = $125;$$1250320$us = $$2251$us;$$2244321$us = $$3245$us;
     } else {
      break;
     }
    }
    $127 = ($$1247330$us|0)==($$0240|0);
    $128 = ((($$0252328$us)) + -1|0);
    $129 = (($$1247330$us) + ($$0239))|0;
    $$1253$us = $127 ? $128 : $$0252328$us;
    $$2248$us = $127 ? $$0241 : $129;
    $130 = (($$0238332$us) + 1)|0;
    $131 = HEAP32[$0>>2]|0;
    $132 = ($130>>>0)<($131>>>0);
    if ($132) {
     $$0238332$us = $130;$$0249329$us = $$2251$us;$$0252328$us = $$1253$us;$$1243331$us = $$3245$us;$$1247330$us = $$2248$us;
    } else {
     break;
    }
   }
  }
  break;
 }
 default: {
  $133 = $12&255;
  $134 = $133 >>> 3;
  $135 = ($7|0)==(0);
  if (!($135)) {
   $136 = (($10) + -1)|0;
   $137 = Math_imul($134, $136)|0;
   $138 = (($1) + ($137)|0);
   $139 = (($7) + -1)|0;
   $140 = Math_imul($134, $139)|0;
   $141 = (($1) + ($140)|0);
   $142 = (0 - ($134))|0;
   $$0223287$us = 0;$$0225286$us = $138;$$0227285$us = $141;
   while(1) {
    _memcpy(($4|0),($$0227285$us|0),($134|0))|0;
    $$0284$us = 0;$$1226283$us = $$0225286$us;
    while(1) {
     _memcpy(($$1226283$us|0),($4|0),($134|0))|0;
     $143 = (($$1226283$us) + ($142)|0);
     $144 = (($$0284$us) + 1)|0;
     $145 = ($144|0)<($9|0);
     if ($145) {
      $$0284$us = $144;$$1226283$us = $143;
     } else {
      break;
     }
    }
    $146 = (($$0227285$us) + ($142)|0);
    $147 = (($$0223287$us) + 1)|0;
    $148 = HEAP32[$0>>2]|0;
    $149 = ($147>>>0)<($148>>>0);
    if ($149) {
     $$0223287$us = $147;$$0225286$us = $143;$$0227285$us = $146;
    } else {
     break;
    }
   }
  }
 }
 }
 HEAP32[$0>>2] = $10;
 $150 = HEAP8[$11>>0]|0;
 $151 = $150&255;
 $152 = ($150&255)>(7);
 if ($152) {
  $153 = $151 >>> 3;
  $154 = Math_imul($153, $10)|0;
  $159 = $154;
 } else {
  $155 = Math_imul($10, $151)|0;
  $156 = (($155) + 7)|0;
  $157 = $156 >>> 3;
  $159 = $157;
 }
 $158 = ((($0)) + 4|0);
 HEAP32[$158>>2] = $159;
 STACKTOP = sp;return;
}
function _png_read_filter_row($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$mask$i = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $png_read_filter_row_paeth_1byte_pixel$png_read_filter_row_paeth_multibyte_pixel$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$off = (($4) + -1)|0;
 $5 = ($$off>>>0)<(4);
 if (!($5)) {
  return;
 }
 $6 = ((($0)) + 808|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)==(0|0);
 if ($8) {
  $9 = ((($0)) + 438|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10&255;
  $12 = (($11) + 7)|0;
  HEAP32[$6>>2] = 52;
  $13 = ((($0)) + 812|0);
  HEAP32[$13>>2] = 53;
  $14 = ((($0)) + 816|0);
  HEAP32[$14>>2] = 54;
  $$mask$i = $12 & 504;
  $15 = ($$mask$i|0)==(8);
  $16 = ((($0)) + 820|0);
  $png_read_filter_row_paeth_1byte_pixel$png_read_filter_row_paeth_multibyte_pixel$i = $15 ? 56 : 55;
  HEAP32[$16>>2] = $png_read_filter_row_paeth_1byte_pixel$png_read_filter_row_paeth_multibyte_pixel$i;
 }
 $17 = (((($0)) + 808|0) + ($$off<<2)|0);
 $18 = HEAP32[$17>>2]|0;
 FUNCTION_TABLE_viii[$18 & 127]($1,$2,$3);
 return;
}
function _png_read_filter_row_sub($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02021 = 0, $$022 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 11|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = (($7) + 7)|0;
 $9 = $8 >>> 3;
 $10 = ($9>>>0)<($4>>>0);
 if (!($10)) {
  return;
 }
 $11 = (($1) + ($9)|0);
 $12 = (0 - ($9))|0;
 $$02021 = $9;$$022 = $11;
 while(1) {
  $13 = HEAP8[$$022>>0]|0;
  $14 = $13&255;
  $15 = (($$022) + ($12)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = (($17) + ($14))|0;
  $19 = $18&255;
  HEAP8[$$022>>0] = $19;
  $20 = ((($$022)) + 1|0);
  $21 = (($$02021) + 1)|0;
  $exitcond = ($21|0)==($4|0);
  if ($exitcond) {
   break;
  } else {
   $$02021 = $21;$$022 = $20;
  }
 }
 return;
}
function _png_read_filter_row_up($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01619 = 0, $$01718 = 0, $$020 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  return;
 }
 $$01619 = $1;$$01718 = 0;$$020 = $2;
 while(1) {
  $6 = HEAP8[$$01619>>0]|0;
  $7 = $6&255;
  $8 = ((($$020)) + 1|0);
  $9 = HEAP8[$$020>>0]|0;
  $10 = $9&255;
  $11 = (($10) + ($7))|0;
  $12 = $11&255;
  HEAP8[$$01619>>0] = $12;
  $13 = ((($$01619)) + 1|0);
  $14 = (($$01718) + 1)|0;
  $exitcond = ($14|0)==($4|0);
  if ($exitcond) {
   break;
  } else {
   $$01619 = $13;$$01718 = $14;$$020 = $8;
  }
 }
 return;
}
function _png_read_filter_row_avg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$029$lcssa = 0, $$02937 = 0, $$031$lcssa = 0, $$03136 = 0, $$038 = 0, $$13034 = 0, $$13233 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond45 = 0, $scevgep = 0, $scevgep44 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (($5) + 7)|0;
 $7 = $6 >>> 3;
 $8 = ((($0)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (($9) - ($7))|0;
 $11 = ($7|0)==(0);
 if ($11) {
  $$029$lcssa = $1;$$031$lcssa = $2;
 } else {
  $scevgep = (($2) + ($7)|0);
  $$02937 = $1;$$03136 = $2;$$038 = 0;
  while(1) {
   $12 = HEAP8[$$02937>>0]|0;
   $13 = $12&255;
   $14 = ((($$03136)) + 1|0);
   $15 = HEAP8[$$03136>>0]|0;
   $16 = ($15&255) >>> 1;
   $17 = $16&255;
   $18 = (($17) + ($13))|0;
   $19 = $18&255;
   HEAP8[$$02937>>0] = $19;
   $20 = ((($$02937)) + 1|0);
   $21 = (($$038) + 1)|0;
   $exitcond45 = ($21|0)==($7|0);
   if ($exitcond45) {
    break;
   } else {
    $$02937 = $20;$$03136 = $14;$$038 = $21;
   }
  }
  $scevgep44 = (($1) + ($7)|0);
  $$029$lcssa = $scevgep44;$$031$lcssa = $scevgep;
 }
 $22 = ($10|0)==(0);
 if ($22) {
  return;
 }
 $23 = (0 - ($7))|0;
 $$13034 = $$029$lcssa;$$13233 = $$031$lcssa;$$135 = 0;
 while(1) {
  $24 = HEAP8[$$13034>>0]|0;
  $25 = $24&255;
  $26 = ((($$13233)) + 1|0);
  $27 = HEAP8[$$13233>>0]|0;
  $28 = $27&255;
  $29 = (($$13034) + ($23)|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  $32 = (($31) + ($28))|0;
  $33 = $32 >>> 1;
  $34 = (($33) + ($25))|0;
  $35 = $34&255;
  HEAP8[$$13034>>0] = $35;
  $36 = ((($$13034)) + 1|0);
  $37 = (($$135) + 1)|0;
  $exitcond = ($37|0)==($10|0);
  if ($exitcond) {
   break;
  } else {
   $$13034 = $36;$$13233 = $26;$$135 = $37;
  }
 }
 return;
}
function _png_read_filter_row_paeth_1byte_pixel($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04960 = 0, $$05158 = 0, $$05257 = 0, $$055 = 0, $$059 = 0, $$2 = 0, $$pn = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select54 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 $6 = HEAP8[$2>>0]|0;
 $7 = $6&255;
 $8 = HEAP8[$1>>0]|0;
 $9 = $8&255;
 $10 = (($9) + ($7))|0;
 $11 = $10&255;
 HEAP8[$1>>0] = $11;
 $12 = ($4|0)>(1);
 if (!($12)) {
  return;
 }
 $$055 = ((($1)) + 1|0);
 $$05158 = $10;$$05257 = $7;$$059 = $$055;$$pn = $2;
 while(1) {
  $$04960 = ((($$pn)) + 1|0);
  $13 = $$05158 & 255;
  $14 = HEAP8[$$04960>>0]|0;
  $15 = $14&255;
  $16 = (($15) - ($$05257))|0;
  $17 = (($13) - ($$05257))|0;
  $18 = ($16|0)<(0);
  $19 = (0 - ($16))|0;
  $20 = $18 ? $19 : $16;
  $21 = ($17|0)<(0);
  $22 = (0 - ($17))|0;
  $23 = $21 ? $22 : $17;
  $24 = (($16) + ($17))|0;
  $25 = ($24|0)<(0);
  $26 = (0 - ($24))|0;
  $27 = $25 ? $26 : $24;
  $28 = ($23|0)<($20|0);
  $spec$select = $28 ? $15 : $13;
  $spec$select54 = $28 ? $23 : $20;
  $29 = ($27|0)<($spec$select54|0);
  $$2 = $29 ? $$05257 : $spec$select;
  $30 = HEAP8[$$059>>0]|0;
  $31 = $30&255;
  $32 = (($$2) + ($31))|0;
  $33 = $32&255;
  HEAP8[$$059>>0] = $33;
  $$0 = ((($$059)) + 1|0);
  $34 = ($$0>>>0)<($5>>>0);
  if ($34) {
   $$05158 = $32;$$05257 = $15;$$059 = $$0;$$pn = $$04960;
  } else {
   break;
  }
 }
 return;
}
function _png_read_filter_row_paeth_multibyte_pixel($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$060$lcssa = 0, $$06068 = 0, $$069 = 0, $$16166 = 0, $$164 = 0, $$167 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $spec$select = 0, $spec$select65 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 11|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = $4&255;
 $6 = (($5) + 7)|0;
 $7 = $6 >>> 3;
 $8 = (($1) + ($7)|0);
 $9 = ($7|0)==(0);
 if ($9) {
  $$0$lcssa = $1;$$060$lcssa = $2;
 } else {
  $$06068 = $2;$$069 = $1;
  while(1) {
   $10 = HEAP8[$$069>>0]|0;
   $11 = $10&255;
   $12 = ((($$06068)) + 1|0);
   $13 = HEAP8[$$06068>>0]|0;
   $14 = $13&255;
   $15 = (($14) + ($11))|0;
   $16 = $15&255;
   $17 = ((($$069)) + 1|0);
   HEAP8[$$069>>0] = $16;
   $18 = ($17>>>0)<($8>>>0);
   if ($18) {
    $$06068 = $12;$$069 = $17;
   } else {
    $$0$lcssa = $17;$$060$lcssa = $12;
    break;
   }
  }
 }
 $19 = ((($0)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($1) + ($20)|0);
 $22 = ($$0$lcssa>>>0)<($21>>>0);
 if (!($22)) {
  return;
 }
 $23 = (0 - ($7))|0;
 $$16166 = $$060$lcssa;$$167 = $$0$lcssa;
 while(1) {
  $24 = (($$16166) + ($23)|0);
  $25 = HEAP8[$24>>0]|0;
  $26 = $25&255;
  $27 = (($$167) + ($23)|0);
  $28 = HEAP8[$27>>0]|0;
  $29 = $28&255;
  $30 = ((($$16166)) + 1|0);
  $31 = HEAP8[$$16166>>0]|0;
  $32 = $31&255;
  $33 = (($32) - ($26))|0;
  $34 = (($29) - ($26))|0;
  $35 = ($33|0)<(0);
  $36 = (0 - ($33))|0;
  $37 = $35 ? $36 : $33;
  $38 = ($34|0)<(0);
  $39 = (0 - ($34))|0;
  $40 = $38 ? $39 : $34;
  $41 = (($33) + ($34))|0;
  $42 = ($41|0)<(0);
  $43 = (0 - ($41))|0;
  $44 = $42 ? $43 : $41;
  $45 = ($40|0)<($37|0);
  $spec$select = $45 ? $32 : $29;
  $spec$select65 = $45 ? $40 : $37;
  $46 = ($44|0)<($spec$select65|0);
  $$164 = $46 ? $26 : $spec$select;
  $47 = HEAP8[$$167>>0]|0;
  $48 = $47&255;
  $49 = (($$164) + ($48))|0;
  $50 = $49&255;
  $51 = ((($$167)) + 1|0);
  HEAP8[$$167>>0] = $50;
  $exitcond = ($51|0)==($21|0);
  if ($exitcond) {
   break;
  } else {
   $$16166 = $30;$$167 = $51;
  }
 }
 return;
}
function _png_read_IDAT_data($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$1 = 0, $$1$i = 0, $$1$i$us = 0, $$1$us = 0, $$3 = 0, $$3$lcssa77 = 0, $$lcssa = 0, $$lcssa$us = 0, $$lcssa79 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond$us = 0, $spec$select = 0, $spec$select68 = 0, $spec$select68$us = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1024|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1024|0);
 $3 = sp;
 $4 = ((($0)) + 224|0);
 $5 = ((($0)) + 236|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($0)) + 240|0);
 HEAP32[$6>>2] = 0;
 $7 = ($1|0)==(0|0);
 $spec$select = $7 ? 0 : $2;
 $8 = ((($0)) + 228|0);
 $9 = ((($0)) + 408|0);
 $10 = ($1|0)!=(0|0);
 $11 = ((($0)) + 796|0);
 $12 = ((($0)) + 788|0);
 $13 = ((($0)) + 376|0);
 $14 = ((($0)) + 792|0);
 L1: do {
  if ($10) {
   $$1$us = $spec$select;
   L3: while(1) {
    $15 = HEAP32[$8>>2]|0;
    $16 = ($15|0)==(0);
    if ($16) {
     $17 = HEAP32[$9>>2]|0;
     $18 = ($17|0)==(0);
     if ($18) {
      while(1) {
       (_png_crc_finish($0,0)|0);
       $19 = (_png_read_chunk_header($0)|0);
       HEAP32[$9>>2] = $19;
       $33 = HEAP32[$13>>2]|0;
       $34 = ($33|0)==(1229209940);
       if (!($34)) {
        label = 22;
        break L3;
       }
       $20 = ($19|0)==(0);
       if (!($20)) {
        $$lcssa$us = $19;
        break;
       }
      }
     } else {
      $$lcssa$us = $17;
     }
     $21 = HEAP32[$11>>2]|0;
     $22 = ($21>>>0)>($$lcssa$us>>>0);
     $spec$select68$us = $22 ? $$lcssa$us : $21;
     $23 = HEAP32[$12>>2]|0;
     $24 = ($23|0)==(0|0);
     if ($24) {
      label = 11;
     } else {
      $25 = HEAP32[$14>>2]|0;
      $26 = ($25>>>0)<($spec$select68$us>>>0);
      if ($26) {
       HEAP32[$12>>2] = 0;
       HEAP32[$14>>2] = 0;
       _png_free($0,$23);
       label = 11;
      } else {
       $$1$i$us = $23;
      }
     }
     if ((label|0) == 11) {
      label = 0;
      $27 = (_png_malloc_base($0,$spec$select68$us)|0);
      $28 = ($27|0)==(0|0);
      if ($28) {
       label = 28;
       break;
      }
      HEAP32[$12>>2] = $27;
      HEAP32[$14>>2] = $spec$select68$us;
      $$1$i$us = $27;
     }
     _png_read_data($0,$$1$i$us,$spec$select68$us);
     _png_calculate_crc($0,$$1$i$us,$spec$select68$us);
     $29 = HEAP32[$9>>2]|0;
     $30 = (($29) - ($spec$select68$us))|0;
     HEAP32[$9>>2] = $30;
     HEAP32[$4>>2] = $$1$i$us;
     HEAP32[$8>>2] = $spec$select68$us;
    }
    HEAP32[$6>>2] = $$1$us;
    $31 = (_inflate($4,0)|0);
    $32 = HEAP32[$6>>2]|0;
    HEAP32[$6>>2] = 0;
    switch ($31|0) {
    case 1:  {
     $$3$lcssa77 = $32;
     break L1;
     break;
    }
    case 0:  {
     break;
    }
    default: {
     $$lcssa79 = $31;
     label = 34;
     break L1;
    }
    }
    $cond$us = ($32|0)==(0);
    if ($cond$us) {
     label = 42;
     break;
    } else {
     $$1$us = $32;
    }
   }
   if ((label|0) == 22) {
    _png_error($0,22971);
    // unreachable;
   }
   else if ((label|0) == 28) {
    _png_chunk_error($0,22316);
    // unreachable;
   }
   else if ((label|0) == 42) {
    STACKTOP = sp;return;
   }
  } else {
   $$1 = $spec$select;
   L27: while(1) {
    $35 = HEAP32[$8>>2]|0;
    $36 = ($35|0)==(0);
    if ($36) {
     $37 = HEAP32[$9>>2]|0;
     $38 = ($37|0)==(0);
     if ($38) {
      while(1) {
       (_png_crc_finish($0,0)|0);
       $39 = (_png_read_chunk_header($0)|0);
       HEAP32[$9>>2] = $39;
       $41 = HEAP32[$13>>2]|0;
       $42 = ($41|0)==(1229209940);
       if (!($42)) {
        label = 22;
        break L27;
       }
       $40 = ($39|0)==(0);
       if (!($40)) {
        $$lcssa = $39;
        break;
       }
      }
     } else {
      $$lcssa = $37;
     }
     $43 = HEAP32[$11>>2]|0;
     $44 = ($43>>>0)>($$lcssa>>>0);
     $spec$select68 = $44 ? $$lcssa : $43;
     $45 = HEAP32[$12>>2]|0;
     $46 = ($45|0)==(0|0);
     if ($46) {
      label = 26;
     } else {
      $47 = HEAP32[$14>>2]|0;
      $48 = ($47>>>0)<($spec$select68>>>0);
      if ($48) {
       HEAP32[$12>>2] = 0;
       HEAP32[$14>>2] = 0;
       _png_free($0,$45);
       label = 26;
      } else {
       $$1$i = $45;
      }
     }
     if ((label|0) == 26) {
      label = 0;
      $49 = (_png_malloc_base($0,$spec$select68)|0);
      $50 = ($49|0)==(0|0);
      if ($50) {
       label = 28;
       break;
      }
      HEAP32[$12>>2] = $49;
      HEAP32[$14>>2] = $spec$select68;
      $$1$i = $49;
     }
     _png_read_data($0,$$1$i,$spec$select68);
     _png_calculate_crc($0,$$1$i,$spec$select68);
     $51 = HEAP32[$9>>2]|0;
     $52 = (($51) - ($spec$select68))|0;
     HEAP32[$9>>2] = $52;
     HEAP32[$4>>2] = $$1$i;
     HEAP32[$8>>2] = $spec$select68;
    }
    HEAP32[$5>>2] = $3;
    HEAP32[$6>>2] = 1024;
    $53 = (_inflate($4,0)|0);
    $54 = HEAP32[$6>>2]|0;
    $55 = (1024 - ($54))|0;
    $$3 = (($55) + ($$1))|0;
    HEAP32[$6>>2] = 0;
    switch ($53|0) {
    case 1:  {
     $$3$lcssa77 = $$3;
     break L1;
     break;
    }
    case 0:  {
     break;
    }
    default: {
     $$lcssa79 = $53;
     label = 34;
     break L1;
    }
    }
    $cond = ($$3|0)==(0);
    if ($cond) {
     label = 42;
     break;
    } else {
     $$1 = $$3;
    }
   }
   if ((label|0) == 22) {
    _png_error($0,22971);
    // unreachable;
   }
   else if ((label|0) == 28) {
    _png_chunk_error($0,22316);
    // unreachable;
   }
   else if ((label|0) == 42) {
    STACKTOP = sp;return;
   }
  }
 } while(0);
 if ((label|0) == 34) {
  _png_zstream_error($0,$$lcssa79);
  $66 = ((($0)) + 248|0);
  $67 = HEAP32[$66>>2]|0;
  if ($10) {
   _png_chunk_error($0,$67);
   // unreachable;
  }
  _png_chunk_benign_error($0,$67);
  STACKTOP = sp;return;
 }
 HEAP32[$5>>2] = 0;
 $56 = ((($0)) + 208|0);
 $57 = HEAP32[$56>>2]|0;
 $58 = $57 | 8;
 HEAP32[$56>>2] = $58;
 $59 = ((($0)) + 212|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = $60 | 8;
 HEAP32[$59>>2] = $61;
 $62 = HEAP32[$8>>2]|0;
 $63 = ($62|0)==(0);
 if ($63) {
  $64 = HEAP32[$9>>2]|0;
  $65 = ($64|0)==(0);
  if (!($65)) {
   label = 33;
  }
 } else {
  label = 33;
 }
 if ((label|0) == 33) {
  _png_chunk_benign_error($0,22993);
 }
 $68 = ($$3$lcssa77|0)==(0);
 if ($68) {
  STACKTOP = sp;return;
 }
 if ($10) {
  _png_error($0,22971);
  // unreachable;
 }
 _png_chunk_benign_error($0,23015);
 STACKTOP = sp;return;
}
function _png_read_finish_IDAT($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 212|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = $2 & 8;
 $4 = ($3|0)==(0);
 if ($4) {
  _png_read_IDAT_data($0,0,0);
  $5 = ((($0)) + 236|0);
  HEAP32[$5>>2] = 0;
  $6 = HEAP32[$1>>2]|0;
  $7 = $6 & 8;
  $8 = ($7|0)==(0);
  $9 = ((($0)) + 208|0);
  if ($8) {
   $10 = $6 | 8;
   $11 = HEAP32[$9>>2]|0;
   $12 = $11 | 8;
   HEAP32[$9>>2] = $12;
   HEAP32[$1>>2] = $10;
  }
 }
 $13 = ((($0)) + 220|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(1229209940);
 if (!($15)) {
  return;
 }
 $16 = ((($0)) + 224|0);
 HEAP32[$16>>2] = 0;
 $17 = ((($0)) + 228|0);
 HEAP32[$17>>2] = 0;
 HEAP32[$13>>2] = 0;
 $18 = ((($0)) + 408|0);
 $19 = HEAP32[$18>>2]|0;
 (_png_crc_finish($0,$19)|0);
 return;
}
function _png_read_finish_row($0) {
 $0 = $0|0;
 var $$lcssa = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 372|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[$1>>2] = $3;
 $4 = ((($0)) + 356|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  return;
 }
 $7 = ((($0)) + 432|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 L4: do {
  if (!($9)) {
   HEAP32[$1>>2] = 0;
   $10 = ((($0)) + 380|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ((($0)) + 364|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = (($13) + 1)|0;
   _memset(($11|0),0,($14|0))|0;
   $15 = ((($0)) + 433|0);
   $16 = HEAP8[$15>>0]|0;
   $17 = (($16) + 1)<<24>>24;
   HEAP8[$15>>0] = $17;
   $18 = $17&255;
   $19 = ($17&255)>(6);
   if (!($19)) {
    $20 = ((($0)) + 348|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = (($21) + -1)|0;
    $23 = ((($0)) + 368|0);
    $24 = ((($0)) + 216|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = $25 & 2;
    $27 = ($26|0)==(0);
    do {
     if ($27) {
      $28 = ((($0)) + 352|0);
      $$pre = HEAP32[$28>>2]|0;
      $29 = (($$pre) + -1)|0;
      $31 = $18;$50 = $17;
      while(1) {
       $30 = (27285 + ($31)|0);
       $32 = HEAP8[$30>>0]|0;
       $33 = $32&255;
       $34 = (27278 + ($31)|0);
       $35 = HEAP8[$34>>0]|0;
       $36 = $35&255;
       $37 = (($22) + ($33))|0;
       $38 = (($37) - ($36))|0;
       $39 = (27292 + ($31)|0);
       $40 = HEAP8[$39>>0]|0;
       $41 = $40&255;
       $42 = (27299 + ($31)|0);
       $43 = HEAP8[$42>>0]|0;
       $44 = $43&255;
       $45 = (($29) + ($41))|0;
       $46 = (($45) - ($44))|0;
       $47 = ($46>>>0)<($41>>>0);
       $48 = ($38>>>0)<($33>>>0);
       $or$cond = $47 | $48;
       if (!($or$cond)) {
        label = 8;
        break;
       }
       $49 = (($50) + 1)<<24>>24;
       HEAP8[$15>>0] = $49;
       $51 = $49&255;
       $52 = ($49&255)>(6);
       if ($52) {
        label = 9;
        break;
       } else {
        $31 = $51;$50 = $49;
       }
      }
      if ((label|0) == 8) {
       $53 = $40&255;
       $54 = (($46>>>0) / ($53>>>0))&-1;
       HEAP32[$4>>2] = $54;
       $55 = $32&255;
       $56 = (($38>>>0) / ($55>>>0))&-1;
       $$lcssa = $56;
       break;
      }
      else if ((label|0) == 9) {
       $57 = $40&255;
       $58 = (($46>>>0) / ($57>>>0))&-1;
       HEAP32[$4>>2] = $58;
       $59 = $32&255;
       $60 = (($38>>>0) / ($59>>>0))&-1;
       HEAP32[$23>>2] = $60;
       break L4;
      }
     } else {
      $61 = (27285 + ($18)|0);
      $62 = HEAP8[$61>>0]|0;
      $63 = $62&255;
      $64 = (27278 + ($18)|0);
      $65 = HEAP8[$64>>0]|0;
      $66 = $65&255;
      $67 = (($22) + ($63))|0;
      $68 = (($67) - ($66))|0;
      $69 = (($68>>>0) / ($63>>>0))&-1;
      $$lcssa = $69;
     }
    } while(0);
    HEAP32[$23>>2] = $$lcssa;
    return;
   }
  }
 } while(0);
 $70 = ((($0)) + 212|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = $71 & 8;
 $73 = ($72|0)==(0);
 if ($73) {
  _png_read_IDAT_data($0,0,0);
  $74 = ((($0)) + 236|0);
  HEAP32[$74>>2] = 0;
  $75 = HEAP32[$70>>2]|0;
  $76 = $75 & 8;
  $77 = ($76|0)==(0);
  $78 = ((($0)) + 208|0);
  if ($77) {
   $79 = $75 | 8;
   $80 = HEAP32[$78>>2]|0;
   $81 = $80 | 8;
   HEAP32[$78>>2] = $81;
   HEAP32[$70>>2] = $79;
  }
 }
 $82 = ((($0)) + 220|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = ($83|0)==(1229209940);
 if (!($84)) {
  return;
 }
 $85 = ((($0)) + 224|0);
 HEAP32[$85>>2] = 0;
 $86 = ((($0)) + 228|0);
 HEAP32[$86>>2] = 0;
 HEAP32[$82>>2] = 0;
 $87 = ((($0)) + 408|0);
 $88 = HEAP32[$87>>2]|0;
 (_png_crc_finish($0,$88)|0);
 return;
}
function _png_read_start_row($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$109 = 0, $$110 = 0, $$112 = 0, $$113 = 0, $$114 = 0, $$2 = 0, $$3 = 0, $$4 = 0, $$5 = 0, $$7 = 0, $$not = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $or$cond$not = 0, $spec$select = 0, $spec$select107 = 0, $spec$select108 = 0, $spec$select115 = 0;
 var $spec$select116 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 _png_init_read_transformations($0);
 $1 = ((($0)) + 432|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if ($3) {
  $29 = ((($0)) + 352|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = ((($0)) + 356|0);
  HEAP32[$31>>2] = $30;
  $32 = ((($0)) + 348|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = ((($0)) + 368|0);
  HEAP32[$34>>2] = $33;
  $$phi$trans$insert = ((($0)) + 216|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$pre$phiZ2D = $$phi$trans$insert;$102 = $33;$39 = $$pre;
 } else {
  $4 = ((($0)) + 216|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = $5 & 2;
  $7 = ($6|0)==(0);
  $8 = ((($0)) + 352|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + 7)|0;
  $11 = $10 >>> 3;
  $$sink = $7 ? $11 : $9;
  $12 = ((($0)) + 356|0);
  HEAP32[$12>>2] = $$sink;
  $13 = ((($0)) + 348|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 433|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16&255;
  $18 = (27285 + ($17)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $19&255;
  $21 = (27278 + ($17)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  $24 = (($14) + -1)|0;
  $25 = (($24) + ($20))|0;
  $26 = (($25) - ($23))|0;
  $27 = (($26>>>0) / ($20>>>0))&-1;
  $28 = ((($0)) + 368|0);
  HEAP32[$28>>2] = $27;
  $$pre$phiZ2D = $4;$102 = $14;$39 = $5;
 }
 $35 = ((($0)) + 438|0);
 $36 = HEAP8[$35>>0]|0;
 $37 = $36&255;
 $38 = $39 & 4;
 $40 = ($38|0)==(0);
 if ($40) {
  $$0 = $37;
 } else {
  $41 = ((($0)) + 436|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = ($42&255)<(8);
  $spec$select = $43 ? 8 : $37;
  $$0 = $spec$select;
 }
 $44 = $39 & 4096;
 $45 = ($44|0)==(0);
 L8: do {
  if ($45) {
   $$2 = $$0;
  } else {
   $46 = ((($0)) + 435|0);
   $47 = HEAP8[$46>>0]|0;
   switch ($47<<24>>24) {
   case 3:  {
    $48 = ((($0)) + 428|0);
    $49 = HEAP16[$48>>1]|0;
    $50 = ($49<<16>>16)==(0);
    $$ = $50 ? 24 : 32;
    $$2 = $$;
    break L8;
    break;
   }
   case 0:  {
    $51 = ($$0>>>0)>(8);
    $spec$select107 = $51 ? $$0 : 8;
    $52 = ((($0)) + 428|0);
    $53 = HEAP16[$52>>1]|0;
    $54 = ($53<<16>>16)!=(0);
    $55 = $54&1;
    $spec$select116 = $spec$select107 << $55;
    $$2 = $spec$select116;
    break L8;
    break;
   }
   case 2:  {
    $56 = ((($0)) + 428|0);
    $57 = HEAP16[$56>>1]|0;
    $58 = ($57<<16>>16)==(0);
    if ($58) {
     $$2 = $$0;
     break L8;
    }
    $59 = $$0 << 2;
    $60 = (($59>>>0) / 3)&-1;
    $$2 = $60;
    break L8;
    break;
   }
   default: {
    $$2 = $$0;
    break L8;
   }
   }
  }
 } while(0);
 $61 = $39 & 512;
 $62 = ($61|0)==(0);
 do {
  if ($62) {
   $$3 = $$2;
  } else {
   if ($45) {
    $67 = $39 & -513;
    HEAP32[$$pre$phiZ2D>>2] = $67;
    $$3 = $$2;
    break;
   } else {
    $63 = ((($0)) + 436|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = ($64&255)<(16);
    $66 = $65&1;
    $spec$select108 = $$2 << $66;
    $$3 = $spec$select108;
    break;
   }
  }
 } while(0);
 $68 = HEAP32[$$pre$phiZ2D>>2]|0;
 $69 = $68 & 32768;
 $70 = ($69|0)==(0);
 L22: do {
  if ($70) {
   $$4 = $$3;
  } else {
   $71 = ((($0)) + 435|0);
   $72 = HEAP8[$71>>0]|0;
   switch ($72<<24>>24) {
   case 0:  {
    $73 = ($$3|0)<(9);
    $$109 = $73 ? 16 : 32;
    $$4 = $$109;
    break L22;
    break;
   }
   case 3: case 2:  {
    $74 = ($$3|0)<(33);
    $$110 = $74 ? 32 : 64;
    $$4 = $$110;
    break L22;
    break;
   }
   default: {
    $$4 = $$3;
    break L22;
   }
   }
  }
 } while(0);
 $75 = $68 & 16384;
 $76 = ($75|0)==(0);
 do {
  if ($76) {
   $$5 = $$4;
  } else {
   $77 = ((($0)) + 428|0);
   $78 = HEAP16[$77>>1]|0;
   $79 = ($78<<16>>16)!=(0);
   $80 = $68 & 4096;
   $81 = ($80|0)!=(0);
   $or$cond$not = $81 & $79;
   $$not = $70 ^ 1;
   $brmerge = $or$cond$not | $$not;
   if (!($brmerge)) {
    $82 = ((($0)) + 435|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = ($83<<24>>24)==(4);
    if (!($84)) {
     $86 = ($$4|0)<(9);
     $87 = ($83<<24>>24)==(6);
     if ($86) {
      $$113 = $87 ? 32 : 24;
      $$5 = $$113;
      break;
     } else {
      $$114 = $87 ? 64 : 48;
      $$5 = $$114;
      break;
     }
    }
   }
   $85 = ($$4|0)<(17);
   $$112 = $85 ? 32 : 64;
   $$5 = $$112;
  }
 } while(0);
 $88 = $68 & 1048576;
 $89 = ($88|0)==(0);
 if ($89) {
  $$7 = $$5;
 } else {
  $90 = ((($0)) + 204|0);
  $91 = HEAP8[$90>>0]|0;
  $92 = $91&255;
  $93 = ((($0)) + 205|0);
  $94 = HEAP8[$93>>0]|0;
  $95 = $94&255;
  $96 = Math_imul($95, $92)|0;
  $97 = ($96|0)>($$5|0);
  $spec$select115 = $97 ? $96 : $$5;
  $$7 = $spec$select115;
 }
 $98 = $$7&255;
 $99 = ((($0)) + 442|0);
 HEAP8[$99>>0] = $98;
 $100 = ((($0)) + 443|0);
 HEAP8[$100>>0] = 0;
 $101 = (($102) + 7)|0;
 $103 = $101 & -8;
 $104 = ($$7|0)>(7);
 $105 = $$7 >>> 3;
 $106 = Math_imul($103, $105)|0;
 $107 = Math_imul($103, $$7)|0;
 $108 = $107 >>> 3;
 $109 = $104 ? $106 : $108;
 $110 = (($$7) + 7)|0;
 $111 = $110 >> 3;
 $112 = (($111) + 49)|0;
 $113 = (($112) + ($109))|0;
 $114 = ((($0)) + 784|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = ($113>>>0)>($115>>>0);
 if ($116) {
  $117 = ((($0)) + 728|0);
  $118 = HEAP32[$117>>2]|0;
  _png_free($0,$118);
  $119 = ((($0)) + 804|0);
  $120 = HEAP32[$119>>2]|0;
  _png_free($0,$120);
  $121 = HEAP8[$1>>0]|0;
  $122 = ($121<<24>>24)==(0);
  if ($122) {
   $124 = (_png_malloc($0,$113)|0);
   $storemerge = $124;
  } else {
   $123 = (_png_calloc($0,$113)|0);
   $storemerge = $123;
  }
  HEAP32[$117>>2] = $storemerge;
  $125 = (_png_malloc($0,$113)|0);
  HEAP32[$119>>2] = $125;
  $126 = HEAP32[$117>>2]|0;
  $127 = ((($126)) + 32|0);
  $128 = $127;
  $129 = $128 & 15;
  $130 = (0 - ($129))|0;
  $131 = (($127) + ($130)|0);
  $132 = ((($131)) + -1|0);
  $133 = ((($0)) + 384|0);
  HEAP32[$133>>2] = $132;
  $134 = ((($125)) + 32|0);
  $135 = $134;
  $136 = $135 & 15;
  $137 = (0 - ($136))|0;
  $138 = (($134) + ($137)|0);
  $139 = ((($138)) + -1|0);
  $140 = ((($0)) + 380|0);
  HEAP32[$140>>2] = $139;
  HEAP32[$114>>2] = $113;
 }
 $141 = ((($0)) + 364|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = ($142|0)==(-1);
 if ($143) {
  _png_error($0,23035);
  // unreachable;
 }
 $144 = ((($0)) + 380|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = (($142) + 1)|0;
 _memset(($145|0),0,($146|0))|0;
 $147 = ((($0)) + 788|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = ($148|0)==(0|0);
 if (!($149)) {
  $150 = ((($0)) + 792|0);
  HEAP32[$150>>2] = 0;
  HEAP32[$147>>2] = 0;
  _png_free($0,$148);
 }
 $151 = (_png_inflate_claim($0,1229209940)|0);
 $152 = ($151|0)==(0);
 if ($152) {
  $155 = ((($0)) + 212|0);
  $156 = HEAP32[$155>>2]|0;
  $157 = $156 | 64;
  HEAP32[$155>>2] = $157;
  return;
 } else {
  $153 = ((($0)) + 248|0);
  $154 = HEAP32[$153>>2]|0;
  _png_error($0,$154);
  // unreachable;
 }
}
function _png_init_read_transformations($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$034$i = 0, $$0422453 = 0, $$0423461 = 0, $$0424 = 0, $$0425 = 0, $$04253$i = 0, $$0426 = 0, $$0427 = 0, $$0428455 = 0, $$0429457 = 0, $$04355$i = 0, $$04454$i = 0, $$145$i = 0, $$1451 = 0, $$2450 = 0, $$3$ph$i = 0, $$lobit$i = 0, $$pre475 = 0;
 var $$pre476 = 0, $$pre478 = 0, $$pre479 = 0, $$pre481 = 0, $$pre482 = 0, $$pre483 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0205$1 = 0, $$sroa$0206$0 = 0, $$sroa$0206$0$$sroa_idx = 0, $$sroa$0206$1 = 0, $$sroa$10$1 = 0, $$sroa$5$0$$sroa_idx = 0, $$sroa$6$1 = 0, $$sroa$6207$0 = 0, $$sroa$6207$0$$sroa_idx = 0, $$sroa$6207$1 = 0, $$sroa$7$0$$sroa_idx = 0, $$sroa$9$0 = 0, $$sroa$9$0$$sroa_idx = 0;
 var $$sroa$9$1 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0, $exitcond469 = 0;
 var $exitcond470 = 0, $exitcond471 = 0, $exitcond472 = 0, $exitcond473 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond37$i = 0, $or$cond443 = 0, $or$cond466 = 0, $or$cond467 = 0, $or$cond468 = 0, $or$cond5 = 0, $phitmp$i = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 824|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0);
 $5 = ((($0)) + 488|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 do {
  if ($4) {
   if ($7) {
    $14 = (_png_reciprocal($6)|0);
    HEAP32[$2>>2] = $14;
    $$0 = 0;
    break;
   } else {
    HEAP32[$2>>2] = 100000;
    HEAP32[$5>>2] = 100000;
    $$0 = 0;
    break;
   }
  } else {
   if (!($7)) {
    $13 = (_png_reciprocal($3)|0);
    HEAP32[$5>>2] = $13;
    $$0 = 0;
    break;
   }
   $8 = (_png_muldiv($1,$3,$6,100000)|0);
   $9 = ($8|0)==(0);
   if ($9) {
    $656 = 1;
   } else {
    $10 = HEAP32[$1>>2]|0;
    $11 = (_png_gamma_significant($10)|0);
    $12 = ($11|0)!=(0);
    $phitmp$i = $12&1;
    $656 = $phitmp$i;
   }
   $$0 = $656;
  }
 } while(0);
 $15 = ((($0)) + 898|0);
 $16 = HEAP16[$15>>1]|0;
 $17 = $16 | 1;
 HEAP16[$15>>1] = $17;
 $18 = ($$0|0)==(0);
 $19 = ((($0)) + 216|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = $20 & -8193;
 $22 = $20 | 8192;
 $spec$select = $18 ? $21 : $22;
 HEAP32[$19>>2] = $spec$select;
 $23 = $spec$select & 262272;
 $24 = ($23|0)==(262144);
 if ($24) {
  $25 = $spec$select & -41943297;
  HEAP32[$19>>2] = $25;
  $26 = ((($0)) + 212|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = $27 & -8193;
  HEAP32[$26>>2] = $28;
  $29 = ((($0)) + 428|0);
  HEAP16[$29>>1] = 0;
 }
 $30 = HEAP32[$5>>2]|0;
 $31 = (_png_gamma_significant($30)|0);
 $32 = ($31|0)==(0);
 $33 = HEAP32[$19>>2]|0;
 if ($32) {
  $34 = $33 & -8388609;
  HEAP32[$19>>2] = $34;
  $35 = ((($0)) + 212|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $36 & -8193;
  HEAP32[$35>>2] = $37;
  $39 = $34;
 } else {
  $39 = $33;
 }
 $38 = $39 & 6291456;
 $40 = ($38|0)==(0);
 if ($40) {
  $42 = $39;
 } else {
  _png_colorspace_set_rgb_coefficients($0);
  $$pre475 = HEAP32[$19>>2]|0;
  $42 = $$pre475;
 }
 $41 = $42 & 256;
 $43 = ($41|0)==(0);
 if ($43) {
  $51 = $42 & 16512;
  $52 = ($51|0)==(16512);
  if ($52) {
   $53 = ((($0)) + 454|0);
   $54 = HEAP16[$53>>1]|0;
   $55 = ((($0)) + 456|0);
   $56 = HEAP16[$55>>1]|0;
   $57 = ($54<<16>>16)==($56<<16>>16);
   if ($57) {
    $58 = ((($0)) + 458|0);
    $59 = HEAP16[$58>>1]|0;
    $60 = ($54<<16>>16)==($59<<16>>16);
    if ($60) {
     $61 = ((($0)) + 208|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = $62 | 2048;
     HEAP32[$61>>2] = $63;
     $64 = ((($0)) + 460|0);
     HEAP16[$64>>1] = $54;
    }
   }
  }
 } else {
  $44 = ((($0)) + 435|0);
  $45 = HEAP8[$44>>0]|0;
  $46 = $45 & 2;
  $47 = ($46<<24>>24)==(0);
  if ($47) {
   $48 = ((($0)) + 208|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = $49 | 2048;
   HEAP32[$48>>2] = $50;
  }
 }
 $65 = ((($0)) + 435|0);
 $66 = HEAP8[$65>>0]|0;
 $67 = ($66<<24>>24)==(3);
 if ($67) {
  $68 = ((($0)) + 428|0);
  $69 = HEAP16[$68>>1]|0;
  $70 = ($69<<16>>16)==(0);
  L33: do {
   if ($70) {
    $$3$ph$i = 0;
    label = 29;
   } else {
    $71 = $69&65535;
    $72 = ((($0)) + 528|0);
    $73 = HEAP32[$72>>2]|0;
    $$04355$i = 0;$$04454$i = 0;
    while(1) {
     $74 = (($73) + ($$04355$i)|0);
     $75 = HEAP8[$74>>0]|0;
     switch ($75<<24>>24) {
     case -1:  {
      $$145$i = $$04454$i;
      break;
     }
     case 0:  {
      $$145$i = 1;
      break;
     }
     default: {
      $85 = $42;
      break L33;
     }
     }
     $76 = (($$04355$i) + 1)|0;
     $77 = ($76>>>0)<($71>>>0);
     if ($77) {
      $$04355$i = $76;$$04454$i = $$145$i;
     } else {
      $$3$ph$i = $$145$i;
      label = 29;
      break L33;
     }
    }
   }
  } while(0);
  if ((label|0) == 29) {
   $78 = $42 & -8388609;
   HEAP32[$19>>2] = $78;
   $79 = ((($0)) + 212|0);
   $80 = HEAP32[$79>>2]|0;
   $81 = $80 & -8193;
   HEAP32[$79>>2] = $81;
   $82 = ($$3$ph$i|0)==(0);
   $83 = $42 & -8388993;
   if ($82) {
    HEAP32[$19>>2] = $83;
    $85 = $83;
   } else {
    $85 = $78;
   }
  }
  $84 = $85 & 4352;
  $86 = ($84|0)==(4352);
  if ($86) {
   $87 = ((($0)) + 416|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = ((($0)) + 452|0);
   $90 = HEAP8[$89>>0]|0;
   $91 = $90&255;
   $92 = (($88) + (($91*3)|0)|0);
   $93 = HEAP8[$92>>0]|0;
   $94 = $93&255;
   $95 = ((($0)) + 454|0);
   HEAP16[$95>>1] = $94;
   $96 = (((($88) + (($91*3)|0)|0)) + 1|0);
   $97 = HEAP8[$96>>0]|0;
   $98 = $97&255;
   $99 = ((($0)) + 456|0);
   HEAP16[$99>>1] = $98;
   $100 = (((($88) + (($91*3)|0)|0)) + 2|0);
   $101 = HEAP8[$100>>0]|0;
   $102 = $101&255;
   $103 = ((($0)) + 458|0);
   HEAP16[$103>>1] = $102;
   $104 = $85 & 34078720;
   $105 = ($104|0)==(524288);
   if ($105) {
    $106 = $69&65535;
    if ($70) {
     $152 = $85;
    } else {
     $107 = ((($0)) + 528|0);
     $108 = HEAP32[$107>>2]|0;
     $$04253$i = 0;
     while(1) {
      $109 = (($108) + ($$04253$i)|0);
      $110 = HEAP8[$109>>0]|0;
      $111 = $110 ^ -1;
      HEAP8[$109>>0] = $111;
      $112 = (($$04253$i) + 1)|0;
      $exitcond$i = ($112|0)==($106|0);
      if ($exitcond$i) {
       break;
      } else {
       $$04253$i = $112;
      }
     }
     $$pre476 = HEAP32[$19>>2]|0;
     $152 = $$pre476;
    }
   } else {
    $152 = $85;
   }
  } else {
   $152 = $85;
  }
 } else {
  $$lobit$i = $66 & 4;
  $113 = ($$lobit$i<<24>>24)==(0);
  if ($113) {
   $114 = ((($0)) + 428|0);
   $115 = HEAP16[$114>>1]|0;
   $116 = ($115<<16>>16)==(0);
   $117 = $42 & -8388609;
   HEAP32[$19>>2] = $117;
   $118 = ((($0)) + 212|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = $119 & -8193;
   HEAP32[$118>>2] = $120;
   $121 = $42 & -8388993;
   if ($116) {
    HEAP32[$19>>2] = $121;
    $123 = $121;
   } else {
    $123 = $117;
   }
  } else {
   $123 = $42;
  }
  $122 = $123 & 4352;
  $124 = ($122|0)==(4352);
  $125 = $66 & 2;
  $126 = ($125<<24>>24)==(0);
  $or$cond37$i = $126 & $124;
  if ($or$cond37$i) {
   $127 = ((($0)) + 460|0);
   $128 = HEAP16[$127>>1]|0;
   $129 = $128&65535;
   $130 = ((($0)) + 540|0);
   $131 = HEAP16[$130>>1]|0;
   $132 = $131&65535;
   $133 = ((($0)) + 436|0);
   $134 = HEAP8[$133>>0]|0;
   switch ($134<<24>>24) {
   case 1:  {
    $135 = ($129*255)|0;
    $136 = ($132*255)|0;
    $$0$i = $136;$$034$i = $135;
    break;
   }
   case 2:  {
    $137 = ($129*85)|0;
    $138 = ($132*85)|0;
    $$0$i = $138;$$034$i = $137;
    break;
   }
   case 4:  {
    $139 = ($129*17)|0;
    $140 = ($132*17)|0;
    $$0$i = $140;$$034$i = $139;
    break;
   }
   default: {
    $$0$i = $132;$$034$i = $129;
   }
   }
   $141 = $$034$i&65535;
   $142 = ((($0)) + 458|0);
   HEAP16[$142>>1] = $141;
   $143 = ((($0)) + 456|0);
   HEAP16[$143>>1] = $141;
   $144 = ((($0)) + 454|0);
   HEAP16[$144>>1] = $141;
   $145 = $123 & 33554432;
   $146 = ($145|0)==(0);
   if ($146) {
    $147 = $$0$i&65535;
    $148 = ((($0)) + 538|0);
    HEAP16[$148>>1] = $147;
    $149 = ((($0)) + 536|0);
    HEAP16[$149>>1] = $147;
    $150 = ((($0)) + 534|0);
    HEAP16[$150>>1] = $147;
    $152 = $123;
   } else {
    $152 = $123;
   }
  } else {
   $152 = $123;
  }
 }
 $151 = $152 & 896;
 $153 = ($151|0)==(640);
 if ($153) {
  $154 = ((($0)) + 436|0);
  $155 = HEAP8[$154>>0]|0;
  $156 = ($155<<24>>24)==(16);
  if (!($156)) {
   $157 = ((($0)) + 454|0);
   $158 = HEAP16[$157>>1]|0;
   $159 = $158&65535;
   $160 = ($159*255)|0;
   $161 = (($160) + 32895)|0;
   $162 = $161 >>> 16;
   $163 = $162&65535;
   HEAP16[$157>>1] = $163;
   $164 = ((($0)) + 456|0);
   $165 = HEAP16[$164>>1]|0;
   $166 = $165&65535;
   $167 = ($166*255)|0;
   $168 = (($167) + 32895)|0;
   $169 = $168 >>> 16;
   $170 = $169&65535;
   HEAP16[$164>>1] = $170;
   $171 = ((($0)) + 458|0);
   $172 = HEAP16[$171>>1]|0;
   $173 = $172&65535;
   $174 = ($173*255)|0;
   $175 = (($174) + 32895)|0;
   $176 = $175 >>> 16;
   $177 = $176&65535;
   HEAP16[$171>>1] = $177;
   $178 = ((($0)) + 460|0);
   $179 = HEAP16[$178>>1]|0;
   $180 = $179&65535;
   $181 = ($180*255)|0;
   $182 = (($181) + 32895)|0;
   $183 = $182 >>> 16;
   $184 = $183&65535;
   HEAP16[$178>>1] = $184;
  }
 }
 $185 = $152 & 67109888;
 $186 = ($185|0)!=(0);
 $187 = $152 & 384;
 $188 = ($187|0)==(128);
 $189 = $188 & $186;
 if ($189) {
  $190 = ((($0)) + 436|0);
  $191 = HEAP8[$190>>0]|0;
  $192 = ($191<<24>>24)==(16);
  if ($192) {
   $193 = ((($0)) + 454|0);
   $194 = HEAP16[$193>>1]|0;
   $195 = $194&65535;
   $196 = ($195*257)|0;
   $197 = $196&65535;
   HEAP16[$193>>1] = $197;
   $198 = ((($0)) + 456|0);
   $199 = HEAP16[$198>>1]|0;
   $200 = $199&65535;
   $201 = ($200*257)|0;
   $202 = $201&65535;
   HEAP16[$198>>1] = $202;
   $203 = ((($0)) + 458|0);
   $204 = HEAP16[$203>>1]|0;
   $205 = $204&65535;
   $206 = ($205*257)|0;
   $207 = $206&65535;
   HEAP16[$203>>1] = $207;
   $208 = ((($0)) + 460|0);
   $209 = HEAP16[$208>>1]|0;
   $210 = $209&65535;
   $211 = ($210*257)|0;
   $212 = $211&65535;
   HEAP16[$208>>1] = $212;
  }
 }
 $213 = ((($0)) + 462|0);
 $214 = ((($0)) + 452|0);
 ;HEAP16[$213>>1]=HEAP16[$214>>1]|0;HEAP16[$213+2>>1]=HEAP16[$214+2>>1]|0;HEAP16[$213+4>>1]=HEAP16[$214+4>>1]|0;HEAP16[$213+6>>1]=HEAP16[$214+6>>1]|0;HEAP16[$213+8>>1]=HEAP16[$214+8>>1]|0;
 $215 = $152 & 8192;
 $216 = ($215|0)==(0);
 do {
  if ($216) {
   $217 = $152 & 6291456;
   $218 = ($217|0)==(0);
   if ($218) {
    $226 = $152;
   } else {
    $219 = HEAP32[$2>>2]|0;
    $220 = (_png_gamma_significant($219)|0);
    $221 = ($220|0)==(0);
    if (!($221)) {
     label = 66;
     break;
    }
    $222 = HEAP32[$5>>2]|0;
    $223 = (_png_gamma_significant($222)|0);
    $224 = ($223|0)==(0);
    if (!($224)) {
     label = 66;
     break;
    }
    $$pre478 = HEAP32[$19>>2]|0;
    $226 = $$pre478;
   }
   $225 = $226 & 128;
   $227 = ($225|0)==(0);
   if (!($227)) {
    $228 = HEAP32[$2>>2]|0;
    $229 = (_png_gamma_significant($228)|0);
    $230 = ($229|0)==(0);
    if (!($230)) {
     label = 66;
     break;
    }
    $231 = HEAP32[$5>>2]|0;
    $232 = (_png_gamma_significant($231)|0);
    $233 = ($232|0)==(0);
    if (!($233)) {
     label = 66;
     break;
    }
    $234 = ((($0)) + 446|0);
    $235 = HEAP8[$234>>0]|0;
    $236 = ($235<<24>>24)==(3);
    if ($236) {
     $237 = ((($0)) + 448|0);
     $238 = HEAP32[$237>>2]|0;
     $239 = (_png_gamma_significant($238)|0);
     $240 = ($239|0)==(0);
     if (!($240)) {
      label = 66;
      break;
     }
    }
   }
   $241 = HEAP32[$19>>2]|0;
   $242 = $241 & 8388608;
   $243 = ($242|0)==(0);
   if ($243) {
    $528 = $241;
   } else {
    $244 = HEAP32[$5>>2]|0;
    $245 = (_png_gamma_significant($244)|0);
    $246 = ($245|0)==(0);
    if (!($246)) {
     label = 66;
     break;
    }
    $$pre481 = HEAP32[$19>>2]|0;
    $528 = $$pre481;
   }
   $527 = $528 & 128;
   $529 = ($527|0)==(0);
   if ($529) {
    $605 = $528;
   } else {
    $530 = HEAP8[$65>>0]|0;
    $531 = ($530<<24>>24)==(3);
    if ($531) {
     $532 = ((($0)) + 428|0);
     $533 = HEAP16[$532>>1]|0;
     $534 = $533&65535;
     $535 = ((($0)) + 416|0);
     $536 = HEAP32[$535>>2]|0;
     $537 = ((($0)) + 454|0);
     $538 = HEAP16[$537>>1]|0;
     $539 = $538&255;
     $540 = ((($0)) + 456|0);
     $541 = HEAP16[$540>>1]|0;
     $542 = $541&255;
     $543 = ((($0)) + 458|0);
     $544 = HEAP16[$543>>1]|0;
     $545 = $544&255;
     $546 = ($533<<16>>16)==(0);
     if ($546) {
      $603 = $528;
     } else {
      $547 = ((($0)) + 528|0);
      $548 = $538 & 255;
      $549 = $548&65535;
      $550 = $541 & 255;
      $551 = $550&65535;
      $552 = $544 & 255;
      $553 = $552&65535;
      $$0428455 = 0;
      while(1) {
       $554 = HEAP32[$547>>2]|0;
       $555 = (($554) + ($$0428455)|0);
       $556 = HEAP8[$555>>0]|0;
       switch ($556<<24>>24) {
       case 0:  {
        $$sroa$0$0$$sroa_idx = (($536) + (($$0428455*3)|0)|0);
        HEAP8[$$sroa$0$0$$sroa_idx>>0] = $539;
        $$sroa$5$0$$sroa_idx = (((($536) + (($$0428455*3)|0)|0)) + 1|0);
        HEAP8[$$sroa$5$0$$sroa_idx>>0] = $542;
        $$sroa$7$0$$sroa_idx = (((($536) + (($$0428455*3)|0)|0)) + 2|0);
        HEAP8[$$sroa$7$0$$sroa_idx>>0] = $545;
        break;
       }
       case -1:  {
        break;
       }
       default: {
        $557 = (($536) + (($$0428455*3)|0)|0);
        $558 = HEAP8[$557>>0]|0;
        $559 = $558&255;
        $560 = $556&255;
        $561 = Math_imul($559, $560)|0;
        $562 = $560 ^ 255;
        $563 = Math_imul($562, $549)|0;
        $564 = (($563) + 128)|0;
        $565 = (($564) + ($561))|0;
        $566 = $565 >>> 8;
        $567 = $566 & 255;
        $568 = (($567) + ($565))|0;
        $569 = $568 >>> 8;
        $570 = $569&255;
        HEAP8[$557>>0] = $570;
        $571 = (((($536) + (($$0428455*3)|0)|0)) + 1|0);
        $572 = HEAP8[$571>>0]|0;
        $573 = $572&255;
        $574 = HEAP8[$555>>0]|0;
        $575 = $574&255;
        $576 = Math_imul($575, $573)|0;
        $577 = $575 ^ 255;
        $578 = Math_imul($577, $551)|0;
        $579 = (($576) + 128)|0;
        $580 = (($579) + ($578))|0;
        $581 = $580 >>> 8;
        $582 = $581 & 255;
        $583 = (($582) + ($580))|0;
        $584 = $583 >>> 8;
        $585 = $584&255;
        HEAP8[$571>>0] = $585;
        $586 = (((($536) + (($$0428455*3)|0)|0)) + 2|0);
        $587 = HEAP8[$586>>0]|0;
        $588 = $587&255;
        $589 = HEAP8[$555>>0]|0;
        $590 = $589&255;
        $591 = Math_imul($590, $588)|0;
        $592 = $590 ^ 255;
        $593 = Math_imul($592, $553)|0;
        $594 = (($591) + 128)|0;
        $595 = (($594) + ($593))|0;
        $596 = $595 >>> 8;
        $597 = $596 & 255;
        $598 = (($597) + ($595))|0;
        $599 = $598 >>> 8;
        $600 = $599&255;
        HEAP8[$586>>0] = $600;
       }
       }
       $601 = (($$0428455) + 1)|0;
       $exitcond471 = ($601|0)==($534|0);
       if ($exitcond471) {
        break;
       } else {
        $$0428455 = $601;
       }
      }
      $$pre482 = HEAP32[$19>>2]|0;
      $603 = $$pre482;
     }
     $602 = $603 & -129;
     HEAP32[$19>>2] = $602;
     $605 = $602;
    } else {
     $605 = $528;
    }
   }
  } else {
   label = 66;
  }
 } while(0);
 do {
  if ((label|0) == 66) {
   $247 = ((($0)) + 436|0);
   $248 = HEAP8[$247>>0]|0;
   $249 = $248&255;
   _png_build_gamma_table($0,$249);
   $250 = HEAP32[$19>>2]|0;
   $251 = $250 & 128;
   $252 = ($251|0)==(0);
   if ($252) {
    $497 = HEAP8[$65>>0]|0;
    $498 = ($497<<24>>24)==(3);
    if (!($498)) {
     $605 = $250;
     break;
    }
    $499 = $250 & 4096;
    $500 = ($499|0)==(0);
    $501 = $250 & 6291456;
    $502 = ($501|0)==(0);
    $or$cond443 = $500 | $502;
    if (!($or$cond443)) {
     $605 = $250;
     break;
    }
    $503 = ((($0)) + 416|0);
    $504 = HEAP32[$503>>2]|0;
    $505 = ((($0)) + 420|0);
    $506 = HEAP16[$505>>1]|0;
    $507 = $506&65535;
    $508 = ($506<<16>>16)==(0);
    if (!($508)) {
     $509 = ((($0)) + 492|0);
     $$pre479 = HEAP32[$509>>2]|0;
     $$0429457 = 0;
     while(1) {
      $510 = (($504) + (($$0429457*3)|0)|0);
      $511 = HEAP8[$510>>0]|0;
      $512 = $511&255;
      $513 = (($$pre479) + ($512)|0);
      $514 = HEAP8[$513>>0]|0;
      HEAP8[$510>>0] = $514;
      $515 = (((($504) + (($$0429457*3)|0)|0)) + 1|0);
      $516 = HEAP8[$515>>0]|0;
      $517 = $516&255;
      $518 = (($$pre479) + ($517)|0);
      $519 = HEAP8[$518>>0]|0;
      HEAP8[$515>>0] = $519;
      $520 = (((($504) + (($$0429457*3)|0)|0)) + 2|0);
      $521 = HEAP8[$520>>0]|0;
      $522 = $521&255;
      $523 = (($$pre479) + ($522)|0);
      $524 = HEAP8[$523>>0]|0;
      HEAP8[$520>>0] = $524;
      $525 = (($$0429457) + 1)|0;
      $exitcond472 = ($525|0)==($507|0);
      if ($exitcond472) {
       break;
      } else {
       $$0429457 = $525;
      }
     }
    }
    $526 = $250 & -8193;
    HEAP32[$19>>2] = $526;
    $605 = $526;
    break;
   }
   $253 = $250 & 6291456;
   $254 = ($253|0)==(0);
   if (!($254)) {
    _png_warning($0,23080);
   }
   $255 = HEAP8[$65>>0]|0;
   $256 = ($255<<24>>24)==(3);
   if (!($256)) {
    $432 = ((($0)) + 446|0);
    $433 = HEAP8[$432>>0]|0;
    switch ($433<<24>>24) {
    case 1:  {
     $434 = HEAP32[$5>>2]|0;
     $$0426 = $434;$$0427 = 100000;
     break;
    }
    case 2:  {
     $435 = HEAP32[$2>>2]|0;
     $436 = (_png_reciprocal($435)|0);
     $437 = HEAP32[$2>>2]|0;
     $438 = HEAP32[$5>>2]|0;
     $439 = (_png_reciprocal2($437,$438)|0);
     $$0426 = $436;$$0427 = $439;
     break;
    }
    case 3:  {
     $440 = ((($0)) + 448|0);
     $441 = HEAP32[$440>>2]|0;
     $442 = (_png_reciprocal($441)|0);
     $443 = HEAP32[$440>>2]|0;
     $444 = HEAP32[$5>>2]|0;
     $445 = (_png_reciprocal2($443,$444)|0);
     $$0426 = $442;$$0427 = $445;
     break;
    }
    default: {
     _png_error($0,23133);
     // unreachable;
    }
    }
    $446 = (_png_gamma_significant($$0426)|0);
    $447 = (_png_gamma_significant($$0427)|0);
    $448 = ($446|0)!=(0);
    if ($448) {
     $449 = ((($0)) + 460|0);
     $450 = HEAP16[$449>>1]|0;
     $451 = $450&65535;
     $452 = (_png_gamma_correct($0,$451,$$0426)|0);
     $453 = ((($0)) + 470|0);
     HEAP16[$453>>1] = $452;
    }
    $454 = ($447|0)!=(0);
    if ($454) {
     $455 = ((($0)) + 460|0);
     $456 = HEAP16[$455>>1]|0;
     $457 = $456&65535;
     $458 = (_png_gamma_correct($0,$457,$$0427)|0);
     HEAP16[$455>>1] = $458;
    }
    $459 = ((($0)) + 454|0);
    $460 = HEAP16[$459>>1]|0;
    $461 = ((($0)) + 456|0);
    $462 = HEAP16[$461>>1]|0;
    $463 = ($460<<16>>16)==($462<<16>>16);
    if ($463) {
     $464 = ((($0)) + 458|0);
     $465 = HEAP16[$464>>1]|0;
     $466 = ($460<<16>>16)==($465<<16>>16);
     if ($466) {
      $467 = ((($0)) + 460|0);
      $468 = HEAP16[$467>>1]|0;
      $469 = ($460<<16>>16)==($468<<16>>16);
      if ($469) {
       $492 = ((($0)) + 470|0);
       $493 = HEAP16[$492>>1]|0;
       $494 = ((($0)) + 468|0);
       HEAP16[$494>>1] = $493;
       $495 = ((($0)) + 466|0);
       HEAP16[$495>>1] = $493;
       $496 = ((($0)) + 464|0);
       HEAP16[$496>>1] = $493;
       HEAP16[$464>>1] = $460;
       HEAP16[$461>>1] = $460;
      } else {
       label = 101;
      }
     } else {
      label = 101;
     }
    } else {
     label = 101;
    }
    if ((label|0) == 101) {
     if ($448) {
      $470 = $460&65535;
      $471 = (_png_gamma_correct($0,$470,$$0426)|0);
      $472 = ((($0)) + 464|0);
      HEAP16[$472>>1] = $471;
      $473 = HEAP16[$461>>1]|0;
      $474 = $473&65535;
      $475 = (_png_gamma_correct($0,$474,$$0426)|0);
      $476 = ((($0)) + 466|0);
      HEAP16[$476>>1] = $475;
      $477 = ((($0)) + 458|0);
      $478 = HEAP16[$477>>1]|0;
      $479 = $478&65535;
      $480 = (_png_gamma_correct($0,$479,$$0426)|0);
      $481 = ((($0)) + 468|0);
      HEAP16[$481>>1] = $480;
     }
     if ($454) {
      $482 = HEAP16[$459>>1]|0;
      $483 = $482&65535;
      $484 = (_png_gamma_correct($0,$483,$$0427)|0);
      HEAP16[$459>>1] = $484;
      $485 = HEAP16[$461>>1]|0;
      $486 = $485&65535;
      $487 = (_png_gamma_correct($0,$486,$$0427)|0);
      HEAP16[$461>>1] = $487;
      $488 = ((($0)) + 458|0);
      $489 = HEAP16[$488>>1]|0;
      $490 = $489&65535;
      $491 = (_png_gamma_correct($0,$490,$$0427)|0);
      HEAP16[$488>>1] = $491;
     }
    }
    HEAP8[$432>>0] = 1;
    $$pre483 = HEAP32[$19>>2]|0;
    $605 = $$pre483;
    break;
   }
   $257 = ((($0)) + 416|0);
   $258 = HEAP32[$257>>2]|0;
   $259 = ((($0)) + 420|0);
   $260 = HEAP16[$259>>1]|0;
   $261 = $260&65535;
   $262 = ((($0)) + 446|0);
   $263 = HEAP8[$262>>0]|0;
   switch ($263<<24>>24) {
   case 2:  {
    $264 = ((($0)) + 492|0);
    $265 = HEAP32[$264>>2]|0;
    $266 = ((($0)) + 454|0);
    $267 = HEAP16[$266>>1]|0;
    $268 = $267&65535;
    $269 = (($265) + ($268)|0);
    $270 = HEAP8[$269>>0]|0;
    $271 = ((($0)) + 456|0);
    $272 = HEAP16[$271>>1]|0;
    $273 = $272&65535;
    $274 = (($265) + ($273)|0);
    $275 = HEAP8[$274>>0]|0;
    $276 = ((($0)) + 458|0);
    $277 = HEAP16[$276>>1]|0;
    $278 = $277&65535;
    $279 = (($265) + ($278)|0);
    $280 = HEAP8[$279>>0]|0;
    $281 = ((($0)) + 504|0);
    $282 = HEAP32[$281>>2]|0;
    $283 = (($282) + ($268)|0);
    $284 = HEAP8[$283>>0]|0;
    $285 = (($282) + ($273)|0);
    $286 = HEAP8[$285>>0]|0;
    $287 = (($282) + ($278)|0);
    $288 = HEAP8[$287>>0]|0;
    $$sroa$0205$1 = $284;$$sroa$0206$1 = $270;$$sroa$10$1 = $288;$$sroa$6$1 = $286;$$sroa$6207$1 = $275;$$sroa$9$1 = $280;
    break;
   }
   case 1:  {
    $289 = HEAP32[$5>>2]|0;
    $$0424 = $289;$$0425 = 100000;
    label = 74;
    break;
   }
   case 3:  {
    $290 = ((($0)) + 448|0);
    $291 = HEAP32[$290>>2]|0;
    $292 = (_png_reciprocal($291)|0);
    $293 = HEAP32[$290>>2]|0;
    $294 = HEAP32[$5>>2]|0;
    $295 = (_png_reciprocal2($293,$294)|0);
    $$0424 = $292;$$0425 = $295;
    label = 74;
    break;
   }
   default: {
    $$0424 = 100000;$$0425 = 100000;
    label = 74;
   }
   }
   do {
    if ((label|0) == 74) {
     $296 = (_png_gamma_significant($$0425)|0);
     $297 = ($296|0)==(0);
     $298 = ((($0)) + 454|0);
     $299 = HEAP16[$298>>1]|0;
     if ($297) {
      $310 = $299&255;
      $311 = ((($0)) + 456|0);
      $312 = HEAP16[$311>>1]|0;
      $313 = $312&255;
      $314 = ((($0)) + 458|0);
      $315 = HEAP16[$314>>1]|0;
      $316 = $315&255;
      $$sroa$0206$0 = $310;$$sroa$6207$0 = $313;$$sroa$9$0 = $316;
     } else {
      $300 = $299&65535;
      $301 = (_png_gamma_8bit_correct($300,$$0425)|0);
      $302 = ((($0)) + 456|0);
      $303 = HEAP16[$302>>1]|0;
      $304 = $303&65535;
      $305 = (_png_gamma_8bit_correct($304,$$0425)|0);
      $306 = ((($0)) + 458|0);
      $307 = HEAP16[$306>>1]|0;
      $308 = $307&65535;
      $309 = (_png_gamma_8bit_correct($308,$$0425)|0);
      $$sroa$0206$0 = $301;$$sroa$6207$0 = $305;$$sroa$9$0 = $309;
     }
     $317 = (_png_gamma_significant($$0424)|0);
     $318 = ($317|0)==(0);
     $319 = HEAP16[$298>>1]|0;
     if ($318) {
      $330 = $319&255;
      $331 = ((($0)) + 456|0);
      $332 = HEAP16[$331>>1]|0;
      $333 = $332&255;
      $334 = ((($0)) + 458|0);
      $335 = HEAP16[$334>>1]|0;
      $336 = $335&255;
      $$sroa$0205$1 = $330;$$sroa$0206$1 = $$sroa$0206$0;$$sroa$10$1 = $336;$$sroa$6$1 = $333;$$sroa$6207$1 = $$sroa$6207$0;$$sroa$9$1 = $$sroa$9$0;
      break;
     } else {
      $320 = $319&65535;
      $321 = (_png_gamma_8bit_correct($320,$$0424)|0);
      $322 = ((($0)) + 456|0);
      $323 = HEAP16[$322>>1]|0;
      $324 = $323&65535;
      $325 = (_png_gamma_8bit_correct($324,$$0424)|0);
      $326 = ((($0)) + 458|0);
      $327 = HEAP16[$326>>1]|0;
      $328 = $327&65535;
      $329 = (_png_gamma_8bit_correct($328,$$0424)|0);
      $$sroa$0205$1 = $321;$$sroa$0206$1 = $$sroa$0206$0;$$sroa$10$1 = $329;$$sroa$6$1 = $325;$$sroa$6207$1 = $$sroa$6207$0;$$sroa$9$1 = $$sroa$9$0;
      break;
     }
    }
   } while(0);
   $337 = ($260<<16>>16)==(0);
   if (!($337)) {
    $338 = ((($0)) + 428|0);
    $339 = ((($0)) + 528|0);
    $340 = ((($0)) + 492|0);
    $341 = ((($0)) + 504|0);
    $342 = $$sroa$0205$1&255;
    $343 = ((($0)) + 500|0);
    $344 = $$sroa$6$1&255;
    $345 = $$sroa$10$1&255;
    $$0423461 = 0;
    while(1) {
     $346 = HEAP16[$338>>1]|0;
     $347 = $346&65535;
     $348 = ($$0423461>>>0)<($347>>>0);
     L159: do {
      if ($348) {
       $349 = HEAP32[$339>>2]|0;
       $350 = (($349) + ($$0423461)|0);
       $351 = HEAP8[$350>>0]|0;
       switch ($351<<24>>24) {
       case -1:  {
        label = 86;
        break L159;
        break;
       }
       case 0:  {
        $$sroa$0206$0$$sroa_idx = (($258) + (($$0423461*3)|0)|0);
        HEAP8[$$sroa$0206$0$$sroa_idx>>0] = $$sroa$0206$1;
        $$sroa$6207$0$$sroa_idx = (((($258) + (($$0423461*3)|0)|0)) + 1|0);
        HEAP8[$$sroa$6207$0$$sroa_idx>>0] = $$sroa$6207$1;
        $$sroa$9$0$$sroa_idx = (((($258) + (($$0423461*3)|0)|0)) + 2|0);
        HEAP8[$$sroa$9$0$$sroa_idx>>0] = $$sroa$9$1;
        break L159;
        break;
       }
       default: {
        $352 = HEAP32[$341>>2]|0;
        $353 = (($258) + (($$0423461*3)|0)|0);
        $354 = HEAP8[$353>>0]|0;
        $355 = $354&255;
        $356 = (($352) + ($355)|0);
        $357 = HEAP8[$356>>0]|0;
        $358 = $357&255;
        $359 = $351&255;
        $360 = Math_imul($358, $359)|0;
        $361 = $359 ^ 255;
        $362 = Math_imul($361, $342)|0;
        $363 = (($362) + 128)|0;
        $364 = (($363) + ($360))|0;
        $365 = $364 >>> 8;
        $366 = $365 & 255;
        $367 = (($366) + ($364))|0;
        $368 = $367 >>> 8;
        $369 = HEAP32[$343>>2]|0;
        $370 = $368 & 255;
        $371 = (($369) + ($370)|0);
        $372 = HEAP8[$371>>0]|0;
        HEAP8[$353>>0] = $372;
        $373 = (((($258) + (($$0423461*3)|0)|0)) + 1|0);
        $374 = HEAP8[$373>>0]|0;
        $375 = $374&255;
        $376 = (($352) + ($375)|0);
        $377 = HEAP8[$376>>0]|0;
        $378 = $377&255;
        $379 = HEAP8[$350>>0]|0;
        $380 = $379&255;
        $381 = Math_imul($380, $378)|0;
        $382 = $380 ^ 255;
        $383 = Math_imul($382, $344)|0;
        $384 = (($381) + 128)|0;
        $385 = (($384) + ($383))|0;
        $386 = $385 >>> 8;
        $387 = $386 & 255;
        $388 = (($387) + ($385))|0;
        $389 = $388 >>> 8;
        $390 = $389 & 255;
        $391 = (($369) + ($390)|0);
        $392 = HEAP8[$391>>0]|0;
        HEAP8[$373>>0] = $392;
        $393 = (((($258) + (($$0423461*3)|0)|0)) + 2|0);
        $394 = HEAP8[$393>>0]|0;
        $395 = $394&255;
        $396 = (($352) + ($395)|0);
        $397 = HEAP8[$396>>0]|0;
        $398 = $397&255;
        $399 = HEAP8[$350>>0]|0;
        $400 = $399&255;
        $401 = Math_imul($400, $398)|0;
        $402 = $400 ^ 255;
        $403 = Math_imul($402, $345)|0;
        $404 = (($401) + 128)|0;
        $405 = (($404) + ($403))|0;
        $406 = $405 >>> 8;
        $407 = $406 & 255;
        $408 = (($407) + ($405))|0;
        $409 = $408 >>> 8;
        $410 = $409 & 255;
        $411 = (($369) + ($410)|0);
        $412 = HEAP8[$411>>0]|0;
        HEAP8[$393>>0] = $412;
        break L159;
       }
       }
      } else {
       label = 86;
      }
     } while(0);
     if ((label|0) == 86) {
      label = 0;
      $413 = HEAP32[$340>>2]|0;
      $414 = (($258) + (($$0423461*3)|0)|0);
      $415 = HEAP8[$414>>0]|0;
      $416 = $415&255;
      $417 = (($413) + ($416)|0);
      $418 = HEAP8[$417>>0]|0;
      HEAP8[$414>>0] = $418;
      $419 = (((($258) + (($$0423461*3)|0)|0)) + 1|0);
      $420 = HEAP8[$419>>0]|0;
      $421 = $420&255;
      $422 = (($413) + ($421)|0);
      $423 = HEAP8[$422>>0]|0;
      HEAP8[$419>>0] = $423;
      $424 = (((($258) + (($$0423461*3)|0)|0)) + 2|0);
      $425 = HEAP8[$424>>0]|0;
      $426 = $425&255;
      $427 = (($413) + ($426)|0);
      $428 = HEAP8[$427>>0]|0;
      HEAP8[$424>>0] = $428;
     }
     $429 = (($$0423461) + 1)|0;
     $exitcond473 = ($429|0)==($261|0);
     if ($exitcond473) {
      break;
     } else {
      $$0423461 = $429;
     }
    }
   }
   $430 = HEAP32[$19>>2]|0;
   $431 = $430 & -8321;
   HEAP32[$19>>2] = $431;
   $605 = $431;
  }
 } while(0);
 $604 = $605 & 4104;
 $606 = ($604|0)==(8);
 if (!($606)) {
  STACKTOP = sp;return;
 }
 $607 = HEAP8[$65>>0]|0;
 $608 = ($607<<24>>24)==(3);
 if (!($608)) {
  STACKTOP = sp;return;
 }
 $609 = ((($0)) + 420|0);
 $610 = HEAP16[$609>>1]|0;
 $611 = $610&65535;
 $612 = ((($0)) + 516|0);
 $613 = HEAP8[$612>>0]|0;
 $614 = $613&255;
 $615 = (8 - ($614))|0;
 $616 = $605 & -9;
 HEAP32[$19>>2] = $616;
 $617 = ($615|0)>(0);
 $618 = ($613<<24>>24)!=(0);
 $or$cond = $618 & $617;
 $619 = ($610<<16>>16)!=(0);
 $or$cond466 = $or$cond & $619;
 if ($or$cond466) {
  $620 = ((($0)) + 416|0);
  $621 = HEAP32[$620>>2]|0;
  $$0422453 = 0;
  while(1) {
   $622 = (($621) + (($$0422453*3)|0)|0);
   $623 = HEAP8[$622>>0]|0;
   $624 = $623&255;
   $625 = $624 >>> $615;
   $626 = $625&255;
   HEAP8[$622>>0] = $626;
   $627 = (($$0422453) + 1)|0;
   $exitcond470 = ($627|0)==($611|0);
   if ($exitcond470) {
    break;
   } else {
    $$0422453 = $627;
   }
  }
 }
 $628 = ((($0)) + 517|0);
 $629 = HEAP8[$628>>0]|0;
 $630 = $629&255;
 $631 = (8 - ($630))|0;
 $632 = ($631|0)>(0);
 $633 = ($629<<24>>24)!=(0);
 $or$cond3 = $633 & $632;
 $or$cond467 = $or$cond3 & $619;
 if ($or$cond467) {
  $634 = ((($0)) + 416|0);
  $635 = HEAP32[$634>>2]|0;
  $$1451 = 0;
  while(1) {
   $636 = (((($635) + (($$1451*3)|0)|0)) + 1|0);
   $637 = HEAP8[$636>>0]|0;
   $638 = $637&255;
   $639 = $638 >>> $631;
   $640 = $639&255;
   HEAP8[$636>>0] = $640;
   $641 = (($$1451) + 1)|0;
   $exitcond469 = ($641|0)==($611|0);
   if ($exitcond469) {
    break;
   } else {
    $$1451 = $641;
   }
  }
 }
 $642 = ((($0)) + 518|0);
 $643 = HEAP8[$642>>0]|0;
 $644 = $643&255;
 $645 = (8 - ($644))|0;
 $646 = ($645|0)>(0);
 $647 = ($643<<24>>24)!=(0);
 $or$cond5 = $647 & $646;
 $or$cond468 = $or$cond5 & $619;
 if (!($or$cond468)) {
  STACKTOP = sp;return;
 }
 $648 = ((($0)) + 416|0);
 $649 = HEAP32[$648>>2]|0;
 $$2450 = 0;
 while(1) {
  $650 = (((($649) + (($$2450*3)|0)|0)) + 2|0);
  $651 = HEAP8[$650>>0]|0;
  $652 = $651&255;
  $653 = $652 >>> $645;
  $654 = $653&255;
  HEAP8[$650>>0] = $654;
  $655 = (($$2450) + 1)|0;
  $exitcond = ($655|0)==($611|0);
  if ($exitcond) {
   break;
  } else {
   $$2450 = $655;
  }
 }
 STACKTOP = sp;return;
}
function _png_muldiv($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$1 = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($3|0)==(0);
 if ($4) {
  $$1 = 0;
  return ($$1|0);
 }
 $5 = ($1|0)==(0);
 $6 = ($2|0)==(0);
 $or$cond = $5 | $6;
 if ($or$cond) {
  HEAP32[$0>>2] = 0;
  $$1 = 1;
  return ($$1|0);
 }
 $7 = (+($1|0));
 $8 = (+($2|0));
 $9 = $7 * $8;
 $10 = (+($3|0));
 $11 = $9 / $10;
 $12 = $11 + 0.5;
 $13 = (+Math_floor((+$12)));
 $14 = $13 <= 2147483647.0;
 $15 = $13 >= -2147483648.0;
 $or$cond3 = $14 & $15;
 if (!($or$cond3)) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = (~~(($13)));
 HEAP32[$0>>2] = $16;
 $$1 = 1;
 return ($$1|0);
}
function _png_gamma_significant($0) {
 $0 = $0|0;
 var $$off = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$off = (($0) + -95000)|0;
 $1 = ($$off>>>0)>(10000);
 $2 = $1&1;
 return ($2|0);
}
function _png_reciprocal($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0.0, $2 = 0.0, $3 = 0.0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+($0|0));
 $2 = 1.0E+10 / $1;
 $3 = $2 + 0.5;
 $4 = (+Math_floor((+$3)));
 $5 = $4 <= 2147483647.0;
 $6 = $4 >= -2147483648.0;
 $or$cond = $5 & $6;
 $7 = (~~(($4)));
 $$0 = $or$cond ? $7 : 0;
 return ($$0|0);
}
function _png_colorspace_set_rgb_coefficients($0) {
 $0 = $0|0;
 var $$0 = 0, $$07279 = 0, $$073 = 0, $$075 = 0, $$1 = 0, $$174 = 0, $$176 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0;
 var $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0.0, $47 = 0.0, $48 = 0.0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond13 = 0, $or$cond3$i = 0, $or$cond3$i40 = 0, $or$cond3$i44 = 0, $or$cond37 = 0, $or$cond39 = 0, $or$cond7 = 0, $or$cond80 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 701|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = ($2<<24>>24)==(0);
 if (!($3)) {
  return;
 }
 $4 = ((($0)) + 898|0);
 $5 = HEAP16[$4>>1]|0;
 $6 = $5 & 2;
 $7 = ($6<<16>>16)==(0);
 if ($7) {
  return;
 }
 $8 = ((($0)) + 864|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ((($0)) + 876|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 888|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = (($11) + ($9))|0;
 $15 = (($14) + ($13))|0;
 $16 = ($15|0)>(0);
 $17 = ($9|0)>(-1);
 $or$cond = $17 & $16;
 if (!($or$cond)) {
  _png_error($0,23231);
  // unreachable;
 }
 $18 = ($9|0)==(0);
 if ($18) {
  $$075 = 0;
 } else {
  $19 = (+($9|0));
  $20 = $19 * 32768.0;
  $21 = (+($15|0));
  $22 = $20 / $21;
  $23 = $22 + 0.5;
  $24 = (+Math_floor((+$23)));
  $25 = $24 <= 2147483647.0;
  $26 = $24 >= -2147483648.0;
  $or$cond3$i = $25 & $26;
  $27 = (~~(($24)));
  if ($or$cond3$i) {
   $$075 = $27;
  } else {
   _png_error($0,23231);
   // unreachable;
  }
 }
 $28 = ($$075>>>0)<(32769);
 $29 = ($11|0)>(-1);
 $or$cond7 = $29 & $28;
 if (!($or$cond7)) {
  _png_error($0,23231);
  // unreachable;
 }
 $30 = ($11|0)==(0);
 if ($30) {
  $$073 = 0;
 } else {
  $31 = (+($11|0));
  $32 = $31 * 32768.0;
  $33 = (+($15|0));
  $34 = $32 / $33;
  $35 = $34 + 0.5;
  $36 = (+Math_floor((+$35)));
  $37 = $36 <= 2147483647.0;
  $38 = $36 >= -2147483648.0;
  $or$cond3$i44 = $37 & $38;
  $39 = (~~(($36)));
  if ($or$cond3$i44) {
   $$073 = $39;
  } else {
   _png_error($0,23231);
   // unreachable;
  }
 }
 $40 = ($$073>>>0)<(32769);
 $41 = ($13|0)>(-1);
 $or$cond13 = $41 & $40;
 if (!($or$cond13)) {
  _png_error($0,23231);
  // unreachable;
 }
 $42 = ($13|0)==(0);
 if ($42) {
  $$07279 = 0;
 } else {
  $43 = (+($13|0));
  $44 = $43 * 32768.0;
  $45 = (+($15|0));
  $46 = $44 / $45;
  $47 = $46 + 0.5;
  $48 = (+Math_floor((+$47)));
  $49 = $48 <= 2147483647.0;
  $50 = $48 >= -2147483648.0;
  $or$cond3$i40 = $49 & $50;
  $51 = (~~(($48)));
  $52 = ($51>>>0)<(32769);
  $or$cond80 = $or$cond3$i40 & $52;
  if ($or$cond80) {
   $$07279 = $51;
  } else {
   _png_error($0,23231);
   // unreachable;
  }
 }
 $53 = (($$073) + ($$075))|0;
 $54 = (($53) + ($$07279))|0;
 $55 = ($54|0)<(32770);
 if (!($55)) {
  _png_error($0,23231);
  // unreachable;
 }
 $56 = ($54|0)==(32769);
 $57 = ($54|0)<(32768);
 $spec$select = $57&1;
 $$0 = $56 ? -1 : $spec$select;
 $58 = ($$0|0)==(0);
 do {
  if ($58) {
   $$1 = $$07279;$$174 = $$073;$$176 = $$075;
  } else {
   $59 = ($$073|0)<($$075|0);
   $60 = ($$073|0)<($$07279|0);
   $or$cond37 = $59 | $60;
   if (!($or$cond37)) {
    $61 = (($$0) + ($$073))|0;
    $$1 = $$07279;$$174 = $61;$$176 = $$075;
    break;
   }
   $62 = ($$075|0)<($$073|0);
   $63 = ($$075|0)<($$07279|0);
   $or$cond39 = $62 | $63;
   if ($or$cond39) {
    $65 = (($$0) + ($$07279))|0;
    $$1 = $65;$$174 = $$073;$$176 = $$075;
    break;
   } else {
    $64 = (($$0) + ($$075))|0;
    $$1 = $$07279;$$174 = $$073;$$176 = $64;
    break;
   }
  }
 } while(0);
 $66 = (($$174) + ($$176))|0;
 $67 = (($66) + ($$1))|0;
 $68 = ($67|0)==(32768);
 if (!($68)) {
  _png_error($0,23189);
  // unreachable;
 }
 $69 = $$176&65535;
 $70 = ((($0)) + 702|0);
 HEAP16[$70>>1] = $69;
 $71 = $$174&65535;
 $72 = ((($0)) + 704|0);
 HEAP16[$72>>1] = $71;
 return;
}
function _png_build_gamma_table($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0$i$i = 0, $$0$i$i63 = 0, $$0$i$i76 = 0, $$0$i59 = 0, $$0$i70 = 0, $$0$i72 = 0, $$019$i = 0, $$019$i61 = 0, $$019$i74 = 0, $$04753$i = 0, $$052 = 0, $$055$i = 0, $$1 = 0, $$1$off = 0, $$118$i = 0, $$118$i66 = 0, $$118$i79 = 0, $$148$lcssa$i = 0, $$14850$i = 0;
 var $$153 = 0, $$154$i = 0, $$249$i = 0, $$off$i$i = 0, $$off$i$i60 = 0, $$off$i$i73 = 0, $$off$i16$i = 0, $$off$i16$i62 = 0, $$off$i16$i75 = 0, $$op = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0.0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0.0, $162 = 0.0;
 var $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0.0, $167 = 0.0, $168 = 0, $169 = 0, $17 = 0.0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0.0, $194 = 0.0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0.0, $199 = 0;
 var $2 = 0, $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0.0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0.0, $22 = 0, $220 = 0.0, $221 = 0.0, $222 = 0.0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0, $92 = 0.0, $93 = 0.0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0.0, $98 = 0, $99 = 0, $exitcond$i = 0, $exitcond$i67 = 0, $exitcond$i80 = 0, $exitcond$i88 = 0;
 var $exitcond21$i = 0, $exitcond21$i64 = 0, $exitcond21$i77 = 0, $exitcond56$i = 0, $exitcond57$i = 0, $not$or$cond3$i = 0, $not$or$cond3$i85 = 0, $or$cond$i57 = 0, $or$cond$i58 = 0, $or$cond$i69 = 0, $or$cond$i71 = 0, $or$cond$i82 = 0, $or$cond54 = 0, $phitmp89 = 0.0, $spec$select = 0, $spec$select55 = 0, $spec$select56 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 492|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = ((($0)) + 496|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = ($6|0)==(0|0);
  if (!($7)) {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  _png_warning($0,23163);
  _png_destroy_gamma_table($0);
 }
 $8 = ($1|0)<(9);
 if (!($8)) {
  $105 = ((($0)) + 435|0);
  $106 = HEAP8[$105>>0]|0;
  $107 = $106 & 2;
  $108 = ($107<<24>>24)==(0);
  if ($108) {
   $117 = ((($0)) + 519|0);
   $118 = HEAP8[$117>>0]|0;
   $$1 = $118;
  } else {
   $109 = ((($0)) + 516|0);
   $110 = HEAP8[$109>>0]|0;
   $111 = ((($0)) + 517|0);
   $112 = HEAP8[$111>>0]|0;
   $113 = ($112&255)>($110&255);
   $spec$select = $113 ? $112 : $110;
   $114 = ((($0)) + 518|0);
   $115 = HEAP8[$114>>0]|0;
   $116 = ($115&255)>($spec$select&255);
   $spec$select56 = $116 ? $115 : $spec$select;
   $$1 = $spec$select56;
  }
  $$1$off = (($$1) + -1)<<24>>24;
  $119 = ($$1$off&255)<(15);
  $120 = (16 - ($$1))<<24>>24;
  $$052 = $119 ? $120 : 0;
  $121 = ((($0)) + 216|0);
  $122 = HEAP32[$121>>2]|0;
  $123 = $122 & 67109888;
  $124 = ($123|0)!=(0);
  $125 = ($$052&255)<(5);
  $or$cond54 = $124 & $125;
  $$153 = $or$cond54 ? 5 : $$052;
  $126 = ($$153&255)<(8);
  $spec$select55 = $126 ? $$153 : 8;
  $127 = $spec$select55&255;
  $128 = ((($0)) + 484|0);
  HEAP32[$128>>2] = $127;
  $129 = ($123|0)==(0);
  $130 = ((($0)) + 496|0);
  $131 = ((($0)) + 488|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = ($132|0)>(0);
  if ($129) {
   do {
    if ($133) {
     $190 = ((($0)) + 824|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ($191|0)==(0);
     if (!($192)) {
      $193 = (+($191|0));
      $194 = 1.0E+15 / $193;
      $195 = (+($132|0));
      $196 = $194 / $195;
      $197 = $196 + 0.5;
      $198 = (+Math_floor((+$197)));
      $199 = !($198 <= 2147483647.0);
      $200 = !($198 >= -2147483648.0);
      $201 = (~~(($198)));
      $not$or$cond3$i85 = $200 | $199;
      if (!($not$or$cond3$i85)) {
       $202 = $201;
       break;
      }
     }
     $202 = 0;
    } else {
     $202 = 100000;
    }
   } while(0);
   _png_build_16bit_table($0,$130,$127,$202);
  } else {
   if ($133) {
    $134 = ((($0)) + 824|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (+($135|0));
    $137 = $136 * 1.0000000000000001E-5;
    $138 = (+($132|0));
    $139 = $137 * $138;
    $140 = $139 + 0.5;
    $141 = (+Math_floor((+$140)));
    $142 = $141 <= 2147483647.0;
    $143 = $141 >= -2147483648.0;
    $or$cond$i82 = $142 & $143;
    $144 = (~~(($141)));
    $145 = (+($144|0));
    $$op = $145 * 1.0000000000000001E-5;
    $phitmp89 = $or$cond$i82 ? $$op : 0.0;
    $163 = $phitmp89;
   } else {
    $163 = 1.0;
   }
   $146 = (8 - ($127))|0;
   $147 = 1 << $146;
   $148 = (16 - ($127))|0;
   $149 = $147 << 2;
   $150 = (_png_calloc($0,$149)|0);
   HEAP32[$130>>2] = $150;
   $$055$i = 0;
   while(1) {
    $151 = (_png_malloc($0,512)|0);
    $152 = (($150) + ($$055$i<<2)|0);
    HEAP32[$152>>2] = $151;
    $153 = (($$055$i) + 1)|0;
    $154 = ($153>>>0)<($147>>>0);
    if ($154) {
     $$055$i = $153;
    } else {
     break;
    }
   }
   $155 = 1 << $148;
   $156 = (($155) + -1)|0;
   $157 = 255 >>> $127;
   $$04753$i = 0;$$154$i = 0;
   while(1) {
    $158 = ($$154$i*257)|0;
    $159 = $158&65535;
    $160 = (($158) + 128)|0;
    $161 = (+($160|0));
    $162 = $161 / 65535.0;
    $164 = (+Math_pow((+$162),(+$163)));
    $165 = $164 * 65535.0;
    $166 = $165 + 0.5;
    $167 = (+Math_floor((+$166)));
    $168 = (~~(($167))&65535);
    $169 = $168&65535;
    $170 = Math_imul($156, $169)|0;
    $171 = (($170) + 32768)|0;
    $172 = (($171>>>0) / 65535)&-1;
    $173 = ($$04753$i>>>0)>($172>>>0);
    if ($173) {
     $$148$lcssa$i = $$04753$i;
    } else {
     $174 = (($172) + 1)|0;
     $$14850$i = $$04753$i;
     while(1) {
      $175 = $$14850$i & $157;
      $176 = (($150) + ($175<<2)|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = $$14850$i >>> $146;
      $179 = (($177) + ($178<<1)|0);
      HEAP16[$179>>1] = $159;
      $180 = (($$14850$i) + 1)|0;
      $exitcond56$i = ($180|0)==($174|0);
      if ($exitcond56$i) {
       $$148$lcssa$i = $174;
       break;
      } else {
       $$14850$i = $180;
      }
     }
    }
    $181 = (($$154$i) + 1)|0;
    $exitcond57$i = ($181|0)==(255);
    if ($exitcond57$i) {
     break;
    } else {
     $$04753$i = $$148$lcssa$i;$$154$i = $181;
    }
   }
   $182 = $147 << 8;
   $183 = ($$148$lcssa$i>>>0)<($182>>>0);
   if ($183) {
    $$249$i = $$148$lcssa$i;
    while(1) {
     $184 = $$249$i & $157;
     $185 = (($150) + ($184<<2)|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = $$249$i >>> $146;
     $188 = (($186) + ($187<<1)|0);
     HEAP16[$188>>1] = -1;
     $189 = (($$249$i) + 1)|0;
     $exitcond$i88 = ($189|0)==($182|0);
     if ($exitcond$i88) {
      break;
     } else {
      $$249$i = $189;
     }
    }
   }
  }
  $203 = HEAP32[$121>>2]|0;
  $204 = $203 & 6291584;
  $205 = ($204|0)==(0);
  if ($205) {
   return;
  }
  $206 = ((($0)) + 512|0);
  $207 = ((($0)) + 824|0);
  $208 = HEAP32[$207>>2]|0;
  $209 = (+($208|0));
  $210 = 1.0E+10 / $209;
  $211 = $210 + 0.5;
  $212 = (+Math_floor((+$211)));
  $213 = $212 <= 2147483647.0;
  $214 = $212 >= -2147483648.0;
  $or$cond$i71 = $213 & $214;
  $215 = (~~(($212)));
  $$0$i72 = $or$cond$i71 ? $215 : 0;
  _png_build_16bit_table($0,$206,$127,$$0$i72);
  $216 = ((($0)) + 508|0);
  $217 = HEAP32[$131>>2]|0;
  $218 = ($217|0)>(0);
  if ($218) {
   $219 = (+($217|0));
   $220 = 1.0E+10 / $219;
   $221 = $220 + 0.5;
   $222 = (+Math_floor((+$221)));
   $223 = $222 <= 2147483647.0;
   $224 = $222 >= -2147483648.0;
   $or$cond$i58 = $223 & $224;
   $225 = (~~(($222)));
   $$0$i59 = $or$cond$i58 ? $225 : 0;
   $227 = $$0$i59;
  } else {
   $226 = HEAP32[$207>>2]|0;
   $227 = $226;
  }
  _png_build_16bit_table($0,$216,$127,$227);
  return;
 }
 $9 = ((($0)) + 488|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)>(0);
 do {
  if ($11) {
   $12 = ((($0)) + 824|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)==(0);
   if (!($14)) {
    $15 = (+($13|0));
    $16 = 1.0E+15 / $15;
    $17 = (+($10|0));
    $18 = $16 / $17;
    $19 = $18 + 0.5;
    $20 = (+Math_floor((+$19)));
    $21 = !($20 <= 2147483647.0);
    $22 = !($20 >= -2147483648.0);
    $23 = (~~(($20)));
    $not$or$cond3$i = $22 | $21;
    if (!($not$or$cond3$i)) {
     $25 = $23;
     break;
    }
   }
   $25 = 0;
  } else {
   $25 = 100000;
  }
 } while(0);
 $24 = (_png_malloc($0,256)|0);
 HEAP32[$2>>2] = $24;
 $$off$i$i = (($25) + -95000)|0;
 $26 = ($$off$i$i>>>0)<(10001);
 if ($26) {
  $$118$i = 0;
  while(1) {
   $40 = $$118$i&255;
   $41 = (($24) + ($$118$i)|0);
   HEAP8[$41>>0] = $40;
   $42 = (($$118$i) + 1)|0;
   $exitcond$i = ($42|0)==(256);
   if ($exitcond$i) {
    break;
   } else {
    $$118$i = $42;
   }
  }
 } else {
  $27 = (+($25|0));
  $28 = $27 * 1.0000000000000001E-5;
  $$019$i = 0;
  while(1) {
   $$off$i16$i = (($$019$i) + -1)|0;
   $29 = ($$off$i16$i>>>0)<(254);
   if ($29) {
    $30 = (+($$019$i|0));
    $31 = $30 / 255.0;
    $32 = (+Math_pow((+$31),(+$28)));
    $33 = $32 * 255.0;
    $34 = $33 + 0.5;
    $35 = (+Math_floor((+$34)));
    $36 = (~~(($35))&255);
    $$0$i$i = $36;
   } else {
    $37 = $$019$i&255;
    $$0$i$i = $37;
   }
   $38 = (($24) + ($$019$i)|0);
   HEAP8[$38>>0] = $$0$i$i;
   $39 = (($$019$i) + 1)|0;
   $exitcond21$i = ($39|0)==(256);
   if ($exitcond21$i) {
    break;
   } else {
    $$019$i = $39;
   }
  }
 }
 $43 = ((($0)) + 216|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $44 & 6291584;
 $46 = ($45|0)==(0);
 if ($46) {
  return;
 }
 $47 = ((($0)) + 504|0);
 $48 = ((($0)) + 824|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = (+($49|0));
 $51 = 1.0E+10 / $50;
 $52 = $51 + 0.5;
 $53 = (+Math_floor((+$52)));
 $54 = $53 <= 2147483647.0;
 $55 = $53 >= -2147483648.0;
 $or$cond$i57 = $54 & $55;
 $56 = (~~(($53)));
 $$0$i = $or$cond$i57 ? $56 : 0;
 $57 = (_png_malloc($0,256)|0);
 HEAP32[$47>>2] = $57;
 $$off$i$i60 = (($$0$i) + -95000)|0;
 $58 = ($$off$i$i60>>>0)<(10001);
 if ($58) {
  $$118$i66 = 0;
  while(1) {
   $72 = $$118$i66&255;
   $73 = (($57) + ($$118$i66)|0);
   HEAP8[$73>>0] = $72;
   $74 = (($$118$i66) + 1)|0;
   $exitcond$i67 = ($74|0)==(256);
   if ($exitcond$i67) {
    break;
   } else {
    $$118$i66 = $74;
   }
  }
 } else {
  $59 = (+($$0$i|0));
  $60 = $59 * 1.0000000000000001E-5;
  $$019$i61 = 0;
  while(1) {
   $$off$i16$i62 = (($$019$i61) + -1)|0;
   $61 = ($$off$i16$i62>>>0)<(254);
   if ($61) {
    $62 = (+($$019$i61|0));
    $63 = $62 / 255.0;
    $64 = (+Math_pow((+$63),(+$60)));
    $65 = $64 * 255.0;
    $66 = $65 + 0.5;
    $67 = (+Math_floor((+$66)));
    $68 = (~~(($67))&255);
    $$0$i$i63 = $68;
   } else {
    $69 = $$019$i61&255;
    $$0$i$i63 = $69;
   }
   $70 = (($57) + ($$019$i61)|0);
   HEAP8[$70>>0] = $$0$i$i63;
   $71 = (($$019$i61) + 1)|0;
   $exitcond21$i64 = ($71|0)==(256);
   if ($exitcond21$i64) {
    break;
   } else {
    $$019$i61 = $71;
   }
  }
 }
 $75 = ((($0)) + 500|0);
 $76 = HEAP32[$9>>2]|0;
 $77 = ($76|0)>(0);
 if ($77) {
  $78 = (+($76|0));
  $79 = 1.0E+10 / $78;
  $80 = $79 + 0.5;
  $81 = (+Math_floor((+$80)));
  $82 = $81 <= 2147483647.0;
  $83 = $81 >= -2147483648.0;
  $or$cond$i69 = $82 & $83;
  $84 = (~~(($81)));
  $$0$i70 = $or$cond$i69 ? $84 : 0;
  $87 = $$0$i70;
 } else {
  $85 = HEAP32[$48>>2]|0;
  $87 = $85;
 }
 $86 = (_png_malloc($0,256)|0);
 HEAP32[$75>>2] = $86;
 $$off$i$i73 = (($87) + -95000)|0;
 $88 = ($$off$i$i73>>>0)<(10001);
 if ($88) {
  $$118$i79 = 0;
  while(1) {
   $102 = $$118$i79&255;
   $103 = (($86) + ($$118$i79)|0);
   HEAP8[$103>>0] = $102;
   $104 = (($$118$i79) + 1)|0;
   $exitcond$i80 = ($104|0)==(256);
   if ($exitcond$i80) {
    break;
   } else {
    $$118$i79 = $104;
   }
  }
  return;
 }
 $89 = (+($87|0));
 $90 = $89 * 1.0000000000000001E-5;
 $$019$i74 = 0;
 while(1) {
  $$off$i16$i75 = (($$019$i74) + -1)|0;
  $91 = ($$off$i16$i75>>>0)<(254);
  if ($91) {
   $92 = (+($$019$i74|0));
   $93 = $92 / 255.0;
   $94 = (+Math_pow((+$93),(+$90)));
   $95 = $94 * 255.0;
   $96 = $95 + 0.5;
   $97 = (+Math_floor((+$96)));
   $98 = (~~(($97))&255);
   $$0$i$i76 = $98;
  } else {
   $99 = $$019$i74&255;
   $$0$i$i76 = $99;
  }
  $100 = (($86) + ($$019$i74)|0);
  HEAP8[$100>>0] = $$0$i$i76;
  $101 = (($$019$i74) + 1)|0;
  $exitcond21$i77 = ($101|0)==(256);
  if ($exitcond21$i77) {
   break;
  } else {
   $$019$i74 = $101;
  }
 }
 return;
}
function _png_reciprocal2($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, $not$or$cond3 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)!=(0);
 $3 = ($1|0)!=(0);
 $or$cond = $2 & $3;
 if ($or$cond) {
  $4 = (+($0|0));
  $5 = 1.0E+15 / $4;
  $6 = (+($1|0));
  $7 = $5 / $6;
  $8 = $7 + 0.5;
  $9 = (+Math_floor((+$8)));
  $10 = !($9 <= 2147483647.0);
  $11 = !($9 >= -2147483648.0);
  $12 = (~~(($9)));
  $not$or$cond3 = $11 | $10;
  if (!($not$or$cond3)) {
   $$1 = $12;
   return ($$1|0);
  }
 }
 $$1 = 0;
 return ($$1|0);
}
function _png_gamma_8bit_correct($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$off = 0, $10 = 0.0, $11 = 0, $12 = 0, $2 = 0, $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $$off = (($0) + -1)|0;
 $2 = ($$off>>>0)<(254);
 if ($2) {
  $3 = (+($0|0));
  $4 = $3 / 255.0;
  $5 = (+($1|0));
  $6 = $5 * 1.0000000000000001E-5;
  $7 = (+Math_pow((+$4),(+$6)));
  $8 = $7 * 255.0;
  $9 = $8 + 0.5;
  $10 = (+Math_floor((+$9)));
  $11 = (~~(($10))&255);
  $$0 = $11;
  return ($$0|0);
 } else {
  $12 = $0&255;
  $$0 = $12;
  return ($$0|0);
 }
 return (0)|0;
}
function _png_gamma_correct($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0$i = 0, $$off$i = 0, $10 = 0.0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $20 = 0.0, $21 = 0.0, $22 = 0.0, $23 = 0.0, $24 = 0.0, $25 = 0.0, $26 = 0.0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 436|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4<<24>>24)==(8);
 $$off$i = (($1) + -1)|0;
 if ($5) {
  $6 = ($$off$i>>>0)<(254);
  if ($6) {
   $7 = (+($1|0));
   $8 = $7 / 255.0;
   $9 = (+($2|0));
   $10 = $9 * 1.0000000000000001E-5;
   $11 = (+Math_pow((+$8),(+$10)));
   $12 = $11 * 255.0;
   $13 = $12 + 0.5;
   $14 = (+Math_floor((+$13)));
   $15 = (~~(($14))&255);
   $$0$i = $15;
  } else {
   $16 = $1&255;
   $$0$i = $16;
  }
  $17 = $$0$i&255;
  $$0 = $17;
  return ($$0|0);
 } else {
  $18 = ($$off$i>>>0)<(65534);
  if ($18) {
   $19 = (+($1|0));
   $20 = $19 / 65535.0;
   $21 = (+($2|0));
   $22 = $21 * 1.0000000000000001E-5;
   $23 = (+Math_pow((+$20),(+$22)));
   $24 = $23 * 65535.0;
   $25 = $24 + 0.5;
   $26 = (+Math_floor((+$25)));
   $27 = (~~(($26))&65535);
   $$0 = $27;
   return ($$0|0);
  } else {
   $28 = $1&65535;
   $$0 = $28;
   return ($$0|0);
  }
 }
 return (0)|0;
}
function _png_destroy_gamma_table($0) {
 $0 = $0|0;
 var $$04650 = 0, $$04751 = 0, $$056 = 0, $$lcssa = 0, $$lcssa48 = 0, $$lcssa49 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 492|0);
 $2 = HEAP32[$1>>2]|0;
 _png_free($0,$2);
 HEAP32[$1>>2] = 0;
 $3 = ((($0)) + 496|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($0)) + 484|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (8 - ($7))|0;
  $9 = 1 << $8;
  $10 = ($8|0)==(31);
  if ($10) {
   $$lcssa49 = $4;
  } else {
   $$056 = 0;$12 = $4;
   while(1) {
    $11 = (($12) + ($$056<<2)|0);
    $13 = HEAP32[$11>>2]|0;
    _png_free($0,$13);
    $14 = (($$056) + 1)|0;
    $15 = ($14|0)<($9|0);
    $16 = HEAP32[$3>>2]|0;
    if ($15) {
     $$056 = $14;$12 = $16;
    } else {
     $$lcssa49 = $16;
     break;
    }
   }
  }
  _png_free($0,$$lcssa49);
  HEAP32[$3>>2] = 0;
 }
 $17 = ((($0)) + 500|0);
 $18 = HEAP32[$17>>2]|0;
 _png_free($0,$18);
 HEAP32[$17>>2] = 0;
 $19 = ((($0)) + 504|0);
 $20 = HEAP32[$19>>2]|0;
 _png_free($0,$20);
 HEAP32[$19>>2] = 0;
 $21 = ((($0)) + 508|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if (!($23)) {
  $24 = ((($0)) + 484|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = (8 - ($25))|0;
  $27 = 1 << $26;
  $28 = ($26|0)==(31);
  if ($28) {
   $$lcssa48 = $22;
  } else {
   $$04751 = 0;$30 = $22;
   while(1) {
    $29 = (($30) + ($$04751<<2)|0);
    $31 = HEAP32[$29>>2]|0;
    _png_free($0,$31);
    $32 = (($$04751) + 1)|0;
    $33 = ($32|0)<($27|0);
    $34 = HEAP32[$21>>2]|0;
    if ($33) {
     $$04751 = $32;$30 = $34;
    } else {
     $$lcssa48 = $34;
     break;
    }
   }
  }
  _png_free($0,$$lcssa48);
  HEAP32[$21>>2] = 0;
 }
 $35 = ((($0)) + 512|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)==(0|0);
 if ($37) {
  return;
 }
 $38 = ((($0)) + 484|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = (8 - ($39))|0;
 $41 = 1 << $40;
 $42 = ($40|0)==(31);
 if ($42) {
  $$lcssa = $36;
 } else {
  $$04650 = 0;$44 = $36;
  while(1) {
   $43 = (($44) + ($$04650<<2)|0);
   $45 = HEAP32[$43>>2]|0;
   _png_free($0,$45);
   $46 = (($$04650) + 1)|0;
   $47 = ($46|0)<($41|0);
   $48 = HEAP32[$35>>2]|0;
   if ($47) {
    $$04650 = $46;$44 = $48;
   } else {
    $$lcssa = $48;
    break;
   }
  }
 }
 _png_free($0,$$lcssa);
 HEAP32[$35>>2] = 0;
 return;
}
function _png_build_16bit_table($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05964$us$us = 0, $$05964$us69 = 0, $$06065 = 0, $$06065$us = 0, $$06163 = 0, $$off$i = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0.0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0.0, $41 = 0.0, $42 = 0.0;
 var $43 = 0.0, $44 = 0.0, $45 = 0.0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, $exitcond = 0, $exitcond75 = 0, $exitcond76 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (8 - ($2))|0;
 $5 = 1 << $4;
 $6 = (16 - ($2))|0;
 $7 = 1 << $6;
 $8 = (($7) + -1)|0;
 $9 = (+($8|0));
 $10 = 1.0 / $9;
 $11 = (15 - ($2))|0;
 $12 = 1 << $11;
 $13 = $5 << 2;
 $14 = (_png_calloc($0,$13)|0);
 HEAP32[$1>>2] = $14;
 $$off$i = (($3) + -95000)|0;
 $15 = ($$off$i>>>0)<(10001);
 $16 = ($2|0)==(0);
 $17 = (+($3|0));
 $18 = $17 * 1.0000000000000001E-5;
 if (!($15)) {
  $$06065 = 0;
  while(1) {
   $36 = (_png_malloc($0,512)|0);
   $37 = (($14) + ($$06065<<2)|0);
   HEAP32[$37>>2] = $36;
   $$06163 = 0;
   while(1) {
    $38 = $$06163 << $4;
    $39 = (($38) + ($$06065))|0;
    $40 = (+($39>>>0));
    $41 = $10 * $40;
    $42 = (+Math_pow((+$41),(+$18)));
    $43 = $42 * 65535.0;
    $44 = $43 + 0.5;
    $45 = (+Math_floor((+$44)));
    $46 = (~~(($45))&65535);
    $47 = (($36) + ($$06163<<1)|0);
    HEAP16[$47>>1] = $46;
    $48 = (($$06163) + 1)|0;
    $exitcond76 = ($48|0)==(256);
    if ($exitcond76) {
     break;
    } else {
     $$06163 = $48;
    }
   }
   $49 = (($$06065) + 1)|0;
   $50 = ($49>>>0)<($5>>>0);
   if ($50) {
    $$06065 = $49;
   } else {
    break;
   }
  }
  return;
 }
 $$06065$us = 0;
 while(1) {
  $19 = (_png_malloc($0,512)|0);
  $20 = (($14) + ($$06065$us<<2)|0);
  HEAP32[$20>>2] = $19;
  if ($16) {
   $$05964$us$us = 0;
   while(1) {
    $31 = $$05964$us$us << $4;
    $32 = (($31) + ($$06065$us))|0;
    $33 = $32&65535;
    $34 = (($19) + ($$05964$us$us<<1)|0);
    HEAP16[$34>>1] = $33;
    $35 = (($$05964$us$us) + 1)|0;
    $exitcond75 = ($35|0)==(256);
    if ($exitcond75) {
     break;
    } else {
     $$05964$us$us = $35;
    }
   }
  } else {
   $$05964$us69 = 0;
   while(1) {
    $21 = $$05964$us69 << $4;
    $22 = (($21) + ($$06065$us))|0;
    $23 = ($22*65535)|0;
    $24 = (($23) + ($12))|0;
    $25 = (($24>>>0) / ($8>>>0))&-1;
    $26 = $25&65535;
    $27 = (($19) + ($$05964$us69<<1)|0);
    HEAP16[$27>>1] = $26;
    $28 = (($$05964$us69) + 1)|0;
    $exitcond = ($28|0)==(256);
    if ($exitcond) {
     break;
    } else {
     $$05964$us69 = $28;
    }
   }
  }
  $29 = (($$06065$us) + 1)|0;
  $30 = ($29>>>0)<($5>>>0);
  if ($30) {
   $$06065$us = $29;
  } else {
   break;
  }
 }
 return;
}
function _png_set_packing($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 436|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3&255)<(8);
 if (!($4)) {
  return;
 }
 $5 = ((($0)) + 216|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 | 4;
 HEAP32[$5>>2] = $7;
 $8 = ((($0)) + 437|0);
 HEAP8[$8>>0] = 8;
 return;
}
function _png_set_interlace_handling($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 1;
  return ($$0|0);
 }
 $2 = ((($0)) + 432|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  $$0 = 1;
  return ($$0|0);
 }
 $5 = ((($0)) + 216|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 | 2;
 HEAP32[$5>>2] = $7;
 $$0 = 7;
 return ($$0|0);
}
function _png_set_filler($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 32768;
 $7 = ($6|0)==(0);
 L4: do {
  if ($7) {
   $10 = ((($0)) + 435|0);
   $11 = HEAP8[$10>>0]|0;
   switch ($11<<24>>24) {
   case 2:  {
    $12 = ((($0)) + 440|0);
    HEAP8[$12>>0] = 4;
    break L4;
    break;
   }
   case 0:  {
    $13 = ((($0)) + 436|0);
    $14 = HEAP8[$13>>0]|0;
    $15 = ($14&255)>(7);
    if ($15) {
     $16 = ((($0)) + 440|0);
     HEAP8[$16>>0] = 2;
     break L4;
    }
    _png_app_error($0,23265);
    return;
    break;
   }
   default: {
    _png_app_error($0,23321);
    return;
   }
   }
  } else {
   $8 = $1&65535;
   $9 = ((($0)) + 444|0);
   HEAP16[$9>>1] = $8;
  }
 } while(0);
 $17 = ((($0)) + 216|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 | 32768;
 HEAP32[$17>>2] = $19;
 $20 = ($2|0)==(1);
 $21 = ((($0)) + 212|0);
 $22 = HEAP32[$21>>2]|0;
 if ($20) {
  $23 = $22 | 128;
  HEAP32[$21>>2] = $23;
  return;
 } else {
  $24 = $22 & -129;
  HEAP32[$21>>2] = $24;
  return;
 }
}
function _png_do_invert($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$04760 = 0, $$04859 = 0, $$04954 = 0, $$05057 = 0, $$05156 = 0, $$055 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP8[$2>>0]|0;
 switch ($3<<24>>24) {
 case 0:  {
  $4 = ((($0)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  if ($6) {
   return;
  }
  $$04954 = 0;$$055 = $1;
  while(1) {
   $7 = HEAP8[$$055>>0]|0;
   $8 = $7 ^ -1;
   HEAP8[$$055>>0] = $8;
   $9 = ((($$055)) + 1|0);
   $10 = (($$04954) + 1)|0;
   $exitcond = ($10|0)==($5|0);
   if ($exitcond) {
    break;
   } else {
    $$04954 = $10;$$055 = $9;
   }
  }
  return;
  break;
 }
 case 4:  {
  $11 = ((($0)) + 9|0);
  $12 = HEAP8[$11>>0]|0;
  switch ($12<<24>>24) {
  case 8:  {
   $13 = ((($0)) + 4|0);
   $14 = HEAP32[$13>>2]|0;
   $15 = ($14|0)==(0);
   if ($15) {
    return;
   }
   $$05057 = 0;$$05156 = $1;
   while(1) {
    $16 = HEAP8[$$05156>>0]|0;
    $17 = $16 ^ -1;
    HEAP8[$$05156>>0] = $17;
    $18 = ((($$05156)) + 2|0);
    $19 = (($$05057) + 2)|0;
    $20 = ($19>>>0)<($14>>>0);
    if ($20) {
     $$05057 = $19;$$05156 = $18;
    } else {
     break;
    }
   }
   return;
   break;
  }
  case 16:  {
   $21 = ((($0)) + 4|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ($22|0)==(0);
   if ($23) {
    return;
   }
   $$04760 = 0;$$04859 = $1;
   while(1) {
    $24 = HEAP8[$$04859>>0]|0;
    $25 = $24 ^ -1;
    HEAP8[$$04859>>0] = $25;
    $26 = ((($$04859)) + 1|0);
    $27 = HEAP8[$26>>0]|0;
    $28 = $27 ^ -1;
    HEAP8[$26>>0] = $28;
    $29 = ((($$04859)) + 4|0);
    $30 = (($$04760) + 4)|0;
    $31 = ($30>>>0)<($22>>>0);
    if ($31) {
     $$04760 = $30;$$04859 = $29;
    } else {
     break;
    }
   }
   return;
   break;
  }
  default: {
   return;
  }
  }
  break;
 }
 default: {
  return;
 }
 }
}
function _png_do_swap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01718 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 9|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3<<24>>24)==(16);
 if (!($4)) {
  return;
 }
 $5 = HEAP32[$0>>2]|0;
 $6 = ((($0)) + 10|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = Math_imul($5, $8)|0;
 $10 = ($9|0)==(0);
 if ($10) {
  return;
 }
 $$01718 = 0;$$019 = $1;
 while(1) {
  $11 = HEAP8[$$019>>0]|0;
  $12 = ((($$019)) + 1|0);
  $13 = HEAP8[$12>>0]|0;
  HEAP8[$$019>>0] = $13;
  HEAP8[$12>>0] = $11;
  $14 = (($$01718) + 1)|0;
  $15 = ((($$019)) + 2|0);
  $exitcond = ($14|0)==($9|0);
  if ($exitcond) {
   break;
  } else {
   $$01718 = $14;$$019 = $15;
  }
 }
 return;
}
function _png_do_packswap($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01819 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 9|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ($3&255)<(8);
 if (!($4)) {
  return;
 }
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($1) + ($6)|0);
 switch ($3<<24>>24) {
 case 1:  {
  $$0 = 23874;
  break;
 }
 case 2:  {
  $$0 = 23362;
  break;
 }
 case 4:  {
  $$0 = 23618;
  break;
 }
 default: {
  return;
 }
 }
 $8 = ($6|0)>(0);
 if (!($8)) {
  return;
 }
 $$01819 = $1;
 while(1) {
  $9 = HEAP8[$$01819>>0]|0;
  $10 = $9&255;
  $11 = (($$0) + ($10)|0);
  $12 = HEAP8[$11>>0]|0;
  HEAP8[$$01819>>0] = $12;
  $13 = ((($$01819)) + 1|0);
  $14 = ($13>>>0)<($7>>>0);
  if ($14) {
   $$01819 = $13;
  } else {
   break;
  }
 }
 return;
}
function _png_do_strip_channel($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0105 = 0, $$074 = 0, $$10 = 0, $$17582 = 0, $$183 = 0, $$2 = 0, $$2108 = 0, $$276 = 0, $$37784 = 0, $$385 = 0, $$4 = 0, $$4112 = 0, $$478 = 0, $$579 = 0, $$591 = 0, $$6 = 0, $$6116 = 0, $$68090 = 0, $$781 = 0;
 var $$797 = 0, $$896 = 0, $$9 = 0, $$sink = 0, $$sink121 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $scevgep = 0, $scevgep106 = 0, $scevgep107 = 0, $scevgep109 = 0, $scevgep109110 = 0, $scevgep111 = 0, $scevgep113 = 0, $scevgep113114 = 0, $scevgep115 = 0, $scevgep117 = 0, $scevgep117118 = 0, $scevgep119 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = (($1) + ($4)|0);
 $6 = ((($0)) + 10|0);
 $7 = HEAP8[$6>>0]|0;
 switch ($7<<24>>24) {
 case 2:  {
  $8 = ((($0)) + 9|0);
  $9 = HEAP8[$8>>0]|0;
  switch ($9<<24>>24) {
  case 8:  {
   $10 = ($2|0)==(0);
   $11 = ((($1)) + 1|0);
   $12 = ((($1)) + 2|0);
   $$074 = $10 ? $11 : $1;
   $$0 = $10 ? $12 : $11;
   $13 = ($$0>>>0)<($5>>>0);
   if ($13) {
    $$0105 = $$0;
    $14 = (($4) + -1)|0;
    $15 = (($14) - ($$0105))|0;
    $scevgep = (($1) + ($15)|0);
    $scevgep106 = $scevgep;
    $16 = $scevgep106 >>> 1;
    $17 = (($16) + 1)|0;
    $$17582 = $$074;$$183 = $$0;
    while(1) {
     $18 = HEAP8[$$183>>0]|0;
     $19 = ((($$17582)) + 1|0);
     HEAP8[$$17582>>0] = $18;
     $20 = ((($$183)) + 2|0);
     $21 = ($20>>>0)<($5>>>0);
     if ($21) {
      $$17582 = $19;$$183 = $20;
     } else {
      break;
     }
    }
    $scevgep107 = (($$074) + ($17)|0);
    $$478 = $scevgep107;$$sink = 8;
   } else {
    $$478 = $$074;$$sink = 8;
   }
   break;
  }
  case 16:  {
   $22 = ($2|0)==(0);
   $23 = ((($1)) + 2|0);
   $24 = ((($1)) + 4|0);
   $$276 = $22 ? $23 : $1;
   $$2 = $22 ? $24 : $23;
   $25 = ($$2>>>0)<($5>>>0);
   if ($25) {
    $$2108 = $$2;
    $26 = (($4) + -1)|0;
    $27 = (($26) - ($$2108))|0;
    $scevgep109 = (($1) + ($27)|0);
    $scevgep109110 = $scevgep109;
    $28 = $scevgep109110 >>> 2;
    $29 = $28 << 1;
    $30 = (($29) + 2)|0;
    $$37784 = $$276;$$385 = $$2;
    while(1) {
     $31 = ((($$385)) + 1|0);
     $32 = HEAP8[$$385>>0]|0;
     $33 = ((($$37784)) + 1|0);
     HEAP8[$$37784>>0] = $32;
     $34 = HEAP8[$31>>0]|0;
     $35 = ((($$37784)) + 2|0);
     HEAP8[$33>>0] = $34;
     $36 = ((($$385)) + 4|0);
     $37 = ($36>>>0)<($5>>>0);
     if ($37) {
      $$37784 = $35;$$385 = $36;
     } else {
      break;
     }
    }
    $scevgep111 = (($$276) + ($30)|0);
    $$478 = $scevgep111;$$sink = 16;
   } else {
    $$478 = $$276;$$sink = 16;
   }
   break;
  }
  default: {
   return;
  }
  }
  $38 = ((($0)) + 11|0);
  HEAP8[$38>>0] = $$sink;
  HEAP8[$6>>0] = 1;
  $39 = ((($0)) + 8|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = ($40<<24>>24)==(4);
  if ($41) {
   HEAP8[$39>>0] = 0;
   $$10 = $$478;
  } else {
   $$10 = $$478;
  }
  break;
 }
 case 4:  {
  $42 = ((($0)) + 9|0);
  $43 = HEAP8[$42>>0]|0;
  switch ($43<<24>>24) {
  case 8:  {
   $44 = ($2|0)==(0);
   $45 = ((($1)) + 1|0);
   $46 = ((($1)) + 4|0);
   $47 = ((($1)) + 3|0);
   $$579 = $44 ? $47 : $1;
   $$4 = $44 ? $46 : $45;
   $48 = ($$4>>>0)<($5>>>0);
   if ($48) {
    $$4112 = $$4;
    $49 = (($4) + -1)|0;
    $50 = (($49) - ($$4112))|0;
    $scevgep113 = (($1) + ($50)|0);
    $scevgep113114 = $scevgep113;
    $51 = $scevgep113114 >>> 2;
    $52 = ($51*3)|0;
    $53 = (($52) + 3)|0;
    $$591 = $$4;$$68090 = $$579;
    while(1) {
     $54 = ((($$591)) + 1|0);
     $55 = HEAP8[$$591>>0]|0;
     $56 = ((($$68090)) + 1|0);
     HEAP8[$$68090>>0] = $55;
     $57 = ((($$591)) + 2|0);
     $58 = HEAP8[$54>>0]|0;
     $59 = ((($$68090)) + 2|0);
     HEAP8[$56>>0] = $58;
     $60 = HEAP8[$57>>0]|0;
     $61 = ((($$68090)) + 3|0);
     HEAP8[$59>>0] = $60;
     $62 = ((($$591)) + 4|0);
     $63 = ($62>>>0)<($5>>>0);
     if ($63) {
      $$591 = $62;$$68090 = $61;
     } else {
      break;
     }
    }
    $scevgep115 = (($$579) + ($53)|0);
    $$9 = $scevgep115;$$sink121 = 24;
   } else {
    $$9 = $$579;$$sink121 = 24;
   }
   break;
  }
  case 16:  {
   $64 = ($2|0)==(0);
   $65 = ((($1)) + 2|0);
   $66 = ((($1)) + 8|0);
   $67 = ((($1)) + 6|0);
   $$781 = $64 ? $67 : $1;
   $$6 = $64 ? $66 : $65;
   $68 = ($$6>>>0)<($5>>>0);
   if ($68) {
    $$6116 = $$6;
    $69 = (($4) + -1)|0;
    $70 = (($69) - ($$6116))|0;
    $scevgep117 = (($1) + ($70)|0);
    $scevgep117118 = $scevgep117;
    $71 = $scevgep117118 >>> 3;
    $72 = ($71*6)|0;
    $73 = (($72) + 6)|0;
    $$797 = $$6;$$896 = $$781;
    while(1) {
     $74 = ((($$797)) + 1|0);
     $75 = HEAP8[$$797>>0]|0;
     $76 = ((($$896)) + 1|0);
     HEAP8[$$896>>0] = $75;
     $77 = ((($$797)) + 2|0);
     $78 = HEAP8[$74>>0]|0;
     $79 = ((($$896)) + 2|0);
     HEAP8[$76>>0] = $78;
     $80 = ((($$797)) + 3|0);
     $81 = HEAP8[$77>>0]|0;
     $82 = ((($$896)) + 3|0);
     HEAP8[$79>>0] = $81;
     $83 = ((($$797)) + 4|0);
     $84 = HEAP8[$80>>0]|0;
     $85 = ((($$896)) + 4|0);
     HEAP8[$82>>0] = $84;
     $86 = ((($$797)) + 5|0);
     $87 = HEAP8[$83>>0]|0;
     $88 = ((($$896)) + 5|0);
     HEAP8[$85>>0] = $87;
     $89 = HEAP8[$86>>0]|0;
     $90 = ((($$896)) + 6|0);
     HEAP8[$88>>0] = $89;
     $91 = ((($$797)) + 8|0);
     $92 = ($91>>>0)<($5>>>0);
     if ($92) {
      $$797 = $91;$$896 = $90;
     } else {
      break;
     }
    }
    $scevgep119 = (($$781) + ($73)|0);
    $$9 = $scevgep119;$$sink121 = 48;
   } else {
    $$9 = $$781;$$sink121 = 48;
   }
   break;
  }
  default: {
   return;
  }
  }
  $93 = ((($0)) + 11|0);
  HEAP8[$93>>0] = $$sink121;
  HEAP8[$6>>0] = 3;
  $94 = ((($0)) + 8|0);
  $95 = HEAP8[$94>>0]|0;
  $96 = ($95<<24>>24)==(6);
  if ($96) {
   HEAP8[$94>>0] = 2;
   $$10 = $$9;
  } else {
   $$10 = $$9;
  }
  break;
 }
 default: {
  return;
 }
 }
 $97 = $$10;
 $98 = $1;
 $99 = (($97) - ($98))|0;
 HEAP32[$3>>2] = $99;
 return;
}
function _png_do_bgr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$07392 = 0, $$07491 = 0, $$07583 = 0, $$07689 = 0, $$07788 = 0, $$07886 = 0, $$07985 = 0, $$084 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond97 = 0, $exitcond98 = 0, $exitcond99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 8|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $3 & 2;
 $5 = ($4<<24>>24)==(0);
 if ($5) {
  return;
 }
 $6 = HEAP32[$0>>2]|0;
 $7 = ((($0)) + 9|0);
 $8 = HEAP8[$7>>0]|0;
 switch ($8<<24>>24) {
 case 8:  {
  switch ($3<<24>>24) {
  case 2:  {
   $9 = ($6|0)==(0);
   if ($9) {
    return;
   }
   $$07583 = 0;$$084 = $1;
   while(1) {
    $10 = HEAP8[$$084>>0]|0;
    $11 = ((($$084)) + 2|0);
    $12 = HEAP8[$11>>0]|0;
    HEAP8[$$084>>0] = $12;
    HEAP8[$11>>0] = $10;
    $13 = (($$07583) + 1)|0;
    $14 = ((($$084)) + 3|0);
    $exitcond = ($13|0)==($6|0);
    if ($exitcond) {
     break;
    } else {
     $$07583 = $13;$$084 = $14;
    }
   }
   return;
   break;
  }
  case 6:  {
   $15 = ($6|0)==(0);
   if ($15) {
    return;
   }
   $$07886 = $1;$$07985 = 0;
   while(1) {
    $16 = HEAP8[$$07886>>0]|0;
    $17 = ((($$07886)) + 2|0);
    $18 = HEAP8[$17>>0]|0;
    HEAP8[$$07886>>0] = $18;
    HEAP8[$17>>0] = $16;
    $19 = (($$07985) + 1)|0;
    $20 = ((($$07886)) + 4|0);
    $exitcond97 = ($19|0)==($6|0);
    if ($exitcond97) {
     break;
    } else {
     $$07886 = $20;$$07985 = $19;
    }
   }
   return;
   break;
  }
  default: {
   return;
  }
  }
  break;
 }
 case 16:  {
  switch ($3<<24>>24) {
  case 2:  {
   $21 = ($6|0)==(0);
   if ($21) {
    return;
   }
   $$07689 = 0;$$07788 = $1;
   while(1) {
    $22 = HEAP8[$$07788>>0]|0;
    $23 = ((($$07788)) + 4|0);
    $24 = HEAP8[$23>>0]|0;
    HEAP8[$$07788>>0] = $24;
    HEAP8[$23>>0] = $22;
    $25 = ((($$07788)) + 1|0);
    $26 = HEAP8[$25>>0]|0;
    $27 = ((($$07788)) + 5|0);
    $28 = HEAP8[$27>>0]|0;
    HEAP8[$25>>0] = $28;
    HEAP8[$27>>0] = $26;
    $29 = (($$07689) + 1)|0;
    $30 = ((($$07788)) + 6|0);
    $exitcond98 = ($29|0)==($6|0);
    if ($exitcond98) {
     break;
    } else {
     $$07689 = $29;$$07788 = $30;
    }
   }
   return;
   break;
  }
  case 6:  {
   $31 = ($6|0)==(0);
   if ($31) {
    return;
   }
   $$07392 = 0;$$07491 = $1;
   while(1) {
    $32 = HEAP8[$$07491>>0]|0;
    $33 = ((($$07491)) + 4|0);
    $34 = HEAP8[$33>>0]|0;
    HEAP8[$$07491>>0] = $34;
    HEAP8[$33>>0] = $32;
    $35 = ((($$07491)) + 1|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = ((($$07491)) + 5|0);
    $38 = HEAP8[$37>>0]|0;
    HEAP8[$35>>0] = $38;
    HEAP8[$37>>0] = $36;
    $39 = (($$07392) + 1)|0;
    $40 = ((($$07491)) + 8|0);
    $exitcond99 = ($39|0)==($6|0);
    if ($exitcond99) {
     break;
    } else {
     $$07392 = $39;$$07491 = $40;
    }
   }
   return;
   break;
  }
  default: {
   return;
  }
  }
  break;
 }
 default: {
  return;
 }
 }
}
function _png_do_check_palette_indexes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$076 = 0, $$178 = 0, $$281 = 0, $$383 = 0, $$pre = 0, $$pre$phi101Z2D = 0, $$pre$phi103Z2D = 0, $$pre$phi105Z2D = 0, $$pre$phiZ2D = 0, $$pre100 = 0, $$pre102 = 0, $$pre104 = 0, $$pre95 = 0, $$pre96 = 0, $$pre97 = 0, $$pre98 = 0, $$pre99 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $spec$select = 0, $spec$select109 = 0, $spec$select110 = 0, $spec$select111 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 420|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = ((($1)) + 9|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = $6&255;
 $8 = 1 << $7;
 $9 = ($8|0)<=($4|0);
 $10 = ($3<<16>>16)==(0);
 $or$cond = $10 | $9;
 if ($or$cond) {
  return;
 }
 $11 = ((($1)) + 11|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = (0 - ($13))|0;
 $15 = HEAP32[$1>>2]|0;
 $16 = Math_imul($15, $14)|0;
 $17 = $16 & 7;
 $18 = ((($0)) + 384|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($1)) + 4|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($19) + ($21)|0);
 switch ($6<<24>>24) {
 case 1:  {
  $23 = ($21|0)>(0);
  if (!($23)) {
   return;
  }
  $24 = ((($0)) + 424|0);
  $25 = HEAP8[$22>>0]|0;
  $26 = $25&255;
  $27 = $26 >>> $17;
  $28 = ($27|0)==(0);
  if (!($28)) {
   HEAP32[$24>>2] = 1;
  }
  $29 = ((($22)) + -1|0);
  $30 = ($29>>>0)>($19>>>0);
  if (!($30)) {
   return;
  }
  $$076 = $29;
  while(1) {
   $31 = HEAP8[$$076>>0]|0;
   $32 = ($31<<24>>24)==(0);
   if (!($32)) {
    HEAP32[$24>>2] = 1;
   }
   $33 = ((($$076)) + -1|0);
   $34 = ($33>>>0)>($19>>>0);
   if ($34) {
    $$076 = $33;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 2:  {
  $35 = ($21|0)>(0);
  if (!($35)) {
   return;
  }
  $36 = ((($0)) + 424|0);
  $37 = HEAP8[$22>>0]|0;
  $38 = $37&255;
  $39 = $38 >>> $17;
  $40 = $39 & 3;
  $41 = HEAP32[$36>>2]|0;
  $42 = ($40|0)>($41|0);
  $43 = $42 ? $40 : $41;
  $44 = $39 >>> 2;
  $45 = $44 & 3;
  $46 = ($45|0)>($43|0);
  $spec$select = $46 ? $45 : $43;
  $47 = $42 | $46;
  $48 = $39 >>> 4;
  $49 = $48 & 3;
  $50 = ($49|0)>($spec$select|0);
  $spec$select109 = $50 ? $49 : $spec$select;
  $51 = $47 | $50;
  $52 = $39 >>> 6;
  $53 = ($52|0)>($spec$select109|0);
  $spec$select110 = $53 ? $52 : $spec$select109;
  $54 = $51 | $53;
  if ($54) {
   HEAP32[$36>>2] = $spec$select110;
  }
  $55 = ((($22)) + -1|0);
  $56 = ($55>>>0)>($19>>>0);
  if (!($56)) {
   return;
  }
  $$178 = $55;$61 = $spec$select110;
  while(1) {
   $57 = HEAP8[$$178>>0]|0;
   $58 = $57&255;
   $59 = $58 & 3;
   $60 = ($59|0)>($61|0);
   if ($60) {
    HEAP32[$36>>2] = $59;
    $$pre96 = HEAP8[$$178>>0]|0;
    $$pre99 = $$pre96&255;
    $$pre$phiZ2D = $$pre99;$65 = $59;
   } else {
    $$pre$phiZ2D = $58;$65 = $61;
   }
   $62 = $$pre$phiZ2D >>> 2;
   $63 = $62 & 3;
   $64 = ($63|0)>($65|0);
   if ($64) {
    HEAP32[$36>>2] = $63;
    $$pre97 = HEAP8[$$178>>0]|0;
    $$pre100 = $$pre97&255;
    $$pre$phi101Z2D = $$pre100;$69 = $63;
   } else {
    $$pre$phi101Z2D = $$pre$phiZ2D;$69 = $65;
   }
   $66 = $$pre$phi101Z2D >>> 4;
   $67 = $66 & 3;
   $68 = ($67|0)>($69|0);
   if ($68) {
    HEAP32[$36>>2] = $67;
    $$pre98 = HEAP8[$$178>>0]|0;
    $$pre102 = $$pre98&255;
    $$pre$phi103Z2D = $$pre102;$73 = $67;
   } else {
    $$pre$phi103Z2D = $$pre$phi101Z2D;$73 = $69;
   }
   $70 = $$pre$phi103Z2D >>> 6;
   $71 = $70 & 3;
   $72 = ($71|0)>($73|0);
   if ($72) {
    HEAP32[$36>>2] = $71;
    $108 = $71;
   } else {
    $108 = $73;
   }
   $74 = ((($$178)) + -1|0);
   $75 = ($74>>>0)>($19>>>0);
   if ($75) {
    $$178 = $74;$61 = $108;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 4:  {
  $76 = ($21|0)>(0);
  if (!($76)) {
   return;
  }
  $77 = ((($0)) + 424|0);
  $78 = HEAP8[$22>>0]|0;
  $79 = $78&255;
  $80 = $79 >>> $17;
  $81 = $80 & 15;
  $82 = HEAP32[$77>>2]|0;
  $83 = ($81|0)>($82|0);
  $84 = $83 ? $81 : $82;
  $85 = $80 >>> 4;
  $86 = ($85|0)>($84|0);
  $spec$select111 = $86 ? $85 : $84;
  $87 = $83 | $86;
  if ($87) {
   HEAP32[$77>>2] = $spec$select111;
  }
  $88 = ((($22)) + -1|0);
  $89 = ($88>>>0)>($19>>>0);
  if (!($89)) {
   return;
  }
  $$281 = $88;$94 = $spec$select111;
  while(1) {
   $90 = HEAP8[$$281>>0]|0;
   $91 = $90&255;
   $92 = $91 & 15;
   $93 = ($92|0)>($94|0);
   if ($93) {
    HEAP32[$77>>2] = $92;
    $$pre95 = HEAP8[$$281>>0]|0;
    $$pre104 = $$pre95&255;
    $$pre$phi105Z2D = $$pre104;$97 = $92;
   } else {
    $$pre$phi105Z2D = $91;$97 = $94;
   }
   $95 = $$pre$phi105Z2D >>> 4;
   $96 = ($95|0)>($97|0);
   if ($96) {
    HEAP32[$77>>2] = $95;
    $109 = $95;
   } else {
    $109 = $97;
   }
   $98 = ((($$281)) + -1|0);
   $99 = ($98>>>0)>($19>>>0);
   if ($99) {
    $$281 = $98;$94 = $109;
   } else {
    break;
   }
  }
  return;
  break;
 }
 case 8:  {
  $100 = ($21|0)>(0);
  if (!($100)) {
   return;
  }
  $101 = ((($0)) + 424|0);
  $$pre = HEAP32[$101>>2]|0;
  $$383 = $22;$104 = $$pre;
  while(1) {
   $102 = HEAP8[$$383>>0]|0;
   $103 = $102&255;
   $105 = ($104|0)<($103|0);
   if ($105) {
    HEAP32[$101>>2] = $103;
    $110 = $103;
   } else {
    $110 = $104;
   }
   $106 = ((($$383)) + -1|0);
   $107 = ($106>>>0)>($19>>>0);
   if ($107) {
    $$383 = $106;$104 = $110;
   } else {
    break;
   }
  }
  return;
  break;
 }
 default: {
  return;
 }
 }
}
function _png_write_data($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 180|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  _png_error($0,24130);
  // unreachable;
 } else {
  FUNCTION_TABLE_viii[$4 & 127]($0,$1,$2);
  return;
 }
}
function _png_default_write_data($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 188|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_fwrite($1,1,$2,$5)|0);
 $7 = ($6|0)==($2|0);
 if ($7) {
  return;
 } else {
  _png_error($0,24158);
  // unreachable;
 }
}
function _png_flush($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 472|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 FUNCTION_TABLE_vi[$2 & 63]($0);
 return;
}
function _png_default_flush($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 (_fflush($3)|0);
 return;
}
function _png_set_write_fn($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $png_default_write_data$ = 0, $storemerge14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 if ($4) {
  return;
 }
 $5 = ((($0)) + 188|0);
 HEAP32[$5>>2] = $1;
 $6 = ($2|0)==(0|0);
 $7 = ((($0)) + 180|0);
 $png_default_write_data$ = $6 ? 57 : $2;
 HEAP32[$7>>2] = $png_default_write_data$;
 $8 = ($3|0)==(0|0);
 $9 = ((($0)) + 472|0);
 $storemerge14 = $8 ? 58 : $3;
 HEAP32[$9>>2] = $storemerge14;
 $10 = ((($0)) + 184|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)==(0|0);
 if ($12) {
  return;
 }
 HEAP32[$10>>2] = 0;
 _png_warning($0,24661);
 return;
}
function _png_colorspace_sync_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre189$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $storemerge = 0, $storemerge9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 114|0);
 $3 = HEAP16[$2>>1]|0;
 $4 = $3&65535;
 $5 = $4 & 32768;
 $6 = ($5|0)==(0);
 if ($6) {
  $19 = $4 & 128;
  $20 = ($19|0)==(0);
  $21 = ((($1)) + 8|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 & -2049;
  $24 = $22 | 2048;
  $storemerge = $20 ? $23 : $24;
  $25 = $3 & 2;
  $26 = ($25<<16>>16)==(0);
  $27 = $storemerge & -5;
  $28 = $storemerge | 4;
  $storemerge9 = $26 ? $27 : $28;
  HEAP32[$21>>2] = $storemerge9;
  $29 = $3 & 1;
  $30 = ($29<<16>>16)==(0);
  if ($30) {
   $32 = $storemerge9 & -2;
   HEAP32[$21>>2] = $32;
   return;
  } else {
   $31 = $storemerge9 | 1;
   HEAP32[$21>>2] = $31;
   return;
  }
 }
 $7 = ((($1)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = $8 & -6150;
 HEAP32[$7>>2] = $9;
 $10 = ($0|0)==(0|0);
 if ($10) {
  return;
 }
 $$pre189$i = ((($1)) + 232|0);
 $11 = HEAP32[$$pre189$i>>2]|0;
 $12 = $11 & 16;
 $13 = ($12|0)==(0);
 if (!($13)) {
  $14 = ((($1)) + 116|0);
  $15 = HEAP32[$14>>2]|0;
  _png_free($0,$15);
  $16 = ((($1)) + 120|0);
  $17 = HEAP32[$16>>2]|0;
  _png_free($0,$17);
  HEAP32[$14>>2] = 0;
  HEAP32[$16>>2] = 0;
  HEAP32[$7>>2] = $9;
 }
 $18 = $11 & -17;
 HEAP32[$$pre189$i>>2] = $18;
 return;
}
function _png_fixed($0,$1,$2) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 var $3 = 0.0, $4 = 0.0, $5 = 0.0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 * 1.0E+5;
 $4 = $3 + 0.5;
 $5 = (+Math_floor((+$4)));
 $6 = $5 > 2147483647.0;
 $7 = $5 < -2147483648.0;
 $or$cond = $6 | $7;
 if ($or$cond) {
  _png_fixed_error($0,$2);
  // unreachable;
 } else {
  $8 = (~~(($5)));
  return ($8|0);
 }
 return (0)|0;
}
function _png_fixed_error($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$09 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $2 = sp;
 dest=$2; src=24170; stop=dest+24|0; do { HEAP8[dest>>0]=HEAP8[src>>0]|0; dest=dest+1|0; src=src+1|0; } while ((dest|0) < (stop|0));
 $3 = ($1|0)==(0|0);
 L1: do {
  if ($3) {
   $$1 = 0;
  } else {
   $$09 = 0;
   while(1) {
    $4 = (($1) + ($$09)|0);
    $5 = HEAP8[$4>>0]|0;
    $6 = ($5<<24>>24)==(0);
    if ($6) {
     $$1 = $$09;
     break L1;
    }
    $7 = (($$09) + 24)|0;
    $8 = (($2) + ($7)|0);
    HEAP8[$8>>0] = $5;
    $9 = (($$09) + 1)|0;
    $10 = ($9>>>0)<(195);
    if ($10) {
     $$09 = $9;
    } else {
     $$1 = $9;
     break;
    }
   }
  }
 } while(0);
 $11 = (($$1) + 24)|0;
 $12 = (($2) + ($11)|0);
 HEAP8[$12>>0] = 0;
 _png_error($0,$2);
 // unreachable;
}
function _png_set_gAMA($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_png_fixed($0,$2,24195)|0);
 $4 = ($0|0)==(0|0);
 $5 = ($1|0)==(0|0);
 $or$cond$i = $4 | $5;
 if ($or$cond$i) {
  return;
 }
 $6 = ((($1)) + 40|0);
 _png_colorspace_set_gamma($0,$6,$3);
 _png_colorspace_sync_info($0,$1);
 return;
}
function _png_set_sRGB($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 $4 = ($1|0)==(0|0);
 $or$cond = $3 | $4;
 if ($or$cond) {
  return;
 }
 $5 = ((($1)) + 40|0);
 (_png_colorspace_set_sRGB($0,$5,$2)|0);
 _png_colorspace_sync_info($0,$1);
 return;
}
function _png_set_keep_unknown_chunks($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$017$i = 0, $$018$lcssa$i = 0, $$01821$i = 0, $$01821$i$pn = 0, $$01821$i$us = 0, $$022$i = 0, $$022$i$us = 0, $$07387 = 0, $$07586 = 0, $$076$lcssa = 0, $$07689 = 0, $$077 = 0, $$079 = 0, $$082 = 0, $$090 = 0, $$090$us = 0, $$174 = 0, $$17885 = 0, $$188 = 0, $$2 = 0;
 var $$281 = 0, $$281$ph = 0, $$3 = 0, $$3$ph = 0, $$pr = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond98 = 0, $exitcond99 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 if ($4) {
  return;
 }
 $5 = ($1>>>0)>(3);
 if ($5) {
  _png_app_error($0,24208);
  return;
 }
 $6 = ($3|0)<(1);
 if ($6) {
  $7 = ((($0)) + 688|0);
  HEAP32[$7>>2] = $1;
  $8 = ($3|0)==(0);
  if ($8) {
   return;
  } else {
   $$077 = 17;$$082 = 24293;
  }
 } else {
  $9 = ($2|0)==(0|0);
  if ($9) {
   _png_app_error($0,24250);
   return;
  } else {
   $$077 = $3;$$082 = $2;
  }
 }
 $10 = ((($0)) + 692|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 696|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 $spec$store$select = $14 ? 0 : $11;
 $15 = (($spec$store$select) + ($$077))|0;
 $16 = ($15>>>0)>(858993459);
 if ($16) {
  _png_app_error($0,24378);
  return;
 }
 $17 = ($1|0)==(0);
 if ($17) {
  $23 = ($spec$store$select|0)==(0);
  if ($23) {
   $$281$ph = 0;$$3$ph = 0;
   label = 40;
  } else {
   $$079 = $13;
   label = 14;
  }
 } else {
  $18 = ($15*5)|0;
  $19 = (_png_malloc($0,$18)|0);
  $20 = ($spec$store$select|0)==(0);
  if ($20) {
   $$079 = $19;
   label = 14;
  } else {
   $21 = ($spec$store$select*5)|0;
   $22 = HEAP32[$12>>2]|0;
   _memcpy(($19|0),($22|0),($21|0))|0;
   $$079 = $19;
   label = 14;
  }
 }
 do {
  if ((label|0) == 14) {
   $24 = ($$079|0)==(0|0);
   if ($24) {
    $$281$ph = 0;$$3$ph = 0;
    label = 40;
   } else {
    $25 = $1&255;
    if ($17) {
     $26 = ($spec$store$select|0)==(0);
     $$090$us = 0;
     while(1) {
      $27 = ($$090$us*5)|0;
      $28 = (($$082) + ($27)|0);
      L30: do {
       if (!($26)) {
        $$01821$i$us = $$079;$$022$i$us = 0;
        while(1) {
         $29 = (_memcmp($$01821$i$us,$28,4)|0);
         $30 = ($29|0)==(0);
         if ($30) {
          break;
         }
         $31 = (($$022$i$us) + 1)|0;
         $32 = ((($$01821$i$us)) + 5|0);
         $33 = ($31>>>0)<($spec$store$select>>>0);
         if ($33) {
          $$01821$i$us = $32;$$022$i$us = $31;
         } else {
          break L30;
         }
        }
        $34 = ((($$01821$i$us)) + 4|0);
        HEAP8[$34>>0] = $25;
       }
      } while(0);
      $35 = (($$090$us) + 1)|0;
      $exitcond98 = ($35|0)==($$077|0);
      if ($exitcond98) {
       $$076$lcssa = $spec$store$select;
       break;
      } else {
       $$090$us = $35;
      }
     }
    } else {
     $$07689 = $spec$store$select;$$090 = 0;
     while(1) {
      $36 = ($$090*5)|0;
      $37 = (($$082) + ($36)|0);
      $38 = ($$07689|0)==(0);
      L40: do {
       if ($38) {
        $$018$lcssa$i = $$079;
        label = 28;
       } else {
        $$01821$i = $$079;$$022$i = 0;
        while(1) {
         $39 = (_memcmp($$01821$i,$37,4)|0);
         $40 = ($39|0)==(0);
         if ($40) {
          $$017$i = $$07689;$$01821$i$pn = $$01821$i;
          break L40;
         }
         $41 = (($$022$i) + 1)|0;
         $42 = ((($$01821$i)) + 5|0);
         $43 = ($41>>>0)<($$07689>>>0);
         if ($43) {
          $$01821$i = $42;$$022$i = $41;
         } else {
          $$018$lcssa$i = $42;
          label = 28;
          break;
         }
        }
       }
      } while(0);
      if ((label|0) == 28) {
       label = 0;
       $44 = (($$07689) + 1)|0;
       $45 = HEAPU8[$37>>0]|(HEAPU8[$37+1>>0]<<8)|(HEAPU8[$37+2>>0]<<16)|(HEAPU8[$37+3>>0]<<24);
       HEAP8[$$018$lcssa$i>>0]=$45&255;HEAP8[$$018$lcssa$i+1>>0]=($45>>8)&255;HEAP8[$$018$lcssa$i+2>>0]=($45>>16)&255;HEAP8[$$018$lcssa$i+3>>0]=$45>>24;
       $$017$i = $44;$$01821$i$pn = $$018$lcssa$i;
      }
      $$sink = ((($$01821$i$pn)) + 4|0);
      HEAP8[$$sink>>0] = $25;
      $46 = (($$090) + 1)|0;
      $exitcond99 = ($46|0)==($$077|0);
      if ($exitcond99) {
       $$076$lcssa = $$017$i;
       break;
      } else {
       $$07689 = $$017$i;$$090 = $46;
      }
     }
    }
    $47 = ($$076$lcssa|0)==(0);
    if (!($47)) {
     $$07387 = $$079;$$07586 = $$079;$$17885 = 0;$$188 = 0;
     while(1) {
      $48 = ((($$07586)) + 4|0);
      $49 = HEAP8[$48>>0]|0;
      $50 = ($49<<24>>24)==(0);
      if ($50) {
       $$174 = $$07387;$$2 = $$17885;
      } else {
       $51 = ($$07387|0)==($$07586|0);
       if (!($51)) {
        ;HEAP8[$$07387>>0]=HEAP8[$$07586>>0]|0;HEAP8[$$07387+1>>0]=HEAP8[$$07586+1>>0]|0;HEAP8[$$07387+2>>0]=HEAP8[$$07586+2>>0]|0;HEAP8[$$07387+3>>0]=HEAP8[$$07586+3>>0]|0;HEAP8[$$07387+4>>0]=HEAP8[$$07586+4>>0]|0;
       }
       $52 = ((($$07387)) + 5|0);
       $53 = (($$17885) + 1)|0;
       $$174 = $52;$$2 = $53;
      }
      $54 = (($$188) + 1)|0;
      $55 = ((($$07586)) + 5|0);
      $exitcond = ($54|0)==($$076$lcssa|0);
      if ($exitcond) {
       break;
      } else {
       $$07387 = $$174;$$07586 = $55;$$17885 = $$2;$$188 = $54;
      }
     }
     $56 = ($$2|0)==(0);
     if (!($56)) {
      $$281$ph = $$079;$$3$ph = $$2;
      label = 40;
      break;
     }
    }
    $57 = HEAP32[$12>>2]|0;
    $58 = ($57|0)==($$079|0);
    if ($58) {
     $$281 = 0;$$3 = 0;$59 = $$079;
    } else {
     _png_free($0,$$079);
     $$281$ph = 0;$$3$ph = 0;
     label = 40;
    }
   }
  }
 } while(0);
 if ((label|0) == 40) {
  $$pr = HEAP32[$12>>2]|0;
  $$281 = $$281$ph;$$3 = $$3$ph;$59 = $$pr;
 }
 HEAP32[$10>>2] = $$3;
 $60 = ($59|0)==($$281|0);
 if ($60) {
  return;
 }
 $61 = ($59|0)==(0|0);
 if (!($61)) {
  _png_free($0,$59);
 }
 HEAP32[$12>>2] = $$281;
 return;
}
function _png_set_read_user_chunk_fn($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 684|0);
 HEAP32[$4>>2] = $2;
 $5 = ((($0)) + 680|0);
 HEAP32[$5>>2] = $1;
 return;
}
function _png_free_buffer_list($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if ($3) {
  return;
 }
 HEAP32[$1>>2] = 0;
 $$0 = $2;
 while(1) {
  $4 = HEAP32[$$0>>2]|0;
  _png_free($0,$$0);
  $5 = ($4|0)==(0|0);
  if ($5) {
   break;
  } else {
   $$0 = $4;
  }
 }
 return;
}
function _png_zalloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = (4294967295 / ($2>>>0))&-1;
 $5 = ($4>>>0)>($1>>>0);
 if ($5) {
  $6 = Math_imul($2, $1)|0;
  $7 = (_png_malloc_warn($0,$6)|0);
  $$0 = $7;
  return ($$0|0);
 } else {
  _png_warning($0,24423);
  $$0 = 0;
  return ($$0|0);
 }
 return (0)|0;
}
function _png_zfree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _png_free($0,$1);
 return;
}
function _png_user_version_check($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$028 = 0, $$029 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $2 = sp;
 $3 = ($1|0)==(0|0);
 $4 = ((($0)) + 212|0);
 if ($3) {
  $18 = HEAP32[$4>>2]|0;
  $19 = $18 | 131072;
  HEAP32[$4>>2] = $19;
  $21 = $19;
 } else {
  $$028 = 0;$$029 = -1;
  while(1) {
   $5 = (($$029) + 1)|0;
   $6 = (($1) + ($5)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = (24458 + ($5)|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ($7<<24>>24)==($9<<24>>24);
   if (!($10)) {
    $11 = HEAP32[$4>>2]|0;
    $12 = $11 | 131072;
    HEAP32[$4>>2] = $12;
   }
   $13 = ($7<<24>>24)==(46);
   $14 = $13&1;
   $spec$select = (($$028) + ($14))|0;
   $15 = ($spec$select>>>0)<(2);
   if (!($15)) {
    break;
   }
   $16 = ($7<<24>>24)==(0);
   $17 = ($5|0)==(6);
   $or$cond = $17 | $16;
   if ($or$cond) {
    break;
   } else {
    $$028 = $spec$select;$$029 = $5;
   }
  }
  $$pre = HEAP32[$4>>2]|0;
  $21 = $$pre;
 }
 $20 = $21 & 131072;
 $22 = ($20|0)==(0);
 if ($22) {
  $$0 = 1;
  STACKTOP = sp;return ($$0|0);
 }
 $23 = (_png_safecat($2,128,0,24465)|0);
 $24 = (_png_safecat($2,128,$23,$1)|0);
 $25 = (_png_safecat($2,128,$24,24496)|0);
 (_png_safecat($2,128,$25,24458)|0);
 _png_warning($0,$2);
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _png_create_png_struct($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$1$reg2mem$0 = 0, $$reg2mem38$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $cond41 = 0, $cond42 = 0, $cond43 = 0, $cond44 = 0, _setjmpTable = 0;
 var _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $7 = sp + 156|0;
 $8 = sp;
 _memset(($7|0),0,900)|0;
 $9 = ((($7)) + 748|0);
 HEAP32[$9>>2] = 1000000;
 $10 = ((($7)) + 752|0);
 HEAP32[$10>>2] = 1000000;
 $11 = ((($7)) + 756|0);
 HEAP32[$11>>2] = 1000;
 $12 = ((($7)) + 760|0);
 HEAP32[$12>>2] = 8000000;
 __THREW__ = 0;
 invoke_viiii(59,($7|0),($4|0),($5|0),($6|0));
 $13 = __THREW__; __THREW__ = 0;
 if ((($13|0) != 0) & ((threwValue|0) != 0)) { $14 = _testSetjmp(HEAP32[$13>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($14|0) == 0) { _longjmp($13|0, threwValue|0); } tempRet0 = (threwValue); } else { $14 = -1; };
 $15 = tempRet0;
 $cond = ($14|0)==(1);
 if ($cond) {
  $$reg2mem38$0 = $15;
 } else {
  __THREW__ = 0;
  invoke_viiii(60,($7|0),($1|0),($2|0),($3|0));
  $16 = __THREW__; __THREW__ = 0;
  if ((($16|0) != 0) & ((threwValue|0) != 0)) { $17 = _testSetjmp(HEAP32[$16>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($17|0) == 0) { _longjmp($16|0, threwValue|0); } tempRet0 = (threwValue); } else { $17 = -1; };
  $18 = tempRet0;
  $cond41 = ($17|0)==(1);
  if ($cond41) {
   $$reg2mem38$0 = $18;
  } else {
   _setjmpTable = _saveSetjmp($8,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
   __THREW__ = 0;
   $19 = __THREW__; __THREW__ = 0;
   if ((($19|0) != 0) & ((threwValue|0) != 0)) { $20 = _testSetjmp(HEAP32[$19>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($20|0) == 0) { _longjmp($19|0, threwValue|0); } tempRet0 = (threwValue); } else { $20 = -1; };
   $21 = tempRet0;
   $cond42 = ($20|0)==(1);
   if ($cond42) {
    $$reg2mem38$0 = $21;
   } else {
    $$reg2mem38$0 = 0;
   }
  }
 }
 while(1) {
  $22 = ($$reg2mem38$0|0)==(0);
  if (!($22)) {
   $$1$reg2mem$0 = 0;
   label = 11;
   break;
  }
  $23 = ((($7)) + 160|0);
  HEAP32[$23>>2] = $8;
  $24 = ((($7)) + 164|0);
  HEAP32[$24>>2] = 0;
  $25 = ((($7)) + 156|0);
  HEAP32[$25>>2] = 61;
  __THREW__ = 0;
  $26 = (invoke_iii(62,($7|0),($0|0))|0);
  $27 = __THREW__; __THREW__ = 0;
  if ((($27|0) != 0) & ((threwValue|0) != 0)) { $28 = _testSetjmp(HEAP32[$27>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($28|0) == 0) { _longjmp($27|0, threwValue|0); } tempRet0 = (threwValue); } else { $28 = -1; };
  $29 = tempRet0;
  $cond43 = ($28|0)==(1);
  if ($cond43) {
   $$reg2mem38$0 = $29;
   continue;
  }
  $30 = ($26|0)==(0);
  if ($30) {
   $$1$reg2mem$0 = 0;
   label = 11;
   break;
  }
  __THREW__ = 0;
  $31 = (invoke_iii(63,($7|0),900)|0);
  $32 = __THREW__; __THREW__ = 0;
  if ((($32|0) != 0) & ((threwValue|0) != 0)) { $33 = _testSetjmp(HEAP32[$32>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($33|0) == 0) { _longjmp($32|0, threwValue|0); } tempRet0 = (threwValue); } else { $33 = -1; };
  $34 = tempRet0;
  $cond44 = ($33|0)==(1);
  if ($cond44) {
   $$reg2mem38$0 = $34;
  } else {
   label = 9;
   break;
  }
 }
 if ((label|0) == 9) {
  $35 = ($31|0)==(0|0);
  if ($35) {
   $$1$reg2mem$0 = 0;
   _free(_setjmpTable|0);
   STACKTOP = sp;return ($$1$reg2mem$0|0);
  }
  $36 = ((($7)) + 256|0);
  HEAP32[$36>>2] = 64;
  $37 = ((($7)) + 260|0);
  HEAP32[$37>>2] = 65;
  $38 = ((($7)) + 264|0);
  HEAP32[$38>>2] = $31;
  HEAP32[$23>>2] = 0;
  HEAP32[$24>>2] = 0;
  HEAP32[$25>>2] = 0;
  _memcpy(($31|0),($7|0),900)|0;
  $$1$reg2mem$0 = $31;
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($$1$reg2mem$0|0);
 }
 else if ((label|0) == 11) {
  _free(_setjmpTable|0);
  STACKTOP = sp;return ($$1$reg2mem$0|0);
 }
 return (0)|0;
}
function _png_set_mem_fn($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 if ($4) {
  return;
 }
 $5 = ((($0)) + 716|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($0)) + 720|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($0)) + 724|0);
 HEAP32[$7>>2] = $3;
 return;
}
function _png_set_error_fn($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0|0);
 if ($4) {
  return;
 }
 $5 = ((($0)) + 176|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($0)) + 168|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($0)) + 172|0);
 HEAP32[$7>>2] = $3;
 return;
}
function _png_create_info_struct($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
 } else {
  $2 = (_png_malloc_base($0,268)|0);
  $3 = ($2|0)==(0|0);
  if ($3) {
   $$0 = $2;
  } else {
   _memset(($2|0),0,268)|0;
   $$0 = $2;
  }
 }
 return ($$0|0);
}
function _png_destroy_info_struct($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 $3 = ($1|0)==(0|0);
 $or$cond = $2 | $3;
 if ($or$cond) {
  return;
 }
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  return;
 }
 HEAP32[$1>>2] = 0;
 _png_free_data($0,$4,32767,-1);
 _memset(($4|0),0,268)|0;
 _png_free($0,$4);
 return;
}
function _png_get_io_ptr($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($0)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $$0 = $3;
 return ($$0|0);
}
function _png_init_io($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 188|0);
 HEAP32[$3>>2] = $1;
 return;
}
function _png_save_int_32($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 >>> 24;
 $3 = $2&255;
 HEAP8[$0>>0] = $3;
 $4 = $1 >>> 16;
 $5 = $4&255;
 $6 = ((($0)) + 1|0);
 HEAP8[$6>>0] = $5;
 $7 = $1 >>> 8;
 $8 = $7&255;
 $9 = ((($0)) + 2|0);
 HEAP8[$9>>0] = $8;
 $10 = $1&255;
 $11 = ((($0)) + 3|0);
 HEAP8[$11>>0] = $10;
 return;
}
function _png_get_header_ver($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (24458|0);
}
function _png_handle_as_unknown($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 $3 = ($1|0)==(0|0);
 $or$cond = $2 | $3;
 if ($or$cond) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($0)) + 692|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 if ($6) {
  $$0 = 0;
  return ($$0|0);
 }
 $7 = ((($0)) + 696|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($5*5)|0;
 $10 = (($8) + ($9)|0);
 $$015 = $10;
 while(1) {
  $11 = ((($$015)) + -5|0);
  $12 = (_memcmp($1,$11,4)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   break;
  }
  $17 = ($11>>>0)>($8>>>0);
  if ($17) {
   $$015 = $11;
  } else {
   $$0 = 0;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  return ($$0|0);
 }
 $14 = ((($$015)) + -1|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $$0 = $16;
 return ($$0|0);
}
function _png_chunk_unknown_handling($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$015$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1 >>> 24;
 $4 = $3&255;
 HEAP8[$2>>0] = $4;
 $5 = $1 >>> 16;
 $6 = $5&255;
 $7 = ((($2)) + 1|0);
 HEAP8[$7>>0] = $6;
 $8 = $1 >>> 8;
 $9 = $8&255;
 $10 = ((($2)) + 2|0);
 HEAP8[$10>>0] = $9;
 $11 = $1&255;
 $12 = ((($2)) + 3|0);
 HEAP8[$12>>0] = $11;
 $13 = ((($2)) + 4|0);
 HEAP8[$13>>0] = 0;
 $14 = ($0|0)==(0|0);
 if ($14) {
  $$0$i = 0;
  STACKTOP = sp;return ($$0$i|0);
 }
 $15 = ((($0)) + 692|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 if ($17) {
  $$0$i = 0;
  STACKTOP = sp;return ($$0$i|0);
 }
 $18 = ((($0)) + 696|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($16*5)|0;
 $21 = (($19) + ($20)|0);
 $$015$i = $21;
 while(1) {
  $22 = ((($$015$i)) + -5|0);
  $23 = (_memcmp($2,$22,4)|0);
  $24 = ($23|0)==(0);
  if ($24) {
   break;
  }
  $28 = ($22>>>0)>($19>>>0);
  if ($28) {
   $$015$i = $22;
  } else {
   $$0$i = 0;
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  STACKTOP = sp;return ($$0$i|0);
 }
 $25 = ((($$015$i)) + -1|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26&255;
 $$0$i = $27;
 STACKTOP = sp;return ($$0$i|0);
}
function _png_set_option($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)!=(0|0);
 $4 = ($1>>>0)<(6);
 $5 = $3 & $4;
 $6 = $1 & 1;
 $7 = ($6|0)==(0);
 $or$cond = $5 & $7;
 if (!($or$cond)) {
  $$0 = 1;
  return ($$0|0);
 }
 $8 = 3 << $1;
 $9 = ($2|0)==(0);
 $10 = $9 ? 2 : 3;
 $11 = $10 << $1;
 $12 = ((($0)) + 644|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = $8 ^ 255;
 $16 = $15 & $14;
 $17 = $16 | $11;
 $18 = $17&255;
 HEAP8[$12>>0] = $18;
 $19 = $8 & $14;
 $20 = $19 >>> $1;
 $$0 = $20;
 return ($$0|0);
}
function _png_destroy_write_struct($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  return;
 }
 _png_destroy_info_struct($3,$1);
 HEAP32[$0>>2] = 0;
 $5 = ((($3)) + 212|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 2;
 $8 = ($7|0)==(0);
 if (!($8)) {
  $9 = ((($3)) + 224|0);
  (_deflateEnd($9)|0);
 }
 $10 = ((($3)) + 280|0);
 _png_free_buffer_list($3,$10);
 $11 = ((($3)) + 384|0);
 $12 = HEAP32[$11>>2]|0;
 _png_free($3,$12);
 HEAP32[$11>>2] = 0;
 $13 = ((($3)) + 380|0);
 $14 = HEAP32[$13>>2]|0;
 _png_free($3,$14);
 $15 = ((($3)) + 388|0);
 $16 = HEAP32[$15>>2]|0;
 _png_free($3,$16);
 $17 = ((($3)) + 392|0);
 $18 = HEAP32[$17>>2]|0;
 _png_free($3,$18);
 $19 = ((($3)) + 396|0);
 $20 = HEAP32[$19>>2]|0;
 _png_free($3,$20);
 $21 = ((($3)) + 400|0);
 $22 = HEAP32[$21>>2]|0;
 _png_free($3,$22);
 HEAP32[$13>>2] = 0;
 $23 = ((($3)) + 621|0);
 HEAP8[$23>>0] = 0;
 $24 = ((($3)) + 620|0);
 ;HEAP32[$15>>2]=0|0;HEAP32[$15+4>>2]=0|0;HEAP32[$15+8>>2]=0|0;HEAP32[$15+12>>2]=0|0;
 HEAP8[$24>>0] = 1;
 $25 = ((($3)) + 624|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ($26|0)==(0|0);
 if (!($27)) {
  HEAP32[$25>>2] = 0;
  _png_free($3,$26);
 }
 $28 = ((($3)) + 628|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if (!($30)) {
  HEAP32[$28>>2] = 0;
  _png_free($3,$29);
 }
 $31 = ((($3)) + 632|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(0|0);
 if (!($33)) {
  HEAP32[$31>>2] = 0;
  _png_free($3,$32);
 }
 $34 = ((($3)) + 636|0);
 $35 = HEAP32[$34>>2]|0;
 _png_free($3,$35);
 $36 = ((($3)) + 640|0);
 $37 = HEAP32[$36>>2]|0;
 _png_free($3,$37);
 HEAP32[$34>>2] = 0;
 HEAP32[$36>>2] = 0;
 $38 = ((($3)) + 696|0);
 $39 = HEAP32[$38>>2]|0;
 _png_free($3,$39);
 HEAP32[$38>>2] = 0;
 _png_destroy_png_struct($3);
 return;
}
function _png_destroy_read_struct($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre$i = 0, $$pre36$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  return;
 }
 _png_destroy_info_struct($4,$2);
 _png_destroy_info_struct($4,$1);
 HEAP32[$0>>2] = 0;
 _png_destroy_gamma_table($4);
 $6 = ((($4)) + 728|0);
 $7 = HEAP32[$6>>2]|0;
 _png_free($4,$7);
 HEAP32[$6>>2] = 0;
 $8 = ((($4)) + 804|0);
 $9 = HEAP32[$8>>2]|0;
 _png_free($4,$9);
 HEAP32[$8>>2] = 0;
 $10 = ((($4)) + 788|0);
 $11 = HEAP32[$10>>2]|0;
 _png_free($4,$11);
 HEAP32[$10>>2] = 0;
 $12 = ((($4)) + 612|0);
 $13 = HEAP32[$12>>2]|0;
 _png_free($4,$13);
 HEAP32[$12>>2] = 0;
 $14 = ((($4)) + 616|0);
 $15 = HEAP32[$14>>2]|0;
 _png_free($4,$15);
 HEAP32[$14>>2] = 0;
 $16 = ((($4)) + 676|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & 4096;
 $19 = ($18|0)==(0);
 if ($19) {
  $23 = $17;
 } else {
  $20 = ((($4)) + 416|0);
  $21 = HEAP32[$20>>2]|0;
  _png_zfree($4,$21);
  HEAP32[$20>>2] = 0;
  $$pre$i = HEAP32[$16>>2]|0;
  $23 = $$pre$i;
 }
 $22 = $23 & -4097;
 HEAP32[$16>>2] = $22;
 $24 = $23 & 8192;
 $25 = ($24|0)==(0);
 if ($25) {
  $29 = $22;
 } else {
  $26 = ((($4)) + 528|0);
  $27 = HEAP32[$26>>2]|0;
  _png_free($4,$27);
  HEAP32[$26>>2] = 0;
  $$pre36$i = HEAP32[$16>>2]|0;
  $29 = $$pre36$i;
 }
 $28 = $29 & -8193;
 HEAP32[$16>>2] = $28;
 $30 = ((($4)) + 224|0);
 (_inflateEnd($30)|0);
 $31 = ((($4)) + 568|0);
 $32 = HEAP32[$31>>2]|0;
 _png_free($4,$32);
 HEAP32[$31>>2] = 0;
 $33 = ((($4)) + 772|0);
 $34 = HEAP32[$33>>2]|0;
 _png_free($4,$34);
 HEAP32[$33>>2] = 0;
 $35 = ((($4)) + 696|0);
 $36 = HEAP32[$35>>2]|0;
 _png_free($4,$36);
 HEAP32[$35>>2] = 0;
 _png_destroy_png_struct($4);
 return;
}
function _png_destroy_png_struct($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 912|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(912|0);
 $1 = sp;
 $2 = ($0|0)==(0|0);
 if ($2) {
  STACKTOP = sp;return;
 }
 _memcpy(($1|0),($0|0),900)|0;
 _memset(($0|0),0,900)|0;
 $3 = ((($1)) + 724|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  _free($0);
 } else {
  FUNCTION_TABLE_vii[$4 & 127]($1,$0);
 }
 _png_free_jmpbuf($1);
 STACKTOP = sp;return;
}
function _png_free_jmpbuf($0) {
 $0 = $0|0;
 var $$pre = 0, $$reg2mem18$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0;
 var $cond20 = 0, $or$cond = 0, _setjmpTable = 0, _setjmpTableSize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 _setjmpTableSize = 4;_setjmpTable = _malloc(40) | 0;HEAP32[_setjmpTable>>2]=0;
 $1 = sp;
 $2 = ($0|0)==(0|0);
 if ($2) {
  _free(_setjmpTable|0);
  STACKTOP = sp;return;
 }
 $3 = ((($0)) + 160|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 $$pre = ((($0)) + 164|0);
 if (!($5)) {
  $6 = HEAP32[$$pre>>2]|0;
  $7 = ($6|0)==(0);
  $8 = ($4|0)==($0|0);
  $or$cond = $8 | $7;
  if (!($or$cond)) {
   _setjmpTable = _saveSetjmp($1,1,_setjmpTable|0,_setjmpTableSize|0)|0;_setjmpTableSize = tempRet0;
   __THREW__ = 0;
   $9 = __THREW__; __THREW__ = 0;
   if ((($9|0) != 0) & ((threwValue|0) != 0)) { $10 = _testSetjmp(HEAP32[$9>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($10|0) == 0) { _longjmp($9|0, threwValue|0); } tempRet0 = (threwValue); } else { $10 = -1; };
   $11 = tempRet0;
   $cond = ($10|0)==(1);
   if ($cond) {
    $$reg2mem18$0 = $11;
   } else {
    $$reg2mem18$0 = 0;
   }
   while(1) {
    $12 = ($$reg2mem18$0|0)==(0);
    if (!($12)) {
     break;
    }
    HEAP32[$3>>2] = $1;
    HEAP32[$$pre>>2] = 0;
    $13 = ((($0)) + 156|0);
    HEAP32[$13>>2] = 61;
    __THREW__ = 0;
    invoke_vii(66,($0|0),($4|0));
    $14 = __THREW__; __THREW__ = 0;
    if ((($14|0) != 0) & ((threwValue|0) != 0)) { $15 = _testSetjmp(HEAP32[$14>>2]|0, _setjmpTable|0, _setjmpTableSize|0)|0; if (($15|0) == 0) { _longjmp($14|0, threwValue|0); } tempRet0 = (threwValue); } else { $15 = -1; };
    $16 = tempRet0;
    $cond20 = ($15|0)==(1);
    if ($cond20) {
     $$reg2mem18$0 = $16;
    } else {
     label = 8;
     break;
    }
   }
   if ((label|0) == 8) {
   }
  }
 }
 HEAP32[$$pre>>2] = 0;
 HEAP32[$3>>2] = 0;
 $17 = ((($0)) + 156|0);
 HEAP32[$17>>2] = 0;
 _free(_setjmpTable|0);
 STACKTOP = sp;return;
}
function _png_do_write_transformations($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0100116$i = 0, $$0101115$i = 0, $$0102127$i = 0, $$0103110$i = 0, $$0103146$i = 0, $$0104145$i = 0, $$0106144$i = 0, $$0108143$i = 0, $$0109$i = 0, $$0110142$i = 0, $$0111126$i = 0, $$0113125$i = 0, $$0115135$i = 0, $$0116134$i = 0, $$0118133$i = 0, $$0120132$i = 0, $$0122131$i = 0, $$0123124$i = 0, $$0128$i = 0;
 var $$0142$lcssa$i = 0, $$0142180$i = 0, $$0144179$i = 0, $$0145166$i = 0, $$0146165$i = 0, $$0147186$i = 0, $$0148185$i = 0, $$0149$lcssa$i = 0, $$0149170$i = 0, $$0152169$i = 0, $$0153164$i = 0, $$0154$lcssa$i = 0, $$0154163$i = 0, $$0156176$i = 0, $$0157175$i = 0, $$07394$i = 0, $$07493$i = 0, $$07591$i = 0, $$07690$i = 0, $$07884$i = 0;
 var $$07987$i = 0, $$08086$i = 0, $$085$i = 0, $$094107$i = 0, $$095120$i = 0, $$096119$i = 0, $$098112$i = 0, $$1$i = 0, $$1$i41 = 0, $$1105$i = 0, $$1107$i = 0, $$1109$i = 0, $$1112$i = 0, $$1117$i = 0, $$1119$i = 0, $$1121$i = 0, $$1143$i = 0, $$1150$i = 0, $$1155$i = 0, $$2$i = 0;
 var $$lobit = 0, $$pn$i = 0, $$pn$peel$i = 0, $$pn158$i = 0, $$pn158$peel$i = 0, $$pn159$i = 0, $$pn159$peel$i = 0, $$pn201$i = 0, $$pre = 0, $$pre$phi$iZ2D = 0, $$pre62 = 0, $$pre63 = 0, $$pre64 = 0, $$pre65 = 0, $$pre66 = 0, $$pre67 = 0, $$sink200$i = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0;
 var $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0;
 var $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0;
 var $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0;
 var $355 = 0, $356 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $exitcond$i38 = 0, $exitcond$i40 = 0, $exitcond$i44 = 0, $exitcond100$i = 0, $exitcond101$i = 0, $exitcond125$i = 0, $exitcond126$i = 0;
 var $exitcond127$i = 0, $exitcond153$i = 0, $exitcond154$i = 0, $exitcond195$i = 0, $exitcond199$i = 0, $exitcond99$i = 0, $or$cond$i = 0, $or$cond160$i = 0, $spec$select = 0, $spec$select$i = 0, $spec$select$i42 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp;
 $4 = ($0|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = ((($0)) + 216|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 1048576;
 $8 = ($7|0)==(0);
 if ($8) {
  $16 = $6;
 } else {
  $9 = ((($0)) + 196|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $16 = $6;
  } else {
   $12 = ((($0)) + 384|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($13)) + 1|0);
   FUNCTION_TABLE_viii[$10 & 127]($0,$1,$14);
   $$pre = HEAP32[$5>>2]|0;
   $16 = $$pre;
  }
 }
 $15 = $16 & 32768;
 $17 = ($15|0)==(0);
 if ($17) {
  $26 = $16;
 } else {
  $18 = ((($0)) + 384|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($19)) + 1|0);
  $21 = ((($0)) + 212|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = $22 >>> 7;
  $$lobit = $23 & 1;
  $24 = $$lobit ^ 1;
  _png_do_strip_channel($1,$20,$24);
  $$pre62 = HEAP32[$5>>2]|0;
  $26 = $$pre62;
 }
 $25 = $26 & 65536;
 $27 = ($25|0)==(0);
 if ($27) {
  $32 = $26;
 } else {
  $28 = ((($0)) + 384|0);
  $29 = HEAP32[$28>>2]|0;
  $30 = ((($29)) + 1|0);
  _png_do_packswap($1,$30);
  $$pre63 = HEAP32[$5>>2]|0;
  $32 = $$pre63;
 }
 $31 = $32 & 4;
 $33 = ($31|0)==(0);
 if ($33) {
  $105 = $32;
 } else {
  $34 = ((($0)) + 384|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($35)) + 1|0);
  $37 = ((($0)) + 436|0);
  $38 = HEAP8[$37>>0]|0;
  $39 = $38&255;
  $40 = ((($1)) + 9|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = ($41<<24>>24)==(8);
  if ($42) {
   $43 = ((($1)) + 10|0);
   $44 = HEAP8[$43>>0]|0;
   $45 = ($44<<24>>24)==(1);
   if ($45) {
    switch ($38<<24>>24) {
    case 1:  {
     $46 = HEAP32[$1>>2]|0;
     $47 = ($46|0)==(0);
     if ($47) {
      $$pre$phi$iZ2D = $1;
     } else {
      $$0102127$i = $36;$$0111126$i = 128;$$0113125$i = 0;$$0123124$i = 0;$$0128$i = $36;
      while(1) {
       $48 = HEAP8[$$0128$i>>0]|0;
       $49 = ($48<<24>>24)==(0);
       $50 = $49 ? 0 : $$0111126$i;
       $spec$select$i = $50 | $$0113125$i;
       $51 = ((($$0128$i)) + 1|0);
       $52 = ($$0111126$i|0)>(1);
       if ($52) {
        $53 = $$0111126$i >>> 1;
        $$1$i = $$0102127$i;$$1112$i = $53;$$2$i = $spec$select$i;
       } else {
        $54 = $spec$select$i&255;
        HEAP8[$$0102127$i>>0] = $54;
        $55 = ((($$0102127$i)) + 1|0);
        $$1$i = $55;$$1112$i = 128;$$2$i = 0;
       }
       $56 = (($$0123124$i) + 1)|0;
       $exitcond$i = ($56|0)==($46|0);
       if ($exitcond$i) {
        break;
       } else {
        $$0102127$i = $$1$i;$$0111126$i = $$1112$i;$$0113125$i = $$2$i;$$0123124$i = $56;$$0128$i = $51;
       }
      }
      $57 = ($$1112$i|0)==(128);
      if ($57) {
       $$pre$phi$iZ2D = $1;
      } else {
       $58 = $$2$i&255;
       HEAP8[$$1$i>>0] = $58;
       $$pre$phi$iZ2D = $1;
      }
     }
     break;
    }
    case 2:  {
     $59 = HEAP32[$1>>2]|0;
     $60 = ($59|0)==(0);
     if ($60) {
      $$pre$phi$iZ2D = $1;
     } else {
      $$0115135$i = 0;$$0116134$i = 0;$$0118133$i = 6;$$0120132$i = $36;$$0122131$i = $36;
      while(1) {
       $61 = HEAP8[$$0122131$i>>0]|0;
       $62 = $61 & 3;
       $63 = $62&255;
       $64 = $63 << $$0118133$i;
       $65 = $64 | $$0116134$i;
       $66 = ($$0118133$i|0)==(0);
       if ($66) {
        $67 = $65&255;
        HEAP8[$$0120132$i>>0] = $67;
        $68 = ((($$0120132$i)) + 1|0);
        $$1117$i = 0;$$1119$i = 6;$$1121$i = $68;
       } else {
        $69 = (($$0118133$i) + -2)|0;
        $$1117$i = $65;$$1119$i = $69;$$1121$i = $$0120132$i;
       }
       $70 = ((($$0122131$i)) + 1|0);
       $71 = (($$0115135$i) + 1)|0;
       $exitcond153$i = ($71|0)==($59|0);
       if ($exitcond153$i) {
        break;
       } else {
        $$0115135$i = $71;$$0116134$i = $$1117$i;$$0118133$i = $$1119$i;$$0120132$i = $$1121$i;$$0122131$i = $70;
       }
      }
      $72 = ($$1119$i|0)==(6);
      if ($72) {
       $$pre$phi$iZ2D = $1;
      } else {
       $73 = $$1117$i&255;
       HEAP8[$$1121$i>>0] = $73;
       $$pre$phi$iZ2D = $1;
      }
     }
     break;
    }
    case 4:  {
     $74 = HEAP32[$1>>2]|0;
     $75 = ($74|0)==(0);
     if ($75) {
      $$pre$phi$iZ2D = $1;
     } else {
      $$0103146$i = 0;$$0104145$i = 0;$$0106144$i = 4;$$0108143$i = $36;$$0110142$i = $36;
      while(1) {
       $76 = HEAP8[$$0110142$i>>0]|0;
       $77 = $76 & 15;
       $78 = $77&255;
       $79 = $78 << $$0106144$i;
       $80 = $79 | $$0104145$i;
       $81 = ($$0106144$i|0)==(0);
       if ($81) {
        $82 = $80&255;
        HEAP8[$$0108143$i>>0] = $82;
        $83 = ((($$0108143$i)) + 1|0);
        $$1105$i = 0;$$1107$i = 4;$$1109$i = $83;
       } else {
        $84 = (($$0106144$i) + -4)|0;
        $$1105$i = $80;$$1107$i = $84;$$1109$i = $$0108143$i;
       }
       $85 = ((($$0110142$i)) + 1|0);
       $86 = (($$0103146$i) + 1)|0;
       $exitcond154$i = ($86|0)==($74|0);
       if ($exitcond154$i) {
        break;
       } else {
        $$0103146$i = $86;$$0104145$i = $$1105$i;$$0106144$i = $$1107$i;$$0108143$i = $$1109$i;$$0110142$i = $85;
       }
      }
      $87 = ($$1107$i|0)==(4);
      if ($87) {
       $$pre$phi$iZ2D = $1;
      } else {
       $88 = $$1105$i&255;
       HEAP8[$$1109$i>>0] = $88;
       $$pre$phi$iZ2D = $1;
      }
     }
     break;
    }
    default: {
     $$pre$phi$iZ2D = $1;
    }
    }
    HEAP8[$40>>0] = $38;
    $89 = HEAP8[$43>>0]|0;
    $90 = $89&255;
    $91 = Math_imul($90, $39)|0;
    $92 = $91&255;
    $93 = ((($1)) + 11|0);
    HEAP8[$93>>0] = $92;
    $94 = $91 & 255;
    $95 = ($94>>>0)>(7);
    $96 = HEAP32[$$pre$phi$iZ2D>>2]|0;
    if ($95) {
     $97 = $94 >>> 3;
     $98 = Math_imul($97, $96)|0;
     $103 = $98;
    } else {
     $99 = Math_imul($94, $96)|0;
     $100 = (($99) + 7)|0;
     $101 = $100 >>> 3;
     $103 = $101;
    }
    $102 = ((($1)) + 4|0);
    HEAP32[$102>>2] = $103;
    $$pre64 = HEAP32[$5>>2]|0;
    $105 = $$pre64;
   } else {
    $105 = $32;
   }
  } else {
   $105 = $32;
  }
 }
 $104 = $105 & 16;
 $106 = ($104|0)==(0);
 if ($106) {
  $111 = $105;
 } else {
  $107 = ((($0)) + 384|0);
  $108 = HEAP32[$107>>2]|0;
  $109 = ((($108)) + 1|0);
  _png_do_swap($1,$109);
  $$pre65 = HEAP32[$5>>2]|0;
  $111 = $$pre65;
 }
 $110 = $111 & 8;
 $112 = ($110|0)==(0);
 if ($112) {
  $244 = $111;
 } else {
  $113 = ((($0)) + 384|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = ((($114)) + 1|0);
  $116 = ((($1)) + 8|0);
  $117 = HEAP8[$116>>0]|0;
  $118 = ($117<<24>>24)==(3);
  if ($118) {
   $244 = $111;
  } else {
   $119 = $117 & 2;
   $120 = ($119<<24>>24)==(0);
   $121 = ((($1)) + 9|0);
   $122 = HEAP8[$121>>0]|0;
   $123 = $122&255;
   if ($120) {
    $139 = ((($0)) + 524|0);
    $140 = HEAP8[$139>>0]|0;
    $141 = $140&255;
    $$0$i = 1;$$pn201$i = $141;
   } else {
    $124 = ((($0)) + 521|0);
    $125 = HEAP8[$124>>0]|0;
    $126 = $125&255;
    $127 = ((($0)) + 522|0);
    $128 = HEAP8[$127>>0]|0;
    $129 = $128&255;
    $130 = (($123) - ($129))|0;
    $131 = ((($2)) + 4|0);
    HEAP32[$131>>2] = $130;
    $132 = ((($3)) + 4|0);
    HEAP32[$132>>2] = $129;
    $133 = ((($0)) + 523|0);
    $134 = HEAP8[$133>>0]|0;
    $135 = $134&255;
    $136 = (($123) - ($135))|0;
    $137 = ((($2)) + 8|0);
    HEAP32[$137>>2] = $136;
    $138 = ((($3)) + 8|0);
    HEAP32[$138>>2] = $135;
    $$0$i = 3;$$pn201$i = $126;
   }
   $$sink200$i = (($123) - ($$pn201$i))|0;
   HEAP32[$2>>2] = $$sink200$i;
   HEAP32[$3>>2] = $$pn201$i;
   $142 = $117 & 4;
   $143 = ($142<<24>>24)==(0);
   if ($143) {
    $$1$i41 = $$0$i;
   } else {
    $144 = ((($0)) + 525|0);
    $145 = HEAP8[$144>>0]|0;
    $146 = $145&255;
    $147 = (($123) - ($146))|0;
    $148 = (($2) + ($$0$i<<2)|0);
    HEAP32[$148>>2] = $147;
    $149 = (($3) + ($$0$i<<2)|0);
    HEAP32[$149>>2] = $146;
    $150 = (($$0$i) + 1)|0;
    $$1$i41 = $150;
   }
   $151 = ($122&255)<(8);
   do {
    if ($151) {
     $152 = ((($1)) + 4|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ((($0)) + 524|0);
     $155 = HEAP8[$154>>0]|0;
     $156 = ($155<<24>>24)==(1);
     $157 = ($122<<24>>24)==(2);
     $or$cond$i = $157 & $156;
     $158 = ($122<<24>>24)==(4);
     $159 = ($155<<24>>24)==(3);
     $or$cond160$i = $158 & $159;
     $spec$select$i42 = $or$cond160$i ? 17 : 255;
     $spec$select = $or$cond$i ? 85 : $spec$select$i42;
     $160 = ($153|0)==(0);
     if (!($160)) {
      $$0145166$i = $115;$$0146165$i = 0;
      while(1) {
       $161 = HEAP8[$$0145166$i>>0]|0;
       $162 = $161&255;
       $163 = HEAP32[$2>>2]|0;
       $164 = HEAP32[$3>>2]|0;
       $165 = (0 - ($164))|0;
       $166 = ($163|0)>($165|0);
       if ($166) {
        $167 = ($163|0)>(0);
        if ($167) {
         $171 = $162 << $163;
         $$pn159$peel$i = $171;
        } else {
         $168 = (0 - ($163))|0;
         $169 = $162 >>> $168;
         $170 = $169 & $spec$select;
         $$pn159$peel$i = $170;
        }
        $172 = (($163) - ($164))|0;
        $173 = ($172|0)>($165|0);
        if ($173) {
         $$0153164$i = $172;$$0154163$i = $$pn159$peel$i;
         while(1) {
          $174 = ($$0153164$i|0)>(0);
          if ($174) {
           $175 = $162 << $$0153164$i;
           $$pn159$i = $175;
          } else {
           $176 = (0 - ($$0153164$i))|0;
           $177 = $162 >>> $176;
           $178 = $177 & $spec$select;
           $$pn159$i = $178;
          }
          $$1155$i = $$pn159$i | $$0154163$i;
          $179 = (($$0153164$i) - ($164))|0;
          $180 = ($179|0)>($165|0);
          if ($180) {
           $$0153164$i = $179;$$0154163$i = $$1155$i;
          } else {
           $$0154$lcssa$i = $$1155$i;
           break;
          }
         }
        } else {
         $$0154$lcssa$i = $$pn159$peel$i;
        }
       } else {
        $$0154$lcssa$i = 0;
       }
       $181 = $$0154$lcssa$i&255;
       HEAP8[$$0145166$i>>0] = $181;
       $182 = (($$0146165$i) + 1)|0;
       $183 = ((($$0145166$i)) + 1|0);
       $exitcond$i44 = ($182|0)==($153|0);
       if ($exitcond$i44) {
        break;
       } else {
        $$0145166$i = $183;$$0146165$i = $182;
       }
      }
     }
    } else {
     $184 = ($122<<24>>24)==(8);
     $185 = HEAP32[$1>>2]|0;
     $186 = Math_imul($185, $$1$i41)|0;
     $187 = ($186|0)!=(0);
     if ($184) {
      if (!($187)) {
       break;
      }
      $$0156176$i = 0;$$0157175$i = $115;
      while(1) {
       $188 = (($$0156176$i>>>0) % ($$1$i41>>>0))&-1;
       $189 = HEAP8[$$0157175$i>>0]|0;
       $190 = $189&255;
       $191 = (($2) + ($188<<2)|0);
       $192 = HEAP32[$191>>2]|0;
       $193 = (($3) + ($188<<2)|0);
       $194 = HEAP32[$193>>2]|0;
       $195 = (0 - ($194))|0;
       $196 = ($192|0)>($195|0);
       if ($196) {
        $197 = ($192|0)>(0);
        $198 = $190 << $192;
        $199 = (0 - ($192))|0;
        $200 = $190 >>> $199;
        $$pn158$peel$i = $197 ? $198 : $200;
        $201 = (($192) - ($194))|0;
        $202 = ($201|0)>($195|0);
        if ($202) {
         $$0149170$i = $$pn158$peel$i;$$0152169$i = $201;
         while(1) {
          $203 = ($$0152169$i|0)>(0);
          $204 = $190 << $$0152169$i;
          $205 = (0 - ($$0152169$i))|0;
          $206 = $190 >>> $205;
          $$pn158$i = $203 ? $204 : $206;
          $$1150$i = $$pn158$i | $$0149170$i;
          $207 = (($$0152169$i) - ($194))|0;
          $208 = ($207|0)>($195|0);
          if ($208) {
           $$0149170$i = $$1150$i;$$0152169$i = $207;
          } else {
           $$0149$lcssa$i = $$1150$i;
           break;
          }
         }
        } else {
         $$0149$lcssa$i = $$pn158$peel$i;
        }
       } else {
        $$0149$lcssa$i = 0;
       }
       $209 = $$0149$lcssa$i&255;
       HEAP8[$$0157175$i>>0] = $209;
       $210 = (($$0156176$i) + 1)|0;
       $211 = ((($$0157175$i)) + 1|0);
       $exitcond195$i = ($210|0)==($186|0);
       if ($exitcond195$i) {
        break;
       } else {
        $$0156176$i = $210;$$0157175$i = $211;
       }
      }
     } else {
      if (!($187)) {
       break;
      }
      $$0147186$i = 0;$$0148185$i = $115;
      while(1) {
       $212 = (($$0147186$i>>>0) % ($$1$i41>>>0))&-1;
       $213 = HEAP8[$$0148185$i>>0]|0;
       $214 = $213&255;
       $215 = $214 << 8;
       $216 = ((($$0148185$i)) + 1|0);
       $217 = HEAP8[$216>>0]|0;
       $218 = $217&255;
       $219 = $215 | $218;
       $220 = (($2) + ($212<<2)|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = (($3) + ($212<<2)|0);
       $223 = HEAP32[$222>>2]|0;
       $224 = (0 - ($223))|0;
       $225 = ($221|0)>($224|0);
       if ($225) {
        $226 = ($221|0)>(0);
        $227 = $219 << $221;
        $228 = (0 - ($221))|0;
        $229 = $219 >>> $228;
        $$pn$peel$i = $226 ? $227 : $229;
        $230 = (($221) - ($223))|0;
        $231 = ($230|0)>($224|0);
        if ($231) {
         $$0142180$i = $$pn$peel$i;$$0144179$i = $230;
         while(1) {
          $232 = ($$0144179$i|0)>(0);
          $233 = $219 << $$0144179$i;
          $234 = (0 - ($$0144179$i))|0;
          $235 = $219 >>> $234;
          $$pn$i = $232 ? $233 : $235;
          $$1143$i = $$pn$i | $$0142180$i;
          $236 = (($$0144179$i) - ($223))|0;
          $237 = ($236|0)>($224|0);
          if ($237) {
           $$0142180$i = $$1143$i;$$0144179$i = $236;
          } else {
           $$0142$lcssa$i = $$1143$i;
           break;
          }
         }
        } else {
         $$0142$lcssa$i = $$pn$peel$i;
        }
       } else {
        $$0142$lcssa$i = 0;
       }
       $238 = $$0142$lcssa$i >>> 8;
       $239 = $238&255;
       HEAP8[$$0148185$i>>0] = $239;
       $240 = $$0142$lcssa$i&255;
       $241 = ((($$0148185$i)) + 2|0);
       HEAP8[$216>>0] = $240;
       $242 = (($$0147186$i) + 1)|0;
       $exitcond199$i = ($242|0)==($186|0);
       if ($exitcond199$i) {
        break;
       } else {
        $$0147186$i = $242;$$0148185$i = $241;
       }
      }
     }
    }
   } while(0);
   $$pre66 = HEAP32[$5>>2]|0;
   $244 = $$pre66;
  }
 }
 $243 = $244 & 131072;
 $245 = ($243|0)==(0);
 L112: do {
  if (!($245)) {
   $246 = ((($0)) + 384|0);
   $247 = HEAP32[$246>>2]|0;
   $248 = ((($247)) + 1|0);
   $249 = ((($1)) + 8|0);
   $250 = HEAP8[$249>>0]|0;
   switch ($250<<24>>24) {
   case 6:  {
    $251 = ((($1)) + 9|0);
    $252 = HEAP8[$251>>0]|0;
    $253 = ($252<<24>>24)==(8);
    $254 = HEAP32[$1>>2]|0;
    $255 = ($254|0)!=(0);
    if ($253) {
     if (!($255)) {
      break L112;
     }
     $$0109$i = $248;$$094107$i = 0;
     while(1) {
      $256 = ((($$0109$i)) + 1|0);
      $257 = HEAP8[$$0109$i>>0]|0;
      $258 = ((($$0109$i)) + 2|0);
      $259 = HEAP8[$256>>0]|0;
      HEAP8[$$0109$i>>0] = $259;
      $260 = ((($$0109$i)) + 3|0);
      $261 = HEAP8[$258>>0]|0;
      HEAP8[$256>>0] = $261;
      $262 = ((($$0109$i)) + 4|0);
      $263 = HEAP8[$260>>0]|0;
      HEAP8[$258>>0] = $263;
      HEAP8[$260>>0] = $257;
      $264 = (($$094107$i) + 1)|0;
      $exitcond$i40 = ($264|0)==($254|0);
      if ($exitcond$i40) {
       break;
      } else {
       $$0109$i = $262;$$094107$i = $264;
      }
     }
    } else {
     if (!($255)) {
      break L112;
     }
     $$0103110$i = 0;$$098112$i = $248;
     while(1) {
      $265 = ((($$098112$i)) + 1|0);
      $266 = HEAP8[$$098112$i>>0]|0;
      $267 = ((($$098112$i)) + 2|0);
      $268 = HEAP8[$265>>0]|0;
      $269 = ((($$098112$i)) + 3|0);
      $270 = HEAP8[$267>>0]|0;
      HEAP8[$$098112$i>>0] = $270;
      $271 = ((($$098112$i)) + 4|0);
      $272 = HEAP8[$269>>0]|0;
      HEAP8[$265>>0] = $272;
      $273 = ((($$098112$i)) + 5|0);
      $274 = HEAP8[$271>>0]|0;
      HEAP8[$267>>0] = $274;
      $275 = ((($$098112$i)) + 6|0);
      $276 = HEAP8[$273>>0]|0;
      HEAP8[$269>>0] = $276;
      $277 = ((($$098112$i)) + 7|0);
      $278 = HEAP8[$275>>0]|0;
      HEAP8[$271>>0] = $278;
      $279 = ((($$098112$i)) + 8|0);
      $280 = HEAP8[$277>>0]|0;
      HEAP8[$273>>0] = $280;
      HEAP8[$275>>0] = $266;
      HEAP8[$277>>0] = $268;
      $281 = (($$0103110$i) + 1)|0;
      $exitcond125$i = ($281|0)==($254|0);
      if ($exitcond125$i) {
       break;
      } else {
       $$0103110$i = $281;$$098112$i = $279;
      }
     }
    }
    break;
   }
   case 4:  {
    $282 = ((($1)) + 9|0);
    $283 = HEAP8[$282>>0]|0;
    $284 = ($283<<24>>24)==(8);
    $285 = HEAP32[$1>>2]|0;
    $286 = ($285|0)!=(0);
    if ($284) {
     if (!($286)) {
      break L112;
     }
     $$0100116$i = 0;$$0101115$i = $248;
     while(1) {
      $287 = ((($$0101115$i)) + 1|0);
      $288 = HEAP8[$$0101115$i>>0]|0;
      $289 = ((($$0101115$i)) + 2|0);
      $290 = HEAP8[$287>>0]|0;
      HEAP8[$$0101115$i>>0] = $290;
      HEAP8[$287>>0] = $288;
      $291 = (($$0100116$i) + 1)|0;
      $exitcond126$i = ($291|0)==($285|0);
      if ($exitcond126$i) {
       break;
      } else {
       $$0100116$i = $291;$$0101115$i = $289;
      }
     }
    } else {
     if (!($286)) {
      break L112;
     }
     $$095120$i = 0;$$096119$i = $248;
     while(1) {
      $292 = ((($$096119$i)) + 1|0);
      $293 = HEAP8[$$096119$i>>0]|0;
      $294 = ((($$096119$i)) + 2|0);
      $295 = HEAP8[$292>>0]|0;
      $296 = ((($$096119$i)) + 3|0);
      $297 = HEAP8[$294>>0]|0;
      HEAP8[$$096119$i>>0] = $297;
      $298 = ((($$096119$i)) + 4|0);
      $299 = HEAP8[$296>>0]|0;
      HEAP8[$292>>0] = $299;
      HEAP8[$294>>0] = $293;
      HEAP8[$296>>0] = $295;
      $300 = (($$095120$i) + 1)|0;
      $exitcond127$i = ($300|0)==($285|0);
      if ($exitcond127$i) {
       break;
      } else {
       $$095120$i = $300;$$096119$i = $298;
      }
     }
    }
    break;
   }
   default: {
    break L112;
   }
   }
  }
 } while(0);
 $301 = HEAP32[$5>>2]|0;
 $302 = $301 & 524288;
 $303 = ($302|0)==(0);
 L136: do {
  if (!($303)) {
   $304 = ((($0)) + 384|0);
   $305 = HEAP32[$304>>2]|0;
   $306 = ((($305)) + 1|0);
   $307 = ((($1)) + 8|0);
   $308 = HEAP8[$307>>0]|0;
   switch ($308<<24>>24) {
   case 6:  {
    $309 = ((($1)) + 9|0);
    $310 = HEAP8[$309>>0]|0;
    $311 = ($310<<24>>24)==(8);
    $312 = HEAP32[$1>>2]|0;
    $313 = ($312|0)!=(0);
    if ($311) {
     if (!($313)) {
      break L136;
     }
     $$07884$i = 0;$$085$i = $306;
     while(1) {
      $314 = ((($$085$i)) + 3|0);
      $315 = ((($$085$i)) + 4|0);
      $316 = HEAP8[$314>>0]|0;
      $317 = $316 ^ -1;
      HEAP8[$314>>0] = $317;
      $318 = (($$07884$i) + 1)|0;
      $exitcond$i38 = ($318|0)==($312|0);
      if ($exitcond$i38) {
       break;
      } else {
       $$07884$i = $318;$$085$i = $315;
      }
     }
    } else {
     if (!($313)) {
      break L136;
     }
     $$07987$i = 0;$$08086$i = $306;
     while(1) {
      $319 = ((($$08086$i)) + 6|0);
      $320 = ((($$08086$i)) + 7|0);
      $321 = HEAP8[$319>>0]|0;
      $322 = $321 ^ -1;
      HEAP8[$319>>0] = $322;
      $323 = ((($$08086$i)) + 8|0);
      $324 = HEAP8[$320>>0]|0;
      $325 = $324 ^ -1;
      HEAP8[$320>>0] = $325;
      $326 = (($$07987$i) + 1)|0;
      $exitcond99$i = ($326|0)==($312|0);
      if ($exitcond99$i) {
       break;
      } else {
       $$07987$i = $326;$$08086$i = $323;
      }
     }
    }
    break;
   }
   case 4:  {
    $327 = ((($1)) + 9|0);
    $328 = HEAP8[$327>>0]|0;
    $329 = ($328<<24>>24)==(8);
    $330 = HEAP32[$1>>2]|0;
    $331 = ($330|0)!=(0);
    if ($329) {
     if (!($331)) {
      break L136;
     }
     $$07591$i = 0;$$07690$i = $306;
     while(1) {
      $332 = ((($$07690$i)) + 1|0);
      $333 = ((($$07690$i)) + 2|0);
      $334 = HEAP8[$332>>0]|0;
      $335 = $334 ^ -1;
      HEAP8[$332>>0] = $335;
      $336 = (($$07591$i) + 1)|0;
      $exitcond100$i = ($336|0)==($330|0);
      if ($exitcond100$i) {
       break;
      } else {
       $$07591$i = $336;$$07690$i = $333;
      }
     }
    } else {
     if (!($331)) {
      break L136;
     }
     $$07394$i = 0;$$07493$i = $306;
     while(1) {
      $337 = ((($$07493$i)) + 2|0);
      $338 = ((($$07493$i)) + 3|0);
      $339 = HEAP8[$337>>0]|0;
      $340 = $339 ^ -1;
      HEAP8[$337>>0] = $340;
      $341 = ((($$07493$i)) + 4|0);
      $342 = HEAP8[$338>>0]|0;
      $343 = $342 ^ -1;
      HEAP8[$338>>0] = $343;
      $344 = (($$07394$i) + 1)|0;
      $exitcond101$i = ($344|0)==($330|0);
      if ($exitcond101$i) {
       break;
      } else {
       $$07394$i = $344;$$07493$i = $341;
      }
     }
    }
    break;
   }
   default: {
    break L136;
   }
   }
  }
 } while(0);
 $345 = HEAP32[$5>>2]|0;
 $346 = $345 & 1;
 $347 = ($346|0)==(0);
 if ($347) {
  $352 = $345;
 } else {
  $348 = ((($0)) + 384|0);
  $349 = HEAP32[$348>>2]|0;
  $350 = ((($349)) + 1|0);
  _png_do_bgr($1,$350);
  $$pre67 = HEAP32[$5>>2]|0;
  $352 = $$pre67;
 }
 $351 = $352 & 32;
 $353 = ($351|0)==(0);
 if ($353) {
  STACKTOP = sp;return;
 }
 $354 = ((($0)) + 384|0);
 $355 = HEAP32[$354>>2]|0;
 $356 = ((($355)) + 1|0);
 _png_do_invert($1,$356);
 STACKTOP = sp;return;
}
function _png_get_valid($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)!=(0|0);
 $4 = ($1|0)!=(0|0);
 $or$cond = $3 & $4;
 if (!($or$cond)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($1)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & $2;
 $$0 = $7;
 return ($$0|0);
}
function _png_get_rowbytes($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)!=(0|0);
 $3 = ($1|0)!=(0|0);
 $or$cond = $2 & $3;
 if (!($or$cond)) {
  $$0 = 0;
  return ($$0|0);
 }
 $4 = ((($1)) + 12|0);
 $5 = HEAP32[$4>>2]|0;
 $$0 = $5;
 return ($$0|0);
}
function _png_get_gAMA($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0.0, $13 = 0.0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)!=(0|0);
 $4 = ($1|0)!=(0|0);
 $or$cond = $3 & $4;
 if (!($or$cond)) {
  $$0 = 0;
  return ($$0|0);
 }
 $5 = ((($1)) + 114|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6 & 1;
 $8 = ($7<<16>>16)!=(0);
 $9 = ($2|0)!=(0|0);
 $or$cond3 = $9 & $8;
 if (!($or$cond3)) {
  $$0 = 0;
  return ($$0|0);
 }
 $10 = ((($1)) + 40|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = (+($11|0));
 $13 = $12 * 1.0000000000000001E-5;
 HEAPF64[$2>>3] = $13;
 $$0 = 1;
 return ($$0|0);
}
function _png_get_IHDR($0,$1,$2,$3,$4,$5,$6,$7,$8) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 $8 = $8|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre32 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $9 = ($0|0)==(0|0);
 $10 = ($1|0)==(0|0);
 $or$cond = $9 | $10;
 if ($or$cond) {
  $$0 = 0;
  return ($$0|0);
 }
 $11 = ($2|0)==(0|0);
 if (!($11)) {
  $12 = HEAP32[$1>>2]|0;
  HEAP32[$2>>2] = $12;
 }
 $13 = ($3|0)==(0|0);
 if (!($13)) {
  $14 = ((($1)) + 4|0);
  $15 = HEAP32[$14>>2]|0;
  HEAP32[$3>>2] = $15;
 }
 $16 = ($4|0)==(0|0);
 if (!($16)) {
  $17 = ((($1)) + 24|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18&255;
  HEAP32[$4>>2] = $19;
 }
 $20 = ($5|0)==(0|0);
 if (!($20)) {
  $21 = ((($1)) + 25|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22&255;
  HEAP32[$5>>2] = $23;
 }
 $24 = ($7|0)==(0|0);
 if (!($24)) {
  $25 = ((($1)) + 26|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $26&255;
  HEAP32[$7>>2] = $27;
 }
 $28 = ($8|0)==(0|0);
 if (!($28)) {
  $29 = ((($1)) + 27|0);
  $30 = HEAP8[$29>>0]|0;
  $31 = $30&255;
  HEAP32[$8>>2] = $31;
 }
 $32 = ($6|0)==(0|0);
 $$phi$trans$insert = ((($1)) + 28|0);
 $$pre = HEAP8[$$phi$trans$insert>>0]|0;
 $$pre32 = $$pre&255;
 if (!($32)) {
  HEAP32[$6>>2] = $$pre32;
 }
 $33 = HEAP32[$1>>2]|0;
 $34 = ((($1)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($1)) + 24|0);
 $37 = HEAP8[$36>>0]|0;
 $38 = $37&255;
 $39 = ((($1)) + 25|0);
 $40 = HEAP8[$39>>0]|0;
 $41 = $40&255;
 $42 = ((($1)) + 26|0);
 $43 = HEAP8[$42>>0]|0;
 $44 = $43&255;
 $45 = ((($1)) + 27|0);
 $46 = HEAP8[$45>>0]|0;
 $47 = $46&255;
 _png_check_IHDR($0,$33,$35,$38,$41,$$pre32,$44,$47);
 $$0 = 1;
 return ($$0|0);
}
function _png_get_user_chunk_ptr($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $4 = 0;
  return ($4|0);
 }
 $2 = ((($0)) + 680|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3;
 return ($4|0);
}
function _png_do_read_transformations($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$i = 0, $$0$i = 0, $$0100111$i = 0, $$0101110$i = 0, $$0106$i = 0, $$011$i = 0, $$0115152$i = 0, $$0118139$i = 0, $$0119$i = 0, $$0119142$i = 0, $$0120138$i = 0, $$0120154$i = 0, $$0121141$i = 0, $$0123136$i = 0, $$0126135$i = 0, $$0126151$i = 0, $$0127132$i = 0, $$0128133$i = 0, $$0153$i = 0, $$01920$i = 0;
 var $$0206256$i = 0, $$0207263$i = 0, $$0208262$i = 0, $$0209245$i = 0, $$021$i = 0, $$0210244$i = 0, $$0211251$i = 0, $$02122$i = 0, $$0212250$i = 0, $$0213233$i = 0, $$0214232$i = 0, $$0215239$i = 0, $$0216238$i = 0, $$0217224$i = 0, $$0218223$i = 0, $$0219227$i = 0, $$0220226$i = 0, $$0221225$i = 0, $$022710$i = 0, $$023$i = 0;
 var $$0238284$i = 0, $$0238284$us$i = 0, $$0240283$i = 0, $$0240283$us$i = 0, $$0243282$i = 0, $$0243282$us$i = 0, $$0245290$i = 0, $$0245290$us$i = 0, $$0246289$i = 0, $$0246289$us$i = 0, $$0248288$i = 0, $$0248288$us$i = 0, $$0250280$i = 0, $$0250280$us$i = 0, $$0252279$i = 0, $$0252279$us$i = 0, $$02526$i = 0, $$0255278$i = 0, $$0255278$us$i = 0, $$0256296$i = 0;
 var $$0256296$i$us = 0, $$0257$i = 0, $$0258295$i = 0, $$0258295$i$us = 0, $$0260$off0$i = 0, $$0260$off0$i$us = 0, $$0260$off8$i = 0, $$0260$off8$i$us = 0, $$0261294$i = 0, $$0261294$i$us = 0, $$027$i = 0, $$0285$i = 0, $$0285$us$i = 0, $$05056$i = 0, $$057$i = 0, $$073107$i = 0, $$07395$i = 0, $$074105$i = 0, $$07493$i = 0, $$07592$i = 0;
 var $$076100$i = 0, $$07789$i = 0, $$078101$i = 0, $$07988$i = 0, $$07999$i = 0, $$08087$i = 0, $$08195$i = 0, $$0823922$i = 0, $$08286$i = 0, $$08396$i = 0, $$0844921$i = 0, $$08494$i = 0, $$0859$off0$i = 0, $$0859$off8$i = 0, $$08693$i = 0, $$08894$i = 0, $$09093$i = 0, $$092108$i = 0, $$0923$i = 0, $$094118$i = 0;
 var $$095$i = 0, $$096$i = 0, $$096115$i = 0, $$097106$i = 0, $$098114$i = 0, $$1$i = 0, $$1$i146 = 0, $$1$i146$ph = 0, $$1$i160 = 0, $$1$i163 = 0, $$1$i170 = 0, $$1$us$i = 0, $$1$us$i$ph = 0, $$10833952$i = 0, $$10944$i = 0, $$1116159$i = 0, $$1121161$i = 0, $$1122$i = 0, $$1127$i = 0, $$113$i = 0;
 var $$11834962$i = 0, $$11941$i = 0, $$1222$i = 0, $$122812$i = 0, $$1241$i = 0, $$1241$us$i = 0, $$1253$i = 0, $$1253$us$i = 0, $$12835959$i = 0, $$12950$i = 0, $$13836966$i = 0, $$13836966$us$i = 0, $$13947$i = 0, $$14837970$i = 0, $$14956$i = 0, $$15158$i = 0, $$15838973$i = 0, $$15838973$us$i = 0, $$159$i = 0, $$15953$i = 0;
 var $$16839977$i = 0, $$16963$i = 0, $$175$i = 0, $$177$i = 0, $$17840980$i = 0, $$17840980$i$us = 0, $$17960$i = 0, $$180$i = 0, $$182$i = 0, $$1824929$i = 0, $$1845$i = 0, $$185$i = 0, $$1860$off0$i = 0, $$1860$off8$i = 0, $$18798$i = 0, $$18841984$i = 0, $$18967$i = 0, $$18967$us$i = 0, $$18997$i = 0, $$19196$i = 0;
 var $$198$i = 0, $$19842987$i = 0, $$19971$i = 0, $$20843991$i = 0, $$20974$i = 0, $$20974$us$i = 0, $$2103$i = 0, $$2104$i = 0, $$2117166$i = 0, $$2122168$i = 0, $$2128158$i = 0, $$216$i = 0, $$2160$i = 0, $$21978$i = 0, $$222915$i = 0, $$2237$i = 0, $$2281$i = 0, $$2281$us$i = 0, $$22981$i = 0, $$22981$i$us = 0;
 var $$23985$i = 0, $$24988$i = 0, $$25992$i = 0, $$2825925$i = 0, $$2846928$i = 0, $$2861$off0$i = 0, $$2861$off8$i = 0, $$292102$i = 0, $$2930$i = 0, $$3$i = 0, $$3$i150 = 0, $$3$i172 = 0, $$3$us$i = 0, $$3118142$i = 0, $$3123143$i = 0, $$3129$i = 0, $$319$i = 0, $$323018$i = 0, $$3231$i = 0, $$3826937$i = 0;
 var $$3847$i = 0, $$4119146$i = 0, $$4124$i = 0, $$4130165$i = 0, $$4167$i = 0, $$422$i = 0, $$423121$i = 0, $$4249$i = 0, $$4297$i = 0, $$4297$i$us = 0, $$4827933$i = 0, $$4848924$i = 0, $$4926$i = 0, $$5$i = 0, $$5$i151 = 0, $$5$i151$us = 0, $$5$i173 = 0, $$5125$i = 0, $$5131$i = 0, $$523224$i = 0;
 var $$5243$i = 0, $$525$i = 0, $$5828943$i = 0, $$5849$i = 0, $$6140$i = 0, $$623336$i = 0, $$6261$i = 0, $$6291$i = 0, $$6291$us$i = 0, $$637$i = 0, $$6829940$i = 0, $$6850936$i = 0, $$6938$i = 0, $$7$i = 0, $$7$i174 = 0, $$7$us$i = 0, $$7144$i = 0, $$723427$i = 0, $$7255$i = 0, $$728$i = 0;
 var $$7830949$i = 0, $$7851$i = 0, $$8$i = 0, $$823530$i = 0, $$831$i = 0, $$8831946$i = 0, $$8852932$i = 0, $$8934$i = 0, $$9$i175 = 0, $$923633$i = 0, $$934$i = 0, $$9832955$i = 0, $$9853$i = 0, $$idx = 0, $$idx$val = 0, $$idx144 = 0, $$idx144$val = 0, $$idx145 = 0, $$idx145$val = 0, $$masked866$i = 0;
 var $$masked870$i = 0, $$phi$trans$insert = 0, $$pn$i = 0, $$pn$i162 = 0, $$pn109$i = 0, $$pn110$i = 0, $$pn132141$i = 0, $$pn145$i = 0, $$pn171$i = 0, $$pn172$i = 0, $$pn173$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i183 = 0, $$pre$i191 = 0, $$pre$i203 = 0, $$pre$phi1044$iZ2D = 0, $$pre$phi1046$iZ2D = 0, $$pre1038$i = 0, $$pre1043$i = 0;
 var $$pre1045$i = 0, $$pre109$i = 0, $$pre307 = 0, $$pre308 = 0, $$pre309 = 0, $$pre310 = 0, $$pre311 = 0, $$pre312 = 0, $$pre313 = 0, $$pre314 = 0, $$pre315 = 0, $$pre316 = 0, $$pre317 = 0, $$pre318 = 0, $$pre318$pre = 0, $$pre319 = 0, $$pre319$pre = 0, $$pre320 = 0, $$pre321 = 0, $$pre321$pre = 0;
 var $$pre322 = 0, $$pre323 = 0, $$pre324 = 0, $$pre325 = 0, $$pre326 = 0, $$pre327 = 0, $$pre332 = 0, $$sink = 0, $$sink$i = 0, $$sink439 = 0, $$sink443 = 0, $$sink443$in = 0, $$sink448 = 0, $$sink449 = 0, $$sink451 = 0, $$sink452 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0;
 var $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0;
 var $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0;
 var $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0;
 var $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0;
 var $1075 = 0, $1076 = 0, $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0;
 var $1093 = 0, $1094 = 0, $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0;
 var $1110 = 0, $1111 = 0, $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0;
 var $1129 = 0, $113 = 0, $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0;
 var $1147 = 0, $1148 = 0, $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0;
 var $1165 = 0, $1166 = 0, $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $1175 = 0, $1176 = 0, $1177 = 0, $1178 = 0, $1179 = 0, $118 = 0, $1180 = 0, $1181 = 0, $1182 = 0;
 var $1183 = 0, $1184 = 0, $1185 = 0, $1186 = 0, $1187 = 0, $1188 = 0, $1189 = 0, $119 = 0, $1190 = 0, $1191 = 0, $1192 = 0, $1193 = 0, $1194 = 0, $1195 = 0, $1196 = 0, $1197 = 0, $1198 = 0, $1199 = 0, $12 = 0, $120 = 0;
 var $1200 = 0, $1201 = 0, $1202 = 0, $1203 = 0, $1204 = 0, $1205 = 0, $1206 = 0, $1207 = 0, $1208 = 0, $1209 = 0, $121 = 0, $1210 = 0, $1211 = 0, $1212 = 0, $1213 = 0, $1214 = 0, $1215 = 0, $1216 = 0, $1217 = 0, $1218 = 0;
 var $1219 = 0, $122 = 0, $1220 = 0, $1221 = 0, $1222 = 0, $1223 = 0, $1224 = 0, $1225 = 0, $1226 = 0, $1227 = 0, $1228 = 0, $1229 = 0, $123 = 0, $1230 = 0, $1231 = 0, $1232 = 0, $1233 = 0, $1234 = 0, $1235 = 0, $1236 = 0;
 var $1237 = 0, $1238 = 0, $1239 = 0, $124 = 0, $1240 = 0, $1241 = 0, $1242 = 0, $1243 = 0, $1244 = 0, $1245 = 0, $1246 = 0, $1247 = 0, $1248 = 0, $1249 = 0, $125 = 0, $1250 = 0, $1251 = 0, $1252 = 0, $1253 = 0, $1254 = 0;
 var $1255 = 0, $1256 = 0, $1257 = 0, $1258 = 0, $1259 = 0, $126 = 0, $1260 = 0, $1261 = 0, $1262 = 0, $1263 = 0, $1264 = 0, $1265 = 0, $1266 = 0, $1267 = 0, $1268 = 0, $1269 = 0, $127 = 0, $1270 = 0, $1271 = 0, $1272 = 0;
 var $1273 = 0, $1274 = 0, $1275 = 0, $1276 = 0, $1277 = 0, $1278 = 0, $1279 = 0, $128 = 0, $1280 = 0, $1281 = 0, $1282 = 0, $1283 = 0, $1284 = 0, $1285 = 0, $1286 = 0, $1287 = 0, $1288 = 0, $1289 = 0, $129 = 0, $1290 = 0;
 var $1291 = 0, $1292 = 0, $1293 = 0, $1294 = 0, $1295 = 0, $1296 = 0, $1297 = 0, $1298 = 0, $1299 = 0, $13 = 0, $130 = 0, $1300 = 0, $1301 = 0, $1302 = 0, $1303 = 0, $1304 = 0, $1305 = 0, $1306 = 0, $1307 = 0, $1308 = 0;
 var $1309 = 0, $131 = 0, $1310 = 0, $1311 = 0, $1312 = 0, $1313 = 0, $1314 = 0, $1315 = 0, $1316 = 0, $1317 = 0, $1318 = 0, $1319 = 0, $132 = 0, $1320 = 0, $1321 = 0, $1322 = 0, $1323 = 0, $1324 = 0, $1325 = 0, $1326 = 0;
 var $1327 = 0, $1328 = 0, $1329 = 0, $133 = 0, $1330 = 0, $1331 = 0, $1332 = 0, $1333 = 0, $1334 = 0, $1335 = 0, $1336 = 0, $1337 = 0, $1338 = 0, $1339 = 0, $134 = 0, $1340 = 0, $1341 = 0, $1342 = 0, $1343 = 0, $1344 = 0;
 var $1345 = 0, $1346 = 0, $1347 = 0, $1348 = 0, $1349 = 0, $135 = 0, $1350 = 0, $1351 = 0, $1352 = 0, $1353 = 0, $1354 = 0, $1355 = 0, $1356 = 0, $1357 = 0, $1358 = 0, $1359 = 0, $136 = 0, $1360 = 0, $1361 = 0, $1362 = 0;
 var $1363 = 0, $1364 = 0, $1365 = 0, $1366 = 0, $1367 = 0, $1368 = 0, $1369 = 0, $137 = 0, $1370 = 0, $1371 = 0, $1372 = 0, $1373 = 0, $1374 = 0, $1375 = 0, $1376 = 0, $1377 = 0, $1378 = 0, $1379 = 0, $138 = 0, $1380 = 0;
 var $1381 = 0, $1382 = 0, $1383 = 0, $1384 = 0, $1385 = 0, $1386 = 0, $1387 = 0, $1388 = 0, $1389 = 0, $139 = 0, $1390 = 0, $1391 = 0, $1392 = 0, $1393 = 0, $1394 = 0, $1395 = 0, $1396 = 0, $1397 = 0, $1398 = 0, $1399 = 0;
 var $14 = 0, $140 = 0, $1400 = 0, $1401 = 0, $1402 = 0, $1403 = 0, $1404 = 0, $1405 = 0, $1406 = 0, $1407 = 0, $1408 = 0, $1409 = 0, $141 = 0, $1410 = 0, $1411 = 0, $1412 = 0, $1413 = 0, $1414 = 0, $1415 = 0, $1416 = 0;
 var $1417 = 0, $1418 = 0, $1419 = 0, $142 = 0, $1420 = 0, $1421 = 0, $1422 = 0, $1423 = 0, $1424 = 0, $1425 = 0, $1426 = 0, $1427 = 0, $1428 = 0, $1429 = 0, $143 = 0, $1430 = 0, $1431 = 0, $1432 = 0, $1433 = 0, $1434 = 0;
 var $1435 = 0, $1436 = 0, $1437 = 0, $1438 = 0, $1439 = 0, $144 = 0, $1440 = 0, $1441 = 0, $1442 = 0, $1443 = 0, $1444 = 0, $1445 = 0, $1446 = 0, $1447 = 0, $1448 = 0, $1449 = 0, $145 = 0, $1450 = 0, $1451 = 0, $1452 = 0;
 var $1453 = 0, $1454 = 0, $1455 = 0, $1456 = 0, $1457 = 0, $1458 = 0, $1459 = 0, $146 = 0, $1460 = 0, $1461 = 0, $1462 = 0, $1463 = 0, $1464 = 0, $1465 = 0, $1466 = 0, $1467 = 0, $1468 = 0, $1469 = 0, $147 = 0, $1470 = 0;
 var $1471 = 0, $1472 = 0, $1473 = 0, $1474 = 0, $1475 = 0, $1476 = 0, $1477 = 0, $1478 = 0, $1479 = 0, $148 = 0, $1480 = 0, $1481 = 0, $1482 = 0, $1483 = 0, $1484 = 0, $1485 = 0, $1486 = 0, $1487 = 0, $1488 = 0, $1489 = 0;
 var $149 = 0, $1490 = 0, $1491 = 0, $1492 = 0, $1493 = 0, $1494 = 0, $1495 = 0, $1496 = 0, $1497 = 0, $1498 = 0, $1499 = 0, $15 = 0, $150 = 0, $1500 = 0, $1501 = 0, $1502 = 0, $1503 = 0, $1504 = 0, $1505 = 0, $1506 = 0;
 var $1507 = 0, $1508 = 0, $1509 = 0, $151 = 0, $1510 = 0, $1511 = 0, $1512 = 0, $1513 = 0, $1514 = 0, $1515 = 0, $1516 = 0, $1517 = 0, $1518 = 0, $1519 = 0, $152 = 0, $1520 = 0, $1521 = 0, $1522 = 0, $1523 = 0, $1524 = 0;
 var $1525 = 0, $1526 = 0, $1527 = 0, $1528 = 0, $1529 = 0, $153 = 0, $1530 = 0, $1531 = 0, $1532 = 0, $1533 = 0, $1534 = 0, $1535 = 0, $1536 = 0, $1537 = 0, $1538 = 0, $1539 = 0, $154 = 0, $1540 = 0, $1541 = 0, $1542 = 0;
 var $1543 = 0, $1544 = 0, $1545 = 0, $1546 = 0, $1547 = 0, $1548 = 0, $1549 = 0, $155 = 0, $1550 = 0, $1551 = 0, $1552 = 0, $1553 = 0, $1554 = 0, $1555 = 0, $1556 = 0, $1557 = 0, $1558 = 0, $1559 = 0, $156 = 0, $1560 = 0;
 var $1561 = 0, $1562 = 0, $1563 = 0, $1564 = 0, $1565 = 0, $1566 = 0, $1567 = 0, $1568 = 0, $1569 = 0, $157 = 0, $1570 = 0, $1571 = 0, $1572 = 0, $1573 = 0, $1574 = 0, $1575 = 0, $1576 = 0, $1577 = 0, $1578 = 0, $1579 = 0;
 var $158 = 0, $1580 = 0, $1581 = 0, $1582 = 0, $1583 = 0, $1584 = 0, $1585 = 0, $1586 = 0, $1587 = 0, $1588 = 0, $1589 = 0, $159 = 0, $1590 = 0, $1591 = 0, $1592 = 0, $1593 = 0, $1594 = 0, $1595 = 0, $1596 = 0, $1597 = 0;
 var $1598 = 0, $1599 = 0, $16 = 0, $160 = 0, $1600 = 0, $1601 = 0, $1602 = 0, $1603 = 0, $1604 = 0, $1605 = 0, $1606 = 0, $1607 = 0, $1608 = 0, $1609 = 0, $161 = 0, $1610 = 0, $1611 = 0, $1612 = 0, $1613 = 0, $1614 = 0;
 var $1615 = 0, $1616 = 0, $1617 = 0, $1618 = 0, $1619 = 0, $162 = 0, $1620 = 0, $1621 = 0, $1622 = 0, $1623 = 0, $1624 = 0, $1625 = 0, $1626 = 0, $1627 = 0, $1628 = 0, $1629 = 0, $163 = 0, $1630 = 0, $1631 = 0, $1632 = 0;
 var $1633 = 0, $1634 = 0, $1635 = 0, $1636 = 0, $1637 = 0, $1638 = 0, $1639 = 0, $164 = 0, $1640 = 0, $1641 = 0, $1642 = 0, $1643 = 0, $1644 = 0, $1645 = 0, $1646 = 0, $1647 = 0, $1648 = 0, $1649 = 0, $165 = 0, $1650 = 0;
 var $1651 = 0, $1652 = 0, $1653 = 0, $1654 = 0, $1655 = 0, $1656 = 0, $1657 = 0, $1658 = 0, $1659 = 0, $166 = 0, $1660 = 0, $1661 = 0, $1662 = 0, $1663 = 0, $1664 = 0, $1665 = 0, $1666 = 0, $1667 = 0, $1668 = 0, $1669 = 0;
 var $167 = 0, $1670 = 0, $1671 = 0, $1672 = 0, $1673 = 0, $1674 = 0, $1675 = 0, $1676 = 0, $1677 = 0, $1678 = 0, $1679 = 0, $168 = 0, $1680 = 0, $1681 = 0, $1682 = 0, $1683 = 0, $1684 = 0, $1685 = 0, $1686 = 0, $1687 = 0;
 var $1688 = 0, $1689 = 0, $169 = 0, $1690 = 0, $1691 = 0, $1692 = 0, $1693 = 0, $1694 = 0, $1695 = 0, $1696 = 0, $1697 = 0, $1698 = 0, $1699 = 0, $17 = 0, $170 = 0, $1700 = 0, $1701 = 0, $1702 = 0, $1703 = 0, $1704 = 0;
 var $1705 = 0, $1706 = 0, $1707 = 0, $1708 = 0, $1709 = 0, $171 = 0, $1710 = 0, $1711 = 0, $1712 = 0, $1713 = 0, $1714 = 0, $1715 = 0, $1716 = 0, $1717 = 0, $1718 = 0, $1719 = 0, $172 = 0, $1720 = 0, $1721 = 0, $1722 = 0;
 var $1723 = 0, $1724 = 0, $1725 = 0, $1726 = 0, $1727 = 0, $1728 = 0, $1729 = 0, $173 = 0, $1730 = 0, $1731 = 0, $1732 = 0, $1733 = 0, $1734 = 0, $1735 = 0, $1736 = 0, $1737 = 0, $1738 = 0, $1739 = 0, $174 = 0, $1740 = 0;
 var $1741 = 0, $1742 = 0, $1743 = 0, $1744 = 0, $1745 = 0, $1746 = 0, $1747 = 0, $1748 = 0, $1749 = 0, $175 = 0, $1750 = 0, $1751 = 0, $1752 = 0, $1753 = 0, $1754 = 0, $1755 = 0, $1756 = 0, $1757 = 0, $1758 = 0, $1759 = 0;
 var $176 = 0, $1760 = 0, $1761 = 0, $1762 = 0, $1763 = 0, $1764 = 0, $1765 = 0, $1766 = 0, $1767 = 0, $1768 = 0, $1769 = 0, $177 = 0, $1770 = 0, $1771 = 0, $1772 = 0, $1773 = 0, $1774 = 0, $1775 = 0, $1776 = 0, $1777 = 0;
 var $1778 = 0, $1779 = 0, $178 = 0, $1780 = 0, $1781 = 0, $1782 = 0, $1783 = 0, $1784 = 0, $1785 = 0, $1786 = 0, $1787 = 0, $1788 = 0, $1789 = 0, $179 = 0, $1790 = 0, $1791 = 0, $1792 = 0, $1793 = 0, $1794 = 0, $1795 = 0;
 var $1796 = 0, $1797 = 0, $1798 = 0, $1799 = 0, $18 = 0, $180 = 0, $1800 = 0, $1801 = 0, $1802 = 0, $1803 = 0, $1804 = 0, $1805 = 0, $1806 = 0, $1807 = 0, $1808 = 0, $1809 = 0, $181 = 0, $1810 = 0, $1811 = 0, $1812 = 0;
 var $1813 = 0, $1814 = 0, $1815 = 0, $1816 = 0, $1817 = 0, $1818 = 0, $1819 = 0, $182 = 0, $1820 = 0, $1821 = 0, $1822 = 0, $1823 = 0, $1824 = 0, $1825 = 0, $1826 = 0, $1827 = 0, $1828 = 0, $1829 = 0, $183 = 0, $1830 = 0;
 var $1831 = 0, $1832 = 0, $1833 = 0, $1834 = 0, $1835 = 0, $1836 = 0, $1837 = 0, $1838 = 0, $1839 = 0, $184 = 0, $1840 = 0, $1841 = 0, $1842 = 0, $1843 = 0, $1844 = 0, $1845 = 0, $1846 = 0, $1847 = 0, $1848 = 0, $1849 = 0;
 var $185 = 0, $1850 = 0, $1851 = 0, $1852 = 0, $1853 = 0, $1854 = 0, $1855 = 0, $1856 = 0, $1857 = 0, $1858 = 0, $1859 = 0, $186 = 0, $1860 = 0, $1861 = 0, $1862 = 0, $1863 = 0, $1864 = 0, $1865 = 0, $1866 = 0, $1867 = 0;
 var $1868 = 0, $1869 = 0, $187 = 0, $1870 = 0, $1871 = 0, $1872 = 0, $1873 = 0, $1874 = 0, $1875 = 0, $1876 = 0, $1877 = 0, $1878 = 0, $1879 = 0, $188 = 0, $1880 = 0, $1881 = 0, $1882 = 0, $1883 = 0, $1884 = 0, $1885 = 0;
 var $1886 = 0, $1887 = 0, $1888 = 0, $1889 = 0, $189 = 0, $1890 = 0, $1891 = 0, $1892 = 0, $1893 = 0, $1894 = 0, $1895 = 0, $1896 = 0, $1897 = 0, $1898 = 0, $1899 = 0, $19 = 0, $190 = 0, $1900 = 0, $1901 = 0, $1902 = 0;
 var $1903 = 0, $1904 = 0, $1905 = 0, $1906 = 0, $1907 = 0, $1908 = 0, $1909 = 0, $191 = 0, $1910 = 0, $1911 = 0, $1912 = 0, $1913 = 0, $1914 = 0, $1915 = 0, $1916 = 0, $1917 = 0, $1918 = 0, $1919 = 0, $192 = 0, $1920 = 0;
 var $1921 = 0, $1922 = 0, $1923 = 0, $1924 = 0, $1925 = 0, $1926 = 0, $1927 = 0, $1928 = 0, $1929 = 0, $193 = 0, $1930 = 0, $1931 = 0, $1932 = 0, $1933 = 0, $1934 = 0, $1935 = 0, $1936 = 0, $1937 = 0, $1938 = 0, $1939 = 0;
 var $194 = 0, $1940 = 0, $1941 = 0, $1942 = 0, $1943 = 0, $1944 = 0, $1945 = 0, $1946 = 0, $1947 = 0, $1948 = 0, $1949 = 0, $195 = 0, $1950 = 0, $1951 = 0, $1952 = 0, $1953 = 0, $1954 = 0, $1955 = 0, $1956 = 0, $1957 = 0;
 var $1958 = 0, $1959 = 0, $196 = 0, $1960 = 0, $1961 = 0, $1962 = 0, $1963 = 0, $1964 = 0, $1965 = 0, $1966 = 0, $1967 = 0, $1968 = 0, $1969 = 0, $197 = 0, $1970 = 0, $1971 = 0, $1972 = 0, $1973 = 0, $1974 = 0, $1975 = 0;
 var $1976 = 0, $1977 = 0, $1978 = 0, $1979 = 0, $198 = 0, $1980 = 0, $1981 = 0, $1982 = 0, $1983 = 0, $1984 = 0, $1985 = 0, $1986 = 0, $1987 = 0, $1988 = 0, $1989 = 0, $199 = 0, $1990 = 0, $1991 = 0, $1992 = 0, $1993 = 0;
 var $1994 = 0, $1995 = 0, $1996 = 0, $1997 = 0, $1998 = 0, $1999 = 0, $2 = 0, $20 = 0, $200 = 0, $2000 = 0, $2001 = 0, $2002 = 0, $2003 = 0, $2004 = 0, $2005 = 0, $2006 = 0, $2007 = 0, $2008 = 0, $2009 = 0, $201 = 0;
 var $2010 = 0, $2011 = 0, $2012 = 0, $2013 = 0, $2014 = 0, $2015 = 0, $2016 = 0, $2017 = 0, $2018 = 0, $2019 = 0, $202 = 0, $2020 = 0, $2021 = 0, $2022 = 0, $2023 = 0, $2024 = 0, $2025 = 0, $2026 = 0, $2027 = 0, $2028 = 0;
 var $2029 = 0, $203 = 0, $2030 = 0, $2031 = 0, $2032 = 0, $2033 = 0, $2034 = 0, $2035 = 0, $2036 = 0, $2037 = 0, $2038 = 0, $2039 = 0, $204 = 0, $2040 = 0, $2041 = 0, $2042 = 0, $2043 = 0, $2044 = 0, $2045 = 0, $2046 = 0;
 var $2047 = 0, $2048 = 0, $2049 = 0, $205 = 0, $2050 = 0, $2051 = 0, $2052 = 0, $2053 = 0, $2054 = 0, $2055 = 0, $2056 = 0, $2057 = 0, $2058 = 0, $2059 = 0, $206 = 0, $2060 = 0, $2061 = 0, $2062 = 0, $2063 = 0, $2064 = 0;
 var $2065 = 0, $2066 = 0, $2067 = 0, $2068 = 0, $2069 = 0, $207 = 0, $2070 = 0, $2071 = 0, $2072 = 0, $2073 = 0, $2074 = 0, $2075 = 0, $2076 = 0, $2077 = 0, $2078 = 0, $2079 = 0, $208 = 0, $2080 = 0, $2081 = 0, $2082 = 0;
 var $2083 = 0, $2084 = 0, $2085 = 0, $2086 = 0, $2087 = 0, $2088 = 0, $2089 = 0, $209 = 0, $2090 = 0, $2091 = 0, $2092 = 0, $2093 = 0, $2094 = 0, $2095 = 0, $2096 = 0, $2097 = 0, $2098 = 0, $2099 = 0, $21 = 0, $210 = 0;
 var $2100 = 0, $2101 = 0, $2102 = 0, $2103 = 0, $2104 = 0, $2105 = 0, $2106 = 0, $2107 = 0, $2108 = 0, $2109 = 0, $211 = 0, $2110 = 0, $2111 = 0, $2112 = 0, $2113 = 0, $2114 = 0, $2115 = 0, $2116 = 0, $2117 = 0, $2118 = 0;
 var $2119 = 0, $212 = 0, $2120 = 0, $2121 = 0, $2122 = 0, $2123 = 0, $2124 = 0, $2125 = 0, $2126 = 0, $2127 = 0, $2128 = 0, $2129 = 0, $213 = 0, $2130 = 0, $2131 = 0, $2132 = 0, $2133 = 0, $2134 = 0, $2135 = 0, $2136 = 0;
 var $2137 = 0, $2138 = 0, $2139 = 0, $214 = 0, $2140 = 0, $2141 = 0, $2142 = 0, $2143 = 0, $2144 = 0, $2145 = 0, $2146 = 0, $2147 = 0, $2148 = 0, $2149 = 0, $215 = 0, $2150 = 0, $2151 = 0, $2152 = 0, $2153 = 0, $2154 = 0;
 var $2155 = 0, $2156 = 0, $2157 = 0, $2158 = 0, $2159 = 0, $216 = 0, $2160 = 0, $2161 = 0, $2162 = 0, $2163 = 0, $2164 = 0, $2165 = 0, $2166 = 0, $2167 = 0, $2168 = 0, $2169 = 0, $217 = 0, $2170 = 0, $2171 = 0, $2172 = 0;
 var $2173 = 0, $2174 = 0, $2175 = 0, $2176 = 0, $2177 = 0, $2178 = 0, $2179 = 0, $218 = 0, $2180 = 0, $2181 = 0, $2182 = 0, $2183 = 0, $2184 = 0, $2185 = 0, $2186 = 0, $2187 = 0, $2188 = 0, $2189 = 0, $219 = 0, $2190 = 0;
 var $2191 = 0, $2192 = 0, $2193 = 0, $2194 = 0, $2195 = 0, $2196 = 0, $2197 = 0, $2198 = 0, $2199 = 0, $22 = 0, $220 = 0, $2200 = 0, $2201 = 0, $2202 = 0, $2203 = 0, $2204 = 0, $2205 = 0, $2206 = 0, $2207 = 0, $2208 = 0;
 var $2209 = 0, $221 = 0, $2210 = 0, $2211 = 0, $2212 = 0, $2213 = 0, $2214 = 0, $2215 = 0, $2216 = 0, $2217 = 0, $2218 = 0, $2219 = 0, $222 = 0, $2220 = 0, $2221 = 0, $2222 = 0, $2223 = 0, $2224 = 0, $2225 = 0, $2226 = 0;
 var $2227 = 0, $2228 = 0, $2229 = 0, $223 = 0, $2230 = 0, $2231 = 0, $2232 = 0, $2233 = 0, $2234 = 0, $2235 = 0, $2236 = 0, $2237 = 0, $2238 = 0, $2239 = 0, $224 = 0, $2240 = 0, $2241 = 0, $2242 = 0, $2243 = 0, $2244 = 0;
 var $2245 = 0, $2246 = 0, $2247 = 0, $2248 = 0, $2249 = 0, $225 = 0, $2250 = 0, $2251 = 0, $2252 = 0, $2253 = 0, $2254 = 0, $2255 = 0, $2256 = 0, $2257 = 0, $2258 = 0, $2259 = 0, $226 = 0, $2260 = 0, $2261 = 0, $2262 = 0;
 var $2263 = 0, $2264 = 0, $2265 = 0, $2266 = 0, $2267 = 0, $2268 = 0, $2269 = 0, $227 = 0, $2270 = 0, $2271 = 0, $2272 = 0, $2273 = 0, $2274 = 0, $2275 = 0, $2276 = 0, $2277 = 0, $2278 = 0, $2279 = 0, $228 = 0, $2280 = 0;
 var $2281 = 0, $2282 = 0, $2283 = 0, $2284 = 0, $2285 = 0, $2286 = 0, $2287 = 0, $2288 = 0, $2289 = 0, $229 = 0, $2290 = 0, $2291 = 0, $2292 = 0, $2293 = 0, $2294 = 0, $2295 = 0, $2296 = 0, $2297 = 0, $2298 = 0, $2299 = 0;
 var $23 = 0, $230 = 0, $2300 = 0, $2301 = 0, $2302 = 0, $2303 = 0, $2304 = 0, $2305 = 0, $2306 = 0, $2307 = 0, $2308 = 0, $2309 = 0, $231 = 0, $2310 = 0, $2311 = 0, $2312 = 0, $2313 = 0, $2314 = 0, $2315 = 0, $2316 = 0;
 var $2317 = 0, $2318 = 0, $2319 = 0, $232 = 0, $2320 = 0, $2321 = 0, $2322 = 0, $2323 = 0, $2324 = 0, $2325 = 0, $2326 = 0, $2327 = 0, $2328 = 0, $2329 = 0, $233 = 0, $2330 = 0, $2331 = 0, $2332 = 0, $2333 = 0, $2334 = 0;
 var $2335 = 0, $2336 = 0, $2337 = 0, $2338 = 0, $2339 = 0, $234 = 0, $2340 = 0, $2341 = 0, $2342 = 0, $2343 = 0, $2344 = 0, $2345 = 0, $2346 = 0, $2347 = 0, $2348 = 0, $2349 = 0, $235 = 0, $2350 = 0, $2351 = 0, $2352 = 0;
 var $2353 = 0, $2354 = 0, $2355 = 0, $2356 = 0, $2357 = 0, $2358 = 0, $2359 = 0, $236 = 0, $2360 = 0, $2361 = 0, $2362 = 0, $2363 = 0, $2364 = 0, $2365 = 0, $2366 = 0, $2367 = 0, $2368 = 0, $2369 = 0, $237 = 0, $2370 = 0;
 var $2371 = 0, $2372 = 0, $2373 = 0, $2374 = 0, $2375 = 0, $2376 = 0, $2377 = 0, $2378 = 0, $2379 = 0, $238 = 0, $2380 = 0, $2381 = 0, $2382 = 0, $2383 = 0, $2384 = 0, $2385 = 0, $2386 = 0, $2387 = 0, $2388 = 0, $2389 = 0;
 var $239 = 0, $2390 = 0, $2391 = 0, $2392 = 0, $2393 = 0, $2394 = 0, $2395 = 0, $2396 = 0, $2397 = 0, $2398 = 0, $2399 = 0, $24 = 0, $240 = 0, $2400 = 0, $2401 = 0, $2402 = 0, $2403 = 0, $2404 = 0, $2405 = 0, $2406 = 0;
 var $2407 = 0, $2408 = 0, $2409 = 0, $241 = 0, $2410 = 0, $2411 = 0, $2412 = 0, $2413 = 0, $2414 = 0, $2415 = 0, $2416 = 0, $2417 = 0, $2418 = 0, $2419 = 0, $242 = 0, $2420 = 0, $2421 = 0, $2422 = 0, $2423 = 0, $2424 = 0;
 var $2425 = 0, $2426 = 0, $2427 = 0, $2428 = 0, $2429 = 0, $243 = 0, $2430 = 0, $2431 = 0, $2432 = 0, $2433 = 0, $2434 = 0, $2435 = 0, $2436 = 0, $2437 = 0, $2438 = 0, $2439 = 0, $244 = 0, $2440 = 0, $2441 = 0, $2442 = 0;
 var $2443 = 0, $2444 = 0, $2445 = 0, $2446 = 0, $2447 = 0, $2448 = 0, $2449 = 0, $245 = 0, $2450 = 0, $2451 = 0, $2452 = 0, $2453 = 0, $2454 = 0, $2455 = 0, $2456 = 0, $2457 = 0, $2458 = 0, $2459 = 0, $246 = 0, $2460 = 0;
 var $2461 = 0, $2462 = 0, $2463 = 0, $2464 = 0, $2465 = 0, $2466 = 0, $2467 = 0, $2468 = 0, $2469 = 0, $247 = 0, $2470 = 0, $2471 = 0, $2472 = 0, $2473 = 0, $2474 = 0, $2475 = 0, $2476 = 0, $2477 = 0, $2478 = 0, $2479 = 0;
 var $248 = 0, $2480 = 0, $2481 = 0, $2482 = 0, $2483 = 0, $2484 = 0, $2485 = 0, $2486 = 0, $2487 = 0, $2488 = 0, $2489 = 0, $249 = 0, $2490 = 0, $2491 = 0, $2492 = 0, $2493 = 0, $2494 = 0, $2495 = 0, $2496 = 0, $2497 = 0;
 var $2498 = 0, $2499 = 0, $25 = 0, $250 = 0, $2500 = 0, $2501 = 0, $2502 = 0, $2503 = 0, $2504 = 0, $2505 = 0, $2506 = 0, $2507 = 0, $2508 = 0, $2509 = 0, $251 = 0, $2510 = 0, $2511 = 0, $2512 = 0, $2513 = 0, $2514 = 0;
 var $2515 = 0, $2516 = 0, $2517 = 0, $2518 = 0, $2519 = 0, $252 = 0, $2520 = 0, $2521 = 0, $2522 = 0, $2523 = 0, $2524 = 0, $2525 = 0, $2526 = 0, $2527 = 0, $2528 = 0, $2529 = 0, $253 = 0, $2530 = 0, $2531 = 0, $2532 = 0;
 var $2533 = 0, $2534 = 0, $2535 = 0, $2536 = 0, $2537 = 0, $2538 = 0, $2539 = 0, $254 = 0, $2540 = 0, $2541 = 0, $2542 = 0, $2543 = 0, $2544 = 0, $2545 = 0, $2546 = 0, $2547 = 0, $2548 = 0, $2549 = 0, $255 = 0, $2550 = 0;
 var $2551 = 0, $2552 = 0, $2553 = 0, $2554 = 0, $2555 = 0, $2556 = 0, $2557 = 0, $2558 = 0, $2559 = 0, $256 = 0, $2560 = 0, $2561 = 0, $2562 = 0, $2563 = 0, $2564 = 0, $2565 = 0, $2566 = 0, $2567 = 0, $2568 = 0, $2569 = 0;
 var $257 = 0, $2570 = 0, $2571 = 0, $2572 = 0, $2573 = 0, $2574 = 0, $2575 = 0, $2576 = 0, $2577 = 0, $2578 = 0, $2579 = 0, $258 = 0, $2580 = 0, $2581 = 0, $2582 = 0, $2583 = 0, $2584 = 0, $2585 = 0, $2586 = 0, $2587 = 0;
 var $2588 = 0, $2589 = 0, $259 = 0, $2590 = 0, $2591 = 0, $2592 = 0, $2593 = 0, $2594 = 0, $2595 = 0, $2596 = 0, $2597 = 0, $2598 = 0, $2599 = 0, $26 = 0, $260 = 0, $2600 = 0, $2601 = 0, $2602 = 0, $2603 = 0, $2604 = 0;
 var $2605 = 0, $2606 = 0, $2607 = 0, $2608 = 0, $2609 = 0, $261 = 0, $2610 = 0, $2611 = 0, $2612 = 0, $2613 = 0, $2614 = 0, $2615 = 0, $2616 = 0, $2617 = 0, $2618 = 0, $2619 = 0, $262 = 0, $2620 = 0, $2621 = 0, $2622 = 0;
 var $2623 = 0, $2624 = 0, $2625 = 0, $2626 = 0, $2627 = 0, $2628 = 0, $2629 = 0, $263 = 0, $2630 = 0, $2631 = 0, $2632 = 0, $2633 = 0, $2634 = 0, $2635 = 0, $2636 = 0, $2637 = 0, $2638 = 0, $2639 = 0, $264 = 0, $2640 = 0;
 var $2641 = 0, $2642 = 0, $2643 = 0, $2644 = 0, $2645 = 0, $2646 = 0, $2647 = 0, $2648 = 0, $2649 = 0, $265 = 0, $2650 = 0, $2651 = 0, $2652 = 0, $2653 = 0, $2654 = 0, $2655 = 0, $2656 = 0, $2657 = 0, $2658 = 0, $2659 = 0;
 var $266 = 0, $2660 = 0, $2661 = 0, $2662 = 0, $2663 = 0, $2664 = 0, $2665 = 0, $2666 = 0, $2667 = 0, $2668 = 0, $2669 = 0, $267 = 0, $2670 = 0, $2671 = 0, $2672 = 0, $2673 = 0, $2674 = 0, $2675 = 0, $2676 = 0, $2677 = 0;
 var $2678 = 0, $2679 = 0, $268 = 0, $2680 = 0, $2681 = 0, $2682 = 0, $2683 = 0, $2684 = 0, $2685 = 0, $2686 = 0, $2687 = 0, $2688 = 0, $2689 = 0, $269 = 0, $2690 = 0, $2691 = 0, $2692 = 0, $2693 = 0, $2694 = 0, $2695 = 0;
 var $2696 = 0, $2697 = 0, $2698 = 0, $2699 = 0, $27 = 0, $270 = 0, $2700 = 0, $2701 = 0, $2702 = 0, $2703 = 0, $2704 = 0, $2705 = 0, $2706 = 0, $2707 = 0, $2708 = 0, $2709 = 0, $271 = 0, $2710 = 0, $2711 = 0, $2712 = 0;
 var $2713 = 0, $2714 = 0, $2715 = 0, $2716 = 0, $2717 = 0, $2718 = 0, $2719 = 0, $272 = 0, $2720 = 0, $2721 = 0, $2722 = 0, $2723 = 0, $2724 = 0, $2725 = 0, $2726 = 0, $2727 = 0, $2728 = 0, $2729 = 0, $273 = 0, $2730 = 0;
 var $2731 = 0, $2732 = 0, $2733 = 0, $2734 = 0, $2735 = 0, $2736 = 0, $2737 = 0, $2738 = 0, $2739 = 0, $274 = 0, $2740 = 0, $2741 = 0, $2742 = 0, $2743 = 0, $2744 = 0, $2745 = 0, $2746 = 0, $2747 = 0, $2748 = 0, $2749 = 0;
 var $275 = 0, $2750 = 0, $2751 = 0, $2752 = 0, $2753 = 0, $2754 = 0, $2755 = 0, $2756 = 0, $2757 = 0, $2758 = 0, $2759 = 0, $276 = 0, $2760 = 0, $2761 = 0, $2762 = 0, $2763 = 0, $2764 = 0, $2765 = 0, $2766 = 0, $2767 = 0;
 var $2768 = 0, $2769 = 0, $277 = 0, $2770 = 0, $2771 = 0, $2772 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $exitcond$i = 0, $exitcond$i148 = 0, $exitcond$i153 = 0, $exitcond$i156 = 0, $exitcond$i159 = 0, $exitcond$i167 = 0, $exitcond$i171 = 0, $exitcond$i187 = 0, $exitcond$i202 = 0, $exitcond101$i = 0, $exitcond1016$i = 0, $exitcond1017$i = 0, $exitcond1018$i = 0;
 var $exitcond1019$i = 0, $exitcond102$i = 0, $exitcond1020$i = 0, $exitcond1021$i = 0, $exitcond1022$i = 0, $exitcond1023$i = 0, $exitcond1024$i = 0, $exitcond1025$i = 0, $exitcond1026$i = 0, $exitcond1027$i = 0, $exitcond1028$i = 0, $exitcond1029$i = 0, $exitcond103$i = 0, $exitcond1030$i = 0, $exitcond1031$i = 0, $exitcond1032$i = 0, $exitcond1033$i = 0, $exitcond1034$i = 0, $exitcond1034$i$us = 0, $exitcond1035$i = 0;
 var $exitcond1036$i = 0, $exitcond1037$i = 0, $exitcond107$i = 0, $exitcond108$i = 0, $exitcond113$i = 0, $exitcond114$i = 0, $exitcond124$i = 0, $exitcond125$i = 0, $exitcond126$i = 0, $exitcond176$i = 0, $exitcond177$i = 0, $exitcond178$i = 0, $exitcond179$i = 0, $exitcond267$i = 0, $exitcond268$i = 0, $exitcond269$i = 0, $exitcond270$i = 0, $exitcond271$i = 0, $exitcond272$i = 0, $exitcond273$i = 0;
 var $exitcond306$i = 0, $exitcond307$i = 0, $exitcond308$i = 0, $exitcond309$i = 0, $exitcond310$i = 0, $exitcond311$i = 0, $exitcond311$i$us = 0, $exitcond48$i = 0, $exitcond49$i = 0, $exitcond50$i = 0, $exitcond51$i = 0, $exitcond52$i = 0, $exitcond53$i = 0, $exitcond54$i = 0, $extract$i = 0, $extract$i$us = 0, $extract$i180 = 0, $extract$t$i = 0, $extract$t$i$us = 0, $extract$t$i179 = 0;
 var $extract$t264$i = 0, $extract$t264$i$us = 0, $extract$t265$i = 0, $extract$t265$i$us = 0, $extract$t269$i = 0, $extract$t269$i$us = 0, $extract$t872$i = 0, $extract$t873$i = 0, $extract$t875$i = 0, $extract$t877$i = 0, $extract$t878$i = 0, $extract$t880$i = 0, $extract$t882$i = 0, $extract$t884$i = 0, $extract$t885$i = 0, $extract$t887$i = 0, $extract$t889$i = 0, $extract$t891$i = 0, $extract$t892$us$i = 0, $extract$t894$i = 0;
 var $extract$t896$us$i = 0, $extract268$i = 0, $extract268$i$us = 0, $extract874876$i = 0, $extract879$i = 0, $extract881883$i = 0, $extract886$i = 0, $extract888890$i = 0, $extract893897$i = 0, $extract895$us$i = 0, $not$or$cond274$i = 0, $not$or$cond274$us$i = 0, $or$cond$i = 0, $or$cond$i178 = 0, $or$cond$i185 = 0, $or$cond$i199 = 0, $or$cond106$i = 0, $or$cond11$i = 0, $or$cond13$i = 0, $or$cond137 = 0;
 var $or$cond15$i = 0, $or$cond272$i = 0, $or$cond272$us$i = 0, $or$cond273$i = 0, $or$cond273$us$i = 0, $or$cond3$i = 0, $or$cond3$i190 = 0, $or$cond3$i200 = 0, $or$cond39$i = 0, $or$cond5$i = 0, $or$cond5$i192 = 0, $or$cond7$i = 0, $or$cond9$i = 0, $spec$store$select$i = 0, $spec$store$select2$i = 0, $storemerge$i = 0, $storemerge$i149 = 0, $storemerge$us$i = 0, $storemerge262$i = 0, $storemerge262$us$i = 0;
 var $storemerge863$i = 0, $storemerge865$i = 0, $storemerge865$in$i = 0, $storemerge869$i = 0, $storemerge869$in$i = 0, $trunc$i = 0, $trunc898$i = 0, $trunc899$i = 0, $trunc900$i = 0, $trunc900$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ((($0)) + 384|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  _png_error($0,24515);
  // unreachable;
 }
 $6 = ((($0)) + 212|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 16448;
 $9 = ($8|0)==(16384);
 if ($9) {
  _png_error($0,24531);
  // unreachable;
 }
 $10 = ((($0)) + 216|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 4096;
 $13 = ($12|0)==(0);
 do {
  if (!($13)) {
   $14 = ((($1)) + 8|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = ($15<<24>>24)==(3);
   if (!($16)) {
    $135 = ((($0)) + 428|0);
    $136 = HEAP16[$135>>1]|0;
    $137 = ($136<<16>>16)==(0);
    $138 = $11 & 33554432;
    $139 = ($138|0)==(0);
    $or$cond137 = $139 | $137;
    $140 = ((($4)) + 1|0);
    if ($or$cond137) {
     _png_do_expand($1,$140,0);
     break;
    } else {
     $141 = ((($0)) + 532|0);
     _png_do_expand($1,$140,$141);
     break;
    }
   }
   $17 = ((($4)) + 1|0);
   $18 = ((($0)) + 416|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ((($0)) + 528|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = ((($0)) + 428|0);
   $23 = HEAP16[$22>>1]|0;
   $24 = $23&65535;
   $25 = HEAP32[$1>>2]|0;
   $26 = ((($1)) + 9|0);
   $27 = HEAP8[$26>>0]|0;
   $28 = ($27&255)<(8);
   if ($28) {
    switch ($27<<24>>24) {
    case 1:  {
     $29 = ($25|0)==(0);
     if (!($29)) {
      $30 = (($17) + ($25)|0);
      $31 = (($25) + 7)|0;
      $32 = $31 & 7;
      $33 = $32 ^ 7;
      $34 = (($25) + -1)|0;
      $35 = $34 >>> 3;
      $36 = (($17) + ($35)|0);
      $$0115152$i = 0;$$0126151$i = $36;$$0153$i = $33;$$pn173$i = $30;
      while(1) {
       $$0120154$i = ((($$pn173$i)) + -1|0);
       $37 = HEAP8[$$0126151$i>>0]|0;
       $38 = $37&255;
       $39 = 1 << $$0153$i;
       $40 = $39 & $38;
       $41 = ($40|0)!=(0);
       $$$i = $41&1;
       HEAP8[$$0120154$i>>0] = $$$i;
       $42 = ($$0153$i|0)==(7);
       $43 = ((($$0126151$i)) + -1|0);
       $44 = (($$0153$i) + 1)|0;
       $$1127$i = $42 ? $43 : $$0126151$i;
       $$1$i = $42 ? 0 : $44;
       $45 = (($$0115152$i) + 1)|0;
       $exitcond177$i = ($45|0)==($25|0);
       if ($exitcond177$i) {
        break;
       } else {
        $$0115152$i = $45;$$0126151$i = $$1127$i;$$0153$i = $$1$i;$$pn173$i = $$0120154$i;
       }
      }
     }
     break;
    }
    case 2:  {
     $46 = ($25|0)==(0);
     if (!($46)) {
      $47 = (($17) + ($25)|0);
      $48 = $25 << 1;
      $49 = (($48) + 6)|0;
      $50 = $49 & 6;
      $51 = $50 ^ 6;
      $52 = (($25) + -1)|0;
      $53 = $52 >>> 2;
      $54 = (($17) + ($53)|0);
      $$1116159$i = 0;$$2128158$i = $54;$$2160$i = $51;$$pn172$i = $47;
      while(1) {
       $$1121161$i = ((($$pn172$i)) + -1|0);
       $55 = HEAP8[$$2128158$i>>0]|0;
       $56 = $55&255;
       $57 = $56 >>> $$2160$i;
       $58 = $57 & 3;
       $59 = $58&255;
       HEAP8[$$1121161$i>>0] = $59;
       $60 = ($$2160$i|0)==(6);
       $61 = ((($$2128158$i)) + -1|0);
       $62 = (($$2160$i) + 2)|0;
       $$3129$i = $60 ? $61 : $$2128158$i;
       $$3$i = $60 ? 0 : $62;
       $63 = (($$1116159$i) + 1)|0;
       $exitcond178$i = ($63|0)==($25|0);
       if ($exitcond178$i) {
        break;
       } else {
        $$1116159$i = $63;$$2128158$i = $$3129$i;$$2160$i = $$3$i;$$pn172$i = $$1121161$i;
       }
      }
     }
     break;
    }
    case 4:  {
     $64 = ($25|0)==(0);
     if (!($64)) {
      $65 = (($17) + ($25)|0);
      $66 = $25 << 2;
      $67 = $66 & 4;
      $68 = (($25) + -1)|0;
      $69 = $68 >>> 1;
      $70 = (($17) + ($69)|0);
      $$2117166$i = 0;$$4130165$i = $70;$$4167$i = $67;$$pn171$i = $65;
      while(1) {
       $$2122168$i = ((($$pn171$i)) + -1|0);
       $71 = HEAP8[$$4130165$i>>0]|0;
       $72 = $71&255;
       $73 = $72 >>> $$4167$i;
       $74 = $73 & 15;
       $75 = $74&255;
       HEAP8[$$2122168$i>>0] = $75;
       $76 = ($$4167$i|0)==(4);
       $77 = ((($$4130165$i)) + -1|0);
       $78 = (($$4167$i) + 4)|0;
       $$5131$i = $76 ? $77 : $$4130165$i;
       $$5$i = $76 ? 0 : $78;
       $79 = (($$2117166$i) + 1)|0;
       $exitcond179$i = ($79|0)==($25|0);
       if ($exitcond179$i) {
        break;
       } else {
        $$2117166$i = $79;$$4130165$i = $$5131$i;$$4167$i = $$5$i;$$pn171$i = $$2122168$i;
       }
      }
     }
     break;
    }
    default: {
    }
    }
    HEAP8[$26>>0] = 8;
    $80 = ((($1)) + 11|0);
    HEAP8[$80>>0] = 8;
    $81 = ((($1)) + 4|0);
    HEAP32[$81>>2] = $25;
   } else {
    $82 = ($27<<24>>24)==(8);
    if (!($82)) {
     break;
    }
   }
   $83 = ($23<<16>>16)==(0);
   $84 = (($17) + ($25)|0);
   $85 = ((($84)) + -1|0);
   if ($83) {
    $113 = ($25*3)|0;
    $114 = ($25|0)==(0);
    if (!($114)) {
     $115 = (($17) + ($113)|0);
     $$4119146$i = 0;$$7144$i = $85;$$pn145$i = $115;
     while(1) {
      $$5125$i = ((($$pn145$i)) + -1|0);
      $116 = HEAP8[$$7144$i>>0]|0;
      $117 = $116&255;
      $118 = (((($19) + (($117*3)|0)|0)) + 2|0);
      $119 = HEAP8[$118>>0]|0;
      $120 = ((($$pn145$i)) + -2|0);
      HEAP8[$$5125$i>>0] = $119;
      $121 = HEAP8[$$7144$i>>0]|0;
      $122 = $121&255;
      $123 = (((($19) + (($122*3)|0)|0)) + 1|0);
      $124 = HEAP8[$123>>0]|0;
      $125 = ((($$pn145$i)) + -3|0);
      HEAP8[$120>>0] = $124;
      $126 = HEAP8[$$7144$i>>0]|0;
      $127 = $126&255;
      $128 = (($19) + (($127*3)|0)|0);
      $129 = HEAP8[$128>>0]|0;
      HEAP8[$125>>0] = $129;
      $130 = ((($$7144$i)) + -1|0);
      $131 = (($$4119146$i) + 1)|0;
      $exitcond176$i = ($131|0)==($25|0);
      if ($exitcond176$i) {
       break;
      } else {
       $$4119146$i = $131;$$7144$i = $130;$$pn145$i = $125;
      }
     }
    }
    HEAP8[$26>>0] = 8;
    $132 = ((($1)) + 11|0);
    HEAP8[$132>>0] = 24;
    $133 = ((($1)) + 4|0);
    HEAP32[$133>>2] = $113;
    HEAP8[$14>>0] = 2;
    $134 = ((($1)) + 10|0);
    HEAP8[$134>>0] = 3;
    break;
   }
   $86 = $25 << 2;
   $87 = ($25|0)==(0);
   if (!($87)) {
    $88 = (($17) + ($86)|0);
    $$3118142$i = 0;$$6140$i = $85;$$pn132141$i = $88;
    while(1) {
     $$3123143$i = ((($$pn132141$i)) + -1|0);
     $89 = HEAP8[$$6140$i>>0]|0;
     $90 = $89&255;
     $91 = ($90>>>0)<($24>>>0);
     if ($91) {
      $92 = (($21) + ($90)|0);
      $93 = HEAP8[$92>>0]|0;
      $storemerge$i = $93;
     } else {
      $storemerge$i = -1;
     }
     $$4124$i = ((($$pn132141$i)) + -2|0);
     HEAP8[$$3123143$i>>0] = $storemerge$i;
     $94 = HEAP8[$$6140$i>>0]|0;
     $95 = $94&255;
     $96 = (((($19) + (($95*3)|0)|0)) + 2|0);
     $97 = HEAP8[$96>>0]|0;
     $98 = ((($$pn132141$i)) + -3|0);
     HEAP8[$$4124$i>>0] = $97;
     $99 = HEAP8[$$6140$i>>0]|0;
     $100 = $99&255;
     $101 = (((($19) + (($100*3)|0)|0)) + 1|0);
     $102 = HEAP8[$101>>0]|0;
     $103 = ((($$pn132141$i)) + -4|0);
     HEAP8[$98>>0] = $102;
     $104 = HEAP8[$$6140$i>>0]|0;
     $105 = $104&255;
     $106 = (($19) + (($105*3)|0)|0);
     $107 = HEAP8[$106>>0]|0;
     HEAP8[$103>>0] = $107;
     $108 = ((($$6140$i)) + -1|0);
     $109 = (($$3118142$i) + 1)|0;
     $exitcond$i = ($109|0)==($25|0);
     if ($exitcond$i) {
      break;
     } else {
      $$3118142$i = $109;$$6140$i = $108;$$pn132141$i = $103;
     }
    }
   }
   HEAP8[$26>>0] = 8;
   $110 = ((($1)) + 11|0);
   HEAP8[$110>>0] = 32;
   $111 = ((($1)) + 4|0);
   HEAP32[$111>>2] = $86;
   HEAP8[$14>>0] = 6;
   $112 = ((($1)) + 10|0);
   HEAP8[$112>>0] = 4;
  }
 } while(0);
 $142 = HEAP32[$10>>2]|0;
 $143 = $142 & 262272;
 $144 = ($143|0)==(262144);
 L50: do {
  if ($144) {
   $145 = ((($1)) + 8|0);
   $146 = HEAP8[$145>>0]|0;
   switch ($146<<24>>24) {
   case 4: case 6:  {
    break;
   }
   default: {
    $150 = $142;
    break L50;
   }
   }
   $147 = HEAP32[$3>>2]|0;
   $148 = ((($147)) + 1|0);
   _png_do_strip_channel($1,$148,0);
   $$pre = HEAP32[$10>>2]|0;
   $150 = $$pre;
  } else {
   $150 = $142;
  }
 } while(0);
 $149 = $150 & 6291456;
 $151 = ($149|0)==(0);
 do {
  if ($151) {
   $574 = $150;
  } else {
   $152 = HEAP32[$3>>2]|0;
   $153 = ((($152)) + 1|0);
   $154 = ((($1)) + 8|0);
   $155 = HEAP8[$154>>0]|0;
   $156 = $155&255;
   $157 = $156 & 3;
   $158 = ($157|0)==(2);
   if ($158) {
    $159 = ((($0)) + 702|0);
    $160 = HEAP16[$159>>1]|0;
    $161 = $160&65535;
    $162 = ((($0)) + 704|0);
    $163 = HEAP16[$162>>1]|0;
    $164 = $163&65535;
    $165 = (32768 - ($161))|0;
    $166 = (($165) - ($164))|0;
    $167 = HEAP32[$1>>2]|0;
    $168 = $156 & 4;
    $169 = ($168|0)!=(0);
    $170 = ((($1)) + 9|0);
    $171 = HEAP8[$170>>0]|0;
    $172 = ($171<<24>>24)==(8);
    L57: do {
     if ($172) {
      $173 = ((($0)) + 500|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = ($174|0)==(0|0);
      if (!($175)) {
       $176 = ((($0)) + 504|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if (!($178)) {
        $179 = ($167|0)==(0);
        if ($179) {
         $$8$i = 0;
         break;
        }
        $180 = ((($0)) + 492|0);
        if ($169) {
         $$0238284$us$i = $153;$$0240283$us$i = $153;$$0243282$us$i = 0;$$0285$us$i = 0;
         while(1) {
          $181 = ((($$0238284$us$i)) + 1|0);
          $182 = HEAP8[$$0238284$us$i>>0]|0;
          $183 = ((($$0238284$us$i)) + 2|0);
          $184 = HEAP8[$181>>0]|0;
          $185 = ((($$0238284$us$i)) + 3|0);
          $186 = HEAP8[$183>>0]|0;
          $187 = $182&255;
          $188 = ($182<<24>>24)==($184<<24>>24);
          $189 = ($182<<24>>24)==($186<<24>>24);
          $or$cond272$us$i = $188 & $189;
          if ($or$cond272$us$i) {
           $210 = HEAP32[$180>>2]|0;
           $211 = ($210|0)==(0|0);
           if ($211) {
            $$1$us$i = $$0285$us$i;$storemerge262$us$i = $182;
           } else {
            $212 = (($210) + ($187)|0);
            $$1$us$i$ph = $$0285$us$i;$$sink = $212;
            label = 50;
           }
          } else {
           $190 = $184&255;
           $191 = (($177) + ($187)|0);
           $192 = HEAP8[$191>>0]|0;
           $193 = (($177) + ($190)|0);
           $194 = HEAP8[$193>>0]|0;
           $195 = $186&255;
           $196 = (($177) + ($195)|0);
           $197 = HEAP8[$196>>0]|0;
           $198 = $$0285$us$i | 1;
           $199 = $192&255;
           $200 = Math_imul($199, $161)|0;
           $201 = $194&255;
           $202 = Math_imul($201, $164)|0;
           $203 = $197&255;
           $204 = Math_imul($166, $203)|0;
           $205 = (($200) + 16384)|0;
           $206 = (($205) + ($202))|0;
           $207 = (($206) + ($204))|0;
           $208 = $207 >>> 15;
           $209 = (($174) + ($208)|0);
           $$1$us$i$ph = $198;$$sink = $209;
           label = 50;
          }
          if ((label|0) == 50) {
           label = 0;
           $213 = HEAP8[$$sink>>0]|0;
           $$1$us$i = $$1$us$i$ph;$storemerge262$us$i = $213;
          }
          $$1241$us$i = ((($$0240283$us$i)) + 1|0);
          HEAP8[$$0240283$us$i>>0] = $storemerge262$us$i;
          $214 = ((($$0238284$us$i)) + 4|0);
          $215 = HEAP8[$185>>0]|0;
          $216 = ((($$0240283$us$i)) + 2|0);
          HEAP8[$$1241$us$i>>0] = $215;
          $217 = (($$0243282$us$i) + 1)|0;
          $exitcond307$i = ($217|0)==($167|0);
          if ($exitcond307$i) {
           $$8$i = $$1$us$i;
           break L57;
          } else {
           $$0238284$us$i = $214;$$0240283$us$i = $216;$$0243282$us$i = $217;$$0285$us$i = $$1$us$i;
          }
         }
        } else {
         $$0238284$i = $153;$$0240283$i = $153;$$0243282$i = 0;$$0285$i = 0;
         while(1) {
          $218 = ((($$0238284$i)) + 1|0);
          $219 = HEAP8[$$0238284$i>>0]|0;
          $220 = ((($$0238284$i)) + 2|0);
          $221 = HEAP8[$218>>0]|0;
          $222 = ((($$0238284$i)) + 3|0);
          $223 = HEAP8[$220>>0]|0;
          $224 = $219&255;
          $225 = ($219<<24>>24)==($221<<24>>24);
          $226 = ($219<<24>>24)==($223<<24>>24);
          $or$cond272$i = $225 & $226;
          if ($or$cond272$i) {
           $247 = HEAP32[$180>>2]|0;
           $248 = ($247|0)==(0|0);
           if ($248) {
            $$1$i146 = $$0285$i;$storemerge262$i = $219;
           } else {
            $249 = (($247) + ($224)|0);
            $$1$i146$ph = $$0285$i;$$sink439 = $249;
            label = 56;
           }
          } else {
           $227 = $221&255;
           $228 = (($177) + ($224)|0);
           $229 = HEAP8[$228>>0]|0;
           $230 = (($177) + ($227)|0);
           $231 = HEAP8[$230>>0]|0;
           $232 = $223&255;
           $233 = (($177) + ($232)|0);
           $234 = HEAP8[$233>>0]|0;
           $235 = $$0285$i | 1;
           $236 = $229&255;
           $237 = Math_imul($236, $161)|0;
           $238 = $231&255;
           $239 = Math_imul($238, $164)|0;
           $240 = $234&255;
           $241 = Math_imul($166, $240)|0;
           $242 = (($237) + 16384)|0;
           $243 = (($242) + ($239))|0;
           $244 = (($243) + ($241))|0;
           $245 = $244 >>> 15;
           $246 = (($174) + ($245)|0);
           $$1$i146$ph = $235;$$sink439 = $246;
           label = 56;
          }
          if ((label|0) == 56) {
           label = 0;
           $250 = HEAP8[$$sink439>>0]|0;
           $$1$i146 = $$1$i146$ph;$storemerge262$i = $250;
          }
          $$1241$i = ((($$0240283$i)) + 1|0);
          HEAP8[$$0240283$i>>0] = $storemerge262$i;
          $251 = (($$0243282$i) + 1)|0;
          $exitcond308$i = ($251|0)==($167|0);
          if ($exitcond308$i) {
           $$8$i = $$1$i146;
           break L57;
          } else {
           $$0238284$i = $222;$$0240283$i = $$1241$i;$$0243282$i = $251;$$0285$i = $$1$i146;
          }
         }
        }
       }
      }
      $252 = ($167|0)==(0);
      if ($252) {
       $$8$i = 0;
      } else {
       if ($169) {
        $$0250280$us$i = $153;$$0252279$us$i = $153;$$0255278$us$i = 0;$$2281$us$i = 0;
        while(1) {
         $253 = ((($$0250280$us$i)) + 1|0);
         $254 = HEAP8[$$0250280$us$i>>0]|0;
         $255 = ((($$0250280$us$i)) + 2|0);
         $256 = HEAP8[$253>>0]|0;
         $257 = ((($$0250280$us$i)) + 3|0);
         $258 = HEAP8[$255>>0]|0;
         $259 = ($254<<24>>24)==($256<<24>>24);
         $260 = ($254<<24>>24)==($258<<24>>24);
         $or$cond273$us$i = $259 & $260;
         if ($or$cond273$us$i) {
          $$3$us$i = $$2281$us$i;$storemerge$us$i = $254;
         } else {
          $261 = $256&255;
          $262 = $254&255;
          $263 = $$2281$us$i | 1;
          $264 = Math_imul($262, $161)|0;
          $265 = Math_imul($261, $164)|0;
          $266 = (($265) + ($264))|0;
          $267 = $258&255;
          $268 = Math_imul($166, $267)|0;
          $269 = (($266) + ($268))|0;
          $270 = $269 >>> 15;
          $271 = $270&255;
          $$3$us$i = $263;$storemerge$us$i = $271;
         }
         $$1253$us$i = ((($$0252279$us$i)) + 1|0);
         HEAP8[$$0252279$us$i>>0] = $storemerge$us$i;
         $272 = ((($$0250280$us$i)) + 4|0);
         $273 = HEAP8[$257>>0]|0;
         $274 = ((($$0252279$us$i)) + 2|0);
         HEAP8[$$1253$us$i>>0] = $273;
         $275 = (($$0255278$us$i) + 1)|0;
         $exitcond$i148 = ($275|0)==($167|0);
         if ($exitcond$i148) {
          $$8$i = $$3$us$i;
          break;
         } else {
          $$0250280$us$i = $272;$$0252279$us$i = $274;$$0255278$us$i = $275;$$2281$us$i = $$3$us$i;
         }
        }
       } else {
        $$0250280$i = $153;$$0252279$i = $153;$$0255278$i = 0;$$2281$i = 0;
        while(1) {
         $276 = ((($$0250280$i)) + 1|0);
         $277 = HEAP8[$$0250280$i>>0]|0;
         $278 = ((($$0250280$i)) + 2|0);
         $279 = HEAP8[$276>>0]|0;
         $280 = ((($$0250280$i)) + 3|0);
         $281 = HEAP8[$278>>0]|0;
         $282 = ($277<<24>>24)==($279<<24>>24);
         $283 = ($277<<24>>24)==($281<<24>>24);
         $or$cond273$i = $282 & $283;
         if ($or$cond273$i) {
          $$3$i150 = $$2281$i;$storemerge$i149 = $277;
         } else {
          $284 = $279&255;
          $285 = $277&255;
          $286 = $$2281$i | 1;
          $287 = Math_imul($285, $161)|0;
          $288 = Math_imul($284, $164)|0;
          $289 = (($288) + ($287))|0;
          $290 = $281&255;
          $291 = Math_imul($166, $290)|0;
          $292 = (($289) + ($291))|0;
          $293 = $292 >>> 15;
          $294 = $293&255;
          $$3$i150 = $286;$storemerge$i149 = $294;
         }
         $$1253$i = ((($$0252279$i)) + 1|0);
         HEAP8[$$0252279$i>>0] = $storemerge$i149;
         $295 = (($$0255278$i) + 1)|0;
         $exitcond306$i = ($295|0)==($167|0);
         if ($exitcond306$i) {
          $$8$i = $$3$i150;
          break;
         } else {
          $$0250280$i = $280;$$0252279$i = $$1253$i;$$0255278$i = $295;$$2281$i = $$3$i150;
         }
        }
       }
      }
     } else {
      $296 = ((($0)) + 512|0);
      $297 = HEAP32[$296>>2]|0;
      $298 = ($297|0)==(0|0);
      if (!($298)) {
       $299 = ((($0)) + 508|0);
       $300 = HEAP32[$299>>2]|0;
       $301 = ($300|0)==(0|0);
       if (!($301)) {
        $302 = ($167|0)==(0);
        if ($302) {
         $$8$i = 0;
         break;
        }
        $303 = ((($0)) + 484|0);
        $304 = ((($0)) + 496|0);
        if ($169) {
         $$0256296$i$us = $153;$$0258295$i$us = $153;$$0261294$i$us = 0;$$4297$i$us = 0;
         while(1) {
          $305 = ((($$0256296$i$us)) + 1|0);
          $306 = HEAP8[$$0256296$i$us>>0]|0;
          $307 = ((($$0256296$i$us)) + 2|0);
          $308 = HEAP8[$305>>0]|0;
          $309 = $306&255;
          $310 = $309 << 8;
          $311 = $308&255;
          $312 = $310 | $311;
          $313 = ((($$0256296$i$us)) + 3|0);
          $314 = HEAP8[$307>>0]|0;
          $315 = ((($$0256296$i$us)) + 4|0);
          $316 = HEAP8[$313>>0]|0;
          $317 = $314&255;
          $318 = $317 << 8;
          $319 = $316&255;
          $320 = $318 | $319;
          $321 = ((($$0256296$i$us)) + 5|0);
          $322 = HEAP8[$315>>0]|0;
          $323 = ((($$0256296$i$us)) + 6|0);
          $324 = HEAP8[$321>>0]|0;
          $325 = $322&255;
          $326 = $324&255;
          $327 = ($312|0)==($320|0);
          if ($327) {
           $328 = $325 << 8;
           $329 = $328 | $326;
           $330 = ($312|0)==($329|0);
           if ($330) {
            $366 = HEAP32[$304>>2]|0;
            $367 = ($366|0)==(0|0);
            if ($367) {
             $$0260$off0$i$us = $308;$$0260$off8$i$us = $306;$$5$i151$us = $$4297$i$us;
            } else {
             $368 = HEAP32[$303>>2]|0;
             $369 = $311 >>> $368;
             $370 = (($366) + ($369<<2)|0);
             $371 = HEAP32[$370>>2]|0;
             $372 = (($371) + ($309<<1)|0);
             $373 = HEAP16[$372>>1]|0;
             $extract$t$i$us = $373&255;
             $extract$i$us = ($373&65535) >>> 8;
             $extract$t265$i$us = $extract$i$us&255;
             $$0260$off0$i$us = $extract$t$i$us;$$0260$off8$i$us = $extract$t265$i$us;$$5$i151$us = $$4297$i$us;
            }
           } else {
            label = 76;
           }
          } else {
           label = 76;
          }
          if ((label|0) == 76) {
           label = 0;
           $331 = HEAP32[$303>>2]|0;
           $332 = $311 >>> $331;
           $333 = (($297) + ($332<<2)|0);
           $334 = HEAP32[$333>>2]|0;
           $335 = (($334) + ($309<<1)|0);
           $336 = HEAP16[$335>>1]|0;
           $337 = $319 >>> $331;
           $338 = (($297) + ($337<<2)|0);
           $339 = HEAP32[$338>>2]|0;
           $340 = (($339) + ($317<<1)|0);
           $341 = HEAP16[$340>>1]|0;
           $342 = $326 >>> $331;
           $343 = (($297) + ($342<<2)|0);
           $344 = HEAP32[$343>>2]|0;
           $345 = (($344) + ($325<<1)|0);
           $346 = HEAP16[$345>>1]|0;
           $347 = $336&65535;
           $348 = Math_imul($347, $161)|0;
           $349 = $341&65535;
           $350 = Math_imul($349, $164)|0;
           $351 = $346&65535;
           $352 = Math_imul($166, $351)|0;
           $353 = (($348) + 16384)|0;
           $354 = (($353) + ($350))|0;
           $355 = (($354) + ($352))|0;
           $356 = $355 >>> 15;
           $357 = $356 & 255;
           $358 = $357 >>> $331;
           $359 = (($300) + ($358<<2)|0);
           $360 = HEAP32[$359>>2]|0;
           $361 = $355 >>> 23;
           $362 = $361 & 255;
           $363 = (($360) + ($362<<1)|0);
           $364 = HEAP16[$363>>1]|0;
           $365 = $$4297$i$us | 1;
           $extract$t264$i$us = $364&255;
           $extract268$i$us = ($364&65535) >>> 8;
           $extract$t269$i$us = $extract268$i$us&255;
           $$0260$off0$i$us = $extract$t264$i$us;$$0260$off8$i$us = $extract$t269$i$us;$$5$i151$us = $365;
          }
          $374 = ((($$0258295$i$us)) + 1|0);
          HEAP8[$$0258295$i$us>>0] = $$0260$off8$i$us;
          $375 = ((($$0258295$i$us)) + 2|0);
          HEAP8[$374>>0] = $$0260$off0$i$us;
          $376 = ((($$0256296$i$us)) + 7|0);
          $377 = HEAP8[$323>>0]|0;
          $378 = ((($$0258295$i$us)) + 3|0);
          HEAP8[$375>>0] = $377;
          $379 = ((($$0256296$i$us)) + 8|0);
          $380 = HEAP8[$376>>0]|0;
          $381 = ((($$0258295$i$us)) + 4|0);
          HEAP8[$378>>0] = $380;
          $382 = (($$0261294$i$us) + 1)|0;
          $exitcond311$i$us = ($382|0)==($167|0);
          if ($exitcond311$i$us) {
           $$8$i = $$5$i151$us;
           break L57;
          } else {
           $$0256296$i$us = $379;$$0258295$i$us = $381;$$0261294$i$us = $382;$$4297$i$us = $$5$i151$us;
          }
         }
        } else {
         $$0256296$i = $153;$$0258295$i = $153;$$0261294$i = 0;$$4297$i = 0;
         while(1) {
          $383 = ((($$0256296$i)) + 1|0);
          $384 = HEAP8[$$0256296$i>>0]|0;
          $385 = ((($$0256296$i)) + 2|0);
          $386 = HEAP8[$383>>0]|0;
          $387 = $384&255;
          $388 = $387 << 8;
          $389 = $386&255;
          $390 = $388 | $389;
          $391 = ((($$0256296$i)) + 3|0);
          $392 = HEAP8[$385>>0]|0;
          $393 = ((($$0256296$i)) + 4|0);
          $394 = HEAP8[$391>>0]|0;
          $395 = $392&255;
          $396 = $395 << 8;
          $397 = $394&255;
          $398 = $396 | $397;
          $399 = ((($$0256296$i)) + 5|0);
          $400 = HEAP8[$393>>0]|0;
          $401 = ((($$0256296$i)) + 6|0);
          $402 = HEAP8[$399>>0]|0;
          $403 = $400&255;
          $404 = $402&255;
          $405 = ($390|0)==($398|0);
          if ($405) {
           $406 = $403 << 8;
           $407 = $406 | $404;
           $408 = ($390|0)==($407|0);
           if ($408) {
            $409 = HEAP32[$304>>2]|0;
            $410 = ($409|0)==(0|0);
            if ($410) {
             $$0260$off0$i = $386;$$0260$off8$i = $384;$$5$i151 = $$4297$i;
            } else {
             $411 = HEAP32[$303>>2]|0;
             $412 = $389 >>> $411;
             $413 = (($409) + ($412<<2)|0);
             $414 = HEAP32[$413>>2]|0;
             $415 = (($414) + ($387<<1)|0);
             $416 = HEAP16[$415>>1]|0;
             $extract$t$i = $416&255;
             $extract$i = ($416&65535) >>> 8;
             $extract$t265$i = $extract$i&255;
             $$0260$off0$i = $extract$t$i;$$0260$off8$i = $extract$t265$i;$$5$i151 = $$4297$i;
            }
           } else {
            label = 84;
           }
          } else {
           label = 84;
          }
          if ((label|0) == 84) {
           label = 0;
           $417 = HEAP32[$303>>2]|0;
           $418 = $389 >>> $417;
           $419 = (($297) + ($418<<2)|0);
           $420 = HEAP32[$419>>2]|0;
           $421 = (($420) + ($387<<1)|0);
           $422 = HEAP16[$421>>1]|0;
           $423 = $397 >>> $417;
           $424 = (($297) + ($423<<2)|0);
           $425 = HEAP32[$424>>2]|0;
           $426 = (($425) + ($395<<1)|0);
           $427 = HEAP16[$426>>1]|0;
           $428 = $404 >>> $417;
           $429 = (($297) + ($428<<2)|0);
           $430 = HEAP32[$429>>2]|0;
           $431 = (($430) + ($403<<1)|0);
           $432 = HEAP16[$431>>1]|0;
           $433 = $422&65535;
           $434 = Math_imul($433, $161)|0;
           $435 = $427&65535;
           $436 = Math_imul($435, $164)|0;
           $437 = $432&65535;
           $438 = Math_imul($166, $437)|0;
           $439 = (($434) + 16384)|0;
           $440 = (($439) + ($436))|0;
           $441 = (($440) + ($438))|0;
           $442 = $441 >>> 15;
           $443 = $442 & 255;
           $444 = $443 >>> $417;
           $445 = (($300) + ($444<<2)|0);
           $446 = HEAP32[$445>>2]|0;
           $447 = $441 >>> 23;
           $448 = $447 & 255;
           $449 = (($446) + ($448<<1)|0);
           $450 = HEAP16[$449>>1]|0;
           $451 = $$4297$i | 1;
           $extract$t264$i = $450&255;
           $extract268$i = ($450&65535) >>> 8;
           $extract$t269$i = $extract268$i&255;
           $$0260$off0$i = $extract$t264$i;$$0260$off8$i = $extract$t269$i;$$5$i151 = $451;
          }
          $452 = ((($$0258295$i)) + 1|0);
          HEAP8[$$0258295$i>>0] = $$0260$off8$i;
          $453 = ((($$0258295$i)) + 2|0);
          HEAP8[$452>>0] = $$0260$off0$i;
          $454 = (($$0261294$i) + 1)|0;
          $exitcond311$i = ($454|0)==($167|0);
          if ($exitcond311$i) {
           $$8$i = $$5$i151;
           break L57;
          } else {
           $$0256296$i = $401;$$0258295$i = $453;$$0261294$i = $454;$$4297$i = $$5$i151;
          }
         }
        }
       }
      }
      $455 = ($167|0)==(0);
      if ($455) {
       $$8$i = 0;
      } else {
       if ($169) {
        $$0245290$us$i = 0;$$0246289$us$i = $153;$$0248288$us$i = $153;$$6291$us$i = 0;
        while(1) {
         $456 = ((($$0248288$us$i)) + 1|0);
         $457 = HEAP8[$$0248288$us$i>>0]|0;
         $458 = ((($$0248288$us$i)) + 2|0);
         $459 = HEAP8[$456>>0]|0;
         $460 = $457&255;
         $461 = $460 << 8;
         $462 = $459&255;
         $463 = $461 | $462;
         $464 = ((($$0248288$us$i)) + 3|0);
         $465 = HEAP8[$458>>0]|0;
         $466 = ((($$0248288$us$i)) + 4|0);
         $467 = HEAP8[$464>>0]|0;
         $468 = $465&255;
         $469 = $468 << 8;
         $470 = $467&255;
         $471 = $469 | $470;
         $472 = ((($$0248288$us$i)) + 5|0);
         $473 = HEAP8[$466>>0]|0;
         $474 = ((($$0248288$us$i)) + 6|0);
         $475 = HEAP8[$472>>0]|0;
         $476 = $473&255;
         $477 = $476 << 8;
         $478 = $475&255;
         $479 = $477 | $478;
         $480 = ($463|0)!=($471|0);
         $481 = ($463|0)!=($479|0);
         $not$or$cond274$us$i = $480 | $481;
         $482 = $not$or$cond274$us$i&1;
         $$7$us$i = $$6291$us$i | $482;
         $483 = Math_imul($463, $161)|0;
         $484 = Math_imul($471, $164)|0;
         $485 = Math_imul($479, $166)|0;
         $486 = (($483) + 16384)|0;
         $487 = (($486) + ($484))|0;
         $488 = (($487) + ($485))|0;
         $489 = $488 >>> 15;
         $490 = $488 >>> 23;
         $491 = $490&255;
         $492 = ((($$0246289$us$i)) + 1|0);
         HEAP8[$$0246289$us$i>>0] = $491;
         $493 = $489&255;
         $494 = ((($$0246289$us$i)) + 2|0);
         HEAP8[$492>>0] = $493;
         $495 = ((($$0248288$us$i)) + 7|0);
         $496 = HEAP8[$474>>0]|0;
         $497 = ((($$0246289$us$i)) + 3|0);
         HEAP8[$494>>0] = $496;
         $498 = ((($$0248288$us$i)) + 8|0);
         $499 = HEAP8[$495>>0]|0;
         $500 = ((($$0246289$us$i)) + 4|0);
         HEAP8[$497>>0] = $499;
         $501 = (($$0245290$us$i) + 1)|0;
         $exitcond309$i = ($501|0)==($167|0);
         if ($exitcond309$i) {
          $$8$i = $$7$us$i;
          break;
         } else {
          $$0245290$us$i = $501;$$0246289$us$i = $500;$$0248288$us$i = $498;$$6291$us$i = $$7$us$i;
         }
        }
       } else {
        $$0245290$i = 0;$$0246289$i = $153;$$0248288$i = $153;$$6291$i = 0;
        while(1) {
         $502 = ((($$0248288$i)) + 1|0);
         $503 = HEAP8[$$0248288$i>>0]|0;
         $504 = ((($$0248288$i)) + 2|0);
         $505 = HEAP8[$502>>0]|0;
         $506 = $503&255;
         $507 = $506 << 8;
         $508 = $505&255;
         $509 = $507 | $508;
         $510 = ((($$0248288$i)) + 3|0);
         $511 = HEAP8[$504>>0]|0;
         $512 = ((($$0248288$i)) + 4|0);
         $513 = HEAP8[$510>>0]|0;
         $514 = $511&255;
         $515 = $514 << 8;
         $516 = $513&255;
         $517 = $515 | $516;
         $518 = ((($$0248288$i)) + 5|0);
         $519 = HEAP8[$512>>0]|0;
         $520 = ((($$0248288$i)) + 6|0);
         $521 = HEAP8[$518>>0]|0;
         $522 = $519&255;
         $523 = $522 << 8;
         $524 = $521&255;
         $525 = $523 | $524;
         $526 = ($509|0)!=($517|0);
         $527 = ($509|0)!=($525|0);
         $not$or$cond274$i = $526 | $527;
         $528 = $not$or$cond274$i&1;
         $$7$i = $$6291$i | $528;
         $529 = Math_imul($509, $161)|0;
         $530 = Math_imul($517, $164)|0;
         $531 = Math_imul($525, $166)|0;
         $532 = (($529) + 16384)|0;
         $533 = (($532) + ($530))|0;
         $534 = (($533) + ($531))|0;
         $535 = $534 >>> 15;
         $536 = $534 >>> 23;
         $537 = $536&255;
         $538 = ((($$0246289$i)) + 1|0);
         HEAP8[$$0246289$i>>0] = $537;
         $539 = $535&255;
         $540 = ((($$0246289$i)) + 2|0);
         HEAP8[$538>>0] = $539;
         $541 = (($$0245290$i) + 1)|0;
         $exitcond310$i = ($541|0)==($167|0);
         if ($exitcond310$i) {
          $$8$i = $$7$i;
          break;
         } else {
          $$0245290$i = $541;$$0246289$i = $540;$$0248288$i = $520;$$6291$i = $$7$i;
         }
        }
       }
      }
     }
    } while(0);
    $542 = ((($1)) + 10|0);
    $543 = HEAP8[$542>>0]|0;
    $544 = $543&255;
    $545 = (($544) + 254)|0;
    $546 = $545&255;
    HEAP8[$542>>0] = $546;
    $547 = HEAP8[$154>>0]|0;
    $548 = $547 & -3;
    HEAP8[$154>>0] = $548;
    $549 = (($543) + -2)<<24>>24;
    $550 = $549&255;
    $551 = HEAP8[$170>>0]|0;
    $552 = $551&255;
    $553 = Math_imul($552, $550)|0;
    $554 = $553&255;
    $555 = ((($1)) + 11|0);
    HEAP8[$555>>0] = $554;
    $556 = $553 & 255;
    $557 = ($556>>>0)>(7);
    if ($557) {
     $558 = $556 >>> 3;
     $559 = Math_imul($558, $167)|0;
     $564 = $559;
    } else {
     $560 = Math_imul($556, $167)|0;
     $561 = (($560) + 7)|0;
     $562 = $561 >>> 3;
     $564 = $562;
    }
    $563 = ((($1)) + 4|0);
    HEAP32[$563>>2] = $564;
    $565 = ($$8$i|0)==(0);
    if ($565) {
     $$pre308 = HEAP32[$10>>2]|0;
     $574 = $$pre308;
     break;
    }
    $566 = ((($0)) + 700|0);
    HEAP8[$566>>0] = 1;
    $567 = HEAP32[$10>>2]|0;
    $568 = $567 & 6291456;
    $569 = ($568|0)==(4194304);
    if ($569) {
     _png_warning($0,24549);
     $$pre307 = HEAP32[$10>>2]|0;
     $571 = $$pre307;
    } else {
     $571 = $567;
    }
    $570 = $571 & 6291456;
    $572 = ($570|0)==(2097152);
    if ($572) {
     _png_error($0,24549);
     // unreachable;
    } else {
     $574 = $571;
    }
   } else {
    $574 = $150;
   }
  }
 } while(0);
 $573 = $574 & 16384;
 $575 = ($573|0)==(0);
 if ($575) {
  $583 = $574;
 } else {
  $576 = ((($0)) + 208|0);
  $577 = HEAP32[$576>>2]|0;
  $578 = $577 & 2048;
  $579 = ($578|0)==(0);
  if ($579) {
   $580 = HEAP32[$3>>2]|0;
   $581 = ((($580)) + 1|0);
   _png_do_gray_to_rgb($1,$581);
   $$pre309 = HEAP32[$10>>2]|0;
   $583 = $$pre309;
  } else {
   $583 = $574;
  }
 }
 $582 = $583 & 128;
 $584 = ($582|0)==(0);
 L151: do {
  if (!($584)) {
   $585 = HEAP32[$3>>2]|0;
   $586 = ((($585)) + 1|0);
   $587 = ((($0)) + 492|0);
   $588 = HEAP32[$587>>2]|0;
   $589 = ((($0)) + 500|0);
   $590 = HEAP32[$589>>2]|0;
   $591 = ((($0)) + 504|0);
   $592 = HEAP32[$591>>2]|0;
   $593 = ((($0)) + 496|0);
   $594 = HEAP32[$593>>2]|0;
   $595 = ((($0)) + 508|0);
   $596 = HEAP32[$595>>2]|0;
   $597 = ((($0)) + 512|0);
   $598 = HEAP32[$597>>2]|0;
   $599 = ((($0)) + 484|0);
   $600 = HEAP32[$599>>2]|0;
   $601 = HEAP32[$6>>2]|0;
   $602 = $601 & 8192;
   $603 = ($602|0)==(0);
   $604 = HEAP32[$1>>2]|0;
   $605 = ((($1)) + 8|0);
   $606 = HEAP8[$605>>0]|0;
   switch ($606<<24>>24) {
   case 0:  {
    $607 = ((($1)) + 9|0);
    $608 = HEAP8[$607>>0]|0;
    switch ($608<<24>>24) {
    case 1:  {
     $609 = ($604|0)==(0);
     if ($609) {
      break L151;
     }
     $610 = ((($0)) + 540|0);
     $611 = ((($0)) + 460|0);
     $612 = HEAP16[$610>>1]|0;
     $613 = $612&65535;
     $$0823922$i = 0;$$0844921$i = 7;$$0923$i = $586;
     while(1) {
      $614 = HEAP8[$$0923$i>>0]|0;
      $615 = $614&255;
      $616 = $615 >>> $$0844921$i;
      $617 = $616 & 1;
      $618 = ($617|0)==($613|0);
      if ($618) {
       $619 = (7 - ($$0844921$i))|0;
       $620 = 32639 >>> $619;
       $621 = $620 & $615;
       $622 = HEAP16[$611>>1]|0;
       $623 = $622&65535;
       $624 = $623 << $$0844921$i;
       $625 = $624 | $621;
       $626 = $625&255;
       HEAP8[$$0923$i>>0] = $626;
      }
      $627 = ($$0844921$i|0)==(0);
      $628 = ((($$0923$i)) + 1|0);
      $629 = (($$0844921$i) + -1)|0;
      $$1845$i = $627 ? 7 : $629;
      $$1$i170 = $627 ? $628 : $$0923$i;
      $630 = (($$0823922$i) + 1)|0;
      $exitcond$i171 = ($630|0)==($604|0);
      if ($exitcond$i171) {
       break;
      } else {
       $$0823922$i = $630;$$0844921$i = $$1845$i;$$0923$i = $$1$i170;
      }
     }
     break;
    }
    case 2:  {
     $631 = ($588|0)==(0|0);
     $632 = ($604|0)!=(0);
     if ($631) {
      if (!($632)) {
       break L151;
      }
      $667 = ((($0)) + 540|0);
      $668 = ((($0)) + 460|0);
      $669 = HEAP16[$667>>1]|0;
      $670 = $669&65535;
      $$2825925$i = 0;$$4848924$i = 6;$$4926$i = $586;
      while(1) {
       $671 = HEAP8[$$4926$i>>0]|0;
       $672 = $671&255;
       $673 = $672 >>> $$4848924$i;
       $674 = $673 & 3;
       $675 = ($674|0)==($670|0);
       if ($675) {
        $676 = (6 - ($$4848924$i))|0;
        $677 = 16191 >>> $676;
        $678 = $677 & $672;
        $679 = HEAP16[$668>>1]|0;
        $680 = $679&65535;
        $681 = $680 << $$4848924$i;
        $682 = $681 | $678;
        $683 = $682&255;
        HEAP8[$$4926$i>>0] = $683;
       }
       $684 = ($$4848924$i|0)==(0);
       $685 = ((($$4926$i)) + 1|0);
       $686 = (($$4848924$i) + -2)|0;
       $$5849$i = $684 ? 6 : $686;
       $$5$i173 = $684 ? $685 : $$4926$i;
       $687 = (($$2825925$i) + 1)|0;
       $exitcond1016$i = ($687|0)==($604|0);
       if ($exitcond1016$i) {
        break L151;
       } else {
        $$2825925$i = $687;$$4848924$i = $$5849$i;$$4926$i = $$5$i173;
       }
      }
     }
     if (!($632)) {
      break L151;
     }
     $633 = ((($0)) + 540|0);
     $634 = ((($0)) + 460|0);
     $$pre315 = HEAP16[$633>>1]|0;
     $635 = $$pre315&65535;
     $$1824929$i = 0;$$2846928$i = 6;$$2930$i = $586;
     while(1) {
      $636 = HEAP8[$$2930$i>>0]|0;
      $637 = $636&255;
      $638 = $637 >>> $$2846928$i;
      $639 = $638 & 3;
      $640 = ($639|0)==($635|0);
      if ($640) {
       $641 = (6 - ($$2846928$i))|0;
       $642 = 16191 >>> $641;
       $643 = $642 & $637;
       $644 = HEAP16[$634>>1]|0;
       $645 = $644&65535;
       $646 = $645 << $$2846928$i;
       $$masked870$i = $646 & 255;
       $647 = $$masked870$i | $643;
       $storemerge869$in$i = $647;
      } else {
       $648 = $639 << 2;
       $649 = $648 | $639;
       $650 = $639 << 4;
       $651 = $649 | $650;
       $652 = $639 << 6;
       $653 = $651 | $652;
       $654 = (($588) + ($653)|0);
       $655 = HEAP8[$654>>0]|0;
       $656 = $655&255;
       $657 = $656 >>> 6;
       $658 = (6 - ($$2846928$i))|0;
       $659 = 16191 >>> $658;
       $660 = $659 & $637;
       $661 = $657 << $$2846928$i;
       $662 = $661 | $660;
       $storemerge869$in$i = $662;
      }
      $storemerge869$i = $storemerge869$in$i&255;
      HEAP8[$$2930$i>>0] = $storemerge869$i;
      $663 = ($$2846928$i|0)==(0);
      $664 = ((($$2930$i)) + 1|0);
      $665 = (($$2846928$i) + -2)|0;
      $$3847$i = $663 ? 6 : $665;
      $$3$i172 = $663 ? $664 : $$2930$i;
      $666 = (($$1824929$i) + 1)|0;
      $exitcond1017$i = ($666|0)==($604|0);
      if ($exitcond1017$i) {
       break;
      } else {
       $$1824929$i = $666;$$2846928$i = $$3847$i;$$2930$i = $$3$i172;
      }
     }
     break;
    }
    case 4:  {
     $688 = ($588|0)==(0|0);
     $689 = ($604|0)!=(0);
     if ($688) {
      if (!($689)) {
       break L151;
      }
      $720 = ((($0)) + 540|0);
      $721 = ((($0)) + 460|0);
      $722 = HEAP16[$720>>1]|0;
      $723 = $722&65535;
      $$4827933$i = 0;$$8852932$i = 4;$$8934$i = $586;
      while(1) {
       $724 = HEAP8[$$8934$i>>0]|0;
       $725 = $724&255;
       $726 = $725 >>> $$8852932$i;
       $727 = $726 & 15;
       $728 = ($727|0)==($723|0);
       if ($728) {
        $729 = (4 - ($$8852932$i))|0;
        $730 = 3855 >>> $729;
        $731 = $730 & $725;
        $732 = HEAP16[$721>>1]|0;
        $733 = $732&65535;
        $734 = $733 << $$8852932$i;
        $735 = $734 | $731;
        $736 = $735&255;
        HEAP8[$$8934$i>>0] = $736;
       }
       $737 = ($$8852932$i|0)==(0);
       $738 = ((($$8934$i)) + 1|0);
       $739 = (($$8852932$i) + -4)|0;
       $$9853$i = $737 ? 4 : $739;
       $$9$i175 = $737 ? $738 : $$8934$i;
       $740 = (($$4827933$i) + 1)|0;
       $exitcond1018$i = ($740|0)==($604|0);
       if ($exitcond1018$i) {
        break L151;
       } else {
        $$4827933$i = $740;$$8852932$i = $$9853$i;$$8934$i = $$9$i175;
       }
      }
     }
     if (!($689)) {
      break L151;
     }
     $690 = ((($0)) + 540|0);
     $691 = ((($0)) + 460|0);
     $$pre314 = HEAP16[$690>>1]|0;
     $692 = $$pre314&65535;
     $$3826937$i = 0;$$6850936$i = 4;$$6938$i = $586;
     while(1) {
      $693 = HEAP8[$$6938$i>>0]|0;
      $694 = $693&255;
      $695 = $694 >>> $$6850936$i;
      $696 = $695 & 15;
      $697 = ($696|0)==($692|0);
      if ($697) {
       $698 = (4 - ($$6850936$i))|0;
       $699 = 3855 >>> $698;
       $700 = $699 & $694;
       $701 = HEAP16[$691>>1]|0;
       $702 = $701&65535;
       $703 = $702 << $$6850936$i;
       $$masked866$i = $703 & 255;
       $704 = $$masked866$i | $700;
       $storemerge865$in$i = $704;
      } else {
       $705 = $696 << 4;
       $706 = $705 | $696;
       $707 = (($588) + ($706)|0);
       $708 = HEAP8[$707>>0]|0;
       $709 = $708&255;
       $710 = $709 >>> 4;
       $711 = (4 - ($$6850936$i))|0;
       $712 = 3855 >>> $711;
       $713 = $712 & $694;
       $714 = $710 << $$6850936$i;
       $715 = $714 | $713;
       $storemerge865$in$i = $715;
      }
      $storemerge865$i = $storemerge865$in$i&255;
      HEAP8[$$6938$i>>0] = $storemerge865$i;
      $716 = ($$6850936$i|0)==(0);
      $717 = ((($$6938$i)) + 1|0);
      $718 = (($$6850936$i) + -4)|0;
      $$7851$i = $716 ? 4 : $718;
      $$7$i174 = $716 ? $717 : $$6938$i;
      $719 = (($$3826937$i) + 1)|0;
      $exitcond1019$i = ($719|0)==($604|0);
      if ($exitcond1019$i) {
       break;
      } else {
       $$3826937$i = $719;$$6850936$i = $$7851$i;$$6938$i = $$7$i174;
      }
     }
     break;
    }
    case 8:  {
     $741 = ($588|0)==(0|0);
     $742 = ($604|0)!=(0);
     if ($741) {
      if (!($742)) {
       break L151;
      }
      $755 = ((($0)) + 540|0);
      $756 = ((($0)) + 460|0);
      $757 = HEAP16[$755>>1]|0;
      $758 = $757&65535;
      $$11941$i = $586;$$6829940$i = 0;
      while(1) {
       $759 = HEAP8[$$11941$i>>0]|0;
       $760 = $759&255;
       $761 = ($760|0)==($758|0);
       if ($761) {
        $762 = HEAP16[$756>>1]|0;
        $763 = $762&255;
        HEAP8[$$11941$i>>0] = $763;
       }
       $764 = (($$6829940$i) + 1)|0;
       $765 = ((($$11941$i)) + 1|0);
       $exitcond1020$i = ($764|0)==($604|0);
       if ($exitcond1020$i) {
        break L151;
       } else {
        $$11941$i = $765;$$6829940$i = $764;
       }
      }
     }
     if (!($742)) {
      break L151;
     }
     $743 = ((($0)) + 540|0);
     $744 = ((($0)) + 460|0);
     $$pre313 = HEAP16[$743>>1]|0;
     $745 = $$pre313&65535;
     $$10944$i = $586;$$5828943$i = 0;
     while(1) {
      $746 = HEAP8[$$10944$i>>0]|0;
      $747 = $746&255;
      $748 = ($747|0)==($745|0);
      if ($748) {
       $749 = HEAP16[$744>>1]|0;
       $750 = $749&255;
       $storemerge863$i = $750;
      } else {
       $751 = (($588) + ($747)|0);
       $752 = HEAP8[$751>>0]|0;
       $storemerge863$i = $752;
      }
      HEAP8[$$10944$i>>0] = $storemerge863$i;
      $753 = (($$5828943$i) + 1)|0;
      $754 = ((($$10944$i)) + 1|0);
      $exitcond1021$i = ($753|0)==($604|0);
      if ($exitcond1021$i) {
       break;
      } else {
       $$10944$i = $754;$$5828943$i = $753;
      }
     }
     break;
    }
    case 16:  {
     $766 = ($594|0)==(0|0);
     $767 = ($604|0)!=(0);
     if ($766) {
      if (!($767)) {
       break L151;
      }
      $788 = ((($0)) + 540|0);
      $789 = ((($0)) + 460|0);
      $790 = HEAP16[$788>>1]|0;
      $791 = $790&65535;
      $$13947$i = $586;$$8831946$i = 0;
      while(1) {
       $792 = HEAP8[$$13947$i>>0]|0;
       $793 = $792&255;
       $794 = $793 << 8;
       $795 = ((($$13947$i)) + 1|0);
       $796 = HEAP8[$795>>0]|0;
       $797 = $796&255;
       $798 = $794 | $797;
       $799 = ($798|0)==($791|0);
       if ($799) {
        $800 = HEAP16[$789>>1]|0;
        $801 = ($800&65535) >>> 8;
        $802 = $801&255;
        HEAP8[$$13947$i>>0] = $802;
        $803 = $800&255;
        HEAP8[$795>>0] = $803;
       }
       $804 = (($$8831946$i) + 1)|0;
       $805 = ((($$13947$i)) + 2|0);
       $exitcond1022$i = ($804|0)==($604|0);
       if ($exitcond1022$i) {
        break;
       } else {
        $$13947$i = $805;$$8831946$i = $804;
       }
      }
     } else {
      if (!($767)) {
       break L151;
      }
      $768 = ((($0)) + 540|0);
      $769 = ((($0)) + 460|0);
      $$pre312 = HEAP16[$768>>1]|0;
      $770 = $$pre312&65535;
      $$12950$i = $586;$$7830949$i = 0;
      while(1) {
       $771 = HEAP8[$$12950$i>>0]|0;
       $772 = $771&255;
       $773 = $772 << 8;
       $774 = ((($$12950$i)) + 1|0);
       $775 = HEAP8[$774>>0]|0;
       $776 = $775&255;
       $777 = $773 | $776;
       $778 = ($777|0)==($770|0);
       if ($778) {
        $$sink443$in = $769;
       } else {
        $779 = $776 >>> $600;
        $780 = (($594) + ($779<<2)|0);
        $781 = HEAP32[$780>>2]|0;
        $782 = (($781) + ($772<<1)|0);
        $$sink443$in = $782;
       }
       $$sink443 = HEAP16[$$sink443$in>>1]|0;
       $783 = ($$sink443&65535) >>> 8;
       $784 = $783&255;
       HEAP8[$$12950$i>>0] = $784;
       $785 = $$sink443&255;
       HEAP8[$774>>0] = $785;
       $786 = (($$7830949$i) + 1)|0;
       $787 = ((($$12950$i)) + 2|0);
       $exitcond1023$i = ($786|0)==($604|0);
       if ($exitcond1023$i) {
        break;
       } else {
        $$12950$i = $787;$$7830949$i = $786;
       }
      }
     }
     break;
    }
    default: {
     break L151;
    }
    }
    break;
   }
   case 2:  {
    $806 = ((($1)) + 9|0);
    $807 = HEAP8[$806>>0]|0;
    $808 = ($807<<24>>24)==(8);
    if ($808) {
     $809 = ($588|0)==(0|0);
     $810 = ($604|0)!=(0);
     if ($809) {
      if (!($810)) {
       break L151;
      }
      $850 = ((($0)) + 534|0);
      $851 = ((($0)) + 536|0);
      $852 = ((($0)) + 538|0);
      $853 = ((($0)) + 454|0);
      $854 = ((($0)) + 456|0);
      $855 = ((($0)) + 458|0);
      $856 = HEAP16[$850>>1]|0;
      $857 = $856&65535;
      $$10833952$i = 0;$$15953$i = $586;
      while(1) {
       $858 = HEAP8[$$15953$i>>0]|0;
       $859 = $858&255;
       $860 = ($859|0)==($857|0);
       if ($860) {
        $861 = ((($$15953$i)) + 1|0);
        $862 = HEAP8[$861>>0]|0;
        $863 = $862&255;
        $864 = HEAP16[$851>>1]|0;
        $865 = $864&65535;
        $866 = ($863|0)==($865|0);
        if ($866) {
         $867 = ((($$15953$i)) + 2|0);
         $868 = HEAP8[$867>>0]|0;
         $869 = $868&255;
         $870 = HEAP16[$852>>1]|0;
         $871 = $870&65535;
         $872 = ($869|0)==($871|0);
         if ($872) {
          $873 = HEAP16[$853>>1]|0;
          $874 = $873&255;
          HEAP8[$$15953$i>>0] = $874;
          $875 = HEAP16[$854>>1]|0;
          $876 = $875&255;
          HEAP8[$861>>0] = $876;
          $877 = HEAP16[$855>>1]|0;
          $878 = $877&255;
          HEAP8[$867>>0] = $878;
         }
        }
       }
       $879 = (($$10833952$i) + 1)|0;
       $880 = ((($$15953$i)) + 3|0);
       $exitcond1024$i = ($879|0)==($604|0);
       if ($exitcond1024$i) {
        break L151;
       } else {
        $$10833952$i = $879;$$15953$i = $880;
       }
      }
     }
     if (!($810)) {
      break L151;
     }
     $811 = ((($0)) + 534|0);
     $812 = ((($0)) + 536|0);
     $813 = ((($0)) + 538|0);
     $814 = ((($0)) + 454|0);
     $815 = ((($0)) + 456|0);
     $816 = ((($0)) + 458|0);
     $$pre311 = HEAP16[$811>>1]|0;
     $817 = $$pre311&65535;
     $$14956$i = $586;$$9832955$i = 0;
     while(1) {
      $818 = HEAP8[$$14956$i>>0]|0;
      $819 = $818&255;
      $820 = ($819|0)==($817|0);
      $821 = ((($$14956$i)) + 1|0);
      $822 = HEAP8[$821>>0]|0;
      $823 = $822&255;
      if ($820) {
       $824 = HEAP16[$812>>1]|0;
       $825 = $824&65535;
       $826 = ($823|0)==($825|0);
       if ($826) {
        $827 = ((($$14956$i)) + 2|0);
        $828 = HEAP8[$827>>0]|0;
        $829 = $828&255;
        $830 = HEAP16[$813>>1]|0;
        $831 = $830&65535;
        $832 = ($829|0)==($831|0);
        if ($832) {
         $833 = HEAP16[$814>>1]|0;
         $834 = $833&255;
         HEAP8[$$14956$i>>0] = $834;
         $835 = HEAP16[$815>>1]|0;
         $836 = $835&255;
         HEAP8[$821>>0] = $836;
         $837 = HEAP16[$816>>1]|0;
         $838 = $837&255;
         HEAP8[$827>>0] = $838;
        } else {
         label = 167;
        }
       } else {
        label = 167;
       }
      } else {
       label = 167;
      }
      if ((label|0) == 167) {
       label = 0;
       $839 = (($588) + ($819)|0);
       $840 = HEAP8[$839>>0]|0;
       HEAP8[$$14956$i>>0] = $840;
       $841 = (($588) + ($823)|0);
       $842 = HEAP8[$841>>0]|0;
       HEAP8[$821>>0] = $842;
       $843 = ((($$14956$i)) + 2|0);
       $844 = HEAP8[$843>>0]|0;
       $845 = $844&255;
       $846 = (($588) + ($845)|0);
       $847 = HEAP8[$846>>0]|0;
       HEAP8[$843>>0] = $847;
      }
      $848 = (($$9832955$i) + 1)|0;
      $849 = ((($$14956$i)) + 3|0);
      $exitcond1025$i = ($848|0)==($604|0);
      if ($exitcond1025$i) {
       break L151;
      } else {
       $$14956$i = $849;$$9832955$i = $848;
      }
     }
    }
    $881 = ($594|0)==(0|0);
    $882 = ($604|0)!=(0);
    if ($881) {
     if (!($882)) {
      break L151;
     }
     $954 = ((($0)) + 534|0);
     $955 = ((($0)) + 536|0);
     $956 = ((($0)) + 538|0);
     $957 = ((($0)) + 454|0);
     $958 = ((($0)) + 456|0);
     $959 = ((($0)) + 458|0);
     $960 = HEAP16[$954>>1]|0;
     $961 = $960&65535;
     $$12835959$i = 0;$$17960$i = $586;
     while(1) {
      $962 = HEAP8[$$17960$i>>0]|0;
      $963 = $962&255;
      $964 = $963 << 8;
      $965 = ((($$17960$i)) + 1|0);
      $966 = HEAP8[$965>>0]|0;
      $967 = $966&255;
      $968 = $964 | $967;
      $969 = ((($$17960$i)) + 2|0);
      $970 = ((($$17960$i)) + 3|0);
      $971 = ((($$17960$i)) + 4|0);
      $972 = HEAP8[$971>>0]|0;
      $973 = $972&255;
      $974 = $973 << 8;
      $975 = ((($$17960$i)) + 5|0);
      $976 = HEAP8[$975>>0]|0;
      $977 = $976&255;
      $978 = $974 | $977;
      $979 = ($968|0)==($961|0);
      if ($979) {
       $980 = HEAP8[$969>>0]|0;
       $981 = $980&255;
       $982 = $981 << 8;
       $983 = HEAP8[$970>>0]|0;
       $984 = $983&255;
       $985 = $982 | $984;
       $986 = HEAP16[$955>>1]|0;
       $987 = $986&65535;
       $988 = ($985|0)==($987|0);
       if ($988) {
        $989 = HEAP16[$956>>1]|0;
        $990 = $989&65535;
        $991 = ($978|0)==($990|0);
        if ($991) {
         $992 = HEAP16[$957>>1]|0;
         $993 = ($992&65535) >>> 8;
         $994 = $993&255;
         HEAP8[$$17960$i>>0] = $994;
         $995 = $992&255;
         HEAP8[$965>>0] = $995;
         $996 = HEAP16[$958>>1]|0;
         $997 = ($996&65535) >>> 8;
         $998 = $997&255;
         HEAP8[$969>>0] = $998;
         $999 = $996&255;
         HEAP8[$970>>0] = $999;
         $1000 = HEAP16[$959>>1]|0;
         $1001 = ($1000&65535) >>> 8;
         $1002 = $1001&255;
         HEAP8[$971>>0] = $1002;
         $1003 = $1000&255;
         HEAP8[$975>>0] = $1003;
        }
       }
      }
      $1004 = (($$12835959$i) + 1)|0;
      $1005 = ((($$17960$i)) + 6|0);
      $exitcond1026$i = ($1004|0)==($604|0);
      if ($exitcond1026$i) {
       break L151;
      } else {
       $$12835959$i = $1004;$$17960$i = $1005;
      }
     }
    }
    if (!($882)) {
     break L151;
    }
    $883 = ((($0)) + 534|0);
    $884 = ((($0)) + 536|0);
    $885 = ((($0)) + 538|0);
    $886 = ((($0)) + 454|0);
    $887 = ((($0)) + 456|0);
    $888 = ((($0)) + 458|0);
    $$pre310 = HEAP16[$883>>1]|0;
    $889 = $$pre310&65535;
    $$11834962$i = 0;$$16963$i = $586;
    while(1) {
     $890 = HEAP8[$$16963$i>>0]|0;
     $891 = $890&255;
     $892 = $891 << 8;
     $893 = ((($$16963$i)) + 1|0);
     $894 = HEAP8[$893>>0]|0;
     $895 = $894&255;
     $896 = $892 | $895;
     $897 = ((($$16963$i)) + 2|0);
     $898 = ((($$16963$i)) + 3|0);
     $899 = ((($$16963$i)) + 4|0);
     $900 = HEAP8[$899>>0]|0;
     $901 = $900&255;
     $902 = $901 << 8;
     $903 = ((($$16963$i)) + 5|0);
     $904 = HEAP8[$903>>0]|0;
     $905 = $904&255;
     $906 = $902 | $905;
     $907 = ($896|0)==($889|0);
     if ($907) {
      $908 = HEAP8[$897>>0]|0;
      $909 = $908&255;
      $910 = $909 << 8;
      $911 = HEAP8[$898>>0]|0;
      $912 = $911&255;
      $913 = $910 | $912;
      $914 = HEAP16[$884>>1]|0;
      $915 = $914&65535;
      $916 = ($913|0)==($915|0);
      if ($916) {
       $917 = HEAP16[$885>>1]|0;
       $918 = $917&65535;
       $919 = ($906|0)==($918|0);
       if ($919) {
        $920 = HEAP16[$886>>1]|0;
        $921 = ($920&65535) >>> 8;
        $922 = $921&255;
        HEAP8[$$16963$i>>0] = $922;
        $923 = $920&255;
        HEAP8[$893>>0] = $923;
        $924 = HEAP16[$887>>1]|0;
        $925 = ($924&65535) >>> 8;
        $926 = $925&255;
        HEAP8[$897>>0] = $926;
        $927 = $924&255;
        HEAP8[$898>>0] = $927;
        $$sink452 = $888;
       } else {
        $$pre$phi1044$iZ2D = $912;$$pre$phi1046$iZ2D = $909;
        label = 184;
       }
      } else {
       $$pre$phi1044$iZ2D = $912;$$pre$phi1046$iZ2D = $909;
       label = 184;
      }
     } else {
      $$pre$i = HEAP8[$898>>0]|0;
      $$pre1038$i = HEAP8[$897>>0]|0;
      $$pre1043$i = $$pre$i&255;
      $$pre1045$i = $$pre1038$i&255;
      $$pre$phi1044$iZ2D = $$pre1043$i;$$pre$phi1046$iZ2D = $$pre1045$i;
      label = 184;
     }
     if ((label|0) == 184) {
      label = 0;
      $928 = $895 >>> $600;
      $929 = (($594) + ($928<<2)|0);
      $930 = HEAP32[$929>>2]|0;
      $931 = (($930) + ($891<<1)|0);
      $932 = HEAP16[$931>>1]|0;
      $933 = ($932&65535) >>> 8;
      $934 = $933&255;
      HEAP8[$$16963$i>>0] = $934;
      $935 = $932&255;
      HEAP8[$893>>0] = $935;
      $936 = $$pre$phi1044$iZ2D >>> $600;
      $937 = (($594) + ($936<<2)|0);
      $938 = HEAP32[$937>>2]|0;
      $939 = (($938) + ($$pre$phi1046$iZ2D<<1)|0);
      $940 = HEAP16[$939>>1]|0;
      $941 = ($940&65535) >>> 8;
      $942 = $941&255;
      HEAP8[$897>>0] = $942;
      $943 = $940&255;
      HEAP8[$898>>0] = $943;
      $944 = $905 >>> $600;
      $945 = (($594) + ($944<<2)|0);
      $946 = HEAP32[$945>>2]|0;
      $947 = (($946) + ($901<<1)|0);
      $$sink452 = $947;
     }
     $948 = HEAP16[$$sink452>>1]|0;
     $949 = ($948&65535) >>> 8;
     $950 = $949&255;
     HEAP8[$899>>0] = $950;
     $951 = $948&255;
     HEAP8[$903>>0] = $951;
     $952 = (($$11834962$i) + 1)|0;
     $953 = ((($$16963$i)) + 6|0);
     $exitcond1027$i = ($952|0)==($604|0);
     if ($exitcond1027$i) {
      break;
     } else {
      $$11834962$i = $952;$$16963$i = $953;
     }
    }
    break;
   }
   case 4:  {
    $1006 = ((($1)) + 9|0);
    $1007 = HEAP8[$1006>>0]|0;
    $1008 = ($1007<<24>>24)==(8);
    if (!($1008)) {
     $1095 = ($594|0)!=(0|0);
     $1096 = ($596|0)!=(0|0);
     $or$cond5$i = $1095 & $1096;
     $1097 = ($598|0)!=(0|0);
     $or$cond7$i = $or$cond5$i & $1097;
     $1098 = ($604|0)!=(0);
     if (!($or$cond7$i)) {
      if (!($1098)) {
       break L151;
      }
      $1206 = ((($0)) + 460|0);
      $$16839977$i = 0;$$21978$i = $586;
      while(1) {
       $1207 = ((($$21978$i)) + 2|0);
       $1208 = HEAP8[$1207>>0]|0;
       $1209 = $1208&255;
       $1210 = $1209 << 8;
       $1211 = ((($$21978$i)) + 3|0);
       $1212 = HEAP8[$1211>>0]|0;
       $1213 = $1212&255;
       $1214 = $1210 | $1213;
       $trunc899$i = $1214&65535;
       switch ($trunc899$i<<16>>16) {
       case 0:  {
        $1215 = HEAP16[$1206>>1]|0;
        $1216 = ($1215&65535) >>> 8;
        $1217 = $1216&255;
        HEAP8[$$21978$i>>0] = $1217;
        $1218 = $1215&255;
        $1219 = ((($$21978$i)) + 1|0);
        HEAP8[$1219>>0] = $1218;
        break;
       }
       case -1:  {
        break;
       }
       default: {
        $1220 = HEAP8[$$21978$i>>0]|0;
        $1221 = $1220&255;
        $1222 = $1221 << 8;
        $1223 = ((($$21978$i)) + 1|0);
        $1224 = HEAP8[$1223>>0]|0;
        $1225 = $1224&255;
        $1226 = $1222 | $1225;
        $1227 = Math_imul($1226, $1214)|0;
        $1228 = HEAP16[$1206>>1]|0;
        $1229 = $1228&65535;
        $1230 = $1214 ^ 65535;
        $1231 = Math_imul($1230, $1229)|0;
        $1232 = (($1231) + 32768)|0;
        $1233 = (($1232) + ($1227))|0;
        $1234 = $1233 >>> 16;
        $1235 = (($1234) + ($1233))|0;
        $1236 = $1235 >>> 16;
        $1237 = $1235 >>> 24;
        $1238 = $1237&255;
        HEAP8[$$21978$i>>0] = $1238;
        $1239 = $1236&255;
        HEAP8[$1223>>0] = $1239;
       }
       }
       $1240 = (($$16839977$i) + 1)|0;
       $1241 = ((($$21978$i)) + 4|0);
       $exitcond1033$i = ($1240|0)==($604|0);
       if ($exitcond1033$i) {
        break L151;
       } else {
        $$16839977$i = $1240;$$21978$i = $1241;
       }
      }
     }
     if (!($1098)) {
      break L151;
     }
     $1099 = ((($0)) + 470|0);
     $1100 = ((($0)) + 460|0);
     if ($603) {
      $$15838973$us$i = 0;$$20974$us$i = $586;
      while(1) {
       $1101 = ((($$20974$us$i)) + 2|0);
       $1102 = HEAP8[$1101>>0]|0;
       $1103 = $1102&255;
       $1104 = $1103 << 8;
       $1105 = ((($$20974$us$i)) + 3|0);
       $1106 = HEAP8[$1105>>0]|0;
       $1107 = $1106&255;
       $1108 = $1104 | $1107;
       $trunc900$us$i = $1108&65535;
       switch ($trunc900$us$i<<16>>16) {
       case -1:  {
        $1114 = ((($$20974$us$i)) + 1|0);
        $1115 = HEAP8[$1114>>0]|0;
        $1116 = $1115&255;
        $1117 = $1116 >>> $600;
        $1118 = (($594) + ($1117<<2)|0);
        $1119 = HEAP32[$1118>>2]|0;
        $1120 = HEAP8[$$20974$us$i>>0]|0;
        $1121 = $1120&255;
        $1122 = (($1119) + ($1121<<1)|0);
        $1123 = HEAP16[$1122>>1]|0;
        $1124 = ($1123&65535) >>> 8;
        $1125 = $1124&255;
        HEAP8[$$20974$us$i>>0] = $1125;
        $1126 = $1123&255;
        HEAP8[$1114>>0] = $1126;
        break;
       }
       case 0:  {
        $1109 = HEAP16[$1100>>1]|0;
        $1110 = ($1109&65535) >>> 8;
        $1111 = $1110&255;
        HEAP8[$$20974$us$i>>0] = $1111;
        $1112 = $1109&255;
        $1113 = ((($$20974$us$i)) + 1|0);
        HEAP8[$1113>>0] = $1112;
        break;
       }
       default: {
        $1127 = ((($$20974$us$i)) + 1|0);
        $1128 = HEAP8[$1127>>0]|0;
        $1129 = $1128&255;
        $1130 = $1129 >>> $600;
        $1131 = (($598) + ($1130<<2)|0);
        $1132 = HEAP32[$1131>>2]|0;
        $1133 = HEAP8[$$20974$us$i>>0]|0;
        $1134 = $1133&255;
        $1135 = (($1132) + ($1134<<1)|0);
        $1136 = HEAP16[$1135>>1]|0;
        $1137 = $1136&65535;
        $1138 = Math_imul($1108, $1137)|0;
        $1139 = HEAP16[$1099>>1]|0;
        $1140 = $1139&65535;
        $1141 = $1108 ^ 65535;
        $1142 = Math_imul($1141, $1140)|0;
        $1143 = (($1138) + 32768)|0;
        $1144 = (($1143) + ($1142))|0;
        $1145 = $1144 >>> 16;
        $1146 = (($1145) + ($1144))|0;
        $1147 = $1146 >>> 16;
        $1148 = $1147 & 255;
        $1149 = $1148 >>> $600;
        $1150 = (($596) + ($1149<<2)|0);
        $1151 = HEAP32[$1150>>2]|0;
        $1152 = $1146 >>> 24;
        $1153 = (($1151) + ($1152<<1)|0);
        $1154 = HEAP16[$1153>>1]|0;
        $extract$t892$us$i = $1154&255;
        $extract895$us$i = ($1154&65535) >>> 8;
        $extract$t896$us$i = $extract895$us$i&255;
        HEAP8[$$20974$us$i>>0] = $extract$t896$us$i;
        HEAP8[$1127>>0] = $extract$t892$us$i;
       }
       }
       $1155 = (($$15838973$us$i) + 1)|0;
       $1156 = ((($$20974$us$i)) + 4|0);
       $exitcond1031$i = ($1155|0)==($604|0);
       if ($exitcond1031$i) {
        break L151;
       } else {
        $$15838973$us$i = $1155;$$20974$us$i = $1156;
       }
      }
     } else {
      $$15838973$i = 0;$$20974$i = $586;
      while(1) {
       $1157 = ((($$20974$i)) + 2|0);
       $1158 = HEAP8[$1157>>0]|0;
       $1159 = $1158&255;
       $1160 = $1159 << 8;
       $1161 = ((($$20974$i)) + 3|0);
       $1162 = HEAP8[$1161>>0]|0;
       $1163 = $1162&255;
       $1164 = $1160 | $1163;
       $trunc900$i = $1164&65535;
       switch ($trunc900$i<<16>>16) {
       case -1:  {
        $1165 = ((($$20974$i)) + 1|0);
        $1166 = HEAP8[$1165>>0]|0;
        $1167 = $1166&255;
        $1168 = $1167 >>> $600;
        $1169 = (($594) + ($1168<<2)|0);
        $1170 = HEAP32[$1169>>2]|0;
        $1171 = HEAP8[$$20974$i>>0]|0;
        $1172 = $1171&255;
        $1173 = (($1170) + ($1172<<1)|0);
        $1174 = HEAP16[$1173>>1]|0;
        $1175 = ($1174&65535) >>> 8;
        $1176 = $1175&255;
        HEAP8[$$20974$i>>0] = $1176;
        $1177 = $1174&255;
        HEAP8[$1165>>0] = $1177;
        break;
       }
       case 0:  {
        $1178 = HEAP16[$1100>>1]|0;
        $1179 = ($1178&65535) >>> 8;
        $1180 = $1179&255;
        HEAP8[$$20974$i>>0] = $1180;
        $1181 = $1178&255;
        $1182 = ((($$20974$i)) + 1|0);
        HEAP8[$1182>>0] = $1181;
        break;
       }
       default: {
        $1183 = ((($$20974$i)) + 1|0);
        $1184 = HEAP8[$1183>>0]|0;
        $1185 = $1184&255;
        $1186 = $1185 >>> $600;
        $1187 = (($598) + ($1186<<2)|0);
        $1188 = HEAP32[$1187>>2]|0;
        $1189 = HEAP8[$$20974$i>>0]|0;
        $1190 = $1189&255;
        $1191 = (($1188) + ($1190<<1)|0);
        $1192 = HEAP16[$1191>>1]|0;
        $1193 = $1192&65535;
        $1194 = Math_imul($1164, $1193)|0;
        $1195 = HEAP16[$1099>>1]|0;
        $1196 = $1195&65535;
        $1197 = $1164 ^ 65535;
        $1198 = Math_imul($1197, $1196)|0;
        $1199 = (($1194) + 32768)|0;
        $1200 = (($1199) + ($1198))|0;
        $1201 = $1200 >>> 16;
        $1202 = (($1201) + ($1200))|0;
        $1203 = $1202 >>> 16;
        $extract$t891$i = $1203&255;
        $extract893897$i = $1202 >>> 24;
        $extract$t894$i = $extract893897$i&255;
        HEAP8[$$20974$i>>0] = $extract$t894$i;
        HEAP8[$1183>>0] = $extract$t891$i;
       }
       }
       $1204 = (($$15838973$i) + 1)|0;
       $1205 = ((($$20974$i)) + 4|0);
       $exitcond1032$i = ($1204|0)==($604|0);
       if ($exitcond1032$i) {
        break L151;
       } else {
        $$15838973$i = $1204;$$20974$i = $1205;
       }
      }
     }
    }
    $1009 = ($592|0)!=(0|0);
    $1010 = ($590|0)!=(0|0);
    $or$cond$i178 = $1010 & $1009;
    $1011 = ($588|0)!=(0|0);
    $or$cond3$i = $1011 & $or$cond$i178;
    $1012 = ($604|0)!=(0);
    if (!($or$cond3$i)) {
     if (!($1012)) {
      break L151;
     }
     $1073 = ((($0)) + 460|0);
     $$14837970$i = 0;$$19971$i = $586;
     while(1) {
      $1074 = ((($$19971$i)) + 1|0);
      $1075 = HEAP8[$1074>>0]|0;
      switch ($1075<<24>>24) {
      case 0:  {
       $1076 = HEAP16[$1073>>1]|0;
       $1077 = $1076&255;
       $$sink451 = $1077;
       label = 214;
       break;
      }
      case -1:  {
       break;
      }
      default: {
       $1078 = HEAP8[$$19971$i>>0]|0;
       $1079 = $1078&255;
       $1080 = $1075&255;
       $1081 = Math_imul($1079, $1080)|0;
       $1082 = HEAP16[$1073>>1]|0;
       $1083 = $1082&65535;
       $1084 = $1080 ^ 255;
       $1085 = Math_imul($1084, $1083)|0;
       $1086 = (($1081) + 128)|0;
       $1087 = (($1086) + ($1085))|0;
       $1088 = $1087 >>> 8;
       $1089 = $1088 & 255;
       $1090 = (($1089) + ($1087))|0;
       $1091 = $1090 >>> 8;
       $1092 = $1091&255;
       $$sink451 = $1092;
       label = 214;
      }
      }
      if ((label|0) == 214) {
       label = 0;
       HEAP8[$$19971$i>>0] = $$sink451;
      }
      $1093 = (($$14837970$i) + 1)|0;
      $1094 = ((($$19971$i)) + 2|0);
      $exitcond1030$i = ($1093|0)==($604|0);
      if ($exitcond1030$i) {
       break L151;
      } else {
       $$14837970$i = $1093;$$19971$i = $1094;
      }
     }
    }
    if (!($1012)) {
     break L151;
    }
    $1013 = ((($0)) + 470|0);
    $1014 = ((($0)) + 460|0);
    if ($603) {
     $$13836966$us$i = 0;$$18967$us$i = $586;
     while(1) {
      $1015 = ((($$18967$us$i)) + 1|0);
      $1016 = HEAP8[$1015>>0]|0;
      $1017 = $1016&255;
      switch ($1016<<24>>24) {
      case -1:  {
       $1020 = HEAP8[$$18967$us$i>>0]|0;
       $1021 = $1020&255;
       $1022 = (($588) + ($1021)|0);
       $1023 = HEAP8[$1022>>0]|0;
       $$sink448 = $1023;
       break;
      }
      case 0:  {
       $1018 = HEAP16[$1014>>1]|0;
       $1019 = $1018&255;
       $$sink448 = $1019;
       break;
      }
      default: {
       $1024 = HEAP8[$$18967$us$i>>0]|0;
       $1025 = $1024&255;
       $1026 = (($592) + ($1025)|0);
       $1027 = HEAP8[$1026>>0]|0;
       $1028 = $1027&255;
       $1029 = Math_imul($1028, $1017)|0;
       $1030 = HEAP16[$1013>>1]|0;
       $1031 = $1030&65535;
       $1032 = $1017 ^ 255;
       $1033 = Math_imul($1032, $1031)|0;
       $1034 = (($1029) + 128)|0;
       $1035 = (($1034) + ($1033))|0;
       $1036 = $1035 >>> 8;
       $1037 = $1036 & 255;
       $1038 = (($1037) + ($1035))|0;
       $1039 = $1038 >>> 8;
       $1040 = $1039 & 255;
       $1041 = (($590) + ($1040)|0);
       $1042 = HEAP8[$1041>>0]|0;
       $$sink448 = $1042;
      }
      }
      HEAP8[$$18967$us$i>>0] = $$sink448;
      $1043 = (($$13836966$us$i) + 1)|0;
      $1044 = ((($$18967$us$i)) + 2|0);
      $exitcond1028$i = ($1043|0)==($604|0);
      if ($exitcond1028$i) {
       break L151;
      } else {
       $$13836966$us$i = $1043;$$18967$us$i = $1044;
      }
     }
    } else {
     $$13836966$i = 0;$$18967$i = $586;
     while(1) {
      $1045 = ((($$18967$i)) + 1|0);
      $1046 = HEAP8[$1045>>0]|0;
      $1047 = $1046&255;
      switch ($1046<<24>>24) {
      case -1:  {
       $1048 = HEAP8[$$18967$i>>0]|0;
       $1049 = $1048&255;
       $1050 = (($588) + ($1049)|0);
       $1051 = HEAP8[$1050>>0]|0;
       $$sink449 = $1051;
       break;
      }
      case 0:  {
       $1052 = HEAP16[$1014>>1]|0;
       $1053 = $1052&255;
       $$sink449 = $1053;
       break;
      }
      default: {
       $1054 = HEAP8[$$18967$i>>0]|0;
       $1055 = $1054&255;
       $1056 = (($592) + ($1055)|0);
       $1057 = HEAP8[$1056>>0]|0;
       $1058 = $1057&255;
       $1059 = Math_imul($1058, $1047)|0;
       $1060 = HEAP16[$1013>>1]|0;
       $1061 = $1060&65535;
       $1062 = $1047 ^ 255;
       $1063 = Math_imul($1062, $1061)|0;
       $1064 = (($1059) + 128)|0;
       $1065 = (($1064) + ($1063))|0;
       $1066 = $1065 >>> 8;
       $1067 = $1066 & 255;
       $1068 = (($1067) + ($1065))|0;
       $1069 = $1068 >>> 8;
       $1070 = $1069&255;
       $$sink449 = $1070;
      }
      }
      HEAP8[$$18967$i>>0] = $$sink449;
      $1071 = (($$13836966$i) + 1)|0;
      $1072 = ((($$18967$i)) + 2|0);
      $exitcond1029$i = ($1071|0)==($604|0);
      if ($exitcond1029$i) {
       break L151;
      } else {
       $$13836966$i = $1071;$$18967$i = $1072;
      }
     }
    }
    break;
   }
   case 6:  {
    $1242 = ((($1)) + 9|0);
    $1243 = HEAP8[$1242>>0]|0;
    $1244 = ($1243<<24>>24)==(8);
    if (!($1244)) {
     $1475 = ($594|0)!=(0|0);
     $1476 = ($596|0)!=(0|0);
     $or$cond13$i = $1475 & $1476;
     $1477 = ($598|0)!=(0|0);
     $or$cond15$i = $or$cond13$i & $1477;
     $1478 = ($604|0)!=(0);
     if (!($or$cond15$i)) {
      if (!($1478)) {
       break L151;
      }
      $1634 = ((($0)) + 454|0);
      $1635 = ((($0)) + 456|0);
      $1636 = ((($0)) + 458|0);
      $$20843991$i = 0;$$25992$i = $586;
      while(1) {
       $1637 = ((($$25992$i)) + 6|0);
       $1638 = HEAP8[$1637>>0]|0;
       $1639 = $1638&255;
       $1640 = $1639 << 8;
       $1641 = ((($$25992$i)) + 7|0);
       $1642 = HEAP8[$1641>>0]|0;
       $1643 = $1642&255;
       $1644 = $1640 | $1643;
       $trunc$i = $1644&65535;
       switch ($trunc$i<<16>>16) {
       case 0:  {
        $1645 = HEAP16[$1634>>1]|0;
        $1646 = ($1645&65535) >>> 8;
        $1647 = $1646&255;
        HEAP8[$$25992$i>>0] = $1647;
        $1648 = $1645&255;
        $1649 = ((($$25992$i)) + 1|0);
        HEAP8[$1649>>0] = $1648;
        $1650 = HEAP16[$1635>>1]|0;
        $1651 = ($1650&65535) >>> 8;
        $1652 = $1651&255;
        $1653 = ((($$25992$i)) + 2|0);
        HEAP8[$1653>>0] = $1652;
        $1654 = $1650&255;
        $1655 = ((($$25992$i)) + 3|0);
        HEAP8[$1655>>0] = $1654;
        $1656 = HEAP16[$1636>>1]|0;
        $1657 = ($1656&65535) >>> 8;
        $1658 = $1657&255;
        $1659 = ((($$25992$i)) + 4|0);
        HEAP8[$1659>>0] = $1658;
        $1660 = $1656&255;
        $1661 = ((($$25992$i)) + 5|0);
        HEAP8[$1661>>0] = $1660;
        break;
       }
       case -1:  {
        break;
       }
       default: {
        $1662 = HEAP8[$$25992$i>>0]|0;
        $1663 = $1662&255;
        $1664 = $1663 << 8;
        $1665 = ((($$25992$i)) + 1|0);
        $1666 = HEAP8[$1665>>0]|0;
        $1667 = $1666&255;
        $1668 = $1664 | $1667;
        $1669 = ((($$25992$i)) + 2|0);
        $1670 = HEAP8[$1669>>0]|0;
        $1671 = $1670&255;
        $1672 = $1671 << 8;
        $1673 = ((($$25992$i)) + 3|0);
        $1674 = HEAP8[$1673>>0]|0;
        $1675 = $1674&255;
        $1676 = $1672 | $1675;
        $1677 = ((($$25992$i)) + 4|0);
        $1678 = HEAP8[$1677>>0]|0;
        $1679 = $1678&255;
        $1680 = $1679 << 8;
        $1681 = ((($$25992$i)) + 5|0);
        $1682 = HEAP8[$1681>>0]|0;
        $1683 = $1682&255;
        $1684 = $1680 | $1683;
        $1685 = Math_imul($1668, $1644)|0;
        $1686 = HEAP16[$1634>>1]|0;
        $1687 = $1686&65535;
        $1688 = $1644 ^ 65535;
        $1689 = Math_imul($1688, $1687)|0;
        $1690 = (($1685) + 32768)|0;
        $1691 = (($1690) + ($1689))|0;
        $1692 = $1691 >>> 16;
        $1693 = (($1692) + ($1691))|0;
        $1694 = $1693 >>> 16;
        $1695 = $1693 >>> 24;
        $1696 = $1695&255;
        HEAP8[$$25992$i>>0] = $1696;
        $1697 = $1694&255;
        HEAP8[$1665>>0] = $1697;
        $1698 = Math_imul($1676, $1644)|0;
        $1699 = HEAP16[$1635>>1]|0;
        $1700 = $1699&65535;
        $1701 = Math_imul($1688, $1700)|0;
        $1702 = (($1698) + 32768)|0;
        $1703 = (($1702) + ($1701))|0;
        $1704 = $1703 >>> 16;
        $1705 = (($1704) + ($1703))|0;
        $1706 = $1705 >>> 16;
        $1707 = $1705 >>> 24;
        $1708 = $1707&255;
        HEAP8[$1669>>0] = $1708;
        $1709 = $1706&255;
        HEAP8[$1673>>0] = $1709;
        $1710 = Math_imul($1684, $1644)|0;
        $1711 = HEAP16[$1636>>1]|0;
        $1712 = $1711&65535;
        $1713 = Math_imul($1688, $1712)|0;
        $1714 = (($1710) + 32768)|0;
        $1715 = (($1714) + ($1713))|0;
        $1716 = $1715 >>> 16;
        $1717 = (($1716) + ($1715))|0;
        $1718 = $1717 >>> 16;
        $1719 = $1717 >>> 24;
        $1720 = $1719&255;
        HEAP8[$1677>>0] = $1720;
        $1721 = $1718&255;
        HEAP8[$1681>>0] = $1721;
       }
       }
       $1722 = (($$20843991$i) + 1)|0;
       $1723 = ((($$25992$i)) + 8|0);
       $exitcond1037$i = ($1722|0)==($604|0);
       if ($exitcond1037$i) {
        break L151;
       } else {
        $$20843991$i = $1722;$$25992$i = $1723;
       }
      }
     }
     if (!($1478)) {
      break L151;
     }
     $1479 = ((($0)) + 464|0);
     $1480 = ((($0)) + 454|0);
     $1481 = ((($0)) + 456|0);
     $1482 = ((($0)) + 458|0);
     $1483 = ((($0)) + 466|0);
     $1484 = ((($0)) + 468|0);
     $$19842987$i = 0;$$24988$i = $586;
     while(1) {
      $1485 = ((($$24988$i)) + 6|0);
      $1486 = HEAP8[$1485>>0]|0;
      $1487 = $1486&255;
      $1488 = $1487 << 8;
      $1489 = ((($$24988$i)) + 7|0);
      $1490 = HEAP8[$1489>>0]|0;
      $1491 = $1490&255;
      $1492 = $1488 | $1491;
      $trunc898$i = $1492&65535;
      switch ($trunc898$i<<16>>16) {
      case -1:  {
       $1493 = ((($$24988$i)) + 1|0);
       $1494 = HEAP8[$1493>>0]|0;
       $1495 = $1494&255;
       $1496 = $1495 >>> $600;
       $1497 = (($594) + ($1496<<2)|0);
       $1498 = HEAP32[$1497>>2]|0;
       $1499 = HEAP8[$$24988$i>>0]|0;
       $1500 = $1499&255;
       $1501 = (($1498) + ($1500<<1)|0);
       $1502 = HEAP16[$1501>>1]|0;
       $1503 = ($1502&65535) >>> 8;
       $1504 = $1503&255;
       HEAP8[$$24988$i>>0] = $1504;
       $1505 = $1502&255;
       HEAP8[$1493>>0] = $1505;
       $1506 = ((($$24988$i)) + 3|0);
       $1507 = HEAP8[$1506>>0]|0;
       $1508 = $1507&255;
       $1509 = $1508 >>> $600;
       $1510 = (($594) + ($1509<<2)|0);
       $1511 = HEAP32[$1510>>2]|0;
       $1512 = ((($$24988$i)) + 2|0);
       $1513 = HEAP8[$1512>>0]|0;
       $1514 = $1513&255;
       $1515 = (($1511) + ($1514<<1)|0);
       $1516 = HEAP16[$1515>>1]|0;
       $1517 = ($1516&65535) >>> 8;
       $1518 = $1517&255;
       HEAP8[$1512>>0] = $1518;
       $1519 = $1516&255;
       HEAP8[$1506>>0] = $1519;
       $1520 = ((($$24988$i)) + 5|0);
       $1521 = HEAP8[$1520>>0]|0;
       $1522 = $1521&255;
       $1523 = $1522 >>> $600;
       $1524 = (($594) + ($1523<<2)|0);
       $1525 = HEAP32[$1524>>2]|0;
       $1526 = ((($$24988$i)) + 4|0);
       $1527 = HEAP8[$1526>>0]|0;
       $1528 = $1527&255;
       $1529 = (($1525) + ($1528<<1)|0);
       $1530 = HEAP16[$1529>>1]|0;
       $1531 = ($1530&65535) >>> 8;
       $1532 = $1531&255;
       HEAP8[$1526>>0] = $1532;
       $1533 = $1530&255;
       HEAP8[$1520>>0] = $1533;
       break;
      }
      case 0:  {
       $1534 = HEAP16[$1480>>1]|0;
       $1535 = ($1534&65535) >>> 8;
       $1536 = $1535&255;
       HEAP8[$$24988$i>>0] = $1536;
       $1537 = $1534&255;
       $1538 = ((($$24988$i)) + 1|0);
       HEAP8[$1538>>0] = $1537;
       $1539 = HEAP16[$1481>>1]|0;
       $1540 = ($1539&65535) >>> 8;
       $1541 = $1540&255;
       $1542 = ((($$24988$i)) + 2|0);
       HEAP8[$1542>>0] = $1541;
       $1543 = $1539&255;
       $1544 = ((($$24988$i)) + 3|0);
       HEAP8[$1544>>0] = $1543;
       $1545 = HEAP16[$1482>>1]|0;
       $1546 = ($1545&65535) >>> 8;
       $1547 = $1546&255;
       $1548 = ((($$24988$i)) + 4|0);
       HEAP8[$1548>>0] = $1547;
       $1549 = $1545&255;
       $1550 = ((($$24988$i)) + 5|0);
       HEAP8[$1550>>0] = $1549;
       break;
      }
      default: {
       $1551 = ((($$24988$i)) + 1|0);
       $1552 = HEAP8[$1551>>0]|0;
       $1553 = $1552&255;
       $1554 = $1553 >>> $600;
       $1555 = (($598) + ($1554<<2)|0);
       $1556 = HEAP32[$1555>>2]|0;
       $1557 = HEAP8[$$24988$i>>0]|0;
       $1558 = $1557&255;
       $1559 = (($1556) + ($1558<<1)|0);
       $1560 = HEAP16[$1559>>1]|0;
       $1561 = $1560&65535;
       $1562 = Math_imul($1492, $1561)|0;
       $1563 = HEAP16[$1479>>1]|0;
       $1564 = $1563&65535;
       $1565 = $1492 ^ 65535;
       $1566 = Math_imul($1565, $1564)|0;
       $1567 = (($1562) + 32768)|0;
       $1568 = (($1567) + ($1566))|0;
       $1569 = $1568 >>> 16;
       $1570 = (($1569) + ($1568))|0;
       $1571 = $1570 >>> 16;
       $extract$t872$i = $1571&255;
       $extract874876$i = $1570 >>> 24;
       $extract$t875$i = $extract874876$i&255;
       if ($603) {
        $1572 = $1571 & 255;
        $1573 = $1572 >>> $600;
        $1574 = (($596) + ($1573<<2)|0);
        $1575 = HEAP32[$1574>>2]|0;
        $1576 = (($1575) + ($extract874876$i<<1)|0);
        $1577 = HEAP16[$1576>>1]|0;
        $extract$t$i179 = $1577&255;
        $extract$i180 = ($1577&65535) >>> 8;
        $extract$t873$i = $extract$i180&255;
        $$0859$off0$i = $extract$t$i179;$$0859$off8$i = $extract$t873$i;
       } else {
        $$0859$off0$i = $extract$t872$i;$$0859$off8$i = $extract$t875$i;
       }
       HEAP8[$$24988$i>>0] = $$0859$off8$i;
       HEAP8[$1551>>0] = $$0859$off0$i;
       $1578 = ((($$24988$i)) + 3|0);
       $1579 = HEAP8[$1578>>0]|0;
       $1580 = $1579&255;
       $1581 = $1580 >>> $600;
       $1582 = (($598) + ($1581<<2)|0);
       $1583 = HEAP32[$1582>>2]|0;
       $1584 = ((($$24988$i)) + 2|0);
       $1585 = HEAP8[$1584>>0]|0;
       $1586 = $1585&255;
       $1587 = (($1583) + ($1586<<1)|0);
       $1588 = HEAP16[$1587>>1]|0;
       $1589 = $1588&65535;
       $1590 = Math_imul($1492, $1589)|0;
       $1591 = HEAP16[$1483>>1]|0;
       $1592 = $1591&65535;
       $1593 = Math_imul($1565, $1592)|0;
       $1594 = (($1590) + 32768)|0;
       $1595 = (($1594) + ($1593))|0;
       $1596 = $1595 >>> 16;
       $1597 = (($1596) + ($1595))|0;
       $1598 = $1597 >>> 16;
       $extract$t878$i = $1598&255;
       $extract881883$i = $1597 >>> 24;
       $extract$t882$i = $extract881883$i&255;
       if ($603) {
        $1599 = $1598 & 255;
        $1600 = $1599 >>> $600;
        $1601 = (($596) + ($1600<<2)|0);
        $1602 = HEAP32[$1601>>2]|0;
        $1603 = (($1602) + ($extract881883$i<<1)|0);
        $1604 = HEAP16[$1603>>1]|0;
        $extract$t877$i = $1604&255;
        $extract879$i = ($1604&65535) >>> 8;
        $extract$t880$i = $extract879$i&255;
        $$1860$off0$i = $extract$t877$i;$$1860$off8$i = $extract$t880$i;
       } else {
        $$1860$off0$i = $extract$t878$i;$$1860$off8$i = $extract$t882$i;
       }
       HEAP8[$1584>>0] = $$1860$off8$i;
       HEAP8[$1578>>0] = $$1860$off0$i;
       $1605 = ((($$24988$i)) + 5|0);
       $1606 = HEAP8[$1605>>0]|0;
       $1607 = $1606&255;
       $1608 = $1607 >>> $600;
       $1609 = (($598) + ($1608<<2)|0);
       $1610 = HEAP32[$1609>>2]|0;
       $1611 = ((($$24988$i)) + 4|0);
       $1612 = HEAP8[$1611>>0]|0;
       $1613 = $1612&255;
       $1614 = (($1610) + ($1613<<1)|0);
       $1615 = HEAP16[$1614>>1]|0;
       $1616 = $1615&65535;
       $1617 = Math_imul($1492, $1616)|0;
       $1618 = HEAP16[$1484>>1]|0;
       $1619 = $1618&65535;
       $1620 = Math_imul($1565, $1619)|0;
       $1621 = (($1617) + 32768)|0;
       $1622 = (($1621) + ($1620))|0;
       $1623 = $1622 >>> 16;
       $1624 = (($1623) + ($1622))|0;
       $1625 = $1624 >>> 16;
       $extract$t885$i = $1625&255;
       $extract888890$i = $1624 >>> 24;
       $extract$t889$i = $extract888890$i&255;
       if ($603) {
        $1626 = $1625 & 255;
        $1627 = $1626 >>> $600;
        $1628 = (($596) + ($1627<<2)|0);
        $1629 = HEAP32[$1628>>2]|0;
        $1630 = (($1629) + ($extract888890$i<<1)|0);
        $1631 = HEAP16[$1630>>1]|0;
        $extract$t884$i = $1631&255;
        $extract886$i = ($1631&65535) >>> 8;
        $extract$t887$i = $extract886$i&255;
        $$2861$off0$i = $extract$t884$i;$$2861$off8$i = $extract$t887$i;
       } else {
        $$2861$off0$i = $extract$t885$i;$$2861$off8$i = $extract$t889$i;
       }
       HEAP8[$1611>>0] = $$2861$off8$i;
       HEAP8[$1605>>0] = $$2861$off0$i;
      }
      }
      $1632 = (($$19842987$i) + 1)|0;
      $1633 = ((($$24988$i)) + 8|0);
      $exitcond1036$i = ($1632|0)==($604|0);
      if ($exitcond1036$i) {
       break L151;
      } else {
       $$19842987$i = $1632;$$24988$i = $1633;
      }
     }
    }
    $1245 = ($592|0)!=(0|0);
    $1246 = ($590|0)!=(0|0);
    $or$cond9$i = $1246 & $1245;
    $1247 = ($588|0)!=(0|0);
    $or$cond11$i = $1247 & $or$cond9$i;
    $1248 = ($604|0)!=(0);
    if (!($or$cond11$i)) {
     if (!($1248)) {
      break L151;
     }
     $1417 = ((($0)) + 454|0);
     $1418 = ((($0)) + 456|0);
     $1419 = ((($0)) + 458|0);
     $$18841984$i = 0;$$23985$i = $586;
     while(1) {
      $1420 = ((($$23985$i)) + 3|0);
      $1421 = HEAP8[$1420>>0]|0;
      switch ($1421<<24>>24) {
      case 0:  {
       $1422 = HEAP16[$1417>>1]|0;
       $1423 = $1422&255;
       HEAP8[$$23985$i>>0] = $1423;
       $1424 = HEAP16[$1418>>1]|0;
       $1425 = $1424&255;
       $1426 = ((($$23985$i)) + 1|0);
       HEAP8[$1426>>0] = $1425;
       $1427 = HEAP16[$1419>>1]|0;
       $1428 = $1427&255;
       $1429 = ((($$23985$i)) + 2|0);
       HEAP8[$1429>>0] = $1428;
       break;
      }
      case -1:  {
       break;
      }
      default: {
       $1430 = HEAP8[$$23985$i>>0]|0;
       $1431 = $1430&255;
       $1432 = $1421&255;
       $1433 = Math_imul($1431, $1432)|0;
       $1434 = HEAP16[$1417>>1]|0;
       $1435 = $1434&65535;
       $1436 = $1432 ^ 255;
       $1437 = Math_imul($1436, $1435)|0;
       $1438 = (($1433) + 128)|0;
       $1439 = (($1438) + ($1437))|0;
       $1440 = $1439 >>> 8;
       $1441 = $1440 & 255;
       $1442 = (($1441) + ($1439))|0;
       $1443 = $1442 >>> 8;
       $1444 = $1443&255;
       HEAP8[$$23985$i>>0] = $1444;
       $1445 = ((($$23985$i)) + 1|0);
       $1446 = HEAP8[$1445>>0]|0;
       $1447 = $1446&255;
       $1448 = Math_imul($1447, $1432)|0;
       $1449 = HEAP16[$1418>>1]|0;
       $1450 = $1449&65535;
       $1451 = Math_imul($1436, $1450)|0;
       $1452 = (($1448) + 128)|0;
       $1453 = (($1452) + ($1451))|0;
       $1454 = $1453 >>> 8;
       $1455 = $1454 & 255;
       $1456 = (($1455) + ($1453))|0;
       $1457 = $1456 >>> 8;
       $1458 = $1457&255;
       HEAP8[$1445>>0] = $1458;
       $1459 = ((($$23985$i)) + 2|0);
       $1460 = HEAP8[$1459>>0]|0;
       $1461 = $1460&255;
       $1462 = Math_imul($1461, $1432)|0;
       $1463 = HEAP16[$1419>>1]|0;
       $1464 = $1463&65535;
       $1465 = Math_imul($1436, $1464)|0;
       $1466 = (($1462) + 128)|0;
       $1467 = (($1466) + ($1465))|0;
       $1468 = $1467 >>> 8;
       $1469 = $1468 & 255;
       $1470 = (($1469) + ($1467))|0;
       $1471 = $1470 >>> 8;
       $1472 = $1471&255;
       HEAP8[$1459>>0] = $1472;
      }
      }
      $1473 = (($$18841984$i) + 1)|0;
      $1474 = ((($$23985$i)) + 4|0);
      $exitcond1035$i = ($1473|0)==($604|0);
      if ($exitcond1035$i) {
       break L151;
      } else {
       $$18841984$i = $1473;$$23985$i = $1474;
      }
     }
    }
    if (!($1248)) {
     break L151;
    }
    $1249 = ((($0)) + 464|0);
    $1250 = ((($0)) + 454|0);
    $1251 = ((($0)) + 456|0);
    $1252 = ((($0)) + 458|0);
    $1253 = ((($0)) + 466|0);
    $1254 = ((($0)) + 468|0);
    if ($603) {
     $$17840980$i$us = 0;$$22981$i$us = $586;
     while(1) {
      $1255 = ((($$22981$i$us)) + 3|0);
      $1256 = HEAP8[$1255>>0]|0;
      switch ($1256<<24>>24) {
      case -1:  {
       $1265 = HEAP8[$$22981$i$us>>0]|0;
       $1266 = $1265&255;
       $1267 = (($588) + ($1266)|0);
       $1268 = HEAP8[$1267>>0]|0;
       HEAP8[$$22981$i$us>>0] = $1268;
       $1269 = ((($$22981$i$us)) + 1|0);
       $1270 = HEAP8[$1269>>0]|0;
       $1271 = $1270&255;
       $1272 = (($588) + ($1271)|0);
       $1273 = HEAP8[$1272>>0]|0;
       HEAP8[$1269>>0] = $1273;
       $1274 = ((($$22981$i$us)) + 2|0);
       $1275 = HEAP8[$1274>>0]|0;
       $1276 = $1275&255;
       $1277 = (($588) + ($1276)|0);
       $1278 = HEAP8[$1277>>0]|0;
       HEAP8[$1274>>0] = $1278;
       break;
      }
      case 0:  {
       $1257 = HEAP16[$1250>>1]|0;
       $1258 = $1257&255;
       HEAP8[$$22981$i$us>>0] = $1258;
       $1259 = HEAP16[$1251>>1]|0;
       $1260 = $1259&255;
       $1261 = ((($$22981$i$us)) + 1|0);
       HEAP8[$1261>>0] = $1260;
       $1262 = HEAP16[$1252>>1]|0;
       $1263 = $1262&255;
       $1264 = ((($$22981$i$us)) + 2|0);
       HEAP8[$1264>>0] = $1263;
       break;
      }
      default: {
       $1279 = HEAP8[$$22981$i$us>>0]|0;
       $1280 = $1279&255;
       $1281 = (($592) + ($1280)|0);
       $1282 = HEAP8[$1281>>0]|0;
       $1283 = $1282&255;
       $1284 = $1256&255;
       $1285 = Math_imul($1283, $1284)|0;
       $1286 = HEAP16[$1249>>1]|0;
       $1287 = $1286&65535;
       $1288 = $1284 ^ 255;
       $1289 = Math_imul($1288, $1287)|0;
       $1290 = (($1285) + 128)|0;
       $1291 = (($1290) + ($1289))|0;
       $1292 = $1291 >>> 8;
       $1293 = $1292 & 255;
       $1294 = (($1293) + ($1291))|0;
       $1295 = $1294 >>> 8;
       $1296 = $1295 & 255;
       $1297 = (($590) + ($1296)|0);
       $1298 = HEAP8[$1297>>0]|0;
       HEAP8[$$22981$i$us>>0] = $1298;
       $1299 = ((($$22981$i$us)) + 1|0);
       $1300 = HEAP8[$1299>>0]|0;
       $1301 = $1300&255;
       $1302 = (($592) + ($1301)|0);
       $1303 = HEAP8[$1302>>0]|0;
       $1304 = $1303&255;
       $1305 = Math_imul($1304, $1284)|0;
       $1306 = HEAP16[$1253>>1]|0;
       $1307 = $1306&65535;
       $1308 = Math_imul($1288, $1307)|0;
       $1309 = (($1305) + 128)|0;
       $1310 = (($1309) + ($1308))|0;
       $1311 = $1310 >>> 8;
       $1312 = $1311 & 255;
       $1313 = (($1312) + ($1310))|0;
       $1314 = $1313 >>> 8;
       $1315 = $1314 & 255;
       $1316 = (($590) + ($1315)|0);
       $1317 = HEAP8[$1316>>0]|0;
       HEAP8[$1299>>0] = $1317;
       $1318 = ((($$22981$i$us)) + 2|0);
       $1319 = HEAP8[$1318>>0]|0;
       $1320 = $1319&255;
       $1321 = (($592) + ($1320)|0);
       $1322 = HEAP8[$1321>>0]|0;
       $1323 = $1322&255;
       $1324 = Math_imul($1323, $1284)|0;
       $1325 = HEAP16[$1254>>1]|0;
       $1326 = $1325&65535;
       $1327 = Math_imul($1288, $1326)|0;
       $1328 = (($1324) + 128)|0;
       $1329 = (($1328) + ($1327))|0;
       $1330 = $1329 >>> 8;
       $1331 = $1330 & 255;
       $1332 = (($1331) + ($1329))|0;
       $1333 = $1332 >>> 8;
       $1334 = $1333 & 255;
       $1335 = (($590) + ($1334)|0);
       $1336 = HEAP8[$1335>>0]|0;
       HEAP8[$1318>>0] = $1336;
      }
      }
      $1337 = (($$17840980$i$us) + 1)|0;
      $1338 = ((($$22981$i$us)) + 4|0);
      $exitcond1034$i$us = ($1337|0)==($604|0);
      if ($exitcond1034$i$us) {
       break L151;
      } else {
       $$17840980$i$us = $1337;$$22981$i$us = $1338;
      }
     }
    } else {
     $$17840980$i = 0;$$22981$i = $586;
     while(1) {
      $1339 = ((($$22981$i)) + 3|0);
      $1340 = HEAP8[$1339>>0]|0;
      switch ($1340<<24>>24) {
      case -1:  {
       $1341 = HEAP8[$$22981$i>>0]|0;
       $1342 = $1341&255;
       $1343 = (($588) + ($1342)|0);
       $1344 = HEAP8[$1343>>0]|0;
       HEAP8[$$22981$i>>0] = $1344;
       $1345 = ((($$22981$i)) + 1|0);
       $1346 = HEAP8[$1345>>0]|0;
       $1347 = $1346&255;
       $1348 = (($588) + ($1347)|0);
       $1349 = HEAP8[$1348>>0]|0;
       HEAP8[$1345>>0] = $1349;
       $1350 = ((($$22981$i)) + 2|0);
       $1351 = HEAP8[$1350>>0]|0;
       $1352 = $1351&255;
       $1353 = (($588) + ($1352)|0);
       $1354 = HEAP8[$1353>>0]|0;
       HEAP8[$1350>>0] = $1354;
       break;
      }
      case 0:  {
       $1355 = HEAP16[$1250>>1]|0;
       $1356 = $1355&255;
       HEAP8[$$22981$i>>0] = $1356;
       $1357 = HEAP16[$1251>>1]|0;
       $1358 = $1357&255;
       $1359 = ((($$22981$i)) + 1|0);
       HEAP8[$1359>>0] = $1358;
       $1360 = HEAP16[$1252>>1]|0;
       $1361 = $1360&255;
       $1362 = ((($$22981$i)) + 2|0);
       HEAP8[$1362>>0] = $1361;
       break;
      }
      default: {
       $1363 = HEAP8[$$22981$i>>0]|0;
       $1364 = $1363&255;
       $1365 = (($592) + ($1364)|0);
       $1366 = HEAP8[$1365>>0]|0;
       $1367 = $1366&255;
       $1368 = $1340&255;
       $1369 = Math_imul($1367, $1368)|0;
       $1370 = HEAP16[$1249>>1]|0;
       $1371 = $1370&65535;
       $1372 = $1368 ^ 255;
       $1373 = Math_imul($1372, $1371)|0;
       $1374 = (($1369) + 128)|0;
       $1375 = (($1374) + ($1373))|0;
       $1376 = $1375 >>> 8;
       $1377 = $1376 & 255;
       $1378 = (($1377) + ($1375))|0;
       $1379 = $1378 >>> 8;
       $1380 = $1379&255;
       HEAP8[$$22981$i>>0] = $1380;
       $1381 = ((($$22981$i)) + 1|0);
       $1382 = HEAP8[$1381>>0]|0;
       $1383 = $1382&255;
       $1384 = (($592) + ($1383)|0);
       $1385 = HEAP8[$1384>>0]|0;
       $1386 = $1385&255;
       $1387 = Math_imul($1386, $1368)|0;
       $1388 = HEAP16[$1253>>1]|0;
       $1389 = $1388&65535;
       $1390 = Math_imul($1372, $1389)|0;
       $1391 = (($1387) + 128)|0;
       $1392 = (($1391) + ($1390))|0;
       $1393 = $1392 >>> 8;
       $1394 = $1393 & 255;
       $1395 = (($1394) + ($1392))|0;
       $1396 = $1395 >>> 8;
       $1397 = $1396&255;
       HEAP8[$1381>>0] = $1397;
       $1398 = ((($$22981$i)) + 2|0);
       $1399 = HEAP8[$1398>>0]|0;
       $1400 = $1399&255;
       $1401 = (($592) + ($1400)|0);
       $1402 = HEAP8[$1401>>0]|0;
       $1403 = $1402&255;
       $1404 = Math_imul($1403, $1368)|0;
       $1405 = HEAP16[$1254>>1]|0;
       $1406 = $1405&65535;
       $1407 = Math_imul($1372, $1406)|0;
       $1408 = (($1404) + 128)|0;
       $1409 = (($1408) + ($1407))|0;
       $1410 = $1409 >>> 8;
       $1411 = $1410 & 255;
       $1412 = (($1411) + ($1409))|0;
       $1413 = $1412 >>> 8;
       $1414 = $1413&255;
       HEAP8[$1398>>0] = $1414;
      }
      }
      $1415 = (($$17840980$i) + 1)|0;
      $1416 = ((($$22981$i)) + 4|0);
      $exitcond1034$i = ($1415|0)==($604|0);
      if ($exitcond1034$i) {
       break L151;
      } else {
       $$17840980$i = $1415;$$22981$i = $1416;
      }
     }
    }
    break;
   }
   default: {
    break L151;
   }
   }
  }
 } while(0);
 $1724 = HEAP32[$10>>2]|0;
 $1725 = $1724 & 6299648;
 $1726 = ($1725|0)==(8192);
 L399: do {
  if ($1726) {
   $1727 = $1724 & 128;
   $1728 = ($1727|0)==(0);
   if ($1728) {
    $$phi$trans$insert = ((($0)) + 435|0);
    $$pre316 = HEAP8[$$phi$trans$insert>>0]|0;
    $1736 = $$pre316;
   } else {
    $1729 = ((($0)) + 428|0);
    $1730 = HEAP16[$1729>>1]|0;
    $1731 = ($1730<<16>>16)==(0);
    if (!($1731)) {
     break;
    }
    $1732 = ((($0)) + 435|0);
    $1733 = HEAP8[$1732>>0]|0;
    $1734 = $1733 & 4;
    $1735 = ($1734<<24>>24)==(0);
    if ($1735) {
     $1736 = $1733;
    } else {
     break;
    }
   }
   $1737 = ($1736<<24>>24)==(3);
   if (!($1737)) {
    $1738 = HEAP32[$3>>2]|0;
    $1739 = ((($1738)) + 1|0);
    $$idx = ((($0)) + 484|0);
    $$idx$val = HEAP32[$$idx>>2]|0;
    $$idx144 = ((($0)) + 492|0);
    $$idx144$val = HEAP32[$$idx144>>2]|0;
    $$idx145 = ((($0)) + 496|0);
    $$idx145$val = HEAP32[$$idx145>>2]|0;
    $1740 = HEAP32[$1>>2]|0;
    $1741 = ((($1)) + 9|0);
    $1742 = HEAP8[$1741>>0]|0;
    $1743 = ($1742&255)<(9);
    $1744 = ($$idx144$val|0)!=(0|0);
    $or$cond$i199 = $1744 & $1743;
    if (!($or$cond$i199)) {
     $1745 = ($1742<<24>>24)==(16);
     $1746 = ($$idx145$val|0)!=(0|0);
     $or$cond3$i200 = $1746 & $1745;
     if (!($or$cond3$i200)) {
      break;
     }
    }
    $1747 = ((($1)) + 8|0);
    $1748 = HEAP8[$1747>>0]|0;
    switch ($1748<<24>>24) {
    case 2:  {
     $1749 = ($1742<<24>>24)==(8);
     $1750 = ($1740|0)!=(0);
     if ($1749) {
      if (!($1750)) {
       break L399;
      }
      $$011$i = $1739;$$022710$i = 0;
      while(1) {
       $1751 = HEAP8[$$011$i>>0]|0;
       $1752 = $1751&255;
       $1753 = (($$idx144$val) + ($1752)|0);
       $1754 = HEAP8[$1753>>0]|0;
       HEAP8[$$011$i>>0] = $1754;
       $1755 = ((($$011$i)) + 1|0);
       $1756 = HEAP8[$1755>>0]|0;
       $1757 = $1756&255;
       $1758 = (($$idx144$val) + ($1757)|0);
       $1759 = HEAP8[$1758>>0]|0;
       HEAP8[$1755>>0] = $1759;
       $1760 = ((($$011$i)) + 2|0);
       $1761 = HEAP8[$1760>>0]|0;
       $1762 = $1761&255;
       $1763 = (($$idx144$val) + ($1762)|0);
       $1764 = HEAP8[$1763>>0]|0;
       HEAP8[$1760>>0] = $1764;
       $1765 = ((($$011$i)) + 3|0);
       $1766 = (($$022710$i) + 1)|0;
       $exitcond$i202 = ($1766|0)==($1740|0);
       if ($exitcond$i202) {
        break;
       } else {
        $$011$i = $1765;$$022710$i = $1766;
       }
      }
     } else {
      if (!($1750)) {
       break L399;
      }
      $$113$i = $1739;$$122812$i = 0;
      while(1) {
       $1767 = ((($$113$i)) + 1|0);
       $1768 = HEAP8[$1767>>0]|0;
       $1769 = $1768&255;
       $1770 = $1769 >>> $$idx$val;
       $1771 = (($$idx145$val) + ($1770<<2)|0);
       $1772 = HEAP32[$1771>>2]|0;
       $1773 = HEAP8[$$113$i>>0]|0;
       $1774 = $1773&255;
       $1775 = (($1772) + ($1774<<1)|0);
       $1776 = HEAP16[$1775>>1]|0;
       $1777 = ($1776&65535) >>> 8;
       $1778 = $1777&255;
       HEAP8[$$113$i>>0] = $1778;
       $1779 = $1776&255;
       HEAP8[$1767>>0] = $1779;
       $1780 = ((($$113$i)) + 2|0);
       $1781 = ((($$113$i)) + 3|0);
       $1782 = HEAP8[$1781>>0]|0;
       $1783 = $1782&255;
       $1784 = $1783 >>> $$idx$val;
       $1785 = (($$idx145$val) + ($1784<<2)|0);
       $1786 = HEAP32[$1785>>2]|0;
       $1787 = HEAP8[$1780>>0]|0;
       $1788 = $1787&255;
       $1789 = (($1786) + ($1788<<1)|0);
       $1790 = HEAP16[$1789>>1]|0;
       $1791 = ($1790&65535) >>> 8;
       $1792 = $1791&255;
       HEAP8[$1780>>0] = $1792;
       $1793 = $1790&255;
       HEAP8[$1781>>0] = $1793;
       $1794 = ((($$113$i)) + 4|0);
       $1795 = ((($$113$i)) + 5|0);
       $1796 = HEAP8[$1795>>0]|0;
       $1797 = $1796&255;
       $1798 = $1797 >>> $$idx$val;
       $1799 = (($$idx145$val) + ($1798<<2)|0);
       $1800 = HEAP32[$1799>>2]|0;
       $1801 = HEAP8[$1794>>0]|0;
       $1802 = $1801&255;
       $1803 = (($1800) + ($1802<<1)|0);
       $1804 = HEAP16[$1803>>1]|0;
       $1805 = ($1804&65535) >>> 8;
       $1806 = $1805&255;
       HEAP8[$1794>>0] = $1806;
       $1807 = $1804&255;
       HEAP8[$1795>>0] = $1807;
       $1808 = ((($$113$i)) + 6|0);
       $1809 = (($$122812$i) + 1)|0;
       $exitcond48$i = ($1809|0)==($1740|0);
       if ($exitcond48$i) {
        break;
       } else {
        $$113$i = $1808;$$122812$i = $1809;
       }
      }
     }
     break;
    }
    case 6:  {
     $1810 = ($1742<<24>>24)==(8);
     $1811 = ($1740|0)!=(0);
     if ($1810) {
      if (!($1811)) {
       break L399;
      }
      $$216$i = $1739;$$222915$i = 0;
      while(1) {
       $1812 = HEAP8[$$216$i>>0]|0;
       $1813 = $1812&255;
       $1814 = (($$idx144$val) + ($1813)|0);
       $1815 = HEAP8[$1814>>0]|0;
       HEAP8[$$216$i>>0] = $1815;
       $1816 = ((($$216$i)) + 1|0);
       $1817 = HEAP8[$1816>>0]|0;
       $1818 = $1817&255;
       $1819 = (($$idx144$val) + ($1818)|0);
       $1820 = HEAP8[$1819>>0]|0;
       HEAP8[$1816>>0] = $1820;
       $1821 = ((($$216$i)) + 2|0);
       $1822 = HEAP8[$1821>>0]|0;
       $1823 = $1822&255;
       $1824 = (($$idx144$val) + ($1823)|0);
       $1825 = HEAP8[$1824>>0]|0;
       HEAP8[$1821>>0] = $1825;
       $1826 = ((($$216$i)) + 4|0);
       $1827 = (($$222915$i) + 1)|0;
       $exitcond49$i = ($1827|0)==($1740|0);
       if ($exitcond49$i) {
        break;
       } else {
        $$216$i = $1826;$$222915$i = $1827;
       }
      }
     } else {
      if (!($1811)) {
       break L399;
      }
      $$319$i = $1739;$$323018$i = 0;
      while(1) {
       $1828 = ((($$319$i)) + 1|0);
       $1829 = HEAP8[$1828>>0]|0;
       $1830 = $1829&255;
       $1831 = $1830 >>> $$idx$val;
       $1832 = (($$idx145$val) + ($1831<<2)|0);
       $1833 = HEAP32[$1832>>2]|0;
       $1834 = HEAP8[$$319$i>>0]|0;
       $1835 = $1834&255;
       $1836 = (($1833) + ($1835<<1)|0);
       $1837 = HEAP16[$1836>>1]|0;
       $1838 = ($1837&65535) >>> 8;
       $1839 = $1838&255;
       HEAP8[$$319$i>>0] = $1839;
       $1840 = $1837&255;
       HEAP8[$1828>>0] = $1840;
       $1841 = ((($$319$i)) + 2|0);
       $1842 = ((($$319$i)) + 3|0);
       $1843 = HEAP8[$1842>>0]|0;
       $1844 = $1843&255;
       $1845 = $1844 >>> $$idx$val;
       $1846 = (($$idx145$val) + ($1845<<2)|0);
       $1847 = HEAP32[$1846>>2]|0;
       $1848 = HEAP8[$1841>>0]|0;
       $1849 = $1848&255;
       $1850 = (($1847) + ($1849<<1)|0);
       $1851 = HEAP16[$1850>>1]|0;
       $1852 = ($1851&65535) >>> 8;
       $1853 = $1852&255;
       HEAP8[$1841>>0] = $1853;
       $1854 = $1851&255;
       HEAP8[$1842>>0] = $1854;
       $1855 = ((($$319$i)) + 4|0);
       $1856 = ((($$319$i)) + 5|0);
       $1857 = HEAP8[$1856>>0]|0;
       $1858 = $1857&255;
       $1859 = $1858 >>> $$idx$val;
       $1860 = (($$idx145$val) + ($1859<<2)|0);
       $1861 = HEAP32[$1860>>2]|0;
       $1862 = HEAP8[$1855>>0]|0;
       $1863 = $1862&255;
       $1864 = (($1861) + ($1863<<1)|0);
       $1865 = HEAP16[$1864>>1]|0;
       $1866 = ($1865&65535) >>> 8;
       $1867 = $1866&255;
       HEAP8[$1855>>0] = $1867;
       $1868 = $1865&255;
       HEAP8[$1856>>0] = $1868;
       $1869 = ((($$319$i)) + 8|0);
       $1870 = (($$323018$i) + 1)|0;
       $exitcond50$i = ($1870|0)==($1740|0);
       if ($exitcond50$i) {
        break;
       } else {
        $$319$i = $1869;$$323018$i = $1870;
       }
      }
     }
     break;
    }
    case 4:  {
     $1871 = ($1742<<24>>24)==(8);
     $1872 = ($1740|0)!=(0);
     if ($1871) {
      if (!($1872)) {
       break L399;
      }
      $$422$i = $1739;$$423121$i = 0;
      while(1) {
       $1873 = HEAP8[$$422$i>>0]|0;
       $1874 = $1873&255;
       $1875 = (($$idx144$val) + ($1874)|0);
       $1876 = HEAP8[$1875>>0]|0;
       HEAP8[$$422$i>>0] = $1876;
       $1877 = ((($$422$i)) + 2|0);
       $1878 = (($$423121$i) + 1)|0;
       $exitcond51$i = ($1878|0)==($1740|0);
       if ($exitcond51$i) {
        break;
       } else {
        $$422$i = $1877;$$423121$i = $1878;
       }
      }
     } else {
      if (!($1872)) {
       break L399;
      }
      $$523224$i = 0;$$525$i = $1739;
      while(1) {
       $1879 = ((($$525$i)) + 1|0);
       $1880 = HEAP8[$1879>>0]|0;
       $1881 = $1880&255;
       $1882 = $1881 >>> $$idx$val;
       $1883 = (($$idx145$val) + ($1882<<2)|0);
       $1884 = HEAP32[$1883>>2]|0;
       $1885 = HEAP8[$$525$i>>0]|0;
       $1886 = $1885&255;
       $1887 = (($1884) + ($1886<<1)|0);
       $1888 = HEAP16[$1887>>1]|0;
       $1889 = ($1888&65535) >>> 8;
       $1890 = $1889&255;
       HEAP8[$$525$i>>0] = $1890;
       $1891 = $1888&255;
       HEAP8[$1879>>0] = $1891;
       $1892 = ((($$525$i)) + 4|0);
       $1893 = (($$523224$i) + 1)|0;
       $exitcond52$i = ($1893|0)==($1740|0);
       if ($exitcond52$i) {
        break;
       } else {
        $$523224$i = $1893;$$525$i = $1892;
       }
      }
     }
     break;
    }
    case 0:  {
     $1894 = ($1742<<24>>24)==(2);
     $1895 = ($1740|0)!=(0);
     $or$cond39$i = $1895 & $1894;
     if ($or$cond39$i) {
      $$623336$i = 0;$$637$i = $1739;
      while(1) {
       $1896 = HEAP8[$$637$i>>0]|0;
       $1897 = $1896&255;
       $1898 = $1897 & 192;
       $1899 = $1897 & 48;
       $1900 = $1897 & 12;
       $1901 = $1897 & 3;
       $1902 = $1898 >>> 2;
       $1903 = $1898 >>> 4;
       $1904 = $1897 >>> 6;
       $1905 = $1904 | $1898;
       $1906 = $1905 | $1902;
       $1907 = $1906 | $1903;
       $1908 = (($$idx144$val) + ($1907)|0);
       $1909 = HEAP8[$1908>>0]|0;
       $1910 = $1909 & -64;
       $1911 = $1910&255;
       $1912 = $1899 << 2;
       $1913 = $1912 | $1899;
       $1914 = $1899 >>> 2;
       $1915 = $1913 | $1914;
       $1916 = $1899 >>> 4;
       $1917 = $1915 | $1916;
       $1918 = (($$idx144$val) + ($1917)|0);
       $1919 = HEAP8[$1918>>0]|0;
       $1920 = $1919&255;
       $1921 = $1920 >>> 2;
       $1922 = $1921 & 48;
       $1923 = $1922 | $1911;
       $1924 = $1900 << 4;
       $1925 = $1900 << 2;
       $1926 = $1900 >>> 2;
       $1927 = $1925 | $1900;
       $1928 = $1927 | $1924;
       $1929 = $1928 | $1926;
       $1930 = (($$idx144$val) + ($1929)|0);
       $1931 = HEAP8[$1930>>0]|0;
       $1932 = $1931&255;
       $1933 = $1932 >>> 4;
       $1934 = $1933 & 12;
       $1935 = $1923 | $1934;
       $1936 = $1901 << 6;
       $1937 = $1901 << 4;
       $1938 = $1901 << 2;
       $1939 = $1937 | $1901;
       $1940 = $1939 | $1936;
       $1941 = $1940 | $1938;
       $1942 = (($$idx144$val) + ($1941)|0);
       $1943 = HEAP8[$1942>>0]|0;
       $1944 = $1943&255;
       $1945 = $1944 >>> 6;
       $1946 = $1935 | $1945;
       $1947 = $1946&255;
       HEAP8[$$637$i>>0] = $1947;
       $1948 = ((($$637$i)) + 1|0);
       $1949 = (($$623336$i) + 4)|0;
       $1950 = ($1949>>>0)<($1740>>>0);
       if ($1950) {
        $$623336$i = $1949;$$637$i = $1948;
       } else {
        break;
       }
      }
      $$pre$i203 = HEAP8[$1741>>0]|0;
      $1951 = $$pre$i203;
     } else {
      $1951 = $1742;
     }
     switch ($1951<<24>>24) {
     case 4:  {
      $1952 = ($1740|0)==(0);
      if ($1952) {
       break L399;
      }
      $$723427$i = 0;$$728$i = $1739;
      while(1) {
       $1953 = HEAP8[$$728$i>>0]|0;
       $1954 = $1953&255;
       $1955 = $1954 & 240;
       $1956 = $1954 & 15;
       $1957 = $1954 >>> 4;
       $1958 = $1955 | $1957;
       $1959 = (($$idx144$val) + ($1958)|0);
       $1960 = HEAP8[$1959>>0]|0;
       $1961 = $1960 & -16;
       $1962 = $1961&255;
       $1963 = $1956 << 4;
       $1964 = $1963 | $1956;
       $1965 = (($$idx144$val) + ($1964)|0);
       $1966 = HEAP8[$1965>>0]|0;
       $1967 = $1966&255;
       $1968 = $1967 >>> 4;
       $1969 = $1968 | $1962;
       $1970 = $1969&255;
       HEAP8[$$728$i>>0] = $1970;
       $1971 = ((($$728$i)) + 1|0);
       $1972 = (($$723427$i) + 2)|0;
       $1973 = ($1972>>>0)<($1740>>>0);
       if ($1973) {
        $$723427$i = $1972;$$728$i = $1971;
       } else {
        break;
       }
      }
      break;
     }
     case 8:  {
      $1974 = ($1740|0)==(0);
      if ($1974) {
       break L399;
      }
      $$823530$i = 0;$$831$i = $1739;
      while(1) {
       $1975 = HEAP8[$$831$i>>0]|0;
       $1976 = $1975&255;
       $1977 = (($$idx144$val) + ($1976)|0);
       $1978 = HEAP8[$1977>>0]|0;
       HEAP8[$$831$i>>0] = $1978;
       $1979 = ((($$831$i)) + 1|0);
       $1980 = (($$823530$i) + 1)|0;
       $exitcond53$i = ($1980|0)==($1740|0);
       if ($exitcond53$i) {
        break;
       } else {
        $$823530$i = $1980;$$831$i = $1979;
       }
      }
      break;
     }
     case 16:  {
      $1981 = ($1740|0)==(0);
      if ($1981) {
       break L399;
      }
      $$923633$i = 0;$$934$i = $1739;
      while(1) {
       $1982 = ((($$934$i)) + 1|0);
       $1983 = HEAP8[$1982>>0]|0;
       $1984 = $1983&255;
       $1985 = $1984 >>> $$idx$val;
       $1986 = (($$idx145$val) + ($1985<<2)|0);
       $1987 = HEAP32[$1986>>2]|0;
       $1988 = HEAP8[$$934$i>>0]|0;
       $1989 = $1988&255;
       $1990 = (($1987) + ($1989<<1)|0);
       $1991 = HEAP16[$1990>>1]|0;
       $1992 = ($1991&65535) >>> 8;
       $1993 = $1992&255;
       HEAP8[$$934$i>>0] = $1993;
       $1994 = $1991&255;
       HEAP8[$1982>>0] = $1994;
       $1995 = ((($$934$i)) + 2|0);
       $1996 = (($$923633$i) + 1)|0;
       $exitcond54$i = ($1996|0)==($1740|0);
       if ($exitcond54$i) {
        break;
       } else {
        $$923633$i = $1996;$$934$i = $1995;
       }
      }
      break;
     }
     default: {
      break L399;
     }
     }
     break;
    }
    default: {
     break L399;
    }
    }
   }
  }
 } while(0);
 $1997 = HEAP32[$10>>2]|0;
 $1998 = $1997 & 262272;
 $1999 = ($1998|0)==(262272);
 L462: do {
  if ($1999) {
   $2000 = ((($1)) + 8|0);
   $2001 = HEAP8[$2000>>0]|0;
   switch ($2001<<24>>24) {
   case 4: case 6:  {
    break;
   }
   default: {
    $2005 = $1997;
    break L462;
   }
   }
   $2002 = HEAP32[$3>>2]|0;
   $2003 = ((($2002)) + 1|0);
   _png_do_strip_channel($1,$2003,0);
   $$pre317 = HEAP32[$10>>2]|0;
   $2005 = $$pre317;
  } else {
   $2005 = $1997;
  }
 } while(0);
 $2004 = $2005 & 8388608;
 $2006 = ($2004|0)==(0);
 L466: do {
  if (!($2006)) {
   $2007 = ((($1)) + 8|0);
   $2008 = HEAP8[$2007>>0]|0;
   $2009 = $2008 & 4;
   $2010 = ($2009<<24>>24)==(0);
   if (!($2010)) {
    $2011 = HEAP32[$3>>2]|0;
    $2012 = ((($2011)) + 1|0);
    $2013 = HEAP32[$1>>2]|0;
    $2014 = $2008&255;
    $2015 = $2014 & 4;
    $2016 = ($2015|0)==(0);
    L469: do {
     if (!($2016)) {
      $2017 = ((($1)) + 9|0);
      $2018 = HEAP8[$2017>>0]|0;
      switch ($2018<<24>>24) {
      case 8:  {
       $2019 = ((($0)) + 500|0);
       $2020 = HEAP32[$2019>>2]|0;
       $2021 = ($2020|0)==(0|0);
       if ($2021) {
        break L469;
       }
       $2022 = $2014 & 2;
       $2023 = (($2022) + 2)|0;
       $2024 = ($2013|0)==(0);
       if ($2024) {
        break L466;
       }
       $2025 = $2022 | 1;
       $2026 = (($2012) + ($2025)|0);
       $$05056$i = $2013;$$057$i = $2026;
       while(1) {
        $2027 = HEAP8[$$057$i>>0]|0;
        $2028 = $2027&255;
        $2029 = (($2020) + ($2028)|0);
        $2030 = HEAP8[$2029>>0]|0;
        HEAP8[$$057$i>>0] = $2030;
        $2031 = (($$05056$i) + -1)|0;
        $2032 = (($$057$i) + ($2023)|0);
        $2033 = ($2031|0)==(0);
        if ($2033) {
         break L466;
        } else {
         $$05056$i = $2031;$$057$i = $2032;
        }
       }
       break;
      }
      case 16:  {
       $2034 = ((($0)) + 508|0);
       $2035 = HEAP32[$2034>>2]|0;
       $2036 = ((($0)) + 484|0);
       $2037 = HEAP32[$2036>>2]|0;
       $2038 = ($2035|0)==(0|0);
       if ($2038) {
        break L469;
       }
       $2039 = $2014 << 1;
       $2040 = $2039 & 4;
       $2041 = (($2040) + 4)|0;
       $2042 = ($2013|0)==(0);
       if ($2042) {
        break L466;
       }
       $2043 = $2040 | 2;
       $2044 = (($2012) + ($2043)|0);
       $$15158$i = $2013;$$159$i = $2044;
       while(1) {
        $2045 = ((($$159$i)) + 1|0);
        $2046 = HEAP8[$2045>>0]|0;
        $2047 = $2046&255;
        $2048 = $2047 >>> $2037;
        $2049 = (($2035) + ($2048<<2)|0);
        $2050 = HEAP32[$2049>>2]|0;
        $2051 = HEAP8[$$159$i>>0]|0;
        $2052 = $2051&255;
        $2053 = (($2050) + ($2052<<1)|0);
        $2054 = HEAP16[$2053>>1]|0;
        $2055 = ($2054&65535) >>> 8;
        $2056 = $2055&255;
        HEAP8[$$159$i>>0] = $2056;
        $2057 = $2054&255;
        HEAP8[$2045>>0] = $2057;
        $2058 = (($$15158$i) + -1)|0;
        $2059 = (($$159$i) + ($2041)|0);
        $2060 = ($2058|0)==(0);
        if ($2060) {
         break L466;
        } else {
         $$15158$i = $2058;$$159$i = $2059;
        }
       }
       break;
      }
      default: {
       break L469;
      }
      }
     }
    } while(0);
    _png_warning($0,24588);
   }
  }
 } while(0);
 $2061 = HEAP32[$10>>2]|0;
 $2062 = $2061 & 67108864;
 $2063 = ($2062|0)==(0);
 if ($2063) {
  $2096 = $2061;
 } else {
  $2064 = HEAP32[$3>>2]|0;
  $2065 = ((($2064)) + 1|0);
  $2066 = ((($1)) + 9|0);
  $2067 = HEAP8[$2066>>0]|0;
  $2068 = ($2067<<24>>24)==(16);
  if ($2068) {
   $2069 = ((($1)) + 4|0);
   $2070 = HEAP32[$2069>>2]|0;
   $2071 = (($2065) + ($2070)|0);
   $2072 = ($2070|0)>(0);
   if ($2072) {
    $$02526$i = $2065;$$027$i = $2065;
    while(1) {
     $2073 = ((($$027$i)) + 1|0);
     $2074 = HEAP8[$$027$i>>0]|0;
     $2075 = $2074&255;
     $2076 = ((($$027$i)) + 2|0);
     $2077 = HEAP8[$2073>>0]|0;
     $2078 = $2077&255;
     $2079 = (($2078) - ($2075))|0;
     $2080 = ($2079*65535)|0;
     $2081 = (($2080) + 8388480)|0;
     $2082 = $2081 >>> 24;
     $2083 = (($2082) + ($2075))|0;
     $2084 = $2083&255;
     $2085 = ((($$02526$i)) + 1|0);
     HEAP8[$$02526$i>>0] = $2084;
     $2086 = ($2076>>>0)<($2071>>>0);
     if ($2086) {
      $$02526$i = $2085;$$027$i = $2076;
     } else {
      break;
     }
    }
    $$pre318$pre = HEAP32[$10>>2]|0;
    $$pre318 = $$pre318$pre;
   } else {
    $$pre318 = $2061;
   }
   HEAP8[$2066>>0] = 8;
   $2087 = ((($1)) + 10|0);
   $2088 = HEAP8[$2087>>0]|0;
   $2089 = $2088&255;
   $2090 = $2089 << 3;
   $2091 = $2090&255;
   $2092 = ((($1)) + 11|0);
   HEAP8[$2092>>0] = $2091;
   $2093 = HEAP32[$1>>2]|0;
   $2094 = Math_imul($2093, $2089)|0;
   HEAP32[$2069>>2] = $2094;
   $2096 = $$pre318;
  } else {
   $2096 = $2061;
  }
 }
 $2095 = $2096 & 1024;
 $2097 = ($2095|0)==(0);
 if ($2097) {
  $2120 = $2096;
 } else {
  $2098 = HEAP32[$3>>2]|0;
  $2099 = ((($2098)) + 1|0);
  $2100 = ((($1)) + 9|0);
  $2101 = HEAP8[$2100>>0]|0;
  $2102 = ($2101<<24>>24)==(16);
  if ($2102) {
   $2103 = ((($1)) + 4|0);
   $2104 = HEAP32[$2103>>2]|0;
   $2105 = (($2099) + ($2104)|0);
   $2106 = ($2104|0)>(0);
   if ($2106) {
    $$02122$i = $2099;$$023$i = $2099;
    while(1) {
     $2107 = HEAP8[$$023$i>>0]|0;
     $2108 = ((($$02122$i)) + 1|0);
     HEAP8[$$02122$i>>0] = $2107;
     $2109 = ((($$023$i)) + 2|0);
     $2110 = ($2109>>>0)<($2105>>>0);
     if ($2110) {
      $$02122$i = $2108;$$023$i = $2109;
     } else {
      break;
     }
    }
    $$pre319$pre = HEAP32[$10>>2]|0;
    $$pre319 = $$pre319$pre;
   } else {
    $$pre319 = $2096;
   }
   HEAP8[$2100>>0] = 8;
   $2111 = ((($1)) + 10|0);
   $2112 = HEAP8[$2111>>0]|0;
   $2113 = $2112&255;
   $2114 = $2113 << 3;
   $2115 = $2114&255;
   $2116 = ((($1)) + 11|0);
   HEAP8[$2116>>0] = $2115;
   $2117 = HEAP32[$1>>2]|0;
   $2118 = Math_imul($2117, $2113)|0;
   HEAP32[$2103>>2] = $2118;
   $2120 = $$pre319;
  } else {
   $2120 = $2096;
  }
 }
 $2119 = $2120 & 64;
 $2121 = ($2119|0)==(0);
 do {
  if ($2121) {
   $2216 = $2120;
  } else {
   $2122 = HEAP32[$3>>2]|0;
   $2123 = ((($2122)) + 1|0);
   $2124 = ((($0)) + 612|0);
   $2125 = HEAP32[$2124>>2]|0;
   $2126 = ((($0)) + 616|0);
   $2127 = HEAP32[$2126>>2]|0;
   $2128 = HEAP32[$1>>2]|0;
   $2129 = ((($1)) + 9|0);
   $2130 = HEAP8[$2129>>0]|0;
   $2131 = ($2130<<24>>24)==(8);
   L506: do {
    if ($2131) {
     $2132 = ((($1)) + 8|0);
     $2133 = HEAP8[$2132>>0]|0;
     $2134 = ($2133<<24>>24)==(2);
     $2135 = ($2125|0)!=(0|0);
     $or$cond$i185 = $2135 & $2134;
     if ($or$cond$i185) {
      $2136 = ($2128|0)==(0);
      if ($2136) {
       $2159 = 8;
      } else {
       $$08894$i = $2123;$$09093$i = 0;$$095$i = $2123;
       while(1) {
        $2137 = ((($$095$i)) + 1|0);
        $2138 = HEAP8[$$095$i>>0]|0;
        $2139 = $2138&255;
        $2140 = ((($$095$i)) + 2|0);
        $2141 = HEAP8[$2137>>0]|0;
        $2142 = $2141&255;
        $2143 = ((($$095$i)) + 3|0);
        $2144 = HEAP8[$2140>>0]|0;
        $2145 = $2144&255;
        $2146 = $2139 >>> 3;
        $2147 = $2146 << 10;
        $2148 = $2142 >>> 3;
        $2149 = $2148 << 5;
        $2150 = $2149 | $2147;
        $2151 = $2145 >>> 3;
        $2152 = $2150 | $2151;
        $2153 = (($2125) + ($2152)|0);
        $2154 = HEAP8[$2153>>0]|0;
        $2155 = ((($$08894$i)) + 1|0);
        HEAP8[$$08894$i>>0] = $2154;
        $2156 = (($$09093$i) + 1)|0;
        $exitcond$i187 = ($2156|0)==($2128|0);
        if ($exitcond$i187) {
         break;
        } else {
         $$08894$i = $2155;$$09093$i = $2156;$$095$i = $2143;
        }
       }
       $$pre109$i = HEAP8[$2129>>0]|0;
       $2159 = $$pre109$i;
      }
      HEAP8[$2132>>0] = 3;
      $2157 = ((($1)) + 10|0);
      HEAP8[$2157>>0] = 1;
      $2158 = ((($1)) + 11|0);
      HEAP8[$2158>>0] = $2159;
      $2160 = $2159&255;
      $2161 = ($2159&255)>(7);
      if ($2161) {
       $2162 = $2160 >>> 3;
       $2163 = Math_imul($2162, $2128)|0;
       $2168 = $2163;
      } else {
       $2164 = Math_imul($2128, $2160)|0;
       $2165 = (($2164) + 7)|0;
       $2166 = $2165 >>> 3;
       $2168 = $2166;
      }
      $2167 = ((($1)) + 4|0);
      HEAP32[$2167>>2] = $2168;
      break;
     }
     $2169 = ($2133<<24>>24)==(6);
     $or$cond3$i190 = $2135 & $2169;
     if (!($or$cond3$i190)) {
      $2203 = ($2133<<24>>24)==(3);
      $2204 = ($2127|0)!=(0|0);
      $or$cond5$i192 = $2204 & $2203;
      $2205 = ($2128|0)!=(0);
      $or$cond106$i = $2205 & $or$cond5$i192;
      if (!($or$cond106$i)) {
       break;
      }
      $$2103$i = $2123;$$292102$i = 0;
      while(1) {
       $2206 = HEAP8[$$2103$i>>0]|0;
       $2207 = $2206&255;
       $2208 = (($2127) + ($2207)|0);
       $2209 = HEAP8[$2208>>0]|0;
       HEAP8[$$2103$i>>0] = $2209;
       $2210 = (($$292102$i) + 1)|0;
       $2211 = ((($$2103$i)) + 1|0);
       $exitcond108$i = ($2210|0)==($2128|0);
       if ($exitcond108$i) {
        break L506;
       } else {
        $$2103$i = $2211;$$292102$i = $2210;
       }
      }
     }
     $2170 = ($2128|0)==(0);
     if ($2170) {
      $2193 = 8;
     } else {
      $$18997$i = $2123;$$19196$i = 0;$$198$i = $2123;
      while(1) {
       $2171 = ((($$198$i)) + 1|0);
       $2172 = HEAP8[$$198$i>>0]|0;
       $2173 = $2172&255;
       $2174 = ((($$198$i)) + 2|0);
       $2175 = HEAP8[$2171>>0]|0;
       $2176 = $2175&255;
       $2177 = HEAP8[$2174>>0]|0;
       $2178 = $2177&255;
       $2179 = ((($$198$i)) + 4|0);
       $2180 = $2173 >>> 3;
       $2181 = $2180 << 10;
       $2182 = $2176 >>> 3;
       $2183 = $2182 << 5;
       $2184 = $2183 | $2181;
       $2185 = $2178 >>> 3;
       $2186 = $2184 | $2185;
       $2187 = (($2125) + ($2186)|0);
       $2188 = HEAP8[$2187>>0]|0;
       $2189 = ((($$18997$i)) + 1|0);
       HEAP8[$$18997$i>>0] = $2188;
       $2190 = (($$19196$i) + 1)|0;
       $exitcond107$i = ($2190|0)==($2128|0);
       if ($exitcond107$i) {
        break;
       } else {
        $$18997$i = $2189;$$19196$i = $2190;$$198$i = $2179;
       }
      }
      $$pre$i191 = HEAP8[$2129>>0]|0;
      $2193 = $$pre$i191;
     }
     HEAP8[$2132>>0] = 3;
     $2191 = ((($1)) + 10|0);
     HEAP8[$2191>>0] = 1;
     $2192 = ((($1)) + 11|0);
     HEAP8[$2192>>0] = $2193;
     $2194 = $2193&255;
     $2195 = ($2193&255)>(7);
     if ($2195) {
      $2196 = $2194 >>> 3;
      $2197 = Math_imul($2196, $2128)|0;
      $2202 = $2197;
     } else {
      $2198 = Math_imul($2128, $2194)|0;
      $2199 = (($2198) + 7)|0;
      $2200 = $2199 >>> 3;
      $2202 = $2200;
     }
     $2201 = ((($1)) + 4|0);
     HEAP32[$2201>>2] = $2202;
    }
   } while(0);
   $2212 = ((($1)) + 4|0);
   $2213 = HEAP32[$2212>>2]|0;
   $2214 = ($2213|0)==(0);
   if ($2214) {
    _png_error($0,24625);
    // unreachable;
   } else {
    $$pre320 = HEAP32[$10>>2]|0;
    $2216 = $$pre320;
    break;
   }
  }
 } while(0);
 $2215 = $2216 & 512;
 $2217 = ($2215|0)==(0);
 if ($2217) {
  $2245 = $2216;
 } else {
  $2218 = HEAP32[$3>>2]|0;
  $2219 = ((($2218)) + 1|0);
  $2220 = ((($1)) + 9|0);
  $2221 = HEAP8[$2220>>0]|0;
  $2222 = ($2221<<24>>24)==(8);
  if ($2222) {
   $2223 = ((($1)) + 8|0);
   $2224 = HEAP8[$2223>>0]|0;
   $2225 = ($2224<<24>>24)==(3);
   if ($2225) {
    $2245 = $2216;
   } else {
    $2226 = ((($1)) + 4|0);
    $2227 = HEAP32[$2226>>2]|0;
    $2228 = (($2219) + ($2227)|0);
    $2229 = ($2227|0)>(0);
    if ($2229) {
     $2230 = (($2228) + ($2227)|0);
     $$01920$i = $2228;$$021$i = $2230;
     while(1) {
      $2231 = ((($$01920$i)) + -1|0);
      $2232 = HEAP8[$2231>>0]|0;
      $2233 = ((($$021$i)) + -1|0);
      HEAP8[$2233>>0] = $2232;
      $2234 = ((($$021$i)) + -2|0);
      HEAP8[$2234>>0] = $2232;
      $2235 = ($2234>>>0)>($2231>>>0);
      if ($2235) {
       $$01920$i = $2231;$$021$i = $2234;
      } else {
       break;
      }
     }
     $$pre$i183 = HEAP32[$2226>>2]|0;
     $$pre321$pre = HEAP32[$10>>2]|0;
     $$pre321 = $$pre321$pre;$2237 = $$pre$i183;
    } else {
     $$pre321 = $2216;$2237 = $2227;
    }
    $2236 = $2237 << 1;
    HEAP32[$2226>>2] = $2236;
    HEAP8[$2220>>0] = 16;
    $2238 = ((($1)) + 10|0);
    $2239 = HEAP8[$2238>>0]|0;
    $2240 = $2239&255;
    $2241 = $2240 << 4;
    $2242 = $2241&255;
    $2243 = ((($1)) + 11|0);
    HEAP8[$2243>>0] = $2242;
    $2245 = $$pre321;
   }
  } else {
   $2245 = $2216;
  }
 }
 $2244 = $2245 & 16384;
 $2246 = ($2244|0)==(0);
 if ($2246) {
  $2254 = $2245;
 } else {
  $2247 = ((($0)) + 208|0);
  $2248 = HEAP32[$2247>>2]|0;
  $2249 = $2248 & 2048;
  $2250 = ($2249|0)==(0);
  if ($2250) {
   $2254 = $2245;
  } else {
   $2251 = HEAP32[$3>>2]|0;
   $2252 = ((($2251)) + 1|0);
   _png_do_gray_to_rgb($1,$2252);
   $$pre322 = HEAP32[$10>>2]|0;
   $2254 = $$pre322;
  }
 }
 $2253 = $2254 & 32;
 $2255 = ($2253|0)==(0);
 if ($2255) {
  $2259 = $2254;
 } else {
  $2256 = HEAP32[$3>>2]|0;
  $2257 = ((($2256)) + 1|0);
  _png_do_invert($1,$2257);
  $$pre323 = HEAP32[$10>>2]|0;
  $2259 = $$pre323;
 }
 $2258 = $2259 & 524288;
 $2260 = ($2258|0)==(0);
 L560: do {
  if (!($2260)) {
   $2261 = HEAP32[$3>>2]|0;
   $2262 = ((($2261)) + 1|0);
   $2263 = HEAP32[$1>>2]|0;
   $2264 = ((($1)) + 8|0);
   $2265 = HEAP8[$2264>>0]|0;
   switch ($2265<<24>>24) {
   case 6:  {
    $2266 = ((($1)) + 9|0);
    $2267 = HEAP8[$2266>>0]|0;
    $2268 = ($2267<<24>>24)==(8);
    $2269 = ((($1)) + 4|0);
    $2270 = HEAP32[$2269>>2]|0;
    $2271 = (($2262) + ($2270)|0);
    $2272 = ($2263|0)!=(0);
    if ($2268) {
     if (!($2272)) {
      break L560;
     }
     $$08087$i = 0;$$08286$i = $2271;
     while(1) {
      $2273 = ((($$08286$i)) + -1|0);
      $2274 = HEAP8[$2273>>0]|0;
      $2275 = $2274 ^ -1;
      HEAP8[$2273>>0] = $2275;
      $2276 = ((($$08286$i)) + -4|0);
      $2277 = (($$08087$i) + 1)|0;
      $exitcond$i167 = ($2277|0)==($2263|0);
      if ($exitcond$i167) {
       break;
      } else {
       $$08087$i = $2277;$$08286$i = $2276;
      }
     }
    } else {
     if (!($2272)) {
      break L560;
     }
     $$07789$i = 0;$$07988$i = $2271;
     while(1) {
      $2278 = ((($$07988$i)) + -1|0);
      $2279 = HEAP8[$2278>>0]|0;
      $2280 = $2279 ^ -1;
      HEAP8[$2278>>0] = $2280;
      $2281 = ((($$07988$i)) + -2|0);
      $2282 = HEAP8[$2281>>0]|0;
      $2283 = $2282 ^ -1;
      HEAP8[$2281>>0] = $2283;
      $2284 = ((($$07988$i)) + -8|0);
      $2285 = (($$07789$i) + 1)|0;
      $exitcond101$i = ($2285|0)==($2263|0);
      if ($exitcond101$i) {
       break;
      } else {
       $$07789$i = $2285;$$07988$i = $2284;
      }
     }
    }
    break;
   }
   case 4:  {
    $2286 = ((($1)) + 9|0);
    $2287 = HEAP8[$2286>>0]|0;
    $2288 = ($2287<<24>>24)==(8);
    $2289 = ((($1)) + 4|0);
    $2290 = HEAP32[$2289>>2]|0;
    $2291 = (($2262) + ($2290)|0);
    $2292 = ($2263|0)!=(0);
    if ($2288) {
     if (!($2292)) {
      break L560;
     }
     $$07493$i = 0;$$07592$i = $2291;
     while(1) {
      $2293 = ((($$07592$i)) + -1|0);
      $2294 = HEAP8[$2293>>0]|0;
      $2295 = $2294 ^ -1;
      HEAP8[$2293>>0] = $2295;
      $2296 = ((($$07592$i)) + -2|0);
      $2297 = (($$07493$i) + 1)|0;
      $exitcond102$i = ($2297|0)==($2263|0);
      if ($exitcond102$i) {
       break;
      } else {
       $$07493$i = $2297;$$07592$i = $2296;
      }
     }
    } else {
     if (!($2292)) {
      break L560;
     }
     $$07395$i = $2291;$$096$i = 0;
     while(1) {
      $2298 = ((($$07395$i)) + -1|0);
      $2299 = HEAP8[$2298>>0]|0;
      $2300 = $2299 ^ -1;
      HEAP8[$2298>>0] = $2300;
      $2301 = ((($$07395$i)) + -2|0);
      $2302 = HEAP8[$2301>>0]|0;
      $2303 = $2302 ^ -1;
      HEAP8[$2301>>0] = $2303;
      $2304 = ((($$07395$i)) + -4|0);
      $2305 = (($$096$i) + 1)|0;
      $exitcond103$i = ($2305|0)==($2263|0);
      if ($exitcond103$i) {
       break;
      } else {
       $$07395$i = $2304;$$096$i = $2305;
      }
     }
    }
    break;
   }
   default: {
    break L560;
   }
   }
  }
 } while(0);
 $2306 = HEAP32[$10>>2]|0;
 $2307 = $2306 & 8;
 $2308 = ($2307|0)==(0);
 if ($2308) {
  $2417 = $2306;
 } else {
  $2309 = HEAP32[$3>>2]|0;
  $2310 = ((($2309)) + 1|0);
  $2311 = ((($1)) + 8|0);
  $2312 = HEAP8[$2311>>0]|0;
  $2313 = $2312&255;
  $2314 = ($2312<<24>>24)==(3);
  if ($2314) {
   $2417 = $2306;
  } else {
   $2315 = ((($1)) + 9|0);
   $2316 = HEAP8[$2315>>0]|0;
   $2317 = $2316&255;
   $2318 = $2313 & 2;
   $2319 = ($2318|0)==(0);
   if ($2319) {
    $2333 = ((($0)) + 524|0);
    $2334 = HEAP8[$2333>>0]|0;
    $2335 = $2334&255;
    $$0$i = 1;$$pn$i162 = $2335;
   } else {
    $2320 = ((($0)) + 521|0);
    $2321 = HEAP8[$2320>>0]|0;
    $2322 = $2321&255;
    $2323 = ((($0)) + 522|0);
    $2324 = HEAP8[$2323>>0]|0;
    $2325 = $2324&255;
    $2326 = (($2317) - ($2325))|0;
    $2327 = ((($2)) + 4|0);
    HEAP32[$2327>>2] = $2326;
    $2328 = ((($0)) + 523|0);
    $2329 = HEAP8[$2328>>0]|0;
    $2330 = $2329&255;
    $2331 = (($2317) - ($2330))|0;
    $2332 = ((($2)) + 8|0);
    HEAP32[$2332>>2] = $2331;
    $$0$i = 3;$$pn$i162 = $2322;
   }
   $$sink$i = (($2317) - ($$pn$i162))|0;
   HEAP32[$2>>2] = $$sink$i;
   $2336 = $2313 & 4;
   $2337 = ($2336|0)==(0);
   if ($2337) {
    $$1$i163 = $$0$i;
   } else {
    $2338 = ((($0)) + 525|0);
    $2339 = (($$0$i) + 1)|0;
    $2340 = (($2) + ($$0$i<<2)|0);
    $2341 = HEAP8[$2338>>0]|0;
    $2342 = $2341&255;
    $2343 = (($2317) - ($2342))|0;
    HEAP32[$2340>>2] = $2343;
    $$1$i163 = $2339;
   }
   $$0119142$i = 0;$$0121141$i = 0;
   while(1) {
    $2344 = (($2) + ($$0119142$i<<2)|0);
    $2345 = HEAP32[$2344>>2]|0;
    $2346 = ($2345|0)>(0);
    $2347 = ($2345|0)<($2317|0);
    $or$cond$i = $2346 & $2347;
    if ($or$cond$i) {
     $$1122$i = 1;
    } else {
     HEAP32[$2344>>2] = 0;
     $$1122$i = $$0121141$i;
    }
    $2348 = (($$0119142$i) + 1)|0;
    $2349 = ($2348|0)<($$1$i163|0);
    if ($2349) {
     $$0119142$i = $2348;$$0121141$i = $$1122$i;
    } else {
     break;
    }
   }
   $2350 = ($$1122$i|0)==(0);
   L600: do {
    if (!($2350)) {
     $2351 = (($2317) + -2)|0;
     $2352 = $2351 >>> 1;
     $2353 = $2351 << 31;
     $2354 = $2352 | $2353;
     switch ($2354|0) {
     case 0:  {
      $2355 = ((($1)) + 4|0);
      $2356 = HEAP32[$2355>>2]|0;
      $2357 = (($2310) + ($2356)|0);
      $2358 = ($2356|0)>(0);
      if (!($2358)) {
       break L600;
      }
      $$0127132$i = $2310;
      while(1) {
       $2359 = HEAP8[$$0127132$i>>0]|0;
       $2360 = $2359&255;
       $2361 = $2360 >>> 1;
       $2362 = $2361 & 85;
       $2363 = $2362&255;
       $2364 = ((($$0127132$i)) + 1|0);
       HEAP8[$$0127132$i>>0] = $2363;
       $2365 = ($2364>>>0)<($2357>>>0);
       if ($2365) {
        $$0127132$i = $2364;
       } else {
        break;
       }
      }
      break;
     }
     case 1:  {
      $2366 = ((($1)) + 4|0);
      $2367 = HEAP32[$2366>>2]|0;
      $2368 = (($2310) + ($2367)|0);
      $2369 = HEAP32[$2>>2]|0;
      $2370 = 15 >>> $2369;
      $2371 = $2370 << 4;
      $2372 = $2371 | $2370;
      $2373 = ($2367|0)>(0);
      if (!($2373)) {
       break L600;
      }
      $$0128133$i = $2310;
      while(1) {
       $2374 = HEAP8[$$0128133$i>>0]|0;
       $2375 = $2374&255;
       $2376 = $2375 >>> $2369;
       $2377 = $2376 & $2372;
       $2378 = $2377&255;
       $2379 = ((($$0128133$i)) + 1|0);
       HEAP8[$$0128133$i>>0] = $2378;
       $2380 = ($2379>>>0)<($2368>>>0);
       if ($2380) {
        $$0128133$i = $2379;
       } else {
        break;
       }
      }
      break;
     }
     case 3:  {
      $2381 = ((($1)) + 4|0);
      $2382 = HEAP32[$2381>>2]|0;
      $2383 = (($2310) + ($2382)|0);
      $2384 = ($2382|0)>(0);
      if (!($2384)) {
       break L600;
      }
      $$0123136$i = 0;$$0126135$i = $2310;
      while(1) {
       $2385 = HEAP8[$$0126135$i>>0]|0;
       $2386 = $2385&255;
       $2387 = (($2) + ($$0123136$i<<2)|0);
       $2388 = HEAP32[$2387>>2]|0;
       $2389 = $2386 >>> $2388;
       $2390 = (($$0123136$i) + 1)|0;
       $2391 = ($2390|0)<($$1$i163|0);
       $spec$store$select$i = $2391 ? $2390 : 0;
       $2392 = $2389&255;
       $2393 = ((($$0126135$i)) + 1|0);
       HEAP8[$$0126135$i>>0] = $2392;
       $2394 = ($2393>>>0)<($2383>>>0);
       if ($2394) {
        $$0123136$i = $spec$store$select$i;$$0126135$i = $2393;
       } else {
        break;
       }
      }
      break;
     }
     case 7:  {
      $2395 = ((($1)) + 4|0);
      $2396 = HEAP32[$2395>>2]|0;
      $2397 = (($2310) + ($2396)|0);
      $2398 = ($2396|0)>(0);
      if (!($2398)) {
       break L600;
      }
      $$0118139$i = 0;$$0120138$i = $2310;
      while(1) {
       $2399 = HEAP8[$$0120138$i>>0]|0;
       $2400 = $2399&255;
       $2401 = $2400 << 8;
       $2402 = ((($$0120138$i)) + 1|0);
       $2403 = HEAP8[$2402>>0]|0;
       $2404 = $2403&255;
       $2405 = $2401 | $2404;
       $2406 = (($2) + ($$0118139$i<<2)|0);
       $2407 = HEAP32[$2406>>2]|0;
       $2408 = $2405 >>> $2407;
       $2409 = (($$0118139$i) + 1)|0;
       $2410 = ($2409|0)<($$1$i163|0);
       $spec$store$select2$i = $2410 ? $2409 : 0;
       $2411 = $2408 >>> 8;
       $2412 = $2411&255;
       HEAP8[$$0120138$i>>0] = $2412;
       $2413 = $2408&255;
       $2414 = ((($$0120138$i)) + 2|0);
       HEAP8[$2402>>0] = $2413;
       $2415 = ($2414>>>0)<($2397>>>0);
       if ($2415) {
        $$0118139$i = $spec$store$select2$i;$$0120138$i = $2414;
       } else {
        break;
       }
      }
      break;
     }
     default: {
      break L600;
     }
     }
    }
   } while(0);
   $$pre324 = HEAP32[$10>>2]|0;
   $2417 = $$pre324;
  }
 }
 $2416 = $2417 & 4;
 $2418 = ($2416|0)==(0);
 do {
  if (!($2418)) {
   $2419 = HEAP32[$3>>2]|0;
   $2420 = ((($2419)) + 1|0);
   $2421 = ((($1)) + 9|0);
   $2422 = HEAP8[$2421>>0]|0;
   $2423 = ($2422&255)<(8);
   if (!($2423)) {
    break;
   }
   $2424 = HEAP32[$1>>2]|0;
   L624: do {
    switch ($2422<<24>>24) {
    case 1:  {
     $2425 = ($2424|0)==(0);
     if ($2425) {
      break L624;
     }
     $2426 = (($2420) + ($2424)|0);
     $2427 = (($2424) + 7)|0;
     $2428 = $2427 & 7;
     $2429 = $2428 ^ 7;
     $2430 = (($2424) + -1)|0;
     $2431 = $2430 >>> 3;
     $2432 = (($2420) + ($2431)|0);
     $$08195$i = $2429;$$08494$i = $2432;$$08693$i = 0;$$pn110$i = $2426;
     while(1) {
      $$08396$i = ((($$pn110$i)) + -1|0);
      $2433 = HEAP8[$$08494$i>>0]|0;
      $2434 = $2433&255;
      $2435 = $2434 >>> $$08195$i;
      $2436 = $2435 & 1;
      $2437 = $2436&255;
      HEAP8[$$08396$i>>0] = $2437;
      $2438 = ($$08195$i|0)==(7);
      $2439 = ((($$08494$i)) + -1|0);
      $2440 = (($$08195$i) + 1)|0;
      $$185$i = $2438 ? $2439 : $$08494$i;
      $$182$i = $2438 ? 0 : $2440;
      $2441 = (($$08693$i) + 1)|0;
      $exitcond$i159 = ($2441|0)==($2424|0);
      if ($exitcond$i159) {
       break;
      } else {
       $$08195$i = $$182$i;$$08494$i = $$185$i;$$08693$i = $2441;$$pn110$i = $$08396$i;
      }
     }
     break;
    }
    case 2:  {
     $2442 = ($2424|0)==(0);
     if ($2442) {
      break L624;
     }
     $2443 = (($2420) + ($2424)|0);
     $2444 = $2424 << 1;
     $2445 = (($2444) + 6)|0;
     $2446 = $2445 & 6;
     $2447 = $2446 ^ 6;
     $2448 = (($2424) + -1)|0;
     $2449 = $2448 >>> 2;
     $2450 = (($2420) + ($2449)|0);
     $$076100$i = $2447;$$07999$i = $2450;$$18798$i = 0;$$pn109$i = $2443;
     while(1) {
      $$078101$i = ((($$pn109$i)) + -1|0);
      $2451 = HEAP8[$$07999$i>>0]|0;
      $2452 = $2451&255;
      $2453 = $2452 >>> $$076100$i;
      $2454 = $2453 & 3;
      $2455 = $2454&255;
      HEAP8[$$078101$i>>0] = $2455;
      $2456 = ($$076100$i|0)==(6);
      $2457 = ((($$07999$i)) + -1|0);
      $2458 = (($$076100$i) + 2)|0;
      $$180$i = $2456 ? $2457 : $$07999$i;
      $$177$i = $2456 ? 0 : $2458;
      $2459 = (($$18798$i) + 1)|0;
      $exitcond113$i = ($2459|0)==($2424|0);
      if ($exitcond113$i) {
       break;
      } else {
       $$076100$i = $$177$i;$$07999$i = $$180$i;$$18798$i = $2459;$$pn109$i = $$078101$i;
      }
     }
     break;
    }
    case 4:  {
     $2460 = ($2424|0)==(0);
     if ($2460) {
      break L624;
     }
     $2461 = (($2420) + ($2424)|0);
     $2462 = $2424 << 2;
     $2463 = $2462 & 4;
     $2464 = (($2424) + -1)|0;
     $2465 = $2464 >>> 1;
     $2466 = (($2420) + ($2465)|0);
     $$0106$i = $2463;$$074105$i = $2466;$$2104$i = 0;$$pn$i = $2461;
     while(1) {
      $$073107$i = ((($$pn$i)) + -1|0);
      $2467 = HEAP8[$$074105$i>>0]|0;
      $2468 = $2467&255;
      $2469 = $2468 >>> $$0106$i;
      $2470 = $2469 & 15;
      $2471 = $2470&255;
      HEAP8[$$073107$i>>0] = $2471;
      $2472 = ($$0106$i|0)==(4);
      $2473 = ((($$074105$i)) + -1|0);
      $$175$i = $2472 ? $2473 : $$074105$i;
      $$1$i160 = $2472 ? 0 : 4;
      $2474 = (($$2104$i) + 1)|0;
      $exitcond114$i = ($2474|0)==($2424|0);
      if ($exitcond114$i) {
       break;
      } else {
       $$0106$i = $$1$i160;$$074105$i = $$175$i;$$2104$i = $2474;$$pn$i = $$073107$i;
      }
     }
     break;
    }
    default: {
    }
    }
   } while(0);
   HEAP8[$2421>>0] = 8;
   $2475 = ((($1)) + 10|0);
   $2476 = HEAP8[$2475>>0]|0;
   $2477 = $2476&255;
   $2478 = $2477 << 3;
   $2479 = $2478&255;
   $2480 = ((($1)) + 11|0);
   HEAP8[$2480>>0] = $2479;
   $2481 = Math_imul($2424, $2477)|0;
   $2482 = ((($1)) + 4|0);
   HEAP32[$2482>>2] = $2481;
  }
 } while(0);
 $2483 = ((($1)) + 8|0);
 $2484 = HEAP8[$2483>>0]|0;
 $2485 = ($2484<<24>>24)==(3);
 do {
  if ($2485) {
   $2486 = ((($0)) + 424|0);
   $2487 = HEAP32[$2486>>2]|0;
   $2488 = ($2487|0)>(-1);
   if (!($2488)) {
    break;
   }
   _png_do_check_palette_indexes($0,$1);
  }
 } while(0);
 $2489 = HEAP32[$10>>2]|0;
 $2490 = $2489 & 1;
 $2491 = ($2490|0)==(0);
 if ($2491) {
  $2495 = $2489;
 } else {
  $2492 = HEAP32[$3>>2]|0;
  $2493 = ((($2492)) + 1|0);
  _png_do_bgr($1,$2493);
  $$pre325 = HEAP32[$10>>2]|0;
  $2495 = $$pre325;
 }
 $2494 = $2495 & 65536;
 $2496 = ($2494|0)==(0);
 if ($2496) {
  $2500 = $2495;
 } else {
  $2497 = HEAP32[$3>>2]|0;
  $2498 = ((($2497)) + 1|0);
  _png_do_packswap($1,$2498);
  $$pre326 = HEAP32[$10>>2]|0;
  $2500 = $$pre326;
 }
 $2499 = $2500 & 32768;
 $2501 = ($2499|0)==(0);
 L649: do {
  if (!($2501)) {
   $2502 = HEAP32[$3>>2]|0;
   $2503 = ((($2502)) + 1|0);
   $2504 = ((($0)) + 444|0);
   $2505 = HEAP16[$2504>>1]|0;
   $2506 = HEAP32[$6>>2]|0;
   $2507 = HEAP32[$1>>2]|0;
   $2508 = ($2505&65535) >>> 8;
   $2509 = $2508&255;
   $2510 = $2505&255;
   $2511 = HEAP8[$2483>>0]|0;
   switch ($2511<<24>>24) {
   case 0:  {
    $2512 = ((($1)) + 9|0);
    $2513 = HEAP8[$2512>>0]|0;
    switch ($2513<<24>>24) {
    case 8:  {
     $2514 = $2506 & 128;
     $2515 = ($2514|0)==(0);
     $2516 = (($2503) + ($2507)|0);
     $2517 = (($2516) + ($2507)|0);
     if ($2515) {
      $2529 = ($2507|0)==(0);
      if (!($2529)) {
       $$0217224$i = $2517;$$0218223$i = $2516;$$1222$i = 0;
       while(1) {
        $2530 = ((($$0218223$i)) + -1|0);
        $2531 = HEAP8[$2530>>0]|0;
        $2532 = ((($$0217224$i)) + -1|0);
        HEAP8[$2532>>0] = $2531;
        $2533 = ((($$0217224$i)) + -2|0);
        HEAP8[$2533>>0] = $2510;
        $2534 = (($$1222$i) + 1)|0;
        $exitcond$i156 = ($2534|0)==($2507|0);
        if ($exitcond$i156) {
         break;
        } else {
         $$0217224$i = $2533;$$0218223$i = $2530;$$1222$i = $2534;
        }
       }
      }
      $2535 = ((($1)) + 10|0);
      HEAP8[$2535>>0] = 2;
      $2536 = ((($1)) + 11|0);
      HEAP8[$2536>>0] = 16;
      $2537 = $2507 << 1;
      $2538 = ((($1)) + 4|0);
      HEAP32[$2538>>2] = $2537;
      break L649;
     } else {
      $2518 = ($2507>>>0)>(1);
      $2519 = ((($2517)) + -1|0);
      HEAP8[$2519>>0] = $2510;
      if ($2518) {
       $$0219227$i = $2517;$$0220226$i = $2516;$$0221225$i = 1;
       while(1) {
        $2520 = ((($$0220226$i)) + -1|0);
        $2521 = HEAP8[$2520>>0]|0;
        $2522 = ((($$0219227$i)) + -2|0);
        HEAP8[$2522>>0] = $2521;
        $2523 = (($$0221225$i) + 1)|0;
        $2524 = ((($$0219227$i)) + -3|0);
        HEAP8[$2524>>0] = $2510;
        $exitcond267$i = ($2523|0)==($2507|0);
        if ($exitcond267$i) {
         break;
        } else {
         $$0219227$i = $2522;$$0220226$i = $2520;$$0221225$i = $2523;
        }
       }
      }
      $2525 = ((($1)) + 10|0);
      HEAP8[$2525>>0] = 2;
      $2526 = ((($1)) + 11|0);
      HEAP8[$2526>>0] = 16;
      $2527 = $2507 << 1;
      $2528 = ((($1)) + 4|0);
      HEAP32[$2528>>2] = $2527;
      break L649;
     }
     break;
    }
    case 16:  {
     $2539 = $2506 & 128;
     $2540 = ($2539|0)==(0);
     $2541 = $2507 << 1;
     $2542 = (($2503) + ($2541)|0);
     $2543 = (($2542) + ($2541)|0);
     if ($2540) {
      $2560 = ($2507|0)==(0);
      if (!($2560)) {
       $$0213233$i = $2543;$$0214232$i = $2542;$$3231$i = 0;
       while(1) {
        $2561 = ((($$0214232$i)) + -1|0);
        $2562 = HEAP8[$2561>>0]|0;
        $2563 = ((($$0213233$i)) + -1|0);
        HEAP8[$2563>>0] = $2562;
        $2564 = ((($$0214232$i)) + -2|0);
        $2565 = HEAP8[$2564>>0]|0;
        $2566 = ((($$0213233$i)) + -2|0);
        HEAP8[$2566>>0] = $2565;
        $2567 = ((($$0213233$i)) + -3|0);
        HEAP8[$2567>>0] = $2510;
        $2568 = ((($$0213233$i)) + -4|0);
        HEAP8[$2568>>0] = $2509;
        $2569 = (($$3231$i) + 1)|0;
        $exitcond268$i = ($2569|0)==($2507|0);
        if ($exitcond268$i) {
         break;
        } else {
         $$0213233$i = $2568;$$0214232$i = $2564;$$3231$i = $2569;
        }
       }
      }
      $2570 = ((($1)) + 10|0);
      HEAP8[$2570>>0] = 2;
      $2571 = ((($1)) + 11|0);
      HEAP8[$2571>>0] = 32;
      $2572 = $2507 << 2;
      $2573 = ((($1)) + 4|0);
      HEAP32[$2573>>2] = $2572;
      break L649;
     } else {
      $2544 = ($2507>>>0)>(1);
      $2545 = ((($2543)) + -1|0);
      HEAP8[$2545>>0] = $2510;
      $2546 = ((($2543)) + -2|0);
      HEAP8[$2546>>0] = $2509;
      if ($2544) {
       $$0215239$i = $2543;$$0216238$i = $2542;$$2237$i = 1;
       while(1) {
        $2547 = ((($$0216238$i)) + -1|0);
        $2548 = HEAP8[$2547>>0]|0;
        $2549 = ((($$0215239$i)) + -3|0);
        HEAP8[$2549>>0] = $2548;
        $2550 = ((($$0216238$i)) + -2|0);
        $2551 = HEAP8[$2550>>0]|0;
        $2552 = ((($$0215239$i)) + -4|0);
        HEAP8[$2552>>0] = $2551;
        $2553 = (($$2237$i) + 1)|0;
        $2554 = ((($$0215239$i)) + -5|0);
        HEAP8[$2554>>0] = $2510;
        $2555 = ((($$0215239$i)) + -6|0);
        HEAP8[$2555>>0] = $2509;
        $exitcond269$i = ($2553|0)==($2507|0);
        if ($exitcond269$i) {
         break;
        } else {
         $$0215239$i = $2552;$$0216238$i = $2550;$$2237$i = $2553;
        }
       }
      }
      $2556 = ((($1)) + 10|0);
      HEAP8[$2556>>0] = 2;
      $2557 = ((($1)) + 11|0);
      HEAP8[$2557>>0] = 32;
      $2558 = $2507 << 2;
      $2559 = ((($1)) + 4|0);
      HEAP32[$2559>>2] = $2558;
      break L649;
     }
     break;
    }
    default: {
     break L649;
    }
    }
    break;
   }
   case 2:  {
    $2574 = ((($1)) + 9|0);
    $2575 = HEAP8[$2574>>0]|0;
    switch ($2575<<24>>24) {
    case 8:  {
     $2576 = $2506 & 128;
     $2577 = ($2576|0)==(0);
     $2578 = ($2507*3)|0;
     $2579 = (($2503) + ($2578)|0);
     $2580 = (($2579) + ($2507)|0);
     if ($2577) {
      $2598 = ($2507|0)==(0);
      if (!($2598)) {
       $$0209245$i = $2580;$$0210244$i = $2579;$$5243$i = 0;
       while(1) {
        $2599 = ((($$0210244$i)) + -1|0);
        $2600 = HEAP8[$2599>>0]|0;
        $2601 = ((($$0209245$i)) + -1|0);
        HEAP8[$2601>>0] = $2600;
        $2602 = ((($$0210244$i)) + -2|0);
        $2603 = HEAP8[$2602>>0]|0;
        $2604 = ((($$0209245$i)) + -2|0);
        HEAP8[$2604>>0] = $2603;
        $2605 = ((($$0210244$i)) + -3|0);
        $2606 = HEAP8[$2605>>0]|0;
        $2607 = ((($$0209245$i)) + -3|0);
        HEAP8[$2607>>0] = $2606;
        $2608 = ((($$0209245$i)) + -4|0);
        HEAP8[$2608>>0] = $2510;
        $2609 = (($$5243$i) + 1)|0;
        $exitcond270$i = ($2609|0)==($2507|0);
        if ($exitcond270$i) {
         break;
        } else {
         $$0209245$i = $2608;$$0210244$i = $2605;$$5243$i = $2609;
        }
       }
      }
      $2610 = ((($1)) + 10|0);
      HEAP8[$2610>>0] = 4;
      $2611 = ((($1)) + 11|0);
      HEAP8[$2611>>0] = 32;
      $2612 = $2507 << 2;
      $2613 = ((($1)) + 4|0);
      HEAP32[$2613>>2] = $2612;
      break L649;
     } else {
      $2581 = ($2507>>>0)>(1);
      $2582 = ((($2580)) + -1|0);
      HEAP8[$2582>>0] = $2510;
      if ($2581) {
       $$0211251$i = $2580;$$0212250$i = $2579;$$4249$i = 1;
       while(1) {
        $2583 = ((($$0212250$i)) + -1|0);
        $2584 = HEAP8[$2583>>0]|0;
        $2585 = ((($$0211251$i)) + -2|0);
        HEAP8[$2585>>0] = $2584;
        $2586 = ((($$0212250$i)) + -2|0);
        $2587 = HEAP8[$2586>>0]|0;
        $2588 = ((($$0211251$i)) + -3|0);
        HEAP8[$2588>>0] = $2587;
        $2589 = ((($$0212250$i)) + -3|0);
        $2590 = HEAP8[$2589>>0]|0;
        $2591 = ((($$0211251$i)) + -4|0);
        HEAP8[$2591>>0] = $2590;
        $2592 = (($$4249$i) + 1)|0;
        $2593 = ((($$0211251$i)) + -5|0);
        HEAP8[$2593>>0] = $2510;
        $exitcond271$i = ($2592|0)==($2507|0);
        if ($exitcond271$i) {
         break;
        } else {
         $$0211251$i = $2591;$$0212250$i = $2589;$$4249$i = $2592;
        }
       }
      }
      $2594 = ((($1)) + 10|0);
      HEAP8[$2594>>0] = 4;
      $2595 = ((($1)) + 11|0);
      HEAP8[$2595>>0] = 32;
      $2596 = $2507 << 2;
      $2597 = ((($1)) + 4|0);
      HEAP32[$2597>>2] = $2596;
      break L649;
     }
     break;
    }
    case 16:  {
     $2614 = $2506 & 128;
     $2615 = ($2614|0)==(0);
     $2616 = ($2507*6)|0;
     $2617 = (($2503) + ($2616)|0);
     $2618 = $2507 << 1;
     $2619 = (($2617) + ($2618)|0);
     if ($2615) {
      $2648 = ($2507|0)==(0);
      if (!($2648)) {
       $$0206256$i = $2617;$$0257$i = $2619;$$7255$i = 0;
       while(1) {
        $2649 = ((($$0206256$i)) + -1|0);
        $2650 = HEAP8[$2649>>0]|0;
        $2651 = ((($$0257$i)) + -1|0);
        HEAP8[$2651>>0] = $2650;
        $2652 = ((($$0206256$i)) + -2|0);
        $2653 = HEAP8[$2652>>0]|0;
        $2654 = ((($$0257$i)) + -2|0);
        HEAP8[$2654>>0] = $2653;
        $2655 = ((($$0206256$i)) + -3|0);
        $2656 = HEAP8[$2655>>0]|0;
        $2657 = ((($$0257$i)) + -3|0);
        HEAP8[$2657>>0] = $2656;
        $2658 = ((($$0206256$i)) + -4|0);
        $2659 = HEAP8[$2658>>0]|0;
        $2660 = ((($$0257$i)) + -4|0);
        HEAP8[$2660>>0] = $2659;
        $2661 = ((($$0206256$i)) + -5|0);
        $2662 = HEAP8[$2661>>0]|0;
        $2663 = ((($$0257$i)) + -5|0);
        HEAP8[$2663>>0] = $2662;
        $2664 = ((($$0206256$i)) + -6|0);
        $2665 = HEAP8[$2664>>0]|0;
        $2666 = ((($$0257$i)) + -6|0);
        HEAP8[$2666>>0] = $2665;
        $2667 = ((($$0257$i)) + -7|0);
        HEAP8[$2667>>0] = $2510;
        $2668 = ((($$0257$i)) + -8|0);
        HEAP8[$2668>>0] = $2509;
        $2669 = (($$7255$i) + 1)|0;
        $exitcond272$i = ($2669|0)==($2507|0);
        if ($exitcond272$i) {
         break;
        } else {
         $$0206256$i = $2664;$$0257$i = $2668;$$7255$i = $2669;
        }
       }
      }
      $2670 = ((($1)) + 10|0);
      HEAP8[$2670>>0] = 4;
      $2671 = ((($1)) + 11|0);
      HEAP8[$2671>>0] = 64;
      $2672 = $2507 << 3;
      $2673 = ((($1)) + 4|0);
      HEAP32[$2673>>2] = $2672;
      break L649;
     } else {
      $2620 = ($2507>>>0)>(1);
      $2621 = ((($2619)) + -1|0);
      HEAP8[$2621>>0] = $2510;
      $2622 = ((($2619)) + -2|0);
      HEAP8[$2622>>0] = $2509;
      if ($2620) {
       $$0207263$i = $2619;$$0208262$i = $2617;$$6261$i = 1;
       while(1) {
        $2623 = ((($$0208262$i)) + -1|0);
        $2624 = HEAP8[$2623>>0]|0;
        $2625 = ((($$0207263$i)) + -3|0);
        HEAP8[$2625>>0] = $2624;
        $2626 = ((($$0208262$i)) + -2|0);
        $2627 = HEAP8[$2626>>0]|0;
        $2628 = ((($$0207263$i)) + -4|0);
        HEAP8[$2628>>0] = $2627;
        $2629 = ((($$0208262$i)) + -3|0);
        $2630 = HEAP8[$2629>>0]|0;
        $2631 = ((($$0207263$i)) + -5|0);
        HEAP8[$2631>>0] = $2630;
        $2632 = ((($$0208262$i)) + -4|0);
        $2633 = HEAP8[$2632>>0]|0;
        $2634 = ((($$0207263$i)) + -6|0);
        HEAP8[$2634>>0] = $2633;
        $2635 = ((($$0208262$i)) + -5|0);
        $2636 = HEAP8[$2635>>0]|0;
        $2637 = ((($$0207263$i)) + -7|0);
        HEAP8[$2637>>0] = $2636;
        $2638 = ((($$0208262$i)) + -6|0);
        $2639 = HEAP8[$2638>>0]|0;
        $2640 = ((($$0207263$i)) + -8|0);
        HEAP8[$2640>>0] = $2639;
        $2641 = (($$6261$i) + 1)|0;
        $2642 = ((($$0207263$i)) + -9|0);
        HEAP8[$2642>>0] = $2510;
        $2643 = ((($$0207263$i)) + -10|0);
        HEAP8[$2643>>0] = $2509;
        $exitcond273$i = ($2641|0)==($2507|0);
        if ($exitcond273$i) {
         break;
        } else {
         $$0207263$i = $2640;$$0208262$i = $2638;$$6261$i = $2641;
        }
       }
      }
      $2644 = ((($1)) + 10|0);
      HEAP8[$2644>>0] = 4;
      $2645 = ((($1)) + 11|0);
      HEAP8[$2645>>0] = 64;
      $2646 = $2507 << 3;
      $2647 = ((($1)) + 4|0);
      HEAP32[$2647>>2] = $2646;
      break L649;
     }
     break;
    }
    default: {
     break L649;
    }
    }
    break;
   }
   default: {
    break L649;
   }
   }
  }
 } while(0);
 $2674 = HEAP32[$10>>2]|0;
 $2675 = $2674 & 131072;
 $2676 = ($2675|0)==(0);
 L713: do {
  if (!($2676)) {
   $2677 = HEAP32[$3>>2]|0;
   $2678 = ((($2677)) + 1|0);
   $2679 = HEAP32[$1>>2]|0;
   $2680 = HEAP8[$2483>>0]|0;
   switch ($2680<<24>>24) {
   case 6:  {
    $2681 = ((($1)) + 9|0);
    $2682 = HEAP8[$2681>>0]|0;
    $2683 = ($2682<<24>>24)==(8);
    $2684 = ((($1)) + 4|0);
    $2685 = HEAP32[$2684>>2]|0;
    $2686 = (($2678) + ($2685)|0);
    $2687 = ($2679|0)!=(0);
    if ($2683) {
     if (!($2687)) {
      break L713;
     }
     $$092108$i = $2686;$$097106$i = 0;
     while(1) {
      $2688 = ((($$092108$i)) + -1|0);
      $2689 = HEAP8[$2688>>0]|0;
      $2690 = ((($$092108$i)) + -2|0);
      $2691 = HEAP8[$2690>>0]|0;
      HEAP8[$2688>>0] = $2691;
      $2692 = ((($$092108$i)) + -3|0);
      $2693 = HEAP8[$2692>>0]|0;
      HEAP8[$2690>>0] = $2693;
      $2694 = ((($$092108$i)) + -4|0);
      $2695 = HEAP8[$2694>>0]|0;
      HEAP8[$2692>>0] = $2695;
      HEAP8[$2694>>0] = $2689;
      $2696 = (($$097106$i) + 1)|0;
      $exitcond$i153 = ($2696|0)==($2679|0);
      if ($exitcond$i153) {
       break;
      } else {
       $$092108$i = $2694;$$097106$i = $2696;
      }
     }
    } else {
     if (!($2687)) {
      break L713;
     }
     $$0100111$i = 0;$$0101110$i = $2686;
     while(1) {
      $2697 = ((($$0101110$i)) + -1|0);
      $2698 = HEAP8[$2697>>0]|0;
      $2699 = ((($$0101110$i)) + -2|0);
      $2700 = HEAP8[$2699>>0]|0;
      $2701 = ((($$0101110$i)) + -3|0);
      $2702 = HEAP8[$2701>>0]|0;
      HEAP8[$2697>>0] = $2702;
      $2703 = ((($$0101110$i)) + -4|0);
      $2704 = HEAP8[$2703>>0]|0;
      HEAP8[$2699>>0] = $2704;
      $2705 = ((($$0101110$i)) + -5|0);
      $2706 = HEAP8[$2705>>0]|0;
      HEAP8[$2701>>0] = $2706;
      $2707 = ((($$0101110$i)) + -6|0);
      $2708 = HEAP8[$2707>>0]|0;
      HEAP8[$2703>>0] = $2708;
      $2709 = ((($$0101110$i)) + -7|0);
      $2710 = HEAP8[$2709>>0]|0;
      HEAP8[$2705>>0] = $2710;
      $2711 = ((($$0101110$i)) + -8|0);
      $2712 = HEAP8[$2711>>0]|0;
      HEAP8[$2707>>0] = $2712;
      HEAP8[$2709>>0] = $2698;
      HEAP8[$2711>>0] = $2700;
      $2713 = (($$0100111$i) + 1)|0;
      $exitcond124$i = ($2713|0)==($2679|0);
      if ($exitcond124$i) {
       break;
      } else {
       $$0100111$i = $2713;$$0101110$i = $2711;
      }
     }
    }
    break;
   }
   case 4:  {
    $2714 = ((($1)) + 9|0);
    $2715 = HEAP8[$2714>>0]|0;
    $2716 = ($2715<<24>>24)==(8);
    $2717 = ((($1)) + 4|0);
    $2718 = HEAP32[$2717>>2]|0;
    $2719 = (($2678) + ($2718)|0);
    $2720 = ($2679|0)!=(0);
    if ($2716) {
     if (!($2720)) {
      break L713;
     }
     $$096115$i = 0;$$098114$i = $2719;
     while(1) {
      $2721 = ((($$098114$i)) + -1|0);
      $2722 = HEAP8[$2721>>0]|0;
      $2723 = ((($$098114$i)) + -2|0);
      $2724 = HEAP8[$2723>>0]|0;
      HEAP8[$2721>>0] = $2724;
      HEAP8[$2723>>0] = $2722;
      $2725 = (($$096115$i) + 1)|0;
      $exitcond125$i = ($2725|0)==($2679|0);
      if ($exitcond125$i) {
       break;
      } else {
       $$096115$i = $2725;$$098114$i = $2723;
      }
     }
    } else {
     if (!($2720)) {
      break L713;
     }
     $$0119$i = 0;$$094118$i = $2719;
     while(1) {
      $2726 = ((($$094118$i)) + -1|0);
      $2727 = HEAP8[$2726>>0]|0;
      $2728 = ((($$094118$i)) + -2|0);
      $2729 = HEAP8[$2728>>0]|0;
      $2730 = ((($$094118$i)) + -3|0);
      $2731 = HEAP8[$2730>>0]|0;
      HEAP8[$2726>>0] = $2731;
      $2732 = ((($$094118$i)) + -4|0);
      $2733 = HEAP8[$2732>>0]|0;
      HEAP8[$2728>>0] = $2733;
      HEAP8[$2730>>0] = $2727;
      HEAP8[$2732>>0] = $2729;
      $2734 = (($$0119$i) + 1)|0;
      $exitcond126$i = ($2734|0)==($2679|0);
      if ($exitcond126$i) {
       break;
      } else {
       $$0119$i = $2734;$$094118$i = $2732;
      }
     }
    }
    break;
   }
   default: {
    break L713;
   }
   }
  }
 } while(0);
 $2735 = HEAP32[$10>>2]|0;
 $2736 = $2735 & 16;
 $2737 = ($2736|0)==(0);
 if ($2737) {
  $2741 = $2735;
 } else {
  $2738 = HEAP32[$3>>2]|0;
  $2739 = ((($2738)) + 1|0);
  _png_do_swap($1,$2739);
  $$pre327 = HEAP32[$10>>2]|0;
  $2741 = $$pre327;
 }
 $2740 = $2741 & 1048576;
 $2742 = ($2740|0)==(0);
 if ($2742) {
  STACKTOP = sp;return;
 }
 $2743 = ((($0)) + 192|0);
 $2744 = HEAP32[$2743>>2]|0;
 $2745 = ($2744|0)==(0|0);
 if (!($2745)) {
  $2746 = HEAP32[$3>>2]|0;
  $2747 = ((($2746)) + 1|0);
  FUNCTION_TABLE_viii[$2744 & 127]($0,$1,$2747);
 }
 $2748 = ((($0)) + 204|0);
 $2749 = HEAP8[$2748>>0]|0;
 $2750 = ($2749<<24>>24)==(0);
 if (!($2750)) {
  $2751 = ((($1)) + 9|0);
  HEAP8[$2751>>0] = $2749;
 }
 $2752 = ((($0)) + 205|0);
 $2753 = HEAP8[$2752>>0]|0;
 $2754 = ($2753<<24>>24)==(0);
 $$pre332 = ((($1)) + 10|0);
 if (!($2754)) {
  HEAP8[$$pre332>>0] = $2753;
 }
 $2755 = ((($1)) + 9|0);
 $2756 = HEAP8[$2755>>0]|0;
 $2757 = $2756&255;
 $2758 = HEAP8[$$pre332>>0]|0;
 $2759 = $2758&255;
 $2760 = Math_imul($2759, $2757)|0;
 $2761 = $2760&255;
 $2762 = ((($1)) + 11|0);
 HEAP8[$2762>>0] = $2761;
 $2763 = $2760 & 255;
 $2764 = ($2763>>>0)>(7);
 $2765 = HEAP32[$1>>2]|0;
 if ($2764) {
  $2766 = $2763 >>> 3;
  $2767 = Math_imul($2766, $2765)|0;
  $2772 = $2767;
 } else {
  $2768 = Math_imul($2763, $2765)|0;
  $2769 = (($2768) + 7)|0;
  $2770 = $2769 >>> 3;
  $2772 = $2770;
 }
 $2771 = ((($1)) + 4|0);
 HEAP32[$2771>>2] = $2772;
 STACKTOP = sp;return;
}
function _png_do_expand($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0202260 = 0, $$0208262 = 0, $$0218259 = 0, $$0225 = 0, $$0261 = 0, $$1 = 0, $$1203 = 0, $$1209268 = 0, $$1219265 = 0, $$1226 = 0, $$2204266 = 0, $$2210274 = 0, $$2220271 = 0, $$2267 = 0, $$239 = 0, $$3 = 0, $$3205 = 0, $$3211 = 0, $$3221247 = 0;
 var $$4206272 = 0, $$4212256 = 0, $$4222252 = 0, $$4273 = 0, $$5 = 0, $$5207 = 0, $$5213 = 0, $$5223278 = 0, $$6214282 = 0, $$6224286 = 0, $$6249 = 0, $$7215 = 0, $$7255 = 0, $$8216290 = 0, $$8281 = 0, $$9217 = 0, $$9289 = 0, $$pn227288 = 0, $$pn228279 = 0, $$pn229280 = 0;
 var $$pn230253 = 0, $$pn231254 = 0, $$pn232248 = 0, $$pn287 = 0, $$pn297 = 0, $$pn298 = 0, $$pn299 = 0, $$pn300 = 0, $$pre$phi312Z2D = 0, $$pre$phi314Z2D = 0, $$pre$phi316Z2D = 0, $$pre311 = 0, $$pre313 = 0, $$pre315 = 0, $$sink330 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond305 = 0, $exitcond306 = 0, $exitcond307 = 0, $exitcond308 = 0, $exitcond309 = 0;
 var $exitcond310 = 0, $or$cond = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ((($0)) + 8|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if (!($6)) {
  $127 = ($5<<24>>24)==(2);
  $128 = ($2|0)!=(0|0);
  $or$cond = $128 & $127;
  if (!($or$cond)) {
   return;
  }
  $129 = ((($0)) + 9|0);
  $130 = HEAP8[$129>>0]|0;
  switch ($130<<24>>24) {
  case 8:  {
   $131 = ($3|0)==(0);
   if (!($131)) {
    $132 = $3 << 2;
    $133 = (($1) + ($132)|0);
    $134 = ((($0)) + 4|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = (($1) + ($135)|0);
    $137 = ((($2)) + 6|0);
    $138 = HEAP16[$137>>1]|0;
    $139 = ((($2)) + 4|0);
    $140 = HEAP16[$139>>1]|0;
    $141 = ((($2)) + 2|0);
    $142 = HEAP16[$141>>1]|0;
    $143 = $142 & 255;
    $144 = $143&65535;
    $145 = $140 & 255;
    $146 = $145&65535;
    $147 = $138 & 255;
    $148 = $147&65535;
    $$5223278 = 0;$$pn228279 = $133;$$pn229280 = $136;
    while(1) {
     $$8281 = ((($$pn229280)) + -1|0);
     $$6214282 = ((($$pn228279)) + -1|0);
     $149 = ((($$pn229280)) + -3|0);
     $150 = HEAP8[$149>>0]|0;
     $151 = $150&255;
     $152 = ($151|0)==($144|0);
     $153 = ((($$pn229280)) + -2|0);
     if ($152) {
      $154 = HEAP8[$153>>0]|0;
      $155 = $154&255;
      $156 = ($155|0)==($146|0);
      if ($156) {
       $157 = HEAP8[$$8281>>0]|0;
       $158 = $157&255;
       $159 = ($158|0)==($148|0);
       if ($159) {
        $storemerge = 0;
       } else {
        label = 38;
       }
      } else {
       label = 38;
      }
     } else {
      label = 38;
     }
     if ((label|0) == 38) {
      label = 0;
      $storemerge = -1;
     }
     $$7215 = ((($$pn228279)) + -2|0);
     HEAP8[$$6214282>>0] = $storemerge;
     $160 = HEAP8[$$8281>>0]|0;
     $161 = ((($$pn228279)) + -3|0);
     HEAP8[$$7215>>0] = $160;
     $162 = HEAP8[$153>>0]|0;
     $163 = ((($$pn228279)) + -4|0);
     HEAP8[$161>>0] = $162;
     $164 = HEAP8[$149>>0]|0;
     HEAP8[$163>>0] = $164;
     $165 = (($$5223278) + 1)|0;
     $exitcond309 = ($165|0)==($3|0);
     if ($exitcond309) {
      break;
     } else {
      $$5223278 = $165;$$pn228279 = $163;$$pn229280 = $149;
     }
    }
   }
   break;
  }
  case 16:  {
   $166 = ((($2)) + 2|0);
   $167 = HEAP16[$166>>1]|0;
   $168 = ($167&65535) >>> 8;
   $169 = $168&65535;
   $170 = ((($2)) + 4|0);
   $171 = HEAP16[$170>>1]|0;
   $172 = ($171&65535) >>> 8;
   $173 = $172&65535;
   $174 = ((($2)) + 6|0);
   $175 = HEAP16[$174>>1]|0;
   $176 = ($175&65535) >>> 8;
   $177 = $176&65535;
   $178 = ($3|0)==(0);
   if (!($178)) {
    $179 = $3 << 3;
    $180 = (($1) + ($179)|0);
    $181 = ((($0)) + 4|0);
    $182 = HEAP32[$181>>2]|0;
    $183 = (($1) + ($182)|0);
    $184 = $167 & 255;
    $185 = $184&65535;
    $186 = $171 & 255;
    $187 = $186&65535;
    $188 = $175 & 255;
    $189 = $188&65535;
    $$6224286 = 0;$$pn227288 = $183;$$pn287 = $180;
    while(1) {
     $$9289 = ((($$pn227288)) + -1|0);
     $$8216290 = ((($$pn287)) + -1|0);
     $190 = ((($$pn227288)) + -6|0);
     $191 = HEAP8[$190>>0]|0;
     $192 = $191&255;
     $193 = ($192|0)==($169|0);
     $194 = ((($$pn227288)) + -5|0);
     if ($193) {
      $195 = HEAP8[$194>>0]|0;
      $196 = $195&255;
      $197 = ($196|0)==($185|0);
      if ($197) {
       $198 = ((($$pn227288)) + -4|0);
       $199 = HEAP8[$198>>0]|0;
       $200 = $199&255;
       $201 = ($200|0)==($173|0);
       if ($201) {
        $202 = ((($$pn227288)) + -3|0);
        $203 = HEAP8[$202>>0]|0;
        $204 = $203&255;
        $205 = ($204|0)==($187|0);
        if ($205) {
         $206 = ((($$pn227288)) + -2|0);
         $207 = HEAP8[$206>>0]|0;
         $208 = $207&255;
         $209 = ($208|0)==($177|0);
         if ($209) {
          $210 = HEAP8[$$9289>>0]|0;
          $211 = $210&255;
          $212 = ($211|0)==($189|0);
          if ($212) {
           $213 = ((($$pn287)) + -2|0);
           HEAP8[$$8216290>>0] = 0;
           HEAP8[$213>>0] = 0;
           $$pre$phi312Z2D = $206;$$pre$phi314Z2D = $202;$$pre$phi316Z2D = $198;
          } else {
           label = 49;
          }
         } else {
          label = 49;
         }
        } else {
         label = 49;
        }
       } else {
        label = 49;
       }
      } else {
       label = 49;
      }
     } else {
      label = 49;
     }
     if ((label|0) == 49) {
      label = 0;
      $214 = ((($$pn287)) + -2|0);
      HEAP8[$$8216290>>0] = -1;
      HEAP8[$214>>0] = -1;
      $$pre311 = ((($$pn227288)) + -2|0);
      $$pre313 = ((($$pn227288)) + -3|0);
      $$pre315 = ((($$pn227288)) + -4|0);
      $$pre$phi312Z2D = $$pre311;$$pre$phi314Z2D = $$pre313;$$pre$phi316Z2D = $$pre315;
     }
     $$9217 = ((($$pn287)) + -3|0);
     $215 = HEAP8[$$9289>>0]|0;
     $216 = ((($$pn287)) + -4|0);
     HEAP8[$$9217>>0] = $215;
     $217 = HEAP8[$$pre$phi312Z2D>>0]|0;
     $218 = ((($$pn287)) + -5|0);
     HEAP8[$216>>0] = $217;
     $219 = HEAP8[$$pre$phi314Z2D>>0]|0;
     $220 = ((($$pn287)) + -6|0);
     HEAP8[$218>>0] = $219;
     $221 = HEAP8[$$pre$phi316Z2D>>0]|0;
     $222 = ((($$pn287)) + -7|0);
     HEAP8[$220>>0] = $221;
     $223 = HEAP8[$194>>0]|0;
     $224 = ((($$pn287)) + -8|0);
     HEAP8[$222>>0] = $223;
     $225 = HEAP8[$190>>0]|0;
     HEAP8[$224>>0] = $225;
     $226 = (($$6224286) + 1)|0;
     $exitcond310 = ($226|0)==($3|0);
     if ($exitcond310) {
      break;
     } else {
      $$6224286 = $226;$$pn227288 = $190;$$pn287 = $224;
     }
    }
   }
   break;
  }
  default: {
  }
  }
  HEAP8[$4>>0] = 6;
  $227 = ((($0)) + 10|0);
  HEAP8[$227>>0] = 4;
  $228 = HEAP8[$129>>0]|0;
  $229 = $228&255;
  $230 = $229 << 2;
  $231 = $230&255;
  $232 = ((($0)) + 11|0);
  HEAP8[$232>>0] = $231;
  $233 = $230 & 252;
  $234 = ($233>>>0)>(7);
  if ($234) {
   $235 = $233 >>> 3;
   $236 = Math_imul($235, $3)|0;
   $241 = $236;
  } else {
   $237 = Math_imul($233, $3)|0;
   $238 = (($237) + 7)|0;
   $239 = $238 >>> 3;
   $241 = $239;
  }
  $240 = ((($0)) + 4|0);
  HEAP32[$240>>2] = $241;
  return;
 }
 $7 = ($2|0)!=(0|0);
 if ($7) {
  $8 = ((($2)) + 8|0);
  $9 = HEAP16[$8>>1]|0;
  $10 = $9&65535;
  $15 = $10;
 } else {
  $15 = 0;
 }
 $11 = ((($0)) + 9|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ($12&255)<(8);
 if ($13) {
  switch ($12<<24>>24) {
  case 1:  {
   $14 = $15 & 1;
   $16 = (0 - ($14))|0;
   $17 = $16 & 255;
   $18 = ($3|0)==(0);
   if ($18) {
    $$0225 = $17;
   } else {
    $19 = (($1) + ($3)|0);
    $20 = (($3) + 7)|0;
    $21 = $20 & 7;
    $22 = $21 ^ 7;
    $23 = (($3) + -1)|0;
    $24 = $23 >>> 3;
    $25 = (($1) + ($24)|0);
    $$0202260 = $25;$$0218259 = 0;$$0261 = $22;$$pn300 = $19;
    while(1) {
     $$0208262 = ((($$pn300)) + -1|0);
     $26 = HEAP8[$$0202260>>0]|0;
     $27 = $26&255;
     $28 = 1 << $$0261;
     $29 = $28 & $27;
     $30 = ($29|0)!=(0);
     $$ = $30 << 31 >> 31;
     HEAP8[$$0208262>>0] = $$;
     $31 = ($$0261|0)==(7);
     $32 = ((($$0202260)) + -1|0);
     $33 = (($$0261) + 1)|0;
     $$1203 = $31 ? $32 : $$0202260;
     $$1 = $31 ? 0 : $33;
     $34 = (($$0218259) + 1)|0;
     $exitcond306 = ($34|0)==($3|0);
     if ($exitcond306) {
      $$0225 = $17;
      break;
     } else {
      $$0202260 = $$1203;$$0218259 = $34;$$0261 = $$1;$$pn300 = $$0208262;
     }
    }
   }
   break;
  }
  case 2:  {
   $35 = $15 & 3;
   $36 = ($35*85)|0;
   $37 = ($3|0)==(0);
   if ($37) {
    $$0225 = $36;
   } else {
    $38 = (($1) + ($3)|0);
    $39 = $3 << 1;
    $40 = (($39) + 6)|0;
    $41 = $40 & 6;
    $42 = $41 ^ 6;
    $43 = (($3) + -1)|0;
    $44 = $43 >>> 2;
    $45 = (($1) + ($44)|0);
    $$1219265 = 0;$$2204266 = $45;$$2267 = $42;$$pn299 = $38;
    while(1) {
     $$1209268 = ((($$pn299)) + -1|0);
     $46 = HEAP8[$$2204266>>0]|0;
     $47 = $46&255;
     $48 = $47 >>> $$2267;
     $49 = $48 & 3;
     $50 = $49 << 2;
     $51 = $50 | $49;
     $52 = $49 << 4;
     $53 = $51 | $52;
     $54 = $49 << 6;
     $55 = $53 | $54;
     $56 = $55&255;
     HEAP8[$$1209268>>0] = $56;
     $57 = ($$2267|0)==(6);
     $58 = ((($$2204266)) + -1|0);
     $59 = (($$2267) + 2)|0;
     $$3205 = $57 ? $58 : $$2204266;
     $$3 = $57 ? 0 : $59;
     $60 = (($$1219265) + 1)|0;
     $exitcond307 = ($60|0)==($3|0);
     if ($exitcond307) {
      $$0225 = $36;
      break;
     } else {
      $$1219265 = $60;$$2204266 = $$3205;$$2267 = $$3;$$pn299 = $$1209268;
     }
    }
   }
   break;
  }
  case 4:  {
   $61 = $15 & 15;
   $62 = ($61*17)|0;
   $63 = ($3|0)==(0);
   if ($63) {
    $$0225 = $62;
   } else {
    $64 = (($1) + ($3)|0);
    $65 = $3 << 2;
    $66 = $65 & 4;
    $67 = (($3) + -1)|0;
    $68 = $67 >>> 1;
    $69 = (($1) + ($68)|0);
    $$2220271 = 0;$$4206272 = $69;$$4273 = $66;$$pn298 = $64;
    while(1) {
     $$2210274 = ((($$pn298)) + -1|0);
     $70 = HEAP8[$$4206272>>0]|0;
     $71 = $70&255;
     $72 = $71 >>> $$4273;
     $73 = $72 & 15;
     $74 = $73 << 4;
     $75 = $74 | $73;
     $76 = $75&255;
     HEAP8[$$2210274>>0] = $76;
     $77 = ($$4273|0)==(4);
     $78 = ((($$4206272)) + -1|0);
     $$5207 = $77 ? $78 : $$4206272;
     $$5 = $77 ? 0 : 4;
     $79 = (($$2220271) + 1)|0;
     $exitcond308 = ($79|0)==($3|0);
     if ($exitcond308) {
      $$0225 = $62;
      break;
     } else {
      $$2220271 = $79;$$4206272 = $$5207;$$4273 = $$5;$$pn298 = $$2210274;
     }
    }
   }
   break;
  }
  default: {
   $$0225 = $15;
  }
  }
  HEAP8[$11>>0] = 8;
  $80 = ((($0)) + 11|0);
  HEAP8[$80>>0] = 8;
  $81 = ((($0)) + 4|0);
  HEAP32[$81>>2] = $3;
  $$1226 = $$0225;$82 = 8;
 } else {
  $$1226 = $15;$82 = $12;
 }
 if (!($7)) {
  return;
 }
 switch ($82<<24>>24) {
 case 8:  {
  $83 = ($3|0)==(0);
  if (!($83)) {
   $84 = (($1) + ($3)|0);
   $85 = $3 << 1;
   $86 = (($1) + ($85)|0);
   $87 = $$1226&255;
   $$3221247 = 0;$$pn232248 = $86;$$pn297 = $84;
   while(1) {
    $$6249 = ((($$pn297)) + -1|0);
    $$3211 = ((($$pn232248)) + -1|0);
    $88 = HEAP8[$$6249>>0]|0;
    $89 = ($88<<24>>24)!=($87<<24>>24);
    $90 = ((($$pn232248)) + -2|0);
    $$239 = $89 << 31 >> 31;
    HEAP8[$$3211>>0] = $$239;
    $91 = HEAP8[$$6249>>0]|0;
    HEAP8[$90>>0] = $91;
    $92 = (($$3221247) + 1)|0;
    $exitcond = ($92|0)==($3|0);
    if ($exitcond) {
     break;
    } else {
     $$3221247 = $92;$$pn232248 = $90;$$pn297 = $$6249;
    }
   }
  }
  break;
 }
 case 16:  {
  $93 = ((($0)) + 4|0);
  $94 = HEAP32[$93>>2]|0;
  $95 = ($3|0)==(0);
  if (!($95)) {
   $96 = $94 << 1;
   $97 = (($1) + ($96)|0);
   $98 = (($1) + ($94)|0);
   $99 = $$1226 >>> 8;
   $100 = $99&255;
   $101 = $$1226&255;
   $$4222252 = 0;$$pn230253 = $97;$$pn231254 = $98;
   while(1) {
    $$7255 = ((($$pn231254)) + -1|0);
    $$4212256 = ((($$pn230253)) + -1|0);
    $102 = ((($$pn231254)) + -2|0);
    $103 = HEAP8[$102>>0]|0;
    $104 = ($103<<24>>24)==($100<<24>>24);
    if ($104) {
     $105 = HEAP8[$$7255>>0]|0;
     $106 = ($105<<24>>24)==($101<<24>>24);
     if ($106) {
      $$sink330 = 0;
     } else {
      label = 25;
     }
    } else {
     label = 25;
    }
    if ((label|0) == 25) {
     label = 0;
     $$sink330 = -1;
    }
    $107 = ((($$pn230253)) + -2|0);
    HEAP8[$$4212256>>0] = $$sink330;
    HEAP8[$107>>0] = $$sink330;
    $$5213 = ((($$pn230253)) + -3|0);
    $108 = HEAP8[$$7255>>0]|0;
    $109 = ((($$pn230253)) + -4|0);
    HEAP8[$$5213>>0] = $108;
    $110 = HEAP8[$102>>0]|0;
    HEAP8[$109>>0] = $110;
    $111 = (($$4222252) + 1)|0;
    $exitcond305 = ($111|0)==($3|0);
    if ($exitcond305) {
     break;
    } else {
     $$4222252 = $111;$$pn230253 = $109;$$pn231254 = $102;
    }
   }
  }
  break;
 }
 default: {
 }
 }
 HEAP8[$4>>0] = 4;
 $112 = ((($0)) + 10|0);
 HEAP8[$112>>0] = 2;
 $113 = HEAP8[$11>>0]|0;
 $114 = $113&255;
 $115 = $114 << 1;
 $116 = $115&255;
 $117 = ((($0)) + 11|0);
 HEAP8[$117>>0] = $116;
 $118 = $115 & 254;
 $119 = ($118>>>0)>(7);
 if ($119) {
  $120 = $118 >>> 3;
  $121 = Math_imul($120, $3)|0;
  $126 = $121;
 } else {
  $122 = Math_imul($118, $3)|0;
  $123 = (($122) + 7)|0;
  $124 = $123 >>> 3;
  $126 = $124;
 }
 $125 = ((($0)) + 4|0);
 HEAP32[$125>>2] = $126;
 return;
}
function _png_do_gray_to_rgb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0104127 = 0, $$0105124 = 0, $$0106123 = 0, $$0107120 = 0, $$0108119 = 0, $$0109117 = 0, $$0110116 = 0, $$0111115 = 0, $$0128 = 0, $$1118 = 0, $$2122 = 0, $$3126 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond = 0, $exitcond133 = 0, $exitcond134 = 0, $exitcond135 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ((($0)) + 9|0);
 $4 = HEAP8[$3>>0]|0;
 $5 = ($4&255)>(7);
 if (!($5)) {
  return;
 }
 $6 = ((($0)) + 8|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7 & 2;
 $9 = ($8<<24>>24)==(0);
 if (!($9)) {
  return;
 }
 L7: do {
  switch ($7<<24>>24) {
  case 0:  {
   $10 = ($4<<24>>24)==(8);
   if ($10) {
    $11 = (($1) + ($2)|0);
    $12 = ((($11)) + -1|0);
    $13 = ($2|0)==(0);
    if ($13) {
     break L7;
    }
    $14 = $2 << 1;
    $15 = (($12) + ($14)|0);
    $$0109117 = $15;$$0110116 = $12;$$0111115 = 0;
    while(1) {
     $16 = HEAP8[$$0110116>>0]|0;
     $17 = ((($$0109117)) + -1|0);
     HEAP8[$$0109117>>0] = $16;
     $18 = HEAP8[$$0110116>>0]|0;
     $19 = ((($$0109117)) + -2|0);
     HEAP8[$17>>0] = $18;
     $20 = ((($$0110116)) + -1|0);
     $21 = HEAP8[$$0110116>>0]|0;
     $22 = ((($$0109117)) + -3|0);
     HEAP8[$19>>0] = $21;
     $23 = (($$0111115) + 1)|0;
     $exitcond = ($23|0)==($2|0);
     if ($exitcond) {
      break;
     } else {
      $$0109117 = $22;$$0110116 = $20;$$0111115 = $23;
     }
    }
   } else {
    $24 = $2 << 1;
    $25 = (($1) + ($24)|0);
    $26 = ((($25)) + -1|0);
    $27 = ($2|0)==(0);
    if ($27) {
     break L7;
    }
    $28 = $2 << 2;
    $29 = (($26) + ($28)|0);
    $$0107120 = $29;$$0108119 = $26;$$1118 = 0;
    while(1) {
     $30 = HEAP8[$$0108119>>0]|0;
     $31 = ((($$0107120)) + -1|0);
     HEAP8[$$0107120>>0] = $30;
     $32 = ((($$0108119)) + -1|0);
     $33 = HEAP8[$32>>0]|0;
     $34 = ((($$0107120)) + -2|0);
     HEAP8[$31>>0] = $33;
     $35 = HEAP8[$$0108119>>0]|0;
     $36 = ((($$0107120)) + -3|0);
     HEAP8[$34>>0] = $35;
     $37 = HEAP8[$32>>0]|0;
     $38 = ((($$0107120)) + -4|0);
     HEAP8[$36>>0] = $37;
     $39 = HEAP8[$$0108119>>0]|0;
     $40 = ((($$0107120)) + -5|0);
     HEAP8[$38>>0] = $39;
     $41 = ((($$0108119)) + -2|0);
     $42 = HEAP8[$32>>0]|0;
     $43 = ((($$0107120)) + -6|0);
     HEAP8[$40>>0] = $42;
     $44 = (($$1118) + 1)|0;
     $exitcond133 = ($44|0)==($2|0);
     if ($exitcond133) {
      break;
     } else {
      $$0107120 = $43;$$0108119 = $41;$$1118 = $44;
     }
    }
   }
   break;
  }
  case 4:  {
   $45 = ($4<<24>>24)==(8);
   if ($45) {
    $46 = $2 << 1;
    $47 = (($1) + ($46)|0);
    $48 = ((($47)) + -1|0);
    $49 = ($2|0)==(0);
    if ($49) {
     break L7;
    }
    $50 = (($48) + ($46)|0);
    $$0105124 = $50;$$0106123 = $48;$$2122 = 0;
    while(1) {
     $51 = ((($$0106123)) + -1|0);
     $52 = HEAP8[$$0106123>>0]|0;
     $53 = ((($$0105124)) + -1|0);
     HEAP8[$$0105124>>0] = $52;
     $54 = HEAP8[$51>>0]|0;
     $55 = ((($$0105124)) + -2|0);
     HEAP8[$53>>0] = $54;
     $56 = HEAP8[$51>>0]|0;
     $57 = ((($$0105124)) + -3|0);
     HEAP8[$55>>0] = $56;
     $58 = ((($$0106123)) + -2|0);
     $59 = HEAP8[$51>>0]|0;
     $60 = ((($$0105124)) + -4|0);
     HEAP8[$57>>0] = $59;
     $61 = (($$2122) + 1)|0;
     $exitcond134 = ($61|0)==($2|0);
     if ($exitcond134) {
      break;
     } else {
      $$0105124 = $60;$$0106123 = $58;$$2122 = $61;
     }
    }
   } else {
    $62 = $2 << 2;
    $63 = (($1) + ($62)|0);
    $64 = ((($63)) + -1|0);
    $65 = ($2|0)==(0);
    if ($65) {
     break L7;
    }
    $66 = (($64) + ($62)|0);
    $$0104127 = $64;$$0128 = $66;$$3126 = 0;
    while(1) {
     $67 = ((($$0104127)) + -1|0);
     $68 = HEAP8[$$0104127>>0]|0;
     $69 = ((($$0128)) + -1|0);
     HEAP8[$$0128>>0] = $68;
     $70 = ((($$0104127)) + -2|0);
     $71 = HEAP8[$67>>0]|0;
     $72 = ((($$0128)) + -2|0);
     HEAP8[$69>>0] = $71;
     $73 = HEAP8[$70>>0]|0;
     $74 = ((($$0128)) + -3|0);
     HEAP8[$72>>0] = $73;
     $75 = ((($$0104127)) + -3|0);
     $76 = HEAP8[$75>>0]|0;
     $77 = ((($$0128)) + -4|0);
     HEAP8[$74>>0] = $76;
     $78 = HEAP8[$70>>0]|0;
     $79 = ((($$0128)) + -5|0);
     HEAP8[$77>>0] = $78;
     $80 = HEAP8[$75>>0]|0;
     $81 = ((($$0128)) + -6|0);
     HEAP8[$79>>0] = $80;
     $82 = HEAP8[$70>>0]|0;
     $83 = ((($$0128)) + -7|0);
     HEAP8[$81>>0] = $82;
     $84 = ((($$0104127)) + -4|0);
     $85 = HEAP8[$75>>0]|0;
     $86 = ((($$0128)) + -8|0);
     HEAP8[$83>>0] = $85;
     $87 = (($$3126) + 1)|0;
     $exitcond135 = ($87|0)==($2|0);
     if ($exitcond135) {
      break;
     } else {
      $$0104127 = $84;$$0128 = $86;$$3126 = $87;
     }
    }
   }
   break;
  }
  default: {
  }
  }
 } while(0);
 $88 = ((($0)) + 10|0);
 $89 = HEAP8[$88>>0]|0;
 $90 = $89&255;
 $91 = (($90) + 2)|0;
 $92 = $91&255;
 HEAP8[$88>>0] = $92;
 $93 = HEAP8[$6>>0]|0;
 $94 = $93 | 2;
 HEAP8[$6>>0] = $94;
 $95 = (($89) + 2)<<24>>24;
 $96 = $95&255;
 $97 = HEAP8[$3>>0]|0;
 $98 = $97&255;
 $99 = Math_imul($98, $96)|0;
 $100 = $99&255;
 $101 = ((($0)) + 11|0);
 HEAP8[$101>>0] = $100;
 $102 = $99 & 255;
 $103 = ($102>>>0)>(7);
 if ($103) {
  $104 = $102 >>> 3;
  $105 = Math_imul($104, $2)|0;
  $110 = $105;
 } else {
  $106 = Math_imul($102, $2)|0;
  $107 = (($106) + 7)|0;
  $108 = $107 >>> 3;
  $110 = $108;
 }
 $109 = ((($0)) + 4|0);
 HEAP32[$109>>2] = $110;
 return;
}
function _png_set_read_fn($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $png_default_read_data$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 188|0);
 HEAP32[$4>>2] = $1;
 $5 = ($2|0)==(0|0);
 $6 = ((($0)) + 184|0);
 $png_default_read_data$ = $5 ? 67 : $2;
 HEAP32[$6>>2] = $png_default_read_data$;
 $7 = ((($0)) + 180|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if (!($9)) {
  HEAP32[$7>>2] = 0;
  _png_warning($0,24661);
 }
 $10 = ((($0)) + 472|0);
 HEAP32[$10>>2] = 0;
 return;
}
function _png_default_read_data($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 188|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_fread($1,1,$2,$5)|0);
 $7 = ($6|0)==($2|0);
 if ($7) {
  return;
 } else {
  _png_error($0,24729);
  // unreachable;
 }
}
function _png_create_read_struct($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_png_create_png_struct($0,$1,$2,$3,0,0,0)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  return ($4|0);
 }
 $6 = ((($4)) + 208|0);
 HEAP32[$6>>2] = 32768;
 $7 = ((($4)) + 796|0);
 HEAP32[$7>>2] = 8192;
 $8 = ((($4)) + 212|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = $9 | 3145728;
 HEAP32[$8>>2] = $10;
 _png_set_read_fn($4,0,0);
 return ($4|0);
}
function _png_read_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$pre = 0, $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond114 = 0, $switch$split102D = 0, $switch$split12D = 0, $switch$split132D = 0, $switch$split162D = 0, $switch$split192D = 0, $switch$split222D = 0, $switch$split252D = 0;
 var $switch$split282D = 0, $switch$split2D = 0, $switch$split312D = 0, $switch$split342D = 0, $switch$split372D = 0, $switch$split402D = 0, $switch$split42D = 0, $switch$split432D = 0, $switch$split462D = 0, $switch$split72D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 $3 = ($1|0)==(0|0);
 $or$cond = $2 | $3;
 if ($or$cond) {
  return;
 }
 _png_read_sig($0,$1);
 $4 = ((($0)) + 376|0);
 $5 = ((($0)) + 208|0);
 $6 = ((($0)) + 435|0);
 L4: while(1) {
  $7 = (_png_read_chunk_header($0)|0);
  $8 = HEAP32[$4>>2]|0;
  $9 = ($8|0)==(1229209940);
  $10 = HEAP32[$5>>2]|0;
  L6: do {
   if ($9) {
    $11 = $10 & 1;
    $12 = ($11|0)==(0);
    if ($12) {
     label = 5;
     break L4;
    }
    $13 = HEAP8[$6>>0]|0;
    $14 = ($13<<24>>24)==(3);
    $15 = $10 & 2;
    $16 = ($15|0)==(0);
    $or$cond114 = $16 & $14;
    if ($or$cond114) {
     label = 7;
     break L4;
    }
    $17 = $10 & 8;
    $18 = ($17|0)==(0);
    if ($18) {
     $20 = $10;
    } else {
     _png_chunk_benign_error($0,24790);
     $$pre = HEAP32[$5>>2]|0;
     $20 = $$pre;
    }
    $19 = $20 | 4;
    HEAP32[$5>>2] = $19;
    label = 17;
   } else {
    $21 = $10 & 4;
    $22 = ($21|0)==(0);
    if (!($22)) {
     $23 = $10 | 8;
     HEAP32[$5>>2] = $23;
    }
    $switch$split2D = ($8|0)<(1229472850);
    if ($switch$split2D) {
     switch ($8|0) {
     case 1229278788:  {
      break;
     }
     default: {
      label = 17;
      break L6;
     }
     }
     _png_handle_IEND($0,$1,$7);
     break;
    } else {
     switch ($8|0) {
     case 1229472850:  {
      break;
     }
     default: {
      label = 17;
      break L6;
     }
     }
     _png_handle_IHDR($0,$1,$7);
     break;
    }
   }
  } while(0);
  L22: do {
   if ((label|0) == 17) {
    label = 0;
    $24 = (_png_chunk_unknown_handling($0,$8)|0);
    $25 = ($24|0)==(0);
    if (!($25)) {
     _png_handle_unknown($0,$1,$7,$24);
     $26 = ($8|0)==(1347179589);
     if ($26) {
      $27 = HEAP32[$5>>2]|0;
      $28 = $27 | 2;
      HEAP32[$5>>2] = $28;
      break;
     } else {
      if ($9) {
       $$sink = 0;
       label = 43;
       break L4;
      } else {
       break;
      }
     }
    }
    $29 = ($8|0)==(1347179589);
    if ($29) {
     _png_handle_PLTE($0,$1,$7);
     break;
    }
    if ($9) {
     $$sink = $7;
     label = 43;
     break L4;
    }
    $switch$split12D = ($8|0)<(1883789683);
    L34: do {
     if ($switch$split12D) {
      $switch$split42D = ($8|0)<(1766015824);
      if ($switch$split42D) {
       $switch$split102D = ($8|0)<(1732332865);
       if ($switch$split102D) {
        $switch$split222D = ($8|0)<(1665684045);
        if ($switch$split222D) {
         switch ($8|0) {
         case 1649100612:  {
          break;
         }
         default: {
          break L34;
         }
         }
         _png_handle_bKGD($0,$1,$7);
         break L22;
        } else {
         switch ($8|0) {
         case 1665684045:  {
          break;
         }
         default: {
          break L34;
         }
         }
         _png_handle_cHRM($0,$1,$7);
         break L22;
        }
       } else {
        $switch$split252D = ($8|0)<(1749635924);
        if ($switch$split252D) {
         switch ($8|0) {
         case 1732332865:  {
          break;
         }
         default: {
          break L34;
         }
         }
         _png_handle_gAMA($0,$1,$7);
         break L22;
        } else {
         switch ($8|0) {
         case 1749635924:  {
          break;
         }
         default: {
          break L34;
         }
         }
         _png_handle_hIST($0,$1,$7);
         break L22;
        }
       }
      } else {
       $switch$split132D = ($8|0)<(1866876531);
       if ($switch$split132D) {
        $switch$split282D = ($8|0)<(1767135348);
        if ($switch$split282D) {
         switch ($8|0) {
         case 1766015824:  {
          break;
         }
         default: {
          break L34;
         }
         }
         _png_handle_iCCP($0,$1,$7);
         break L22;
        } else {
         switch ($8|0) {
         case 1767135348:  {
          break;
         }
         default: {
          break L34;
         }
         }
         _png_handle_iTXt($0,$1,$7);
         break L22;
        }
       } else {
        $switch$split312D = ($8|0)<(1883455820);
        if ($switch$split312D) {
         switch ($8|0) {
         case 1866876531:  {
          break;
         }
         default: {
          break L34;
         }
         }
         _png_handle_oFFs($0,$1,$7);
         break L22;
        } else {
         switch ($8|0) {
         case 1883455820:  {
          break;
         }
         default: {
          break L34;
         }
         }
         _png_handle_pCAL($0,$1,$7);
         break L22;
        }
       }
      }
     } else {
      $switch$split72D = ($8|0)<(1934772034);
      if ($switch$split72D) {
       $switch$split162D = ($8|0)<(1933787468);
       if ($switch$split162D) {
        $switch$split342D = ($8|0)<(1933723988);
        if ($switch$split342D) {
         switch ($8|0) {
         case 1883789683:  {
          break;
         }
         default: {
          break L34;
         }
         }
         _png_handle_pHYs($0,$1,$7);
         break L22;
        } else {
         switch ($8|0) {
         case 1933723988:  {
          break;
         }
         default: {
          break L34;
         }
         }
         _png_handle_sBIT($0,$1,$7);
         break L22;
        }
       } else {
        $switch$split372D = ($8|0)<(1934642260);
        if ($switch$split372D) {
         switch ($8|0) {
         case 1933787468:  {
          break;
         }
         default: {
          break L34;
         }
         }
         _png_handle_sCAL($0,$1,$7);
         break L22;
        } else {
         switch ($8|0) {
         case 1934642260:  {
          break;
         }
         default: {
          break L34;
         }
         }
         _png_handle_sPLT($0,$1,$7);
         break L22;
        }
       }
      }
      $switch$split192D = ($8|0)<(1950960965);
      if ($switch$split192D) {
       $switch$split402D = ($8|0)<(1950701684);
       if ($switch$split402D) {
        switch ($8|0) {
        case 1934772034:  {
         break;
        }
        default: {
         break L34;
        }
        }
        _png_handle_sRGB($0,$1,$7);
        break L22;
       } else {
        switch ($8|0) {
        case 1950701684:  {
         break;
        }
        default: {
         break L34;
        }
        }
        _png_handle_tEXt($0,$1,$7);
        break L22;
       }
      }
      $switch$split432D = ($8|0)<(1951551059);
      if ($switch$split432D) {
       switch ($8|0) {
       case 1950960965:  {
        break;
       }
       default: {
        break L34;
       }
       }
       _png_handle_tIME($0,$1,$7);
       break L22;
      }
      $switch$split462D = ($8|0)<(2052348020);
      if ($switch$split462D) {
       switch ($8|0) {
       case 1951551059:  {
        break;
       }
       default: {
        break L34;
       }
       }
       _png_handle_tRNS($0,$1,$7);
       break L22;
      } else {
       switch ($8|0) {
       case 2052348020:  {
        break;
       }
       default: {
        break L34;
       }
       }
       _png_handle_zTXt($0,$1,$7);
       break L22;
      }
     }
    } while(0);
    _png_handle_unknown($0,$1,$7,0);
   }
  } while(0);
 }
 if ((label|0) == 5) {
  _png_chunk_error($0,24740);
  // unreachable;
 }
 else if ((label|0) == 7) {
  _png_chunk_error($0,24765);
  // unreachable;
 }
 else if ((label|0) == 43) {
  $30 = ((($0)) + 408|0);
  HEAP32[$30>>2] = $$sink;
  return;
 }
}
function _png_read_update_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 212|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 64;
 $6 = ($5|0)==(0);
 if ($6) {
  _png_read_start_row($0);
  _png_read_transform_info($0,$1);
  return;
 } else {
  _png_app_error($0,24811);
  return;
 }
}
function _png_read_transform_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond76 = 0, $or$cond77 = 0, $or$cond78 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 216|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 4096;
 $5 = ($4|0)==(0);
 do {
  if (!($5)) {
   $6 = ((($1)) + 25|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(3);
   $9 = ((($0)) + 428|0);
   $10 = HEAP16[$9>>1]|0;
   $11 = ($10<<16>>16)==(0);
   if ($8) {
    $$ = $11 ? 2 : 6;
    HEAP8[$6>>0] = $$;
    $12 = ((($1)) + 24|0);
    HEAP8[$12>>0] = 8;
    $13 = ((($1)) + 22|0);
    HEAP16[$13>>1] = 0;
    $14 = ((($0)) + 416|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(0|0);
    if (!($16)) {
     break;
    }
    _png_error($0,24869);
    // unreachable;
   }
   $17 = $3 & 33554432;
   $18 = ($17|0)==(0);
   $or$cond = $18 | $11;
   if (!($or$cond)) {
    $19 = $7 | 4;
    HEAP8[$6>>0] = $19;
   }
   $20 = ((($1)) + 24|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21&255)<(8);
   if ($22) {
    HEAP8[$20>>0] = 8;
   }
   $23 = ((($1)) + 22|0);
   HEAP16[$23>>1] = 0;
  }
 } while(0);
 $24 = $3 & 128;
 $25 = ($24|0)==(0);
 if (!($25)) {
  $26 = ((($1)) + 170|0);
  $27 = ((($0)) + 452|0);
  ;HEAP16[$26>>1]=HEAP16[$27>>1]|0;HEAP16[$26+2>>1]=HEAP16[$27+2>>1]|0;HEAP16[$26+4>>1]=HEAP16[$27+4>>1]|0;HEAP16[$26+6>>1]=HEAP16[$27+6>>1]|0;HEAP16[$26+8>>1]=HEAP16[$27+8>>1]|0;
 }
 $28 = ((($0)) + 824|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ((($1)) + 40|0);
 HEAP32[$30>>2] = $29;
 $31 = ((($1)) + 24|0);
 $32 = HEAP8[$31>>0]|0;
 $33 = ($32<<24>>24)==(16);
 if ($33) {
  $34 = $3 & 67108864;
  $35 = ($34|0)==(0);
  if ($35) {
   $121 = 16;
  } else {
   HEAP8[$31>>0] = 8;
   $121 = 8;
  }
  $36 = $3 & 1024;
  $37 = ($36|0)==(0);
  if ($37) {
   $55 = $121;
  } else {
   HEAP8[$31>>0] = 8;
   $55 = 8;
  }
 } else {
  $55 = $32;
 }
 $38 = $3 & 16384;
 $39 = ($38|0)==(0);
 if (!($39)) {
  $40 = ((($1)) + 25|0);
  $41 = HEAP8[$40>>0]|0;
  $42 = $41 | 2;
  HEAP8[$40>>0] = $42;
 }
 $43 = $3 & 6291456;
 $44 = ($43|0)==(0);
 if (!($44)) {
  $45 = ((($1)) + 25|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $46 & -3;
  HEAP8[$45>>0] = $47;
 }
 $48 = $3 & 64;
 $49 = ($48|0)==(0);
 L30: do {
  if (!($49)) {
   $50 = ((($1)) + 25|0);
   $51 = HEAP8[$50>>0]|0;
   switch ($51<<24>>24) {
   case 6: case 2:  {
    break;
   }
   default: {
    break L30;
   }
   }
   $52 = ((($0)) + 612|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = ($53|0)!=(0|0);
   $56 = ($55<<24>>24)==(8);
   $or$cond76 = $54 & $56;
   if ($or$cond76) {
    HEAP8[$50>>0] = 3;
   }
  }
 } while(0);
 $57 = $3 & 512;
 $58 = ($57|0)!=(0);
 $59 = ($55<<24>>24)==(8);
 $or$cond77 = $58 & $59;
 if ($or$cond77) {
  $60 = ((($1)) + 25|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = ($61<<24>>24)==(3);
  if ($62) {
   $65 = 8;
  } else {
   HEAP8[$31>>0] = 16;
   $65 = 16;
  }
 } else {
  $65 = $55;
 }
 $63 = $3 & 4;
 $64 = ($63|0)!=(0);
 $66 = ($65&255)<(8);
 $or$cond78 = $64 & $66;
 if ($or$cond78) {
  HEAP8[$31>>0] = 8;
  $96 = 8;
 } else {
  $96 = $65;
 }
 $67 = ((($1)) + 25|0);
 $68 = HEAP8[$67>>0]|0;
 $69 = ($68<<24>>24)==(3);
 do {
  if ($69) {
   $70 = ((($1)) + 29|0);
   HEAP8[$70>>0] = 1;
   $83 = 1;
  } else {
   $71 = $68 & 2;
   $72 = ($71<<24>>24)==(0);
   $73 = ((($1)) + 29|0);
   if ($72) {
    HEAP8[$73>>0] = 1;
    $83 = 1;
    break;
   } else {
    HEAP8[$73>>0] = 3;
    $83 = 3;
    break;
   }
  }
 } while(0);
 $74 = $3 & 262144;
 $75 = ($74|0)==(0);
 $76 = $68 & -5;
 if ($75) {
  $79 = $68;
 } else {
  $77 = ((($1)) + 22|0);
  HEAP8[$67>>0] = $76;
  HEAP16[$77>>1] = 0;
  $79 = $76;
 }
 $78 = $79 & 4;
 $80 = ($78<<24>>24)==(0);
 if ($80) {
  $88 = $83;
 } else {
  $81 = ((($1)) + 29|0);
  $82 = (($83) + 1)<<24>>24;
  HEAP8[$81>>0] = $82;
  $88 = $82;
 }
 $84 = $3 & 32768;
 $85 = ($84|0)==(0);
 L55: do {
  if ($85) {
   $100 = $88;
  } else {
   switch ($79<<24>>24) {
   case 0: case 2:  {
    break;
   }
   default: {
    $100 = $88;
    break L55;
   }
   }
   $86 = ((($1)) + 29|0);
   $87 = (($88) + 1)<<24>>24;
   HEAP8[$86>>0] = $87;
   $89 = $3 & 16777216;
   $90 = ($89|0)==(0);
   if ($90) {
    $100 = $87;
   } else {
    $91 = $79 | 4;
    HEAP8[$67>>0] = $91;
    $100 = $87;
   }
  }
 } while(0);
 $92 = $3 & 1048576;
 $93 = ($92|0)==(0);
 if ($93) {
  $104 = $100;$106 = $96;
 } else {
  $94 = ((($0)) + 204|0);
  $95 = HEAP8[$94>>0]|0;
  $97 = ($96&255)<($95&255);
  if ($97) {
   HEAP8[$31>>0] = $95;
   $122 = $95;
  } else {
   $122 = $96;
  }
  $98 = ((($0)) + 205|0);
  $99 = HEAP8[$98>>0]|0;
  $101 = ($100&255)<($99&255);
  if ($101) {
   $102 = ((($1)) + 29|0);
   HEAP8[$102>>0] = $99;
   $104 = $99;$106 = $122;
  } else {
   $104 = $100;$106 = $122;
  }
 }
 $103 = $104&255;
 $105 = $106&255;
 $107 = Math_imul($105, $103)|0;
 $108 = $107&255;
 $109 = ((($1)) + 30|0);
 HEAP8[$109>>0] = $108;
 $110 = $107 & 255;
 $111 = ($110>>>0)>(7);
 $112 = HEAP32[$1>>2]|0;
 if ($111) {
  $113 = $110 >>> 3;
  $114 = Math_imul($113, $112)|0;
  $119 = $114;
  $118 = ((($1)) + 12|0);
  HEAP32[$118>>2] = $119;
  $120 = ((($0)) + 404|0);
  HEAP32[$120>>2] = $119;
  return;
 } else {
  $115 = Math_imul($110, $112)|0;
  $116 = (($115) + 7)|0;
  $117 = $116 >>> 3;
  $119 = $117;
  $118 = ((($1)) + 12|0);
  HEAP32[$118>>2] = $119;
  $120 = ((($0)) + 404|0);
  HEAP32[$120>>2] = $119;
  return;
 }
}
function _png_read_row($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$0673$i$lver$orig = 0, $$0682$i$lver$orig = 0, $$0715$i$lver$orig = 0, $$0724$i$lver$orig = 0, $$1$i = 0, $$idx$val = 0, $$idx98$val = 0, $$idx99$val = 0, $$pre = 0, $$pre$phi105Z2D = 0, $$pre$phiZ2D = 0, $$pre102 = 0, $$pre103 = 0, $$pre104 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$lver$orig = 0;
 var $exitcond8$i$lver$orig = 0, $or$cond = 0, $or$cond97 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($0|0)==(0|0);
 if ($4) {
  STACKTOP = sp;return;
 }
 $5 = ((($0)) + 212|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 64;
 $8 = ($7|0)==(0);
 if ($8) {
  _png_read_start_row($0);
 }
 $9 = ((($0)) + 368|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$3>>2] = $10;
 $11 = ((($0)) + 435|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = ((($3)) + 8|0);
 HEAP8[$13>>0] = $12;
 $14 = ((($0)) + 436|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ((($3)) + 9|0);
 HEAP8[$16>>0] = $15;
 $17 = ((($0)) + 439|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = ((($3)) + 10|0);
 HEAP8[$19>>0] = $18;
 $20 = ((($0)) + 438|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = ((($3)) + 11|0);
 HEAP8[$22>>0] = $21;
 $23 = $21&255;
 $24 = ($21&255)>(7);
 if ($24) {
  $25 = $23 >>> 3;
  $26 = Math_imul($25, $10)|0;
  $31 = $26;
 } else {
  $27 = Math_imul($10, $23)|0;
  $28 = (($27) + 7)|0;
  $29 = $28 >>> 3;
  $31 = $29;
 }
 $30 = ((($3)) + 4|0);
 HEAP32[$30>>2] = $31;
 $32 = ((($0)) + 372|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ((($0)) + 432|0);
 $35 = HEAP8[$34>>0]|0;
 $36 = ($35<<24>>24)==(0);
 L11: do {
  if (!($36)) {
   $37 = ((($0)) + 216|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = $38 & 2;
   $40 = ($39|0)==(0);
   if (!($40)) {
    $41 = ((($0)) + 433|0);
    $42 = HEAP8[$41>>0]|0;
    switch ($42<<24>>24) {
    case 0:  {
     $43 = $33 & 7;
     $44 = ($43|0)==(0);
     if ($44) {
      break L11;
     }
     $45 = ($2|0)==(0|0);
     if (!($45)) {
      _png_combine_row($0,$2,1);
     }
     _png_read_finish_row($0);
     STACKTOP = sp;return;
     break;
    }
    case 1:  {
     $46 = $33 & 7;
     $47 = ($46|0)==(0);
     if ($47) {
      $48 = ((($0)) + 348|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = ($49>>>0)<(5);
      if (!($50)) {
       break L11;
      }
     }
     $51 = ($2|0)==(0|0);
     if (!($51)) {
      _png_combine_row($0,$2,1);
     }
     _png_read_finish_row($0);
     STACKTOP = sp;return;
     break;
    }
    case 2:  {
     $52 = $33 & 7;
     $53 = ($52|0)==(4);
     if ($53) {
      break L11;
     }
     $54 = ($2|0)==(0|0);
     $55 = $33 & 4;
     $56 = ($55|0)==(0);
     $or$cond = $54 | $56;
     if (!($or$cond)) {
      _png_combine_row($0,$2,1);
     }
     _png_read_finish_row($0);
     STACKTOP = sp;return;
     break;
    }
    case 3:  {
     $57 = $33 & 3;
     $58 = ($57|0)==(0);
     if ($58) {
      $59 = ((($0)) + 348|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60>>>0)<(3);
      if (!($61)) {
       break L11;
      }
     }
     $62 = ($2|0)==(0|0);
     if (!($62)) {
      _png_combine_row($0,$2,1);
     }
     _png_read_finish_row($0);
     STACKTOP = sp;return;
     break;
    }
    case 4:  {
     $63 = $33 & 3;
     $64 = ($63|0)==(2);
     if ($64) {
      break L11;
     }
     $65 = ($2|0)==(0|0);
     $66 = $33 & 2;
     $67 = ($66|0)==(0);
     $or$cond97 = $65 | $67;
     if (!($or$cond97)) {
      _png_combine_row($0,$2,1);
     }
     _png_read_finish_row($0);
     STACKTOP = sp;return;
     break;
    }
    case 5:  {
     $68 = $33 & 1;
     $69 = ($68|0)==(0);
     if ($69) {
      $70 = ((($0)) + 348|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = ($71>>>0)<(2);
      if (!($72)) {
       break L11;
      }
     }
     $73 = ($2|0)==(0|0);
     if (!($73)) {
      _png_combine_row($0,$2,1);
     }
     _png_read_finish_row($0);
     STACKTOP = sp;return;
     break;
    }
    default: {
     $74 = $33 & 1;
     $75 = ($74|0)==(0);
     if (!($75)) {
      break L11;
     }
     _png_read_finish_row($0);
     STACKTOP = sp;return;
    }
    }
   }
  }
 } while(0);
 $76 = ((($0)) + 208|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $77 & 4;
 $79 = ($78|0)==(0);
 if ($79) {
  _png_error($0,24960);
  // unreachable;
 }
 $80 = ((($0)) + 384|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = (($31) + 1)|0;
 _png_read_IDAT_data($0,$81,$82);
 $83 = HEAP32[$80>>2]|0;
 $84 = HEAP8[$83>>0]|0;
 $85 = $84&255;
 $86 = ($84<<24>>24)==(0);
 do {
  if ($86) {
   $$pre104 = ((($0)) + 380|0);
   $$pre$phi105Z2D = $$pre104;$$pre$phiZ2D = $82;$93 = $83;
  } else {
   $87 = ($84&255)<(5);
   if ($87) {
    $88 = ((($83)) + 1|0);
    $89 = ((($0)) + 380|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ((($90)) + 1|0);
    _png_read_filter_row($0,$3,$88,$91,$85);
    $$pre = HEAP32[$80>>2]|0;
    $$pre102 = HEAP32[$30>>2]|0;
    $$pre103 = (($$pre102) + 1)|0;
    $$pre$phi105Z2D = $89;$$pre$phiZ2D = $$pre103;$93 = $$pre;
    break;
   } else {
    _png_error($0,24993);
    // unreachable;
   }
  }
 } while(0);
 $92 = HEAP32[$$pre$phi105Z2D>>2]|0;
 _memcpy(($92|0),($93|0),($$pre$phiZ2D|0))|0;
 $94 = ((($0)) + 708|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = $95 & 4;
 $97 = ($96|0)==(0);
 L71: do {
  if (!($97)) {
   $98 = ((($0)) + 712|0);
   $99 = HEAP8[$98>>0]|0;
   $100 = ($99<<24>>24)==(64);
   if ($100) {
    $101 = HEAP32[$80>>2]|0;
    $102 = ((($101)) + 1|0);
    $$idx$val = HEAP32[$3>>2]|0;
    $$idx98$val = HEAP8[$13>>0]|0;
    $103 = $$idx98$val & 2;
    $104 = ($103<<24>>24)==(0);
    if (!($104)) {
     $$idx99$val = HEAP8[$16>>0]|0;
     switch ($$idx99$val<<24>>24) {
     case 8:  {
      switch ($$idx98$val<<24>>24) {
      case 2:  {
       $$0$i = 3;
       break;
      }
      case 6:  {
       $$0$i = 4;
       break;
      }
      default: {
       break L71;
      }
      }
      $105 = ($$idx$val|0)==(0);
      if ($105) {
       break L71;
      }
      $$0673$i$lver$orig = $102;$$0682$i$lver$orig = 0;
      while(1) {
       $106 = HEAP8[$$0673$i$lver$orig>>0]|0;
       $107 = $106&255;
       $108 = ((($$0673$i$lver$orig)) + 1|0);
       $109 = HEAP8[$108>>0]|0;
       $110 = $109&255;
       $111 = (($110) + ($107))|0;
       $112 = $111&255;
       HEAP8[$$0673$i$lver$orig>>0] = $112;
       $113 = ((($$0673$i$lver$orig)) + 2|0);
       $114 = HEAP8[$113>>0]|0;
       $115 = $114&255;
       $116 = (($115) + ($110))|0;
       $117 = $116&255;
       HEAP8[$113>>0] = $117;
       $118 = (($$0682$i$lver$orig) + 1)|0;
       $119 = (($$0673$i$lver$orig) + ($$0$i)|0);
       $exitcond$i$lver$orig = ($118|0)==($$idx$val|0);
       if ($exitcond$i$lver$orig) {
        break;
       } else {
        $$0673$i$lver$orig = $119;$$0682$i$lver$orig = $118;
       }
      }
      break;
     }
     case 16:  {
      switch ($$idx98$val<<24>>24) {
      case 2:  {
       $$1$i = 6;
       break;
      }
      case 6:  {
       $$1$i = 8;
       break;
      }
      default: {
       break L71;
      }
      }
      $120 = ($$idx$val|0)==(0);
      if ($120) {
       break L71;
      }
      $$0715$i$lver$orig = $102;$$0724$i$lver$orig = 0;
      while(1) {
       $121 = HEAP8[$$0715$i$lver$orig>>0]|0;
       $122 = $121&255;
       $123 = $122 << 8;
       $124 = ((($$0715$i$lver$orig)) + 1|0);
       $125 = HEAP8[$124>>0]|0;
       $126 = $125&255;
       $127 = $123 | $126;
       $128 = ((($$0715$i$lver$orig)) + 2|0);
       $129 = HEAP8[$128>>0]|0;
       $130 = $129&255;
       $131 = $130 << 8;
       $132 = ((($$0715$i$lver$orig)) + 3|0);
       $133 = HEAP8[$132>>0]|0;
       $134 = $133&255;
       $135 = $131 | $134;
       $136 = ((($$0715$i$lver$orig)) + 4|0);
       $137 = HEAP8[$136>>0]|0;
       $138 = $137&255;
       $139 = $138 << 8;
       $140 = ((($$0715$i$lver$orig)) + 5|0);
       $141 = HEAP8[$140>>0]|0;
       $142 = $141&255;
       $143 = $139 | $142;
       $144 = (($135) + ($127))|0;
       $145 = (($143) + ($135))|0;
       $146 = $144 >>> 8;
       $147 = $146&255;
       HEAP8[$$0715$i$lver$orig>>0] = $147;
       $148 = $144&255;
       HEAP8[$124>>0] = $148;
       $149 = $145 >>> 8;
       $150 = $149&255;
       HEAP8[$136>>0] = $150;
       $151 = $145&255;
       HEAP8[$140>>0] = $151;
       $152 = (($$0724$i$lver$orig) + 1)|0;
       $153 = (($$0715$i$lver$orig) + ($$1$i)|0);
       $exitcond8$i$lver$orig = ($152|0)==($$idx$val|0);
       if ($exitcond8$i$lver$orig) {
        break;
       } else {
        $$0715$i$lver$orig = $153;$$0724$i$lver$orig = $152;
       }
      }
      break;
     }
     default: {
      break L71;
     }
     }
    }
   }
  }
 } while(0);
 $154 = ((($0)) + 216|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = ($155|0)==(0);
 if (!($156)) {
  _png_do_read_transformations($0,$3);
 }
 $157 = ((($0)) + 443|0);
 $158 = HEAP8[$157>>0]|0;
 $159 = ($158<<24>>24)==(0);
 $160 = HEAP8[$22>>0]|0;
 if ($159) {
  HEAP8[$157>>0] = $160;
  $161 = ((($0)) + 442|0);
  $162 = HEAP8[$161>>0]|0;
  $163 = ($160&255)>($162&255);
  if ($163) {
   _png_error($0,25019);
   // unreachable;
  }
 } else {
  $164 = ($158<<24>>24)==($160<<24>>24);
  if (!($164)) {
   _png_error($0,25043);
   // unreachable;
  }
 }
 $165 = HEAP8[$34>>0]|0;
 $166 = ($165<<24>>24)==(0);
 if ($166) {
  label = 75;
 } else {
  $167 = HEAP32[$154>>2]|0;
  $168 = $167 & 2;
  $169 = ($168|0)==(0);
  if ($169) {
   label = 75;
  } else {
   $170 = ((($0)) + 433|0);
   $171 = HEAP8[$170>>0]|0;
   $172 = ($171&255)<(6);
   if ($172) {
    $173 = $171&255;
    $174 = HEAP32[$80>>2]|0;
    $175 = ((($174)) + 1|0);
    _png_do_read_interlace($3,$175,$173,$167);
   }
   $176 = ($2|0)==(0|0);
   if (!($176)) {
    _png_combine_row($0,$2,1);
   }
   $177 = ($1|0)==(0|0);
   if (!($177)) {
    _png_combine_row($0,$1,0);
   }
  }
 }
 if ((label|0) == 75) {
  $178 = ($1|0)==(0|0);
  if (!($178)) {
   _png_combine_row($0,$1,-1);
  }
  $179 = ($2|0)==(0|0);
  if (!($179)) {
   _png_combine_row($0,$2,-1);
  }
 }
 _png_read_finish_row($0);
 $180 = ((($0)) + 544|0);
 $181 = HEAP32[$180>>2]|0;
 $182 = ($181|0)==(0|0);
 if ($182) {
  STACKTOP = sp;return;
 }
 $183 = HEAP32[$32>>2]|0;
 $184 = ((($0)) + 433|0);
 $185 = HEAP8[$184>>0]|0;
 $186 = $185&255;
 FUNCTION_TABLE_viii[$181 & 127]($0,$183,$186);
 STACKTOP = sp;return;
}
function _png_read_image($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$02833$us = 0, $$029 = 0, $$03031$us = 0, $$032$us = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond36 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 212|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 64;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = (_png_set_interlace_handling($0)|0);
   $8 = HEAP32[$3>>2]|0;
   $9 = $8 & 64;
   $10 = ($9|0)==(0);
   if ($10) {
    _png_read_start_row($0);
    $$029 = $7;
    break;
   } else {
    _png_app_error($0,24902);
    $$029 = $7;
    break;
   }
  } else {
   $11 = ((($0)) + 432|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = ($12<<24>>24)==(0);
   if (!($13)) {
    $14 = ((($0)) + 216|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = $15 & 2;
    $17 = ($16|0)==(0);
    if ($17) {
     _png_warning($0,25090);
     $18 = ((($0)) + 352|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($0)) + 356|0);
     HEAP32[$20>>2] = $19;
    }
   }
   $21 = (_png_set_interlace_handling($0)|0);
   $$029 = $21;
  }
 } while(0);
 $22 = ((($0)) + 352|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($$029|0)<(1);
 $25 = ($23|0)==(0);
 $or$cond = $24 | $25;
 if ($or$cond) {
  return;
 }
 $$02833$us = 0;
 while(1) {
  $$03031$us = 0;$$032$us = $1;
  while(1) {
   $26 = HEAP32[$$032$us>>2]|0;
   _png_read_row($0,$26,0);
   $27 = ((($$032$us)) + 4|0);
   $28 = (($$03031$us) + 1)|0;
   $exitcond = ($28|0)==($23|0);
   if ($exitcond) {
    break;
   } else {
    $$03031$us = $28;$$032$us = $27;
   }
  }
  $29 = (($$02833$us) + 1)|0;
  $exitcond36 = ($29|0)==($$029|0);
  if ($exitcond36) {
   break;
  } else {
   $$02833$us = $29;
  }
 }
 return;
}
function _png_read_end($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $switch$split102D = 0, $switch$split12D = 0, $switch$split132D = 0, $switch$split162D = 0, $switch$split192D = 0, $switch$split222D = 0;
 var $switch$split252D = 0, $switch$split282D = 0, $switch$split2D = 0, $switch$split312D = 0, $switch$split342D = 0, $switch$split372D = 0, $switch$split402D = 0, $switch$split42D = 0, $switch$split432D = 0, $switch$split462D = 0, $switch$split492D = 0, $switch$split72D = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = (_png_chunk_unknown_handling($0,1229209940)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  _png_read_finish_IDAT($0);
 }
 $5 = ((($0)) + 435|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = ($6<<24>>24)==(3);
 if ($7) {
  $8 = ((($0)) + 424|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($0)) + 420|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11&65535;
  $13 = ($9|0)>($12|0);
  if ($13) {
   _png_benign_error($0,25155);
  }
 }
 $14 = ((($0)) + 376|0);
 $15 = ($1|0)==(0|0);
 $16 = ((($0)) + 208|0);
 while(1) {
  $17 = (_png_read_chunk_header($0)|0);
  $18 = HEAP32[$14>>2]|0;
  $switch$split2D = ($18|0)<(1229472850);
  L13: do {
   if ($switch$split2D) {
    switch ($18|0) {
    case 1229278788:  {
     break;
    }
    default: {
     label = 11;
     break L13;
    }
    }
    _png_handle_IEND($0,$1,$17);
   } else {
    switch ($18|0) {
    case 1229472850:  {
     break;
    }
    default: {
     label = 11;
     break L13;
    }
    }
    _png_handle_IHDR($0,$1,$17);
   }
  } while(0);
  L18: do {
   if ((label|0) == 11) {
    label = 0;
    if ($15) {
     (_png_crc_finish($0,$17)|0);
     break;
    }
    $19 = (_png_chunk_unknown_handling($0,$18)|0);
    $20 = ($19|0)==(0);
    $21 = ($18|0)==(1229209940);
    if (!($20)) {
     if (!($21)) {
      _png_handle_unknown($0,$1,$17,$19);
      $26 = ($18|0)==(1347179589);
      if (!($26)) {
       break;
      }
      $27 = HEAP32[$16>>2]|0;
      $28 = $27 | 2;
      HEAP32[$16>>2] = $28;
      break;
     }
     $22 = ($17|0)==(0);
     if ($22) {
      $23 = HEAP32[$16>>2]|0;
      $24 = $23 & 8192;
      $25 = ($24|0)==(0);
      if (!($25)) {
       label = 17;
      }
     } else {
      label = 17;
     }
     if ((label|0) == 17) {
      label = 0;
      _png_benign_error($0,24790);
     }
     _png_handle_unknown($0,$1,$17,$19);
     break;
    }
    if ($21) {
     $29 = ($17|0)==(0);
     if ($29) {
      $30 = HEAP32[$16>>2]|0;
      $31 = $30 & 8192;
      $32 = ($31|0)==(0);
      if (!($32)) {
       label = 24;
      }
     } else {
      label = 24;
     }
     if ((label|0) == 24) {
      label = 0;
      _png_benign_error($0,24790);
     }
     (_png_crc_finish($0,$17)|0);
     break;
    }
    $switch$split12D = ($18|0)<(1883789683);
    L43: do {
     if ($switch$split12D) {
      $switch$split42D = ($18|0)<(1749635924);
      if ($switch$split42D) {
       $switch$split102D = ($18|0)<(1665684045);
       if ($switch$split102D) {
        $switch$split222D = ($18|0)<(1649100612);
        if ($switch$split222D) {
         switch ($18|0) {
         case 1347179589:  {
          break;
         }
         default: {
          break L43;
         }
         }
         _png_handle_PLTE($0,$1,$17);
         break L18;
        } else {
         switch ($18|0) {
         case 1649100612:  {
          break;
         }
         default: {
          break L43;
         }
         }
         _png_handle_bKGD($0,$1,$17);
         break L18;
        }
       } else {
        $switch$split252D = ($18|0)<(1732332865);
        if ($switch$split252D) {
         switch ($18|0) {
         case 1665684045:  {
          break;
         }
         default: {
          break L43;
         }
         }
         _png_handle_cHRM($0,$1,$17);
         break L18;
        } else {
         switch ($18|0) {
         case 1732332865:  {
          break;
         }
         default: {
          break L43;
         }
         }
         _png_handle_gAMA($0,$1,$17);
         break L18;
        }
       }
      }
      $switch$split132D = ($18|0)<(1767135348);
      if ($switch$split132D) {
       $switch$split282D = ($18|0)<(1766015824);
       if ($switch$split282D) {
        switch ($18|0) {
        case 1749635924:  {
         break;
        }
        default: {
         break L43;
        }
        }
        _png_handle_hIST($0,$1,$17);
        break L18;
       } else {
        switch ($18|0) {
        case 1766015824:  {
         break;
        }
        default: {
         break L43;
        }
        }
        _png_handle_iCCP($0,$1,$17);
        break L18;
       }
      }
      $switch$split312D = ($18|0)<(1866876531);
      if ($switch$split312D) {
       switch ($18|0) {
       case 1767135348:  {
        break;
       }
       default: {
        break L43;
       }
       }
       _png_handle_iTXt($0,$1,$17);
       break L18;
      }
      $switch$split462D = ($18|0)<(1883455820);
      if ($switch$split462D) {
       switch ($18|0) {
       case 1866876531:  {
        break;
       }
       default: {
        break L43;
       }
       }
       _png_handle_oFFs($0,$1,$17);
       break L18;
      } else {
       switch ($18|0) {
       case 1883455820:  {
        break;
       }
       default: {
        break L43;
       }
       }
       _png_handle_pCAL($0,$1,$17);
       break L18;
      }
     } else {
      $switch$split72D = ($18|0)<(1934772034);
      if ($switch$split72D) {
       $switch$split162D = ($18|0)<(1933787468);
       if ($switch$split162D) {
        $switch$split342D = ($18|0)<(1933723988);
        if ($switch$split342D) {
         switch ($18|0) {
         case 1883789683:  {
          break;
         }
         default: {
          break L43;
         }
         }
         _png_handle_pHYs($0,$1,$17);
         break L18;
        } else {
         switch ($18|0) {
         case 1933723988:  {
          break;
         }
         default: {
          break L43;
         }
         }
         _png_handle_sBIT($0,$1,$17);
         break L18;
        }
       } else {
        $switch$split372D = ($18|0)<(1934642260);
        if ($switch$split372D) {
         switch ($18|0) {
         case 1933787468:  {
          break;
         }
         default: {
          break L43;
         }
         }
         _png_handle_sCAL($0,$1,$17);
         break L18;
        } else {
         switch ($18|0) {
         case 1934642260:  {
          break;
         }
         default: {
          break L43;
         }
         }
         _png_handle_sPLT($0,$1,$17);
         break L18;
        }
       }
      }
      $switch$split192D = ($18|0)<(1950960965);
      if ($switch$split192D) {
       $switch$split402D = ($18|0)<(1950701684);
       if ($switch$split402D) {
        switch ($18|0) {
        case 1934772034:  {
         break;
        }
        default: {
         break L43;
        }
        }
        _png_handle_sRGB($0,$1,$17);
        break L18;
       } else {
        switch ($18|0) {
        case 1950701684:  {
         break;
        }
        default: {
         break L43;
        }
        }
        _png_handle_tEXt($0,$1,$17);
        break L18;
       }
      }
      $switch$split432D = ($18|0)<(1951551059);
      if ($switch$split432D) {
       switch ($18|0) {
       case 1950960965:  {
        break;
       }
       default: {
        break L43;
       }
       }
       _png_handle_tIME($0,$1,$17);
       break L18;
      }
      $switch$split492D = ($18|0)<(2052348020);
      if ($switch$split492D) {
       switch ($18|0) {
       case 1951551059:  {
        break;
       }
       default: {
        break L43;
       }
       }
       _png_handle_tRNS($0,$1,$17);
       break L18;
      } else {
       switch ($18|0) {
       case 2052348020:  {
        break;
       }
       default: {
        break L43;
       }
       }
       _png_handle_zTXt($0,$1,$17);
       break L18;
      }
     }
    } while(0);
    _png_handle_unknown($0,$1,$17,0);
   }
  } while(0);
  $33 = HEAP32[$16>>2]|0;
  $34 = $33 & 16;
  $35 = ($34|0)==(0);
  if (!($35)) {
   break;
  }
 }
 return;
}
function _png_set_strip_16($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 212|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 64;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = $3 | 16384;
  HEAP32[$2>>2] = $6;
  $7 = ((($0)) + 216|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 | 1024;
  HEAP32[$7>>2] = $9;
  return;
 } else {
  _png_app_error($0,25196);
  return;
 }
}
function _png_set_expand($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 212|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 64;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = $3 | 16384;
  HEAP32[$2>>2] = $6;
  $7 = ((($0)) + 216|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = $8 | 33558528;
  HEAP32[$7>>2] = $9;
  return;
 } else {
  _png_app_error($0,25196);
  return;
 }
}
function _png_set_gray_to_rgb($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 212|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & 64;
 $5 = ($4|0)==(0);
 if ($5) {
  $6 = $3 | 16384;
  HEAP32[$2>>2] = $6;
  $7 = ((($0)) + 216|0);
  $8 = HEAP32[$7>>2]|0;
  $phitmp = $8 | 20480;
  HEAP32[$7>>2] = $phitmp;
  return;
 } else {
  _png_app_error($0,25196);
  return;
 }
}
function _png_write_info_before_PLTE($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$024$i = 0, $$pre = 0, $$pre$i = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 $3 = ($1|0)==(0|0);
 $or$cond = $2 | $3;
 if ($or$cond) {
  return;
 }
 $4 = ((($0)) + 208|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 1024;
 $7 = ($6|0)==(0);
 if (!($7)) {
  return;
 }
 _png_write_sig($0);
 $8 = HEAP32[$4>>2]|0;
 $9 = $8 & 4096;
 $10 = ($9|0)==(0);
 if (!($10)) {
  $11 = ((($0)) + 708|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ($12|0)==(0);
  if (!($13)) {
   _png_warning($0,25255);
   HEAP32[$11>>2] = 0;
  }
 }
 $14 = HEAP32[$1>>2]|0;
 $15 = ((($1)) + 4|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($1)) + 24|0);
 $18 = HEAP8[$17>>0]|0;
 $19 = $18&255;
 $20 = ((($1)) + 25|0);
 $21 = HEAP8[$20>>0]|0;
 $22 = $21&255;
 $23 = ((($1)) + 26|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = $24&255;
 $26 = ((($1)) + 27|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = $27&255;
 $29 = ((($1)) + 28|0);
 $30 = HEAP8[$29>>0]|0;
 $31 = $30&255;
 _png_write_IHDR($0,$14,$16,$19,$22,$25,$28,$31);
 $32 = ((($1)) + 114|0);
 $33 = HEAP16[$32>>1]|0;
 $34 = $33 & -32760;
 $35 = ($34<<16>>16)==(8);
 if ($35) {
  $36 = ((($1)) + 8|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = $37 & 1;
  $39 = ($38|0)==(0);
  if ($39) {
   $42 = $33;
  } else {
   $40 = ((($1)) + 40|0);
   $41 = HEAP32[$40>>2]|0;
   _png_write_gAMA_fixed($0,$41);
   $$pre = HEAP16[$32>>1]|0;
   $42 = $$pre;
  }
 } else {
  $42 = $33;
 }
 $43 = ($42<<16>>16)>(-1);
 $44 = ((($1)) + 8|0);
 do {
  if ($43) {
   $45 = HEAP32[$44>>2]|0;
   $46 = $45 & 4096;
   $47 = ($46|0)==(0);
   $48 = $45 & 2048;
   $49 = ($48|0)==(0);
   if ($47) {
    if ($49) {
     break;
    }
    $54 = ((($1)) + 112|0);
    $55 = HEAP16[$54>>1]|0;
    $56 = $55&65535;
    _png_write_sRGB($0,$56);
    break;
   }
   if (!($49)) {
    _png_app_warning($0,25304);
   }
   $50 = ((($1)) + 116|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = ((($1)) + 120|0);
   $53 = HEAP32[$52>>2]|0;
   _png_write_iCCP($0,$51,$53);
  }
 } while(0);
 $57 = HEAP32[$44>>2]|0;
 $58 = $57 & 2;
 $59 = ($58|0)==(0);
 if (!($59)) {
  $60 = ((($1)) + 148|0);
  $61 = HEAP8[$20>>0]|0;
  $62 = $61&255;
  _png_write_sBIT($0,$60,$62);
 }
 $63 = HEAP16[$32>>1]|0;
 $64 = $63 & -32752;
 $65 = ($64<<16>>16)==(16);
 if ($65) {
  $66 = HEAP32[$44>>2]|0;
  $67 = $66 & 4;
  $68 = ($67|0)==(0);
  if (!($68)) {
   $69 = ((($1)) + 44|0);
   _png_write_cHRM_fixed($0,$69);
  }
 }
 $70 = ((($1)) + 240|0);
 $71 = HEAP32[$70>>2]|0;
 $72 = ($71|0)==(0);
 if (!($72)) {
  $73 = ((($1)) + 236|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = (($74) + (($71*20)|0)|0);
  $76 = ($71|0)>(0);
  if ($76) {
   $77 = ((($0)) + 688|0);
   $$024$i = $74;
   while(1) {
    $78 = ((($$024$i)) + 16|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79 & 1;
    $81 = ($80<<24>>24)==(0);
    do {
     if (!($81)) {
      $82 = (_png_handle_as_unknown($0,$$024$i)|0);
      $83 = ($82|0)==(1);
      if (!($83)) {
       $84 = ((($$024$i)) + 3|0);
       $85 = HEAP8[$84>>0]|0;
       $86 = $85 & 32;
       $87 = ($86<<24>>24)!=(0);
       $88 = ($82|0)==(3);
       $or$cond$i = $88 | $87;
       if (!($or$cond$i)) {
        $89 = ($82|0)==(0);
        if (!($89)) {
         break;
        }
        $90 = HEAP32[$77>>2]|0;
        $91 = ($90|0)==(3);
        if (!($91)) {
         break;
        }
       }
       $92 = ((($$024$i)) + 12|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = ($93|0)==(0);
       if ($94) {
        _png_warning($0,25350);
        $$pre$i = HEAP32[$92>>2]|0;
        $97 = $$pre$i;
       } else {
        $97 = $93;
       }
       $95 = ((($$024$i)) + 8|0);
       $96 = HEAP32[$95>>2]|0;
       _png_write_chunk($0,$$024$i,$96,$97);
      }
     }
    } while(0);
    $98 = ((($$024$i)) + 20|0);
    $99 = ($98>>>0)<($75>>>0);
    if ($99) {
     $$024$i = $98;
    } else {
     break;
    }
   }
  }
 }
 $100 = HEAP32[$4>>2]|0;
 $101 = $100 | 1024;
 HEAP32[$4>>2] = $101;
 return;
}
function _png_write_sig($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = $1;
 $3 = $2;
 HEAP32[$3>>2] = 1196314761;
 $4 = (($2) + 4)|0;
 $5 = $4;
 HEAP32[$5>>2] = 169478669;
 $6 = ((($0)) + 800|0);
 HEAP32[$6>>2] = 18;
 $7 = ((($0)) + 441|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = $8&255;
 $10 = (($1) + ($9)|0);
 $11 = (8 - ($9))|0;
 _png_write_data($0,$10,$11);
 $12 = HEAP8[$7>>0]|0;
 $13 = ($12&255)<(3);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 $14 = ((($0)) + 208|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $15 | 4096;
 HEAP32[$14>>2] = $16;
 STACKTOP = sp;return;
}
function _png_write_IHDR($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$084 = 0, $$old10 = 0, $$sink = 0, $$sink87 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond11 = 0, $or$cond9$not = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp + 24|0;
 $9 = sp + 16|0;
 $10 = sp;
 L1: do {
  switch ($4|0) {
  case 0:  {
   switch ($3|0) {
   case 16: case 8: case 4: case 2: case 1:  {
    $$sink = 1;
    break L1;
    break;
   }
   default: {
   }
   }
   _png_error($0,25799);
   // unreachable;
   break;
  }
  case 2:  {
   switch ($3|0) {
   case 8: case 16:  {
    $$sink = 3;
    break L1;
    break;
   }
   default: {
   }
   }
   _png_error($0,25837);
   // unreachable;
   break;
  }
  case 3:  {
   switch ($3|0) {
   case 8: case 4: case 2: case 1:  {
    $$sink = 1;
    break L1;
    break;
   }
   default: {
   }
   }
   _png_error($0,25869);
   // unreachable;
   break;
  }
  case 4:  {
   switch ($3|0) {
   case 8: case 16:  {
    $$sink = 2;
    break L1;
    break;
   }
   default: {
   }
   }
   _png_error($0,25906);
   // unreachable;
   break;
  }
  case 6:  {
   switch ($3|0) {
   case 8: case 16:  {
    $$sink = 4;
    break L1;
    break;
   }
   default: {
   }
   }
   _png_error($0,25950);
   // unreachable;
   break;
  }
  default: {
   _png_error($0,25983);
   // unreachable;
  }
  }
 } while(0);
 $11 = ((($0)) + 439|0);
 HEAP8[$11>>0] = $$sink;
 $12 = ($5|0)==(0);
 if (!($12)) {
  _png_warning($0,26018);
 }
 $13 = ((($0)) + 708|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $14 & 4;
 $16 = ($15|0)==(0);
 if ($16) {
  label = 18;
 } else {
  $17 = ((($0)) + 208|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = $18 & 4096;
  $20 = ($19|0)==(0);
  if ($20) {
   $21 = $4 | 4;
   $22 = ($21|0)!=(6);
   $23 = ($6|0)!=(64);
   $or$cond9$not = $22 | $23;
   $24 = ($6|0)!=(0);
   $or$cond11 = $24 & $or$cond9$not;
   if ($or$cond11) {
    label = 19;
   } else {
    $$084 = $6;
   }
  } else {
   label = 18;
  }
 }
 if ((label|0) == 18) {
  $$old10 = ($6|0)==(0);
  if ($$old10) {
   $$084 = 0;
  } else {
   label = 19;
  }
 }
 if ((label|0) == 19) {
  _png_warning($0,26053);
  $$084 = 0;
 }
 $25 = ($7>>>0)>(1);
 if ($25) {
  _png_warning($0,26083);
  $$0 = 1;
 } else {
  $$0 = $7;
 }
 $26 = $3&255;
 $27 = ((($0)) + 436|0);
 HEAP8[$27>>0] = $26;
 $28 = $4&255;
 $29 = ((($0)) + 435|0);
 HEAP8[$29>>0] = $28;
 $30 = $$0&255;
 $31 = ((($0)) + 432|0);
 HEAP8[$31>>0] = $30;
 $32 = $$084&255;
 $33 = ((($0)) + 712|0);
 HEAP8[$33>>0] = $32;
 $34 = ((($0)) + 744|0);
 HEAP8[$34>>0] = 0;
 $35 = ((($0)) + 348|0);
 HEAP32[$35>>2] = $1;
 $36 = ((($0)) + 352|0);
 HEAP32[$36>>2] = $2;
 $37 = ((($0)) + 439|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38&255;
 $40 = Math_imul($39, $3)|0;
 $41 = $40&255;
 $42 = ((($0)) + 438|0);
 HEAP8[$42>>0] = $41;
 $43 = $40 & 255;
 $44 = ($43>>>0)>(7);
 if ($44) {
  $45 = $43 >>> 3;
  $46 = Math_imul($45, $1)|0;
  $51 = $46;
 } else {
  $47 = Math_imul($43, $1)|0;
  $48 = (($47) + 7)|0;
  $49 = $48 >>> 3;
  $51 = $49;
 }
 $50 = ((($0)) + 364|0);
 HEAP32[$50>>2] = $51;
 $52 = ((($0)) + 360|0);
 HEAP32[$52>>2] = $1;
 $53 = ((($0)) + 437|0);
 HEAP8[$53>>0] = $26;
 $54 = ((($0)) + 440|0);
 HEAP8[$54>>0] = $38;
 $55 = $1 >>> 24;
 $56 = $55&255;
 HEAP8[$10>>0] = $56;
 $57 = $1 >>> 16;
 $58 = $57&255;
 $59 = ((($10)) + 1|0);
 HEAP8[$59>>0] = $58;
 $60 = $1 >>> 8;
 $61 = $60&255;
 $62 = ((($10)) + 2|0);
 HEAP8[$62>>0] = $61;
 $63 = $1&255;
 $64 = ((($10)) + 3|0);
 HEAP8[$64>>0] = $63;
 $65 = ((($10)) + 4|0);
 $66 = $2 >>> 24;
 $67 = $66&255;
 HEAP8[$65>>0] = $67;
 $68 = $2 >>> 16;
 $69 = $68&255;
 $70 = ((($10)) + 5|0);
 HEAP8[$70>>0] = $69;
 $71 = $2 >>> 8;
 $72 = $71&255;
 $73 = ((($10)) + 6|0);
 HEAP8[$73>>0] = $72;
 $74 = $2&255;
 $75 = ((($10)) + 7|0);
 HEAP8[$75>>0] = $74;
 $76 = ((($10)) + 8|0);
 HEAP8[$76>>0] = $26;
 $77 = ((($10)) + 9|0);
 HEAP8[$77>>0] = $28;
 $78 = ((($10)) + 10|0);
 HEAP8[$78>>0] = 0;
 $79 = ((($10)) + 11|0);
 HEAP8[$79>>0] = $32;
 $80 = ((($10)) + 12|0);
 HEAP8[$80>>0] = $30;
 $81 = ((($0)) + 800|0);
 HEAP32[$81>>2] = 34;
 HEAP8[$8>>0] = 0;
 $82 = ((($8)) + 1|0);
 HEAP8[$82>>0] = 0;
 $83 = ((($8)) + 2|0);
 HEAP8[$83>>0] = 0;
 $84 = ((($8)) + 3|0);
 HEAP8[$84>>0] = 13;
 $85 = ((($8)) + 4|0);
 HEAP8[$85>>0] = 73;
 $86 = ((($8)) + 5|0);
 HEAP8[$86>>0] = 72;
 $87 = ((($8)) + 6|0);
 HEAP8[$87>>0] = 68;
 $88 = ((($8)) + 7|0);
 HEAP8[$88>>0] = 82;
 _png_write_data($0,$8,8);
 $89 = ((($0)) + 376|0);
 HEAP32[$89>>2] = 1229472850;
 _png_reset_crc($0);
 _png_calculate_crc($0,$85,4);
 HEAP32[$81>>2] = 66;
 _png_write_data($0,$10,13);
 _png_calculate_crc($0,$10,13);
 HEAP32[$81>>2] = 130;
 $90 = ((($0)) + 412|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $91 >>> 24;
 $93 = $92&255;
 HEAP8[$9>>0] = $93;
 $94 = $91 >>> 16;
 $95 = $94&255;
 $96 = ((($9)) + 1|0);
 HEAP8[$96>>0] = $95;
 $97 = $91 >>> 8;
 $98 = $97&255;
 $99 = ((($9)) + 2|0);
 HEAP8[$99>>0] = $98;
 $100 = $91&255;
 $101 = ((($9)) + 3|0);
 HEAP8[$101>>0] = $100;
 _png_write_data($0,$9,4);
 $102 = ((($0)) + 434|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = ($103<<24>>24)==(0);
 if (!($104)) {
  $109 = ((($0)) + 208|0);
  HEAP32[$109>>2] = 1;
  STACKTOP = sp;return;
 }
 $105 = HEAP8[$29>>0]|0;
 $106 = ($105<<24>>24)==(3);
 if ($106) {
  $$sink87 = 8;
 } else {
  $107 = HEAP8[$27>>0]|0;
  $108 = ($107&255)<(8);
  $spec$select = $108 ? 8 : -8;
  $$sink87 = $spec$select;
 }
 HEAP8[$102>>0] = $$sink87;
 $109 = ((($0)) + 208|0);
 HEAP32[$109>>2] = 1;
 STACKTOP = sp;return;
}
function _png_write_gAMA_fixed($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $5 = $1 >>> 24;
 $6 = $5&255;
 HEAP8[$4>>0] = $6;
 $7 = $1 >>> 16;
 $8 = $7&255;
 $9 = ((($4)) + 1|0);
 HEAP8[$9>>0] = $8;
 $10 = $1 >>> 8;
 $11 = $10&255;
 $12 = ((($4)) + 2|0);
 HEAP8[$12>>0] = $11;
 $13 = $1&255;
 $14 = ((($4)) + 3|0);
 HEAP8[$14>>0] = $13;
 $15 = ($0|0)==(0|0);
 if ($15) {
  STACKTOP = sp;return;
 }
 $16 = ((($0)) + 800|0);
 HEAP32[$16>>2] = 34;
 HEAP8[$3>>0] = 0;
 $17 = ((($3)) + 1|0);
 HEAP8[$17>>0] = 0;
 $18 = ((($3)) + 2|0);
 HEAP8[$18>>0] = 0;
 $19 = ((($3)) + 3|0);
 HEAP8[$19>>0] = 4;
 $20 = ((($3)) + 4|0);
 HEAP8[$20>>0] = 103;
 $21 = ((($3)) + 5|0);
 HEAP8[$21>>0] = 65;
 $22 = ((($3)) + 6|0);
 HEAP8[$22>>0] = 77;
 $23 = ((($3)) + 7|0);
 HEAP8[$23>>0] = 65;
 _png_write_data($0,$3,8);
 $24 = ((($0)) + 376|0);
 HEAP32[$24>>2] = 1732332865;
 _png_reset_crc($0);
 _png_calculate_crc($0,$20,4);
 HEAP32[$16>>2] = 66;
 _png_write_data($0,$4,4);
 _png_calculate_crc($0,$4,4);
 HEAP32[$16>>2] = 130;
 $25 = ((($0)) + 412|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = $26 >>> 24;
 $28 = $27&255;
 HEAP8[$2>>0] = $28;
 $29 = $26 >>> 16;
 $30 = $29&255;
 $31 = ((($2)) + 1|0);
 HEAP8[$31>>0] = $30;
 $32 = $26 >>> 8;
 $33 = $32&255;
 $34 = ((($2)) + 2|0);
 HEAP8[$34>>0] = $33;
 $35 = $26&255;
 $36 = ((($2)) + 3|0);
 HEAP8[$36>>0] = $35;
 _png_write_data($0,$2,4);
 STACKTOP = sp;return;
}
function _png_write_iCCP($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$0$i46 = 0, $$0$i49 = 0, $$0$in$us$i = 0, $$0$us$i = 0, $$025$us$i = 0, $$026$us$i = 0, $$027$us$i = 0, $$lcssa$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i48 = 0, $or$cond$us$i = 0, $spec$select$i = 0, $spec$select$i47 = 0, $spec$select$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1136|0);
 $3 = sp + 1128|0;
 $4 = sp + 1120|0;
 $5 = sp + 1036|0;
 $6 = sp;
 $7 = ($2|0)==(0|0);
 if ($7) {
  _png_error($0,25480);
  // unreachable;
 }
 $8 = HEAP8[$2>>0]|0;
 $9 = $8&255;
 $10 = $9 << 24;
 $11 = ((($2)) + 1|0);
 $12 = HEAP8[$11>>0]|0;
 $13 = $12&255;
 $14 = $13 << 16;
 $15 = $14 | $10;
 $16 = ((($2)) + 2|0);
 $17 = HEAP8[$16>>0]|0;
 $18 = $17&255;
 $19 = $18 << 8;
 $20 = $15 | $19;
 $21 = ((($2)) + 3|0);
 $22 = HEAP8[$21>>0]|0;
 $23 = $22&255;
 $24 = $20 | $23;
 $25 = ($24>>>0)<(132);
 if ($25) {
  _png_error($0,25506);
  // unreachable;
 }
 $26 = ((($2)) + 8|0);
 $27 = HEAP8[$26>>0]|0;
 $28 = ($27&255)<(4);
 $29 = $23 & 3;
 $30 = ($29|0)==(0);
 $or$cond = $30 | $28;
 if (!($or$cond)) {
  _png_error($0,25528);
  // unreachable;
 }
 $31 = (_png_check_keyword($0,$1,$5)|0);
 $32 = ($31|0)==(0);
 if ($32) {
  _png_error($0,25577);
  // unreachable;
 }
 $33 = (($31) + 1)|0;
 $34 = (($5) + ($33)|0);
 HEAP8[$34>>0] = 0;
 $35 = (($31) + 2)|0;
 HEAP32[$6>>2] = $2;
 $36 = ((($6)) + 4|0);
 HEAP32[$36>>2] = $24;
 $37 = ((($6)) + 8|0);
 HEAP32[$37>>2] = 0;
 $38 = (_png_text_compress($0,1766015824,$6,$35)|0);
 $39 = ($38|0)==(0);
 if (!($39)) {
  $40 = ((($0)) + 248|0);
  $41 = HEAP32[$40>>2]|0;
  _png_error($0,$41);
  // unreachable;
 }
 $42 = HEAP32[$37>>2]|0;
 $43 = (($42) + ($35))|0;
 $44 = ($0|0)==(0|0);
 L16: do {
  if ($44) {
   $$0$i46 = HEAP32[(280)>>2]|0;
   $73 = ($42>>>0)<(1024);
   $spec$select$i47 = $73 ? $42 : 1024;
   $74 = (($42) - ($spec$select$i47))|0;
   $75 = ($74|0)==(0);
   $76 = ($$0$i46|0)==(0|0);
   $or$cond$i48 = $76 | $75;
   if ($or$cond$i48) {
    $$lcssa$i = $75;
   } else {
    $77 = HEAP32[(284)>>2]|0;
    $$0$i49 = $$0$i46;$79 = $74;
    while(1) {
     $$0$i = HEAP32[$$0$i49>>2]|0;
     $78 = ($77>>>0)>($79>>>0);
     $spec$select$i = $78 ? $79 : $77;
     $80 = (($79) - ($spec$select$i))|0;
     $81 = ($80|0)==(0);
     $82 = ($$0$i|0)==(0|0);
     $or$cond$i = $82 | $81;
     if ($or$cond$i) {
      $$lcssa$i = $81;
      break;
     } else {
      $$0$i49 = $$0$i;$79 = $80;
     }
    }
   }
  } else {
   $45 = ((($0)) + 800|0);
   HEAP32[$45>>2] = 34;
   $46 = $43 >>> 24;
   $47 = $46&255;
   HEAP8[$3>>0] = $47;
   $48 = $43 >>> 16;
   $49 = $48&255;
   $50 = ((($3)) + 1|0);
   HEAP8[$50>>0] = $49;
   $51 = $43 >>> 8;
   $52 = $51&255;
   $53 = ((($3)) + 2|0);
   HEAP8[$53>>0] = $52;
   $54 = $43&255;
   $55 = ((($3)) + 3|0);
   HEAP8[$55>>0] = $54;
   $56 = ((($3)) + 4|0);
   HEAP8[$56>>0] = 105;
   $57 = ((($3)) + 5|0);
   HEAP8[$57>>0] = 67;
   $58 = ((($3)) + 6|0);
   HEAP8[$58>>0] = 67;
   $59 = ((($3)) + 7|0);
   HEAP8[$59>>0] = 80;
   _png_write_data($0,$3,8);
   $60 = ((($0)) + 376|0);
   HEAP32[$60>>2] = 1766015824;
   _png_reset_crc($0);
   _png_calculate_crc($0,$56,4);
   HEAP32[$45>>2] = 66;
   $61 = ($35|0)==(0);
   if (!($61)) {
    _png_write_data($0,$5,$35);
    _png_calculate_crc($0,$5,$35);
   }
   $62 = HEAP32[$37>>2]|0;
   $63 = ((($0)) + 280|0);
   $64 = ((($0)) + 284|0);
   $65 = ((($6)) + 12|0);
   $$0$in$us$i = $63;$$025$us$i = 1024;$$026$us$i = $65;$$027$us$i = $62;
   while(1) {
    $$0$us$i = HEAP32[$$0$in$us$i>>2]|0;
    $66 = ($$025$us$i>>>0)>($$027$us$i>>>0);
    $spec$select$us$i = $66 ? $$027$us$i : $$025$us$i;
    $67 = ($spec$select$us$i|0)==(0);
    if (!($67)) {
     _png_write_data($0,$$026$us$i,$spec$select$us$i);
     _png_calculate_crc($0,$$026$us$i,$spec$select$us$i);
    }
    $68 = (($$027$us$i) - ($spec$select$us$i))|0;
    $69 = ($68|0)==(0);
    $70 = ($$0$us$i|0)==(0|0);
    $or$cond$us$i = $70 | $69;
    if ($or$cond$us$i) {
     $$lcssa$i = $69;
     break L16;
    }
    $71 = HEAP32[$64>>2]|0;
    $72 = ((($$0$us$i)) + 4|0);
    $$0$in$us$i = $$0$us$i;$$025$us$i = $71;$$026$us$i = $72;$$027$us$i = $68;
   }
  }
 } while(0);
 if (!($$lcssa$i)) {
  _png_error($0,25599);
  // unreachable;
 }
 if ($44) {
  STACKTOP = sp;return;
 }
 $83 = ((($0)) + 800|0);
 HEAP32[$83>>2] = 130;
 $84 = ((($0)) + 412|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $85 >>> 24;
 $87 = $86&255;
 HEAP8[$4>>0] = $87;
 $88 = $85 >>> 16;
 $89 = $88&255;
 $90 = ((($4)) + 1|0);
 HEAP8[$90>>0] = $89;
 $91 = $85 >>> 8;
 $92 = $91&255;
 $93 = ((($4)) + 2|0);
 HEAP8[$93>>0] = $92;
 $94 = $85&255;
 $95 = ((($4)) + 3|0);
 HEAP8[$95>>0] = $94;
 _png_write_data($0,$4,4);
 STACKTOP = sp;return;
}
function _png_write_sRGB($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $5 = ($1|0)>(3);
 if ($5) {
  _png_warning($0,25440);
 }
 $6 = $1&255;
 HEAP8[$4>>0] = $6;
 $7 = ($0|0)==(0|0);
 if ($7) {
  STACKTOP = sp;return;
 }
 $8 = ((($0)) + 800|0);
 HEAP32[$8>>2] = 34;
 HEAP8[$3>>0] = 0;
 $9 = ((($3)) + 1|0);
 HEAP8[$9>>0] = 0;
 $10 = ((($3)) + 2|0);
 HEAP8[$10>>0] = 0;
 $11 = ((($3)) + 3|0);
 HEAP8[$11>>0] = 1;
 $12 = ((($3)) + 4|0);
 HEAP8[$12>>0] = 115;
 $13 = ((($3)) + 5|0);
 HEAP8[$13>>0] = 82;
 $14 = ((($3)) + 6|0);
 HEAP8[$14>>0] = 71;
 $15 = ((($3)) + 7|0);
 HEAP8[$15>>0] = 66;
 _png_write_data($0,$3,8);
 $16 = ((($0)) + 376|0);
 HEAP32[$16>>2] = 1934772034;
 _png_reset_crc($0);
 _png_calculate_crc($0,$12,4);
 HEAP32[$8>>2] = 66;
 _png_write_data($0,$4,1);
 _png_calculate_crc($0,$4,1);
 HEAP32[$8>>2] = 130;
 $17 = ((($0)) + 412|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 >>> 24;
 $20 = $19&255;
 HEAP8[$2>>0] = $20;
 $21 = $18 >>> 16;
 $22 = $21&255;
 $23 = ((($2)) + 1|0);
 HEAP8[$23>>0] = $22;
 $24 = $18 >>> 8;
 $25 = $24&255;
 $26 = ((($2)) + 2|0);
 HEAP8[$26>>0] = $25;
 $27 = $18&255;
 $28 = ((($2)) + 3|0);
 HEAP8[$28>>0] = $27;
 _png_write_data($0,$2,4);
 STACKTOP = sp;return;
}
function _png_write_sBIT($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$1 = 0, $$234 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = $2 & 2;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $25 = ((($1)) + 3|0);
   $26 = HEAP8[$25>>0]|0;
   $27 = ($26<<24>>24)==(0);
   if (!($27)) {
    $28 = ((($0)) + 437|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = ($26&255)>($29&255);
    if (!($30)) {
     HEAP8[$5>>0] = $26;
     $$1 = 1;
     break;
    }
   }
   _png_warning($0,25411);
   STACKTOP = sp;return;
  } else {
   $8 = ($2|0)==(3);
   if ($8) {
    $14 = 8;
   } else {
    $9 = ((($0)) + 437|0);
    $10 = HEAP8[$9>>0]|0;
    $14 = $10;
   }
   $11 = HEAP8[$1>>0]|0;
   $12 = (($11) + -1)<<24>>24;
   $13 = ($12&255)<($14&255);
   if ($13) {
    $15 = ((($1)) + 1|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = (($16) + -1)<<24>>24;
    $18 = ($17&255)<($14&255);
    if ($18) {
     $19 = ((($1)) + 2|0);
     $20 = HEAP8[$19>>0]|0;
     $21 = (($20) + -1)<<24>>24;
     $22 = ($21&255)<($14&255);
     if ($22) {
      HEAP8[$5>>0] = $11;
      $23 = ((($5)) + 1|0);
      HEAP8[$23>>0] = $16;
      $24 = ((($5)) + 2|0);
      HEAP8[$24>>0] = $20;
      $$1 = 3;
      break;
     }
    }
   }
   _png_warning($0,25411);
   STACKTOP = sp;return;
  }
 } while(0);
 $31 = $2 & 4;
 $32 = ($31|0)==(0);
 do {
  if ($32) {
   $41 = ($0|0)==(0|0);
   if ($41) {
    STACKTOP = sp;return;
   } else {
    $$234 = $$1;
   }
  } else {
   $33 = ((($1)) + 4|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = ($34<<24>>24)==(0);
   if (!($35)) {
    $36 = ((($0)) + 437|0);
    $37 = HEAP8[$36>>0]|0;
    $38 = ($34&255)>($37&255);
    if (!($38)) {
     $39 = (($$1) + 1)|0;
     $40 = (($5) + ($$1)|0);
     HEAP8[$40>>0] = $34;
     $$234 = $39;
     break;
    }
   }
   _png_warning($0,25411);
   STACKTOP = sp;return;
  }
 } while(0);
 $42 = ((($0)) + 800|0);
 HEAP32[$42>>2] = 34;
 $43 = $$234 >>> 24;
 $44 = $43&255;
 HEAP8[$4>>0] = $44;
 $45 = $$234 >>> 16;
 $46 = $45&255;
 $47 = ((($4)) + 1|0);
 HEAP8[$47>>0] = $46;
 $48 = $$234 >>> 8;
 $49 = $48&255;
 $50 = ((($4)) + 2|0);
 HEAP8[$50>>0] = $49;
 $51 = $$234&255;
 $52 = ((($4)) + 3|0);
 HEAP8[$52>>0] = $51;
 $53 = ((($4)) + 4|0);
 HEAP8[$53>>0] = 115;
 $54 = ((($4)) + 5|0);
 HEAP8[$54>>0] = 66;
 $55 = ((($4)) + 6|0);
 HEAP8[$55>>0] = 73;
 $56 = ((($4)) + 7|0);
 HEAP8[$56>>0] = 84;
 _png_write_data($0,$4,8);
 $57 = ((($0)) + 376|0);
 HEAP32[$57>>2] = 1933723988;
 _png_reset_crc($0);
 _png_calculate_crc($0,$53,4);
 HEAP32[$42>>2] = 66;
 _png_write_data($0,$5,$$234);
 _png_calculate_crc($0,$5,$$234);
 HEAP32[$42>>2] = 130;
 $58 = ((($0)) + 412|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $59 >>> 24;
 $61 = $60&255;
 HEAP8[$3>>0] = $61;
 $62 = $59 >>> 16;
 $63 = $62&255;
 $64 = ((($3)) + 1|0);
 HEAP8[$64>>0] = $63;
 $65 = $59 >>> 8;
 $66 = $65&255;
 $67 = ((($3)) + 2|0);
 HEAP8[$67>>0] = $66;
 $68 = $59&255;
 $69 = ((($3)) + 3|0);
 HEAP8[$69>>0] = $68;
 _png_write_data($0,$3,4);
 STACKTOP = sp;return;
}
function _png_write_cHRM_fixed($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = sp + 40|0;
 $3 = sp + 32|0;
 $4 = sp;
 $5 = ((($1)) + 24|0);
 $6 = HEAP32[$5>>2]|0;
 _png_save_int_32($4,$6);
 $7 = ((($4)) + 4|0);
 $8 = ((($1)) + 28|0);
 $9 = HEAP32[$8>>2]|0;
 _png_save_int_32($7,$9);
 $10 = ((($4)) + 8|0);
 $11 = HEAP32[$1>>2]|0;
 _png_save_int_32($10,$11);
 $12 = ((($4)) + 12|0);
 $13 = ((($1)) + 4|0);
 $14 = HEAP32[$13>>2]|0;
 _png_save_int_32($12,$14);
 $15 = ((($4)) + 16|0);
 $16 = ((($1)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 _png_save_int_32($15,$17);
 $18 = ((($4)) + 20|0);
 $19 = ((($1)) + 12|0);
 $20 = HEAP32[$19>>2]|0;
 _png_save_int_32($18,$20);
 $21 = ((($4)) + 24|0);
 $22 = ((($1)) + 16|0);
 $23 = HEAP32[$22>>2]|0;
 _png_save_int_32($21,$23);
 $24 = ((($4)) + 28|0);
 $25 = ((($1)) + 20|0);
 $26 = HEAP32[$25>>2]|0;
 _png_save_int_32($24,$26);
 $27 = ($0|0)==(0|0);
 if ($27) {
  STACKTOP = sp;return;
 }
 $28 = ((($0)) + 800|0);
 HEAP32[$28>>2] = 34;
 HEAP8[$3>>0] = 0;
 $29 = ((($3)) + 1|0);
 HEAP8[$29>>0] = 0;
 $30 = ((($3)) + 2|0);
 HEAP8[$30>>0] = 0;
 $31 = ((($3)) + 3|0);
 HEAP8[$31>>0] = 32;
 $32 = ((($3)) + 4|0);
 HEAP8[$32>>0] = 99;
 $33 = ((($3)) + 5|0);
 HEAP8[$33>>0] = 72;
 $34 = ((($3)) + 6|0);
 HEAP8[$34>>0] = 82;
 $35 = ((($3)) + 7|0);
 HEAP8[$35>>0] = 77;
 _png_write_data($0,$3,8);
 $36 = ((($0)) + 376|0);
 HEAP32[$36>>2] = 1665684045;
 _png_reset_crc($0);
 _png_calculate_crc($0,$32,4);
 HEAP32[$28>>2] = 66;
 _png_write_data($0,$4,32);
 _png_calculate_crc($0,$4,32);
 HEAP32[$28>>2] = 130;
 $37 = ((($0)) + 412|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $38 >>> 24;
 $40 = $39&255;
 HEAP8[$2>>0] = $40;
 $41 = $38 >>> 16;
 $42 = $41&255;
 $43 = ((($2)) + 1|0);
 HEAP8[$43>>0] = $42;
 $44 = $38 >>> 8;
 $45 = $44&255;
 $46 = ((($2)) + 2|0);
 HEAP8[$46>>0] = $45;
 $47 = $38&255;
 $48 = ((($2)) + 3|0);
 HEAP8[$48>>0] = $47;
 _png_write_data($0,$2,4);
 STACKTOP = sp;return;
}
function _png_write_chunk($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond3$i$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $4 = sp + 8|0;
 $5 = sp;
 $6 = HEAP8[$1>>0]|0;
 $7 = $6&255;
 $8 = $7 << 24;
 $9 = ((($1)) + 1|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = $11 << 16;
 $13 = $12 | $8;
 $14 = ((($1)) + 2|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = $15&255;
 $17 = $16 << 8;
 $18 = $13 | $17;
 $19 = ((($1)) + 3|0);
 $20 = HEAP8[$19>>0]|0;
 $21 = $20&255;
 $22 = $18 | $21;
 $23 = ($0|0)==(0|0);
 if ($23) {
  STACKTOP = sp;return;
 }
 $24 = ($3|0)<(0);
 if ($24) {
  _png_error($0,25384);
  // unreachable;
 }
 $25 = ((($0)) + 800|0);
 HEAP32[$25>>2] = 34;
 $26 = $3 >>> 24;
 $27 = $26&255;
 HEAP8[$5>>0] = $27;
 $28 = $3 >>> 16;
 $29 = $28&255;
 $30 = ((($5)) + 1|0);
 HEAP8[$30>>0] = $29;
 $31 = $3 >>> 8;
 $32 = $31&255;
 $33 = ((($5)) + 2|0);
 HEAP8[$33>>0] = $32;
 $34 = $3&255;
 $35 = ((($5)) + 3|0);
 HEAP8[$35>>0] = $34;
 $36 = ((($5)) + 4|0);
 HEAP8[$36>>0] = $6;
 $37 = ((($5)) + 5|0);
 HEAP8[$37>>0] = $10;
 $38 = ((($5)) + 6|0);
 HEAP8[$38>>0] = $15;
 $39 = ((($5)) + 7|0);
 HEAP8[$39>>0] = $20;
 _png_write_data($0,$5,8);
 $40 = ((($0)) + 376|0);
 HEAP32[$40>>2] = $22;
 _png_reset_crc($0);
 _png_calculate_crc($0,$36,4);
 HEAP32[$25>>2] = 66;
 $41 = ($2|0)!=(0|0);
 $42 = ($3|0)!=(0);
 $or$cond3$i$i = $41 & $42;
 if ($or$cond3$i$i) {
  _png_write_data($0,$2,$3);
  _png_calculate_crc($0,$2,$3);
 }
 HEAP32[$25>>2] = 130;
 $43 = ((($0)) + 412|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = $44 >>> 24;
 $46 = $45&255;
 HEAP8[$4>>0] = $46;
 $47 = $44 >>> 16;
 $48 = $47&255;
 $49 = ((($4)) + 1|0);
 HEAP8[$49>>0] = $48;
 $50 = $44 >>> 8;
 $51 = $50&255;
 $52 = ((($4)) + 2|0);
 HEAP8[$52>>0] = $51;
 $53 = $44&255;
 $54 = ((($4)) + 3|0);
 HEAP8[$54>>0] = $53;
 _png_write_data($0,$4,4);
 STACKTOP = sp;return;
}
function _png_check_keyword($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$041$lcssa = 0, $$04162 = 0, $$042$lcssa = 0, $$04261 = 0, $$044$lcssa = 0, $$04460 = 0, $$047$lcssa = 0, $$04759 = 0, $$048$lcssa = 0, $$04858 = 0, $$1 = 0, $$143 = 0, $$145 = 0, $$149 = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond52 = 0, $spec$select = 0, $spec$select53 = 0, $spec$select55 = 0, $spec$select56 = 0, $spec$select57 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $3 = sp;
 $4 = ($1|0)==(0|0);
 if ($4) {
  HEAP8[$2>>0] = 0;
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $5 = HEAP8[$1>>0]|0;
 $6 = ($5<<24>>24)==(0);
 if ($6) {
  $$041$lcssa = 1;$$042$lcssa = 0;$$044$lcssa = 0;$$047$lcssa = $1;$$048$lcssa = $2;
 } else {
  $$04162 = 1;$$04261 = 0;$$04460 = 0;$$04759 = $1;$$04858 = $2;$9 = $5;
  while(1) {
   $7 = ((($$04759)) + 1|0);
   $8 = $9&255;
   $$off = (($9) + -33)<<24>>24;
   $10 = ($$off&255)<(94);
   $11 = ($9&255)>(160);
   $or$cond52 = $11 | $10;
   do {
    if ($or$cond52) {
     $12 = ((($$04858)) + 1|0);
     HEAP8[$$04858>>0] = $9;
     $13 = (($$04460) + 1)|0;
     $$1 = 0;$$143 = $$04261;$$145 = $13;$$149 = $12;
    } else {
     $14 = ($$04162|0)==(0);
     if ($14) {
      $15 = ((($$04858)) + 1|0);
      HEAP8[$$04858>>0] = 32;
      $16 = (($$04460) + 1)|0;
      $17 = ($9<<24>>24)==(32);
      $spec$select = $17 ? $$04261 : $8;
      $$1 = 1;$$143 = $spec$select;$$145 = $16;$$149 = $15;
      break;
     } else {
      $18 = ($$04261|0)==(0);
      $spec$select53 = $18 ? $8 : $$04261;
      $$1 = $$04162;$$143 = $spec$select53;$$145 = $$04460;$$149 = $$04858;
      break;
     }
    }
   } while(0);
   $19 = HEAP8[$7>>0]|0;
   $20 = ($19<<24>>24)!=(0);
   $21 = ($$145>>>0)<(79);
   $22 = $21 & $20;
   if ($22) {
    $$04162 = $$1;$$04261 = $$143;$$04460 = $$145;$$04759 = $7;$$04858 = $$149;$9 = $19;
   } else {
    $$041$lcssa = $$1;$$042$lcssa = $$143;$$044$lcssa = $$145;$$047$lcssa = $7;$$048$lcssa = $$149;
    break;
   }
  }
 }
 $23 = ($$044$lcssa|0)!=(0);
 $24 = ($$041$lcssa|0)!=(0);
 $or$cond = $23 & $24;
 $25 = ((($$048$lcssa)) + -1|0);
 $26 = ($$042$lcssa|0)==(0);
 $spec$select55 = $or$cond ? $25 : $$048$lcssa;
 $27 = $or$cond << 31 >> 31;
 $spec$select56 = (($$044$lcssa) + ($27))|0;
 $28 = $26 & $or$cond;
 $spec$select57 = $28 ? 32 : $$042$lcssa;
 HEAP8[$spec$select55>>0] = 0;
 $29 = ($spec$select56|0)==(0);
 if ($29) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $30 = HEAP8[$$047$lcssa>>0]|0;
 $31 = ($30<<24>>24)==(0);
 if (!($31)) {
  _png_warning($0,25736);
  $$0 = $spec$select56;
  STACKTOP = sp;return ($$0|0);
 }
 $32 = ($spec$select57|0)==(0);
 if ($32) {
  $$0 = $spec$select56;
  STACKTOP = sp;return ($$0|0);
 }
 _png_warning_parameter($3,1,$1);
 _png_warning_parameter_signed($3,2,4,$spec$select57);
 _png_formatted_warning($0,$3,25754);
 $$0 = $spec$select56;
 STACKTOP = sp;return ($$0|0);
}
function _png_text_compress($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$i = 0, $$029$i = 0, $$077 = 0, $$078 = 0, $$080 = 0, $$179 = 0, $$185 = 0, $$191 = 0, $$2 = 0, $$282 = 0, $$288 = 0, $$3 = 0, $$383 = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $8 = 0, $9 = 0, $or$cond$i = 0, $or$cond3 = 0, $or$cond31$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (_png_deflate_claim($0,$1,$5)|0);
 $7 = ($6|0)==(0);
 if (!($7)) {
  $$191 = $6;
  return ($$191|0);
 }
 $8 = ((($0)) + 280|0);
 $9 = HEAP32[$4>>2]|0;
 $10 = HEAP32[$2>>2]|0;
 $11 = ((($0)) + 224|0);
 HEAP32[$11>>2] = $10;
 $12 = ((($0)) + 228|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($2)) + 12|0);
 $14 = ((($0)) + 236|0);
 HEAP32[$14>>2] = $13;
 $15 = ((($0)) + 240|0);
 HEAP32[$15>>2] = 1024;
 $16 = ((($0)) + 284|0);
 $$077 = 1024;$$078 = $9;$$080 = $8;$17 = 1024;
 while(1) {
  HEAP32[$12>>2] = $$078;
  $18 = ($17|0)==(0);
  do {
   if ($18) {
    $19 = (($$077) + ($3))|0;
    $20 = ($19|0)<(0);
    if ($20) {
     $$179 = 0;$$185 = 2;$$288 = -4;$$3 = $$077;$$383 = $$080;
    } else {
     $21 = HEAP32[$$080>>2]|0;
     $22 = ($21|0)==(0|0);
     if ($22) {
      $23 = HEAP32[$16>>2]|0;
      $24 = (($23) + 4)|0;
      $25 = (_png_malloc_base($0,$24)|0);
      $26 = ($25|0)==(0|0);
      if ($26) {
       $$179 = 0;$$185 = 2;$$288 = -4;$$3 = $$077;$$383 = $$080;
       break;
      }
      HEAP32[$25>>2] = 0;
      HEAP32[$$080>>2] = $25;
      $$0 = $25;
     } else {
      $$0 = $21;
     }
     $27 = ((($$0)) + 4|0);
     HEAP32[$14>>2] = $27;
     $28 = HEAP32[$16>>2]|0;
     HEAP32[$15>>2] = $28;
     $29 = (($28) + ($$077))|0;
     $$2 = $29;$$282 = $$0;
     label = 9;
    }
   } else {
    $$2 = $$077;$$282 = $$080;
    label = 9;
   }
  } while(0);
  if ((label|0) == 9) {
   label = 0;
   $30 = (_deflate($11,4)|0);
   $31 = HEAP32[$12>>2]|0;
   HEAP32[$12>>2] = 0;
   $$179 = $31;$$185 = 0;$$288 = $30;$$3 = $$2;$$383 = $$282;
  }
  $32 = $$185 | $$288;
  $33 = ($32|0)==(0);
  $$pr = HEAP32[$15>>2]|0;
  if ($33) {
   $$077 = $$3;$$078 = $$179;$$080 = $$383;$17 = $$pr;
  } else {
   break;
  }
 }
 $34 = (($$3) - ($$pr))|0;
 HEAP32[$15>>2] = 0;
 $35 = ((($2)) + 8|0);
 HEAP32[$35>>2] = $34;
 $36 = (($34) + ($3))|0;
 $37 = ($36>>>0)>(2147483646);
 if ($37) {
  $38 = ((($0)) + 248|0);
  HEAP32[$38>>2] = 25647;
  $39 = ((($0)) + 220|0);
  HEAP32[$39>>2] = 0;
  $$191 = -4;
  return ($$191|0);
 }
 _png_zstream_error($0,$$288);
 $40 = ((($0)) + 220|0);
 HEAP32[$40>>2] = 0;
 $41 = ($$288|0)==(1);
 $42 = ($$179|0)==(0);
 $or$cond3 = $41 & $42;
 if (!($or$cond3)) {
  $$191 = $$288;
  return ($$191|0);
 }
 $43 = HEAP32[$4>>2]|0;
 $44 = ($43>>>0)<(16385);
 if (!($44)) {
  $$191 = 0;
  return ($$191|0);
 }
 $45 = HEAP8[$13>>0]|0;
 $46 = $45&255;
 $47 = $46 & 15;
 $48 = ($47|0)==(8);
 $49 = $46 & 240;
 $50 = ($49>>>0)<(113);
 $or$cond$i = $48 & $50;
 if (!($or$cond$i)) {
  $$191 = 0;
  return ($$191|0);
 }
 $51 = $46 >>> 4;
 $52 = 128 << $51;
 $53 = ($52>>>0)<($43>>>0);
 if ($53) {
  $$191 = 0;
  return ($$191|0);
 }
 $$0$i = $52;$$029$i = $51;
 while(1) {
  $54 = $$0$i >>> 1;
  $55 = (($$029$i) + -1)|0;
  $56 = ($55|0)==(0);
  $57 = ($54>>>0)<($43>>>0);
  $or$cond31$i = $56 | $57;
  if ($or$cond31$i) {
   break;
  } else {
   $$0$i = $54;$$029$i = $55;
  }
 }
 $58 = $55 << 4;
 $59 = $58 | 8;
 $60 = $59&255;
 HEAP8[$13>>0] = $60;
 $61 = ((($2)) + 13|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = $62 & -32;
 $64 = $63&255;
 $65 = $59 << 8;
 $66 = $65 | $64;
 $67 = (($66>>>0) % 31)&-1;
 $68 = $67 | $64;
 $69 = $68 ^ 31;
 $70 = $69&255;
 HEAP8[$61>>0] = $70;
 $$191 = 0;
 return ($$191|0);
}
function _png_deflate_claim($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$07687 = 0, $$077 = 0, $$078 = 0, $$079 = 0, $$080 = 0, $$081 = 0, $$089 = 0, $$184 = 0, $$188 = 0, $$2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp;
 $4 = ((($0)) + 220|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 do {
  if (!($6)) {
   $7 = $1 >>> 24;
   $8 = $7&255;
   HEAP8[$3>>0] = $8;
   $9 = $1 >>> 16;
   $10 = $9&255;
   $11 = ((($3)) + 1|0);
   HEAP8[$11>>0] = $10;
   $12 = $1 >>> 8;
   $13 = $12&255;
   $14 = ((($3)) + 2|0);
   HEAP8[$14>>0] = $13;
   $15 = $1&255;
   $16 = ((($3)) + 3|0);
   HEAP8[$16>>0] = $15;
   $17 = ((($3)) + 4|0);
   HEAP8[$17>>0] = 58;
   $18 = ((($3)) + 5|0);
   HEAP8[$18>>0] = 32;
   $19 = $5 >>> 24;
   $20 = $19&255;
   $21 = ((($3)) + 6|0);
   HEAP8[$21>>0] = $20;
   $22 = $5 >>> 16;
   $23 = $22&255;
   $24 = ((($3)) + 7|0);
   HEAP8[$24>>0] = $23;
   $25 = $5 >>> 8;
   $26 = $25&255;
   $27 = ((($3)) + 8|0);
   HEAP8[$27>>0] = $26;
   $28 = $5&255;
   $29 = ((($3)) + 9|0);
   HEAP8[$29>>0] = $28;
   (_png_safecat($3,64,10,25672)|0);
   _png_warning($0,$3);
   $30 = HEAP32[$4>>2]|0;
   $31 = ($30|0)==(1229209940);
   if (!($31)) {
    HEAP32[$4>>2] = 0;
    break;
   }
   $32 = ((($0)) + 248|0);
   HEAP32[$32>>2] = 25687;
   $$184 = -2;
   STACKTOP = sp;return ($$184|0);
  }
 } while(0);
 $33 = ((($0)) + 288|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($0)) + 292|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ((($0)) + 296|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ((($0)) + 300|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($1|0)==(1229209940);
 do {
  if ($41) {
   $42 = ((($0)) + 212|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = $43 & 1;
   $45 = ($44|0)==(0);
   if ($45) {
    $48 = ((($0)) + 434|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = ($49<<24>>24)!=(8);
    $$ = $50&1;
    $$077 = $$;$$078 = $40;$$079 = $38;$$080 = $36;$$081 = $34;
    break;
   } else {
    $46 = ((($0)) + 304|0);
    $47 = HEAP32[$46>>2]|0;
    $$077 = $47;$$078 = $40;$$079 = $38;$$080 = $36;$$081 = $34;
    break;
   }
  } else {
   $51 = ((($0)) + 308|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = ((($0)) + 312|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = ((($0)) + 316|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = ((($0)) + 320|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ((($0)) + 324|0);
   $60 = HEAP32[$59>>2]|0;
   $$077 = $60;$$078 = $58;$$079 = $56;$$080 = $54;$$081 = $52;
  }
 } while(0);
 $61 = ($2>>>0)<(16385);
 if ($61) {
  $62 = (($$079) + -1)|0;
  $63 = 1 << $62;
  $64 = (($2) + 262)|0;
  $65 = ($64>>>0)>($63>>>0);
  if ($65) {
   $$2 = $$079;
  } else {
   $$089 = $63;$$188 = $$079;
   while(1) {
    $66 = $$089 >>> 1;
    $67 = (($$188) + -1)|0;
    $68 = ($64>>>0)>($66>>>0);
    if ($68) {
     $$2 = $67;
     break;
    } else {
     $$089 = $66;$$188 = $67;
    }
   }
  }
 } else {
  $$2 = $$079;
 }
 $69 = ((($0)) + 212|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $70 & 2;
 $72 = ($71|0)==(0);
 do {
  if ($72) {
   $98 = $70;
  } else {
   $73 = ((($0)) + 328|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($74|0)==($$081|0);
   if ($75) {
    $76 = ((($0)) + 332|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)==($$080|0);
    if ($78) {
     $79 = ((($0)) + 336|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = ($80|0)==($$2|0);
     if ($81) {
      $82 = ((($0)) + 340|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ($83|0)==($$078|0);
      if ($84) {
       $85 = ((($0)) + 344|0);
       $86 = HEAP32[$85>>2]|0;
       $87 = ($86|0)==($$077|0);
       if ($87) {
        $98 = $70;
        break;
       }
      }
     }
    }
   }
   $88 = ((($0)) + 224|0);
   $89 = (_deflateEnd($88)|0);
   $90 = ($89|0)==(0);
   if (!($90)) {
    _png_warning($0,25702);
   }
   $91 = HEAP32[$69>>2]|0;
   $92 = $91 & -3;
   HEAP32[$69>>2] = $92;
   $98 = $92;
  }
 } while(0);
 $93 = ((($0)) + 224|0);
 HEAP32[$93>>2] = 0;
 $94 = ((($0)) + 228|0);
 HEAP32[$94>>2] = 0;
 $95 = ((($0)) + 236|0);
 HEAP32[$95>>2] = 0;
 $96 = ((($0)) + 240|0);
 HEAP32[$96>>2] = 0;
 $97 = $98 & 2;
 $99 = ($97|0)==(0);
 if ($99) {
  $100 = (_deflateInit2_($93,$$081,$$080,$$2,$$078,$$077,25730,56)|0);
  $101 = ($100|0)==(0);
  if ($101) {
   $102 = HEAP32[$69>>2]|0;
   $103 = $102 | 2;
   HEAP32[$69>>2] = $103;
   label = 27;
  } else {
   $$07687 = $100;
   label = 28;
  }
 } else {
  $104 = (_deflateReset($93)|0);
  $105 = ($104|0)==(0);
  if ($105) {
   label = 27;
  } else {
   $$07687 = $104;
   label = 28;
  }
 }
 if ((label|0) == 27) {
  HEAP32[$4>>2] = $1;
  $$184 = 0;
  STACKTOP = sp;return ($$184|0);
 }
 else if ((label|0) == 28) {
  _png_zstream_error($0,$$07687);
  $$184 = $$07687;
  STACKTOP = sp;return ($$184|0);
 }
 return (0)|0;
}
function _png_warning_parameter($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01216$i = 0, $$017$i = 0, $$off = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond14$i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $$off = (($1) + -1)|0;
 $3 = ($$off>>>0)>(7);
 $4 = (($0) + ($$off<<5)|0);
 $5 = ($4|0)==(0|0);
 $or$cond = $3 | $5;
 if ($or$cond) {
  return;
 }
 $6 = ($2|0)==(0|0);
 if ($6) {
  $$pre$phiZ2D = $4;
 } else {
  $7 = HEAP8[$2>>0]|0;
  $8 = ($7<<24>>24)==(0);
  if ($8) {
   $$pre$phiZ2D = $4;
  } else {
   $$01216$i = 0;$$017$i = $2;$12 = $7;
   while(1) {
    $9 = ((($$017$i)) + 1|0);
    $10 = (($$01216$i) + 1)|0;
    $11 = ((($0) + ($$off<<5)|0) + ($$01216$i)|0);
    HEAP8[$11>>0] = $12;
    $13 = HEAP8[$9>>0]|0;
    $14 = ($13<<24>>24)!=(0);
    $15 = ($10>>>0)<(31);
    $or$cond14$i = $15 & $14;
    if ($or$cond14$i) {
     $$01216$i = $10;$$017$i = $9;$12 = $13;
    } else {
     break;
    }
   }
   $$pre = ((($0) + ($$off<<5)|0) + ($10)|0);
   $$pre$phiZ2D = $$pre;
  }
 }
 HEAP8[$$pre$phiZ2D>>0] = 0;
 return;
}
function _png_warning_parameter_signed($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$01216$i$i = 0, $$017$i$i = 0, $$03456$i = 0, $$03456$i$us16 = 0, $$03456$us$i = 0, $$03755$i = 0, $$03755$i$us = 0, $$03755$i$us17 = 0, $$03755$us$i = 0, $$03854$i = 0, $$03854$i$us = 0, $$03854$i$us18 = 0, $$03854$us$i = 0, $$040$lcssa$i = 0, $$04053$i = 0, $$04053$i$us = 0, $$04053$i$us19 = 0, $$04053$us$i = 0, $$057$us$i = 0;
 var $$1$us$i = 0, $$13950$i = 0, $$13950$us$i = 0, $$141$us$i = 0, $$252$us$i = 0, $$343$i = 0, $$343$us$i = 0, $$351$i = 0, $$off$i = 0, $$pre$i = 0, $$pre$phi$iZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $9 = 0, $or$cond = 0, $or$cond$i = 0, $or$cond14$i$i = 0, $or$cond44 = 0, $or$cond44$i = 0, $or$cond44$i$us = 0, $or$cond44$i$us20 = 0, $or$cond44$us$i = 0, $or$cond47$us$i = 0;
 var $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $5 = ($3|0)<(0);
 $6 = (0 - ($3))|0;
 $spec$select = $5 ? $6 : $3;
 $7 = ((($4)) + 23|0);
 HEAP8[$7>>0] = 0;
 L1: do {
  switch ($2|0) {
  case 5:  {
   $$03456$us$i = 1;$$03755$us$i = 0;$$03854$us$i = $spec$select;$$04053$us$i = $7;$$057$us$i = 0;$77 = 0;
   while(1) {
    $8 = ($$03854$us$i|0)!=(0);
    $9 = ($$03755$us$i|0)<($$03456$us$i|0);
    $or$cond44$us$i = $9 | $8;
    if (!($or$cond44$us$i)) {
     $$040$lcssa$i = $$04053$us$i;$79 = $77;
     break L1;
    }
    $10 = (($$03854$us$i>>>0) / 10)&-1;
    $11 = ($10*10)|0;
    $12 = (($$03854$us$i) - ($11))|0;
    $13 = $12 | $$057$us$i;
    $14 = ($13|0)==(0);
    $15 = ((($$04053$us$i)) + -1|0);
    if ($14) {
     $$1$us$i = 0;$$141$us$i = $$04053$us$i;$80 = $77;
    } else {
     $16 = (20352 + ($12)|0);
     $17 = HEAP8[$16>>0]|0;
     HEAP8[$15>>0] = $17;
     $$1$us$i = 1;$$141$us$i = $15;$80 = $17;
    }
    $18 = (($$03755$us$i) + 1)|0;
    $19 = ($18|0)==(5);
    $20 = ($$141$us$i>>>0)>($4>>>0);
    $or$cond47$us$i = $19 & $20;
    do {
     if ($or$cond47$us$i) {
      $21 = ($$1$us$i|0)==(0);
      if (!($21)) {
       $22 = ((($$141$us$i)) + -1|0);
       HEAP8[$22>>0] = 46;
       $$13950$us$i = $10;$$252$us$i = 1;$$343$us$i = $22;$81 = 46;$82 = 5;
       break;
      }
      $23 = ($$03854$us$i>>>0)<(10);
      if ($23) {
       $24 = ((($$141$us$i)) + -1|0);
       HEAP8[$24>>0] = 48;
       $$13950$us$i = 0;$$252$us$i = 0;$$343$us$i = $24;$81 = 48;$82 = 5;
      } else {
       $$13950$us$i = $10;$$252$us$i = 0;$$343$us$i = $$141$us$i;$81 = $80;$82 = 5;
      }
     } else {
      $$13950$us$i = $10;$$252$us$i = $$1$us$i;$$343$us$i = $$141$us$i;$81 = $80;$82 = $18;
     }
    } while(0);
    $25 = ($$343$us$i>>>0)>($4>>>0);
    if ($25) {
     $$03456$us$i = 5;$$03755$us$i = $82;$$03854$us$i = $$13950$us$i;$$04053$us$i = $$343$us$i;$$057$us$i = $$252$us$i;$77 = $81;
    } else {
     $$040$lcssa$i = $$343$us$i;$79 = $81;
     break;
    }
   }
   break;
  }
  case 3:  {
   $$03755$i$us = 0;$$03854$i$us = $spec$select;$$04053$i$us = $7;$76 = 0;
   while(1) {
    $26 = ($$03854$i$us|0)!=(0);
    $27 = ($$03755$i$us|0)==(0);
    $or$cond44$i$us = $27 | $26;
    if (!($or$cond44$i$us)) {
     $$040$lcssa$i = $$04053$i$us;$79 = $76;
     break L1;
    }
    $28 = $$03854$i$us & 15;
    $29 = (20352 + ($28)|0);
    $30 = HEAP8[$29>>0]|0;
    $31 = ((($$04053$i$us)) + -1|0);
    HEAP8[$31>>0] = $30;
    $32 = $$03854$i$us >>> 4;
    $33 = (($$03755$i$us) + 1)|0;
    $34 = ($31>>>0)>($4>>>0);
    if ($34) {
     $$03755$i$us = $33;$$03854$i$us = $32;$$04053$i$us = $31;$76 = $30;
    } else {
     $$040$lcssa$i = $31;$79 = $30;
     break;
    }
   }
   break;
  }
  case 2:  {
   $$03456$i$us16 = 1;$$03755$i$us17 = 0;$$03854$i$us18 = $spec$select;$$04053$i$us19 = $7;$75 = 0;
   while(1) {
    $35 = ($$03854$i$us18|0)!=(0);
    $36 = ($$03755$i$us17>>>0)<($$03456$i$us16>>>0);
    $or$cond44$i$us20 = $36 | $35;
    if (!($or$cond44$i$us20)) {
     $$040$lcssa$i = $$04053$i$us19;$79 = $75;
     break L1;
    }
    $37 = (($$03854$i$us18>>>0) / 10)&-1;
    $38 = ($37*10)|0;
    $39 = (($$03854$i$us18) - ($38))|0;
    $40 = (20352 + ($39)|0);
    $41 = HEAP8[$40>>0]|0;
    $42 = ((($$04053$i$us19)) + -1|0);
    HEAP8[$42>>0] = $41;
    $43 = (($$03755$i$us17) + 1)|0;
    $44 = ($42>>>0)>($4>>>0);
    if ($44) {
     $$03456$i$us16 = 2;$$03755$i$us17 = $43;$$03854$i$us18 = $37;$$04053$i$us19 = $42;$75 = $41;
    } else {
     $$040$lcssa$i = $42;$79 = $41;
     break;
    }
   }
   break;
  }
  default: {
   $$03456$i = 1;$$03755$i = 0;$$03854$i = $spec$select;$$04053$i = $7;$78 = 0;
   while(1) {
    $45 = ($$03854$i|0)!=(0);
    $46 = ($$03755$i|0)<($$03456$i|0);
    $or$cond44$i = $46 | $45;
    if (!($or$cond44$i)) {
     $$040$lcssa$i = $$04053$i;$79 = $78;
     break L1;
    }
    switch ($2|0) {
    case 1:  {
     $47 = (($$03854$i>>>0) / 10)&-1;
     $48 = ($47*10)|0;
     $49 = (($$03854$i) - ($48))|0;
     $50 = (20352 + ($49)|0);
     $51 = HEAP8[$50>>0]|0;
     $52 = ((($$04053$i)) + -1|0);
     HEAP8[$52>>0] = $51;
     $$13950$i = $47;$$343$i = $52;$$351$i = $$03456$i;$83 = $51;
     break;
    }
    case 4:  {
     $53 = $$03854$i & 15;
     $54 = (20352 + ($53)|0);
     $55 = HEAP8[$54>>0]|0;
     $56 = ((($$04053$i)) + -1|0);
     HEAP8[$56>>0] = $55;
     $57 = $$03854$i >>> 4;
     $$13950$i = $57;$$343$i = $56;$$351$i = 2;$83 = $55;
     break;
    }
    default: {
     $$13950$i = 0;$$343$i = $$04053$i;$$351$i = $$03456$i;$83 = $78;
    }
    }
    $58 = (($$03755$i) + 1)|0;
    $59 = ($$343$i>>>0)>($4>>>0);
    if ($59) {
     $$03456$i = $$351$i;$$03755$i = $58;$$03854$i = $$13950$i;$$04053$i = $$343$i;$78 = $83;
    } else {
     $$040$lcssa$i = $$343$i;$79 = $83;
     break L1;
    }
   }
  }
  }
 } while(0);
 $60 = ($$040$lcssa$i>>>0)>($4>>>0);
 $or$cond = $5 & $60;
 if ($or$cond) {
  $61 = ((($$040$lcssa$i)) + -1|0);
  HEAP8[$61>>0] = 45;
  $$0 = $61;$66 = 45;
 } else {
  $$0 = $$040$lcssa$i;$66 = $79;
 }
 $$off$i = (($1) + -1)|0;
 $62 = ($$off$i>>>0)>(7);
 $63 = (($0) + ($$off$i<<5)|0);
 $64 = ($63|0)==(0|0);
 $or$cond$i = $62 | $64;
 if ($or$cond$i) {
  STACKTOP = sp;return;
 }
 $65 = ($$0|0)==(0|0);
 $67 = ($66<<24>>24)==(0);
 $or$cond44 = $65 | $67;
 if ($or$cond44) {
  $$pre$phi$iZ2D = $63;
 } else {
  $$01216$i$i = 0;$$017$i$i = $$0;$71 = $66;
  while(1) {
   $68 = ((($$017$i$i)) + 1|0);
   $69 = (($$01216$i$i) + 1)|0;
   $70 = ((($0) + ($$off$i<<5)|0) + ($$01216$i$i)|0);
   HEAP8[$70>>0] = $71;
   $72 = HEAP8[$68>>0]|0;
   $73 = ($72<<24>>24)!=(0);
   $74 = ($69>>>0)<(31);
   $or$cond14$i$i = $74 & $73;
   if ($or$cond14$i$i) {
    $$01216$i$i = $69;$$017$i$i = $68;$71 = $72;
   } else {
    break;
   }
  }
  $$pre$i = ((($0) + ($$off$i<<5)|0) + ($69)|0);
  $$pre$phi$iZ2D = $$pre$i;
 }
 HEAP8[$$pre$phi$iZ2D>>0] = 0;
 STACKTOP = sp;return;
}
function _png_formatted_warning($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$036$be$us = 0, $$03649 = 0, $$03649$us = 0, $$03744$us = 0, $$038$us = 0, $$039$be$us = 0, $$039$lcssa = 0, $$03947 = 0, $$03947$us = 0, $$140$lcssa$us = 0, $$14043$us = 0, $$2$us = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond42$us = 0, $spec$select$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $3 = sp;
 $4 = ($1|0)==(0|0);
 L1: do {
  if ($4) {
   $$03649 = $2;$$03947 = 0;
   while(1) {
    $31 = HEAP8[$$03649>>0]|0;
    $32 = ($31<<24>>24)==(0);
    if ($32) {
     $$039$lcssa = $$03947;
     break L1;
    }
    $33 = ((($$03649)) + 1|0);
    $34 = (($$03947) + 1)|0;
    $35 = (($3) + ($$03947)|0);
    HEAP8[$35>>0] = $31;
    $36 = ($34>>>0)<(191);
    if ($36) {
     $$03649 = $33;$$03947 = $34;
    } else {
     $$039$lcssa = 191;
     break;
    }
   }
  } else {
   $$03649$us = $2;$$03947$us = 0;
   while(1) {
    $5 = HEAP8[$$03649$us>>0]|0;
    switch ($5<<24>>24) {
    case 0:  {
     $$039$lcssa = $$03947$us;
     break L1;
     break;
    }
    case 64:  {
     $6 = ((($$03649$us)) + 1|0);
     $7 = HEAP8[$6>>0]|0;
     $8 = ($7<<24>>24)==(0);
     if ($8) {
      $$2$us = $$03649$us;$28 = 64;
      label = 13;
     } else {
      $$038$us = 0;
      while(1) {
       $9 = (25789 + ($$038$us)|0);
       $10 = HEAP8[$9>>0]|0;
       $11 = ($10<<24>>24)!=($7<<24>>24);
       $12 = ($$038$us|0)!=(9);
       $spec$select$us = $12 & $11;
       $13 = (($$038$us) + 1)|0;
       if ($spec$select$us) {
        $$038$us = $13;
       } else {
        break;
       }
      }
      $14 = ($$038$us>>>0)<(8);
      if ($14) {
       $15 = (((($1) + ($$038$us<<5)|0)) + 32|0);
       $16 = ($$03947$us>>>0)<(191);
       L16: do {
        if ($16) {
         $30 = (($1) + ($$038$us<<5)|0);
         $$03744$us = $30;$$14043$us = $$03947$us;
         while(1) {
          $17 = HEAP8[$$03744$us>>0]|0;
          $18 = ($17<<24>>24)!=(0);
          $19 = ($$03744$us>>>0)<($15>>>0);
          $or$cond42$us = $19 & $18;
          if (!($or$cond42$us)) {
           $$140$lcssa$us = $$14043$us;
           break L16;
          }
          $21 = ((($$03744$us)) + 1|0);
          $22 = (($$14043$us) + 1)|0;
          $23 = (($3) + ($$14043$us)|0);
          HEAP8[$23>>0] = $17;
          $24 = ($22>>>0)<(191);
          if ($24) {
           $$03744$us = $21;$$14043$us = $22;
          } else {
           $$140$lcssa$us = $22;
           break;
          }
         }
        } else {
         $$140$lcssa$us = $$03947$us;
        }
       } while(0);
       $20 = ((($$03649$us)) + 2|0);
       $$036$be$us = $20;$$039$be$us = $$140$lcssa$us;
      } else {
       $$2$us = $6;$28 = $7;
       label = 13;
      }
     }
     break;
    }
    default: {
     $$2$us = $$03649$us;$28 = $5;
     label = 13;
    }
    }
    if ((label|0) == 13) {
     label = 0;
     $25 = ((($$2$us)) + 1|0);
     $26 = (($$03947$us) + 1)|0;
     $27 = (($3) + ($$03947$us)|0);
     HEAP8[$27>>0] = $28;
     $$036$be$us = $25;$$039$be$us = $26;
    }
    $29 = ($$039$be$us>>>0)<(191);
    if ($29) {
     $$03649$us = $$036$be$us;$$03947$us = $$039$be$us;
    } else {
     $$039$lcssa = $$039$be$us;
     break L1;
    }
   }
  }
 } while(0);
 $37 = (($3) + ($$039$lcssa)|0);
 HEAP8[$37>>0] = 0;
 _png_warning($0,$3);
 STACKTOP = sp;return;
}
function _png_write_info($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0113116 = 0, $$0119 = 0, $$024$i = 0, $$1115 = 0, $$pre = 0, $$pre$i = 0, $$pre122 = 0, $$pre123 = 0, $$pre124 = 0, $$pre125 = 0, $$pre126 = 0, $$pre127 = 0, $$pre128 = 0, $$pre129 = 0, $$pre130 = 0, $$pre131 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 $3 = ($1|0)==(0|0);
 $or$cond = $2 | $3;
 if ($or$cond) {
  return;
 }
 _png_write_info_before_PLTE($0,$1);
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 8;
 $7 = ($6|0)==(0);
 if ($7) {
  $13 = ((($1)) + 25|0);
  $14 = HEAP8[$13>>0]|0;
  $15 = ($14<<24>>24)==(3);
  if ($15) {
   _png_error($0,26116);
   // unreachable;
  } else {
   $17 = $5;
  }
 } else {
  $8 = ((($1)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($1)) + 20|0);
  $11 = HEAP16[$10>>1]|0;
  $12 = $11&65535;
  _png_write_PLTE($0,$9,$12);
  $$pre = HEAP32[$4>>2]|0;
  $17 = $$pre;
 }
 $16 = $17 & 16;
 $18 = ($16|0)==(0);
 if ($18) {
  $46 = $17;
 } else {
  $19 = ((($0)) + 216|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = $20 & 524288;
  $22 = ($21|0)==(0);
  $$pre131 = ((($1)) + 25|0);
  if (!($22)) {
   $23 = HEAP8[$$pre131>>0]|0;
   $24 = ($23<<24>>24)==(3);
   if ($24) {
    $25 = ((($1)) + 22|0);
    $26 = HEAP16[$25>>1]|0;
    $27 = ($26<<16>>16)==(0);
    if (!($27)) {
     $28 = ((($1)) + 156|0);
     $$0119 = 0;
     while(1) {
      $29 = HEAP32[$28>>2]|0;
      $30 = (($29) + ($$0119)|0);
      $31 = HEAP8[$30>>0]|0;
      $32 = $31 ^ -1;
      HEAP8[$30>>0] = $32;
      $33 = (($$0119) + 1)|0;
      $34 = HEAP16[$25>>1]|0;
      $35 = $34&65535;
      $36 = ($33>>>0)<($35>>>0);
      if ($36) {
       $$0119 = $33;
      } else {
       break;
      }
     }
    }
   }
  }
  $37 = ((($1)) + 156|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ((($1)) + 160|0);
  $40 = ((($1)) + 22|0);
  $41 = HEAP16[$40>>1]|0;
  $42 = $41&65535;
  $43 = HEAP8[$$pre131>>0]|0;
  $44 = $43&255;
  _png_write_tRNS($0,$38,$39,$42,$44);
  $$pre122 = HEAP32[$4>>2]|0;
  $46 = $$pre122;
 }
 $45 = $46 & 32;
 $47 = ($45|0)==(0);
 if ($47) {
  $53 = $46;
 } else {
  $48 = ((($1)) + 170|0);
  $49 = ((($1)) + 25|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  _png_write_bKGD($0,$48,$51);
  $$pre123 = HEAP32[$4>>2]|0;
  $53 = $$pre123;
 }
 $52 = $53 & 64;
 $54 = ($52|0)==(0);
 if ($54) {
  $61 = $53;
 } else {
  $55 = ((($1)) + 204|0);
  $56 = HEAP32[$55>>2]|0;
  $57 = ((($1)) + 20|0);
  $58 = HEAP16[$57>>1]|0;
  $59 = $58&65535;
  _png_write_hIST($0,$56,$59);
  $$pre124 = HEAP32[$4>>2]|0;
  $61 = $$pre124;
 }
 $60 = $61 & 256;
 $62 = ($60|0)==(0);
 if ($62) {
  $71 = $61;
 } else {
  $63 = ((($1)) + 180|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ((($1)) + 184|0);
  $66 = HEAP32[$65>>2]|0;
  $67 = ((($1)) + 188|0);
  $68 = HEAP8[$67>>0]|0;
  $69 = $68&255;
  _png_write_oFFs($0,$64,$66,$69);
  $$pre125 = HEAP32[$4>>2]|0;
  $71 = $$pre125;
 }
 $70 = $71 & 1024;
 $72 = ($70|0)==(0);
 if ($72) {
  $90 = $71;
 } else {
  $73 = ((($1)) + 208|0);
  $74 = HEAP32[$73>>2]|0;
  $75 = ((($1)) + 212|0);
  $76 = HEAP32[$75>>2]|0;
  $77 = ((($1)) + 216|0);
  $78 = HEAP32[$77>>2]|0;
  $79 = ((($1)) + 228|0);
  $80 = HEAP8[$79>>0]|0;
  $81 = $80&255;
  $82 = ((($1)) + 229|0);
  $83 = HEAP8[$82>>0]|0;
  $84 = $83&255;
  $85 = ((($1)) + 220|0);
  $86 = HEAP32[$85>>2]|0;
  $87 = ((($1)) + 224|0);
  $88 = HEAP32[$87>>2]|0;
  _png_write_pCAL($0,$74,$76,$78,$81,$84,$86,$88);
  $$pre126 = HEAP32[$4>>2]|0;
  $90 = $$pre126;
 }
 $89 = $90 & 16384;
 $91 = ($89|0)==(0);
 if ($91) {
  $100 = $90;
 } else {
  $92 = ((($1)) + 252|0);
  $93 = HEAP8[$92>>0]|0;
  $94 = $93&255;
  $95 = ((($1)) + 256|0);
  $96 = HEAP32[$95>>2]|0;
  $97 = ((($1)) + 260|0);
  $98 = HEAP32[$97>>2]|0;
  _png_write_sCAL_s($0,$94,$96,$98);
  $$pre127 = HEAP32[$4>>2]|0;
  $100 = $$pre127;
 }
 $99 = $100 & 128;
 $101 = ($99|0)==(0);
 if ($101) {
  $110 = $100;
 } else {
  $102 = ((($1)) + 192|0);
  $103 = HEAP32[$102>>2]|0;
  $104 = ((($1)) + 196|0);
  $105 = HEAP32[$104>>2]|0;
  $106 = ((($1)) + 200|0);
  $107 = HEAP8[$106>>0]|0;
  $108 = $107&255;
  _png_write_pHYs($0,$103,$105,$108);
  $$pre128 = HEAP32[$4>>2]|0;
  $110 = $$pre128;
 }
 $109 = $110 & 512;
 $111 = ($109|0)==(0);
 if ($111) {
  $117 = $110;
 } else {
  $112 = ((($1)) + 140|0);
  _png_write_tIME($0,$112);
  $113 = ((($0)) + 208|0);
  $114 = HEAP32[$113>>2]|0;
  $115 = $114 | 512;
  HEAP32[$113>>2] = $115;
  $$pre129 = HEAP32[$4>>2]|0;
  $117 = $$pre129;
 }
 $116 = $117 & 8192;
 $118 = ($116|0)==(0);
 if (!($118)) {
  $119 = ((($1)) + 248|0);
  $120 = HEAP32[$119>>2]|0;
  $121 = ($120|0)>(0);
  if ($121) {
   $122 = ((($1)) + 244|0);
   $$0113116 = 0;
   while(1) {
    $123 = HEAP32[$122>>2]|0;
    $124 = (($123) + ($$0113116<<4)|0);
    _png_write_sPLT($0,$124);
    $125 = (($$0113116) + 1)|0;
    $126 = HEAP32[$119>>2]|0;
    $127 = ($125|0)<($126|0);
    if ($127) {
     $$0113116 = $125;
    } else {
     break;
    }
   }
  }
 }
 $128 = ((($1)) + 128|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = ($129|0)>(0);
 if ($130) {
  $131 = ((($1)) + 136|0);
  $$pre130 = HEAP32[$131>>2]|0;
  $$1115 = 0;$133 = $$pre130;
  while(1) {
   $132 = (($133) + (($$1115*28)|0)|0);
   $134 = HEAP32[$132>>2]|0;
   $135 = ($134|0)>(0);
   L50: do {
    if ($135) {
     $136 = (((($133) + (($$1115*28)|0)|0)) + 4|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = (((($133) + (($$1115*28)|0)|0)) + 20|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (((($133) + (($$1115*28)|0)|0)) + 24|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = (((($133) + (($$1115*28)|0)|0)) + 8|0);
     $143 = HEAP32[$142>>2]|0;
     _png_write_iTXt($0,$134,$137,$139,$141,$143);
     $144 = HEAP32[$131>>2]|0;
     $145 = (($144) + (($$1115*28)|0)|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==(-1);
     if ($147) {
      HEAP32[$145>>2] = -3;
      $193 = $144;
      break;
     } else {
      HEAP32[$145>>2] = -2;
      $193 = $144;
      break;
     }
    } else {
     switch ($134|0) {
     case 0:  {
      $148 = (((($133) + (($$1115*28)|0)|0)) + 4|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = (((($133) + (($$1115*28)|0)|0)) + 8|0);
      $151 = HEAP32[$150>>2]|0;
      _png_write_zTXt($0,$149,$151,0);
      $152 = HEAP32[$131>>2]|0;
      $153 = (($152) + (($$1115*28)|0)|0);
      HEAP32[$153>>2] = -2;
      $193 = $152;
      break L50;
      break;
     }
     case -1:  {
      $154 = (((($133) + (($$1115*28)|0)|0)) + 4|0);
      $155 = HEAP32[$154>>2]|0;
      $156 = (((($133) + (($$1115*28)|0)|0)) + 8|0);
      $157 = HEAP32[$156>>2]|0;
      _png_write_tEXt($0,$155,$157,0);
      $158 = HEAP32[$131>>2]|0;
      $159 = (($158) + (($$1115*28)|0)|0);
      HEAP32[$159>>2] = -3;
      $193 = $158;
      break L50;
      break;
     }
     default: {
      $193 = $133;
      break L50;
     }
     }
    }
   } while(0);
   $160 = (($$1115) + 1)|0;
   $161 = HEAP32[$128>>2]|0;
   $162 = ($160|0)<($161|0);
   if ($162) {
    $$1115 = $160;$133 = $193;
   } else {
    break;
   }
  }
 }
 $163 = ((($1)) + 240|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = ($164|0)==(0);
 if ($165) {
  return;
 }
 $166 = ((($1)) + 236|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = (($167) + (($164*20)|0)|0);
 $169 = ($164|0)>(0);
 if (!($169)) {
  return;
 }
 $170 = ((($0)) + 688|0);
 $$024$i = $167;
 while(1) {
  $171 = ((($$024$i)) + 16|0);
  $172 = HEAP8[$171>>0]|0;
  $173 = $172 & 2;
  $174 = ($173<<24>>24)==(0);
  do {
   if (!($174)) {
    $175 = (_png_handle_as_unknown($0,$$024$i)|0);
    $176 = ($175|0)==(1);
    if (!($176)) {
     $177 = ((($$024$i)) + 3|0);
     $178 = HEAP8[$177>>0]|0;
     $179 = $178 & 32;
     $180 = ($179<<24>>24)!=(0);
     $181 = ($175|0)==(3);
     $or$cond$i = $181 | $180;
     if (!($or$cond$i)) {
      $182 = ($175|0)==(0);
      if (!($182)) {
       break;
      }
      $183 = HEAP32[$170>>2]|0;
      $184 = ($183|0)==(3);
      if (!($184)) {
       break;
      }
     }
     $185 = ((($$024$i)) + 12|0);
     $186 = HEAP32[$185>>2]|0;
     $187 = ($186|0)==(0);
     if ($187) {
      _png_warning($0,25350);
      $$pre$i = HEAP32[$185>>2]|0;
      $190 = $$pre$i;
     } else {
      $190 = $186;
     }
     $188 = ((($$024$i)) + 8|0);
     $189 = HEAP32[$188>>2]|0;
     _png_write_chunk($0,$$024$i,$189,$190);
    }
   }
  } while(0);
  $191 = ((($$024$i)) + 20|0);
  $192 = ($191>>>0)<($168>>>0);
  if ($192) {
   $$024$i = $191;
  } else {
   break;
  }
 }
 return;
}
function _png_write_PLTE($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02627 = 0, $$028 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond30 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = ((($0)) + 708|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = $7 & 1;
 $9 = $8 | $2;
 $10 = ($9|0)==(0);
 $11 = ($2>>>0)>(256);
 $or$cond3 = $11 | $10;
 $12 = ((($0)) + 435|0);
 $13 = HEAP8[$12>>0]|0;
 if ($or$cond3) {
  $14 = ($13<<24>>24)==(3);
  if ($14) {
   _png_error($0,26992);
   // unreachable;
  }
  _png_warning($0,26992);
  STACKTOP = sp;return;
 }
 $15 = $13 & 2;
 $16 = ($15<<24>>24)==(0);
 if ($16) {
  _png_warning($0,27028);
  STACKTOP = sp;return;
 }
 $17 = $2&65535;
 $18 = ((($0)) + 420|0);
 HEAP16[$18>>1] = $17;
 $19 = ($2*3)|0;
 $20 = ((($0)) + 800|0);
 HEAP32[$20>>2] = 34;
 $21 = $19 >>> 24;
 $22 = $21&255;
 HEAP8[$4>>0] = $22;
 $23 = $19 >>> 16;
 $24 = $23&255;
 $25 = ((($4)) + 1|0);
 HEAP8[$25>>0] = $24;
 $26 = $19 >>> 8;
 $27 = $26&255;
 $28 = ((($4)) + 2|0);
 HEAP8[$28>>0] = $27;
 $29 = $19&255;
 $30 = ((($4)) + 3|0);
 HEAP8[$30>>0] = $29;
 $31 = ((($4)) + 4|0);
 HEAP8[$31>>0] = 80;
 $32 = ((($4)) + 5|0);
 HEAP8[$32>>0] = 76;
 $33 = ((($4)) + 6|0);
 HEAP8[$33>>0] = 84;
 $34 = ((($4)) + 7|0);
 HEAP8[$34>>0] = 69;
 _png_write_data($0,$4,8);
 $35 = ((($0)) + 376|0);
 HEAP32[$35>>2] = 1347179589;
 _png_reset_crc($0);
 _png_calculate_crc($0,$31,4);
 HEAP32[$20>>2] = 66;
 $36 = ($2|0)==(0);
 if (!($36)) {
  $37 = ((($5)) + 1|0);
  $38 = ((($5)) + 2|0);
  $$02627 = 0;$$028 = $1;
  while(1) {
   $39 = HEAP8[$$028>>0]|0;
   HEAP8[$5>>0] = $39;
   $40 = ((($$028)) + 1|0);
   $41 = HEAP8[$40>>0]|0;
   HEAP8[$37>>0] = $41;
   $42 = ((($$028)) + 2|0);
   $43 = HEAP8[$42>>0]|0;
   HEAP8[$38>>0] = $43;
   _png_write_data($0,$5,3);
   _png_calculate_crc($0,$5,3);
   $44 = (($$02627) + 1)|0;
   $45 = ((($$028)) + 3|0);
   $exitcond30 = ($44|0)==($2|0);
   if ($exitcond30) {
    break;
   } else {
    $$02627 = $44;$$028 = $45;
   }
  }
 }
 HEAP32[$20>>2] = 130;
 $46 = ((($0)) + 412|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = $47 >>> 24;
 $49 = $48&255;
 HEAP8[$3>>0] = $49;
 $50 = $47 >>> 16;
 $51 = $50&255;
 $52 = ((($3)) + 1|0);
 HEAP8[$52>>0] = $51;
 $53 = $47 >>> 8;
 $54 = $53&255;
 $55 = ((($3)) + 2|0);
 HEAP8[$55>>0] = $54;
 $56 = $47&255;
 $57 = ((($3)) + 3|0);
 HEAP8[$57>>0] = $56;
 _png_write_data($0,$3,4);
 $58 = ((($0)) + 208|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = $59 | 2;
 HEAP32[$58>>2] = $60;
 STACKTOP = sp;return;
}
function _png_write_tRNS($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $5 = sp + 40|0;
 $6 = sp + 32|0;
 $7 = sp + 24|0;
 $8 = sp + 16|0;
 $9 = sp + 12|0;
 $10 = sp + 8|0;
 $11 = sp;
 switch ($4|0) {
 case 3:  {
  $12 = ($3|0)<(1);
  if (!($12)) {
   $13 = ((($0)) + 420|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = $14&65535;
   $16 = ($15|0)<($3|0);
   if (!($16)) {
    $17 = ((($0)) + 800|0);
    HEAP32[$17>>2] = 34;
    $18 = $3 >>> 24;
    $19 = $18&255;
    HEAP8[$7>>0] = $19;
    $20 = $3 >>> 16;
    $21 = $20&255;
    $22 = ((($7)) + 1|0);
    HEAP8[$22>>0] = $21;
    $23 = $3 >>> 8;
    $24 = $23&255;
    $25 = ((($7)) + 2|0);
    HEAP8[$25>>0] = $24;
    $26 = $3&255;
    $27 = ((($7)) + 3|0);
    HEAP8[$27>>0] = $26;
    $28 = ((($7)) + 4|0);
    HEAP8[$28>>0] = 116;
    $29 = ((($7)) + 5|0);
    HEAP8[$29>>0] = 82;
    $30 = ((($7)) + 6|0);
    HEAP8[$30>>0] = 78;
    $31 = ((($7)) + 7|0);
    HEAP8[$31>>0] = 83;
    _png_write_data($0,$7,8);
    $32 = ((($0)) + 376|0);
    HEAP32[$32>>2] = 1951551059;
    _png_reset_crc($0);
    _png_calculate_crc($0,$28,4);
    HEAP32[$17>>2] = 66;
    $33 = ($1|0)==(0|0);
    if (!($33)) {
     _png_write_data($0,$1,$3);
     _png_calculate_crc($0,$1,$3);
    }
    HEAP32[$17>>2] = 130;
    $34 = ((($0)) + 412|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 >>> 24;
    $37 = $36&255;
    HEAP8[$10>>0] = $37;
    $38 = $35 >>> 16;
    $39 = $38&255;
    $40 = ((($10)) + 1|0);
    HEAP8[$40>>0] = $39;
    $41 = $35 >>> 8;
    $42 = $41&255;
    $43 = ((($10)) + 2|0);
    HEAP8[$43>>0] = $42;
    $44 = $35&255;
    $45 = ((($10)) + 3|0);
    HEAP8[$45>>0] = $44;
    _png_write_data($0,$10,4);
    STACKTOP = sp;return;
   }
  }
  _png_app_warning($0,26778);
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  $46 = ((($2)) + 8|0);
  $47 = HEAP16[$46>>1]|0;
  $48 = $47&65535;
  $49 = ((($0)) + 436|0);
  $50 = HEAP8[$49>>0]|0;
  $51 = $50&255;
  $52 = 1 << $51;
  $53 = ($52|0)>($48|0);
  if ($53) {
   $54 = ($47&65535) >>> 8;
   $55 = $54&255;
   HEAP8[$11>>0] = $55;
   $56 = $47&255;
   $57 = ((($11)) + 1|0);
   HEAP8[$57>>0] = $56;
   $58 = ((($0)) + 800|0);
   HEAP32[$58>>2] = 34;
   HEAP8[$8>>0] = 0;
   $59 = ((($8)) + 1|0);
   HEAP8[$59>>0] = 0;
   $60 = ((($8)) + 2|0);
   HEAP8[$60>>0] = 0;
   $61 = ((($8)) + 3|0);
   HEAP8[$61>>0] = 2;
   $62 = ((($8)) + 4|0);
   HEAP8[$62>>0] = 116;
   $63 = ((($8)) + 5|0);
   HEAP8[$63>>0] = 82;
   $64 = ((($8)) + 6|0);
   HEAP8[$64>>0] = 78;
   $65 = ((($8)) + 7|0);
   HEAP8[$65>>0] = 83;
   _png_write_data($0,$8,8);
   $66 = ((($0)) + 376|0);
   HEAP32[$66>>2] = 1951551059;
   _png_reset_crc($0);
   _png_calculate_crc($0,$62,4);
   HEAP32[$58>>2] = 66;
   _png_write_data($0,$11,2);
   _png_calculate_crc($0,$11,2);
   HEAP32[$58>>2] = 130;
   $67 = ((($0)) + 412|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 >>> 24;
   $70 = $69&255;
   HEAP8[$9>>0] = $70;
   $71 = $68 >>> 16;
   $72 = $71&255;
   $73 = ((($9)) + 1|0);
   HEAP8[$73>>0] = $72;
   $74 = $68 >>> 8;
   $75 = $74&255;
   $76 = ((($9)) + 2|0);
   HEAP8[$76>>0] = $75;
   $77 = $68&255;
   $78 = ((($9)) + 3|0);
   HEAP8[$78>>0] = $77;
   _png_write_data($0,$9,4);
   STACKTOP = sp;return;
  } else {
   _png_app_warning($0,26825);
   STACKTOP = sp;return;
  }
  break;
 }
 case 2:  {
  $79 = ((($2)) + 2|0);
  $80 = HEAP16[$79>>1]|0;
  $81 = ($80&65535) >>> 8;
  $82 = $81&255;
  HEAP8[$11>>0] = $82;
  $83 = $80&255;
  $84 = ((($11)) + 1|0);
  HEAP8[$84>>0] = $83;
  $85 = ((($11)) + 2|0);
  $86 = ((($2)) + 4|0);
  $87 = HEAP16[$86>>1]|0;
  $88 = ($87&65535) >>> 8;
  $89 = $88&255;
  HEAP8[$85>>0] = $89;
  $90 = $87&255;
  $91 = ((($11)) + 3|0);
  HEAP8[$91>>0] = $90;
  $92 = ((($11)) + 4|0);
  $93 = ((($2)) + 6|0);
  $94 = HEAP16[$93>>1]|0;
  $95 = ($94&65535) >>> 8;
  $96 = $95&255;
  HEAP8[$92>>0] = $96;
  $97 = $94&255;
  $98 = ((($11)) + 5|0);
  HEAP8[$98>>0] = $97;
  $99 = ((($0)) + 436|0);
  $100 = HEAP8[$99>>0]|0;
  $101 = ($100<<24>>24)==(8);
  if ($101) {
   $102 = $88 | $81;
   $103 = $102 | $95;
   $104 = ($103<<16>>16)==(0);
   if (!($104)) {
    _png_app_warning($0,26889);
    STACKTOP = sp;return;
   }
  }
  $105 = ((($0)) + 800|0);
  HEAP32[$105>>2] = 34;
  HEAP8[$6>>0] = 0;
  $106 = ((($6)) + 1|0);
  HEAP8[$106>>0] = 0;
  $107 = ((($6)) + 2|0);
  HEAP8[$107>>0] = 0;
  $108 = ((($6)) + 3|0);
  HEAP8[$108>>0] = 6;
  $109 = ((($6)) + 4|0);
  HEAP8[$109>>0] = 116;
  $110 = ((($6)) + 5|0);
  HEAP8[$110>>0] = 82;
  $111 = ((($6)) + 6|0);
  HEAP8[$111>>0] = 78;
  $112 = ((($6)) + 7|0);
  HEAP8[$112>>0] = 83;
  _png_write_data($0,$6,8);
  $113 = ((($0)) + 376|0);
  HEAP32[$113>>2] = 1951551059;
  _png_reset_crc($0);
  _png_calculate_crc($0,$109,4);
  HEAP32[$105>>2] = 66;
  _png_write_data($0,$11,6);
  _png_calculate_crc($0,$11,6);
  HEAP32[$105>>2] = 130;
  $114 = ((($0)) + 412|0);
  $115 = HEAP32[$114>>2]|0;
  $116 = $115 >>> 24;
  $117 = $116&255;
  HEAP8[$5>>0] = $117;
  $118 = $115 >>> 16;
  $119 = $118&255;
  $120 = ((($5)) + 1|0);
  HEAP8[$120>>0] = $119;
  $121 = $115 >>> 8;
  $122 = $121&255;
  $123 = ((($5)) + 2|0);
  HEAP8[$123>>0] = $122;
  $124 = $115&255;
  $125 = ((($5)) + 3|0);
  HEAP8[$125>>0] = $124;
  _png_write_data($0,$5,4);
  STACKTOP = sp;return;
  break;
 }
 default: {
  _png_app_warning($0,26953);
  STACKTOP = sp;return;
 }
 }
}
function _png_write_bKGD($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $3 = sp + 48|0;
 $4 = sp + 40|0;
 $5 = sp + 32|0;
 $6 = sp + 24|0;
 $7 = sp + 16|0;
 $8 = sp + 8|0;
 $9 = sp;
 $10 = ($2|0)==(3);
 if ($10) {
  $11 = ((($0)) + 420|0);
  $12 = HEAP16[$11>>1]|0;
  $13 = ($12<<16>>16)==(0);
  if ($13) {
   $14 = ((($0)) + 708|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = $15 & 1;
   $17 = ($16|0)==(0);
   if ($17) {
    label = 5;
   } else {
    $$pre = HEAP8[$1>>0]|0;
    $22 = $$pre;
   }
  } else {
   label = 5;
  }
  if ((label|0) == 5) {
   $18 = HEAP8[$1>>0]|0;
   $19 = $18&255;
   $20 = $12&65535;
   $21 = ($19>>>0)<($20>>>0);
   if ($21) {
    $22 = $18;
   } else {
    _png_warning($0,26617);
    STACKTOP = sp;return;
   }
  }
  HEAP8[$9>>0] = $22;
  $23 = ((($0)) + 800|0);
  HEAP32[$23>>2] = 34;
  HEAP8[$7>>0] = 0;
  $24 = ((($7)) + 1|0);
  HEAP8[$24>>0] = 0;
  $25 = ((($7)) + 2|0);
  HEAP8[$25>>0] = 0;
  $26 = ((($7)) + 3|0);
  HEAP8[$26>>0] = 1;
  $27 = ((($7)) + 4|0);
  HEAP8[$27>>0] = 98;
  $28 = ((($7)) + 5|0);
  HEAP8[$28>>0] = 75;
  $29 = ((($7)) + 6|0);
  HEAP8[$29>>0] = 71;
  $30 = ((($7)) + 7|0);
  HEAP8[$30>>0] = 68;
  _png_write_data($0,$7,8);
  $31 = ((($0)) + 376|0);
  HEAP32[$31>>2] = 1649100612;
  _png_reset_crc($0);
  _png_calculate_crc($0,$27,4);
  HEAP32[$23>>2] = 66;
  _png_write_data($0,$9,1);
  _png_calculate_crc($0,$9,1);
  HEAP32[$23>>2] = 130;
  $32 = ((($0)) + 412|0);
  $33 = HEAP32[$32>>2]|0;
  $34 = $33 >>> 24;
  $35 = $34&255;
  HEAP8[$8>>0] = $35;
  $36 = $33 >>> 16;
  $37 = $36&255;
  $38 = ((($8)) + 1|0);
  HEAP8[$38>>0] = $37;
  $39 = $33 >>> 8;
  $40 = $39&255;
  $41 = ((($8)) + 2|0);
  HEAP8[$41>>0] = $40;
  $42 = $33&255;
  $43 = ((($8)) + 3|0);
  HEAP8[$43>>0] = $42;
  _png_write_data($0,$8,4);
  STACKTOP = sp;return;
 }
 $44 = $2 & 2;
 $45 = ($44|0)==(0);
 if ($45) {
  $93 = ((($1)) + 8|0);
  $94 = HEAP16[$93>>1]|0;
  $95 = $94&65535;
  $96 = ((($0)) + 436|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = $97&255;
  $99 = 1 << $98;
  $100 = ($99|0)>($95|0);
  if ($100) {
   $101 = ($94&65535) >>> 8;
   $102 = $101&255;
   HEAP8[$9>>0] = $102;
   $103 = $94&255;
   $104 = ((($9)) + 1|0);
   HEAP8[$104>>0] = $103;
   $105 = ((($0)) + 800|0);
   HEAP32[$105>>2] = 34;
   HEAP8[$4>>0] = 0;
   $106 = ((($4)) + 1|0);
   HEAP8[$106>>0] = 0;
   $107 = ((($4)) + 2|0);
   HEAP8[$107>>0] = 0;
   $108 = ((($4)) + 3|0);
   HEAP8[$108>>0] = 2;
   $109 = ((($4)) + 4|0);
   HEAP8[$109>>0] = 98;
   $110 = ((($4)) + 5|0);
   HEAP8[$110>>0] = 75;
   $111 = ((($4)) + 6|0);
   HEAP8[$111>>0] = 71;
   $112 = ((($4)) + 7|0);
   HEAP8[$112>>0] = 68;
   _png_write_data($0,$4,8);
   $113 = ((($0)) + 376|0);
   HEAP32[$113>>2] = 1649100612;
   _png_reset_crc($0);
   _png_calculate_crc($0,$109,4);
   HEAP32[$105>>2] = 66;
   _png_write_data($0,$9,2);
   _png_calculate_crc($0,$9,2);
   HEAP32[$105>>2] = 130;
   $114 = ((($0)) + 412|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = $115 >>> 24;
   $117 = $116&255;
   HEAP8[$3>>0] = $117;
   $118 = $115 >>> 16;
   $119 = $118&255;
   $120 = ((($3)) + 1|0);
   HEAP8[$120>>0] = $119;
   $121 = $115 >>> 8;
   $122 = $121&255;
   $123 = ((($3)) + 2|0);
   HEAP8[$123>>0] = $122;
   $124 = $115&255;
   $125 = ((($3)) + 3|0);
   HEAP8[$125>>0] = $124;
   _png_write_data($0,$3,4);
   STACKTOP = sp;return;
  } else {
   _png_warning($0,26714);
   STACKTOP = sp;return;
  }
 }
 $46 = ((($1)) + 2|0);
 $47 = HEAP16[$46>>1]|0;
 $48 = ($47&65535) >>> 8;
 $49 = $48&255;
 HEAP8[$9>>0] = $49;
 $50 = $47&255;
 $51 = ((($9)) + 1|0);
 HEAP8[$51>>0] = $50;
 $52 = ((($9)) + 2|0);
 $53 = ((($1)) + 4|0);
 $54 = HEAP16[$53>>1]|0;
 $55 = ($54&65535) >>> 8;
 $56 = $55&255;
 HEAP8[$52>>0] = $56;
 $57 = $54&255;
 $58 = ((($9)) + 3|0);
 HEAP8[$58>>0] = $57;
 $59 = ((($9)) + 4|0);
 $60 = ((($1)) + 6|0);
 $61 = HEAP16[$60>>1]|0;
 $62 = ($61&65535) >>> 8;
 $63 = $62&255;
 HEAP8[$59>>0] = $63;
 $64 = $61&255;
 $65 = ((($9)) + 5|0);
 HEAP8[$65>>0] = $64;
 $66 = ((($0)) + 436|0);
 $67 = HEAP8[$66>>0]|0;
 $68 = ($67<<24>>24)==(8);
 if ($68) {
  $69 = $55 | $48;
  $70 = $69 | $62;
  $71 = ($70<<16>>16)==(0);
  if (!($71)) {
   _png_warning($0,26650);
   STACKTOP = sp;return;
  }
 }
 $72 = ((($0)) + 800|0);
 HEAP32[$72>>2] = 34;
 HEAP8[$5>>0] = 0;
 $73 = ((($5)) + 1|0);
 HEAP8[$73>>0] = 0;
 $74 = ((($5)) + 2|0);
 HEAP8[$74>>0] = 0;
 $75 = ((($5)) + 3|0);
 HEAP8[$75>>0] = 6;
 $76 = ((($5)) + 4|0);
 HEAP8[$76>>0] = 98;
 $77 = ((($5)) + 5|0);
 HEAP8[$77>>0] = 75;
 $78 = ((($5)) + 6|0);
 HEAP8[$78>>0] = 71;
 $79 = ((($5)) + 7|0);
 HEAP8[$79>>0] = 68;
 _png_write_data($0,$5,8);
 $80 = ((($0)) + 376|0);
 HEAP32[$80>>2] = 1649100612;
 _png_reset_crc($0);
 _png_calculate_crc($0,$76,4);
 HEAP32[$72>>2] = 66;
 _png_write_data($0,$9,6);
 _png_calculate_crc($0,$9,6);
 HEAP32[$72>>2] = 130;
 $81 = ((($0)) + 412|0);
 $82 = HEAP32[$81>>2]|0;
 $83 = $82 >>> 24;
 $84 = $83&255;
 HEAP8[$6>>0] = $84;
 $85 = $82 >>> 16;
 $86 = $85&255;
 $87 = ((($6)) + 1|0);
 HEAP8[$87>>0] = $86;
 $88 = $82 >>> 8;
 $89 = $88&255;
 $90 = ((($6)) + 2|0);
 HEAP8[$90>>0] = $89;
 $91 = $82&255;
 $92 = ((($6)) + 3|0);
 HEAP8[$92>>0] = $91;
 _png_write_data($0,$6,4);
 STACKTOP = sp;return;
}
function _png_write_hIST($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond13 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = sp + 16|0;
 $4 = sp + 8|0;
 $5 = sp;
 $6 = ((($0)) + 420|0);
 $7 = HEAP16[$6>>1]|0;
 $8 = $7&65535;
 $9 = ($8|0)<($2|0);
 if ($9) {
  _png_warning($0,26571);
  STACKTOP = sp;return;
 }
 $10 = $2 << 1;
 $11 = ((($0)) + 800|0);
 HEAP32[$11>>2] = 34;
 $12 = $2 >>> 23;
 $13 = $12&255;
 HEAP8[$4>>0] = $13;
 $14 = $2 >>> 15;
 $15 = $14&255;
 $16 = ((($4)) + 1|0);
 HEAP8[$16>>0] = $15;
 $17 = $2 >>> 7;
 $18 = $17&255;
 $19 = ((($4)) + 2|0);
 HEAP8[$19>>0] = $18;
 $20 = $10&255;
 $21 = ((($4)) + 3|0);
 HEAP8[$21>>0] = $20;
 $22 = ((($4)) + 4|0);
 HEAP8[$22>>0] = 104;
 $23 = ((($4)) + 5|0);
 HEAP8[$23>>0] = 73;
 $24 = ((($4)) + 6|0);
 HEAP8[$24>>0] = 83;
 $25 = ((($4)) + 7|0);
 HEAP8[$25>>0] = 84;
 _png_write_data($0,$4,8);
 $26 = ((($0)) + 376|0);
 HEAP32[$26>>2] = 1749635924;
 _png_reset_crc($0);
 _png_calculate_crc($0,$22,4);
 HEAP32[$11>>2] = 66;
 $27 = ($2|0)>(0);
 if ($27) {
  $28 = ((($5)) + 1|0);
  $$011 = 0;
  while(1) {
   $29 = (($1) + ($$011<<1)|0);
   $30 = HEAP16[$29>>1]|0;
   $31 = ($30&65535) >>> 8;
   $32 = $31&255;
   HEAP8[$5>>0] = $32;
   $33 = $30&255;
   HEAP8[$28>>0] = $33;
   _png_write_data($0,$5,2);
   _png_calculate_crc($0,$5,2);
   $34 = (($$011) + 1)|0;
   $exitcond13 = ($34|0)==($2|0);
   if ($exitcond13) {
    break;
   } else {
    $$011 = $34;
   }
  }
 }
 HEAP32[$11>>2] = 130;
 $35 = ((($0)) + 412|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 >>> 24;
 $38 = $37&255;
 HEAP8[$3>>0] = $38;
 $39 = $36 >>> 16;
 $40 = $39&255;
 $41 = ((($3)) + 1|0);
 HEAP8[$41>>0] = $40;
 $42 = $36 >>> 8;
 $43 = $42&255;
 $44 = ((($3)) + 2|0);
 HEAP8[$44>>0] = $43;
 $45 = $36&255;
 $46 = ((($3)) + 3|0);
 HEAP8[$46>>0] = $45;
 _png_write_data($0,$3,4);
 STACKTOP = sp;return;
}
function _png_write_oFFs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 24|0;
 $5 = sp + 16|0;
 $6 = sp;
 $7 = ($3|0)>(1);
 if ($7) {
  _png_warning($0,26533);
 }
 _png_save_int_32($6,$1);
 $8 = ((($6)) + 4|0);
 _png_save_int_32($8,$2);
 $9 = $3&255;
 $10 = ((($6)) + 8|0);
 HEAP8[$10>>0] = $9;
 $11 = ($0|0)==(0|0);
 if ($11) {
  STACKTOP = sp;return;
 }
 $12 = ((($0)) + 800|0);
 HEAP32[$12>>2] = 34;
 HEAP8[$5>>0] = 0;
 $13 = ((($5)) + 1|0);
 HEAP8[$13>>0] = 0;
 $14 = ((($5)) + 2|0);
 HEAP8[$14>>0] = 0;
 $15 = ((($5)) + 3|0);
 HEAP8[$15>>0] = 9;
 $16 = ((($5)) + 4|0);
 HEAP8[$16>>0] = 111;
 $17 = ((($5)) + 5|0);
 HEAP8[$17>>0] = 70;
 $18 = ((($5)) + 6|0);
 HEAP8[$18>>0] = 70;
 $19 = ((($5)) + 7|0);
 HEAP8[$19>>0] = 115;
 _png_write_data($0,$5,8);
 $20 = ((($0)) + 376|0);
 HEAP32[$20>>2] = 1866876531;
 _png_reset_crc($0);
 _png_calculate_crc($0,$16,4);
 HEAP32[$12>>2] = 66;
 _png_write_data($0,$6,9);
 _png_calculate_crc($0,$6,9);
 HEAP32[$12>>2] = 130;
 $21 = ((($0)) + 412|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $22 >>> 24;
 $24 = $23&255;
 HEAP8[$4>>0] = $24;
 $25 = $22 >>> 16;
 $26 = $25&255;
 $27 = ((($4)) + 1|0);
 HEAP8[$27>>0] = $26;
 $28 = $22 >>> 8;
 $29 = $28&255;
 $30 = ((($4)) + 2|0);
 HEAP8[$30>>0] = $29;
 $31 = $22&255;
 $32 = ((($4)) + 3|0);
 HEAP8[$32>>0] = $31;
 _png_write_data($0,$4,4);
 STACKTOP = sp;return;
}
function _png_write_pCAL($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$054$lcssa = 0, $$05465 = 0, $$066 = 0, $$164$us = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $brmerge$demorgan = 0, $exitcond = 0, $exitcond72 = 0;
 var $or$cond3$i56 = 0, $or$cond3$i59$us = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $8 = sp + 104|0;
 $9 = sp + 96|0;
 $10 = sp + 80|0;
 $11 = sp;
 $12 = ($4|0)>(3);
 if ($12) {
  _png_error($0,26469);
  // unreachable;
 }
 $13 = (_png_check_keyword($0,$1,$11)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  _png_error($0,26511);
  // unreachable;
 }
 $15 = (($13) + 1)|0;
 $16 = (_strlen($6)|0);
 $17 = ($5|0)!=(0);
 $18 = $17&1;
 $19 = (($16) + ($18))|0;
 $20 = (($13) + 11)|0;
 $21 = (($20) + ($19))|0;
 $22 = $5 << 2;
 $23 = (_png_malloc($0,$22)|0);
 $24 = ($5|0)>(0);
 if ($24) {
  $25 = (($5) + -1)|0;
  $$05465 = $21;$$066 = 0;
  while(1) {
   $26 = (($7) + ($$066<<2)|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = (_strlen($27)|0);
   $29 = ($$066|0)!=($25|0);
   $30 = $29&1;
   $31 = (($28) + ($30))|0;
   $32 = (($23) + ($$066<<2)|0);
   HEAP32[$32>>2] = $31;
   $33 = (($31) + ($$05465))|0;
   $34 = (($$066) + 1)|0;
   $exitcond72 = ($34|0)==($5|0);
   if ($exitcond72) {
    $$054$lcssa = $33;
    break;
   } else {
    $$05465 = $33;$$066 = $34;
   }
  }
 } else {
  $$054$lcssa = $21;
 }
 $35 = ($0|0)==(0|0);
 if ($35) {
  $60 = 0;
 } else {
  $36 = ((($0)) + 800|0);
  HEAP32[$36>>2] = 34;
  $37 = $$054$lcssa >>> 24;
  $38 = $37&255;
  HEAP8[$9>>0] = $38;
  $39 = $$054$lcssa >>> 16;
  $40 = $39&255;
  $41 = ((($9)) + 1|0);
  HEAP8[$41>>0] = $40;
  $42 = $$054$lcssa >>> 8;
  $43 = $42&255;
  $44 = ((($9)) + 2|0);
  HEAP8[$44>>0] = $43;
  $45 = $$054$lcssa&255;
  $46 = ((($9)) + 3|0);
  HEAP8[$46>>0] = $45;
  $47 = ((($9)) + 4|0);
  HEAP8[$47>>0] = 112;
  $48 = ((($9)) + 5|0);
  HEAP8[$48>>0] = 67;
  $49 = ((($9)) + 6|0);
  HEAP8[$49>>0] = 65;
  $50 = ((($9)) + 7|0);
  HEAP8[$50>>0] = 76;
  _png_write_data($0,$9,8);
  $51 = ((($0)) + 376|0);
  HEAP32[$51>>2] = 1883455820;
  _png_reset_crc($0);
  _png_calculate_crc($0,$47,4);
  HEAP32[$36>>2] = 66;
  $52 = ($15|0)==(0);
  if ($52) {
   $60 = 1;
  } else {
   _png_write_data($0,$11,$15);
   _png_calculate_crc($0,$11,$15);
   $60 = 1;
  }
 }
 _png_save_int_32($10,$2);
 $53 = ((($10)) + 4|0);
 _png_save_int_32($53,$3);
 $54 = $4&255;
 $55 = ((($10)) + 8|0);
 HEAP8[$55>>0] = $54;
 $56 = $5&255;
 $57 = ((($10)) + 9|0);
 HEAP8[$57>>0] = $56;
 if ($60) {
  _png_write_data($0,$10,10);
  _png_calculate_crc($0,$10,10);
  $58 = ($6|0)!=(0|0);
  $59 = ($19|0)!=(0);
  $or$cond3$i56 = $59 & $58;
  if ($or$cond3$i56) {
   _png_write_data($0,$6,$19);
   _png_calculate_crc($0,$6,$19);
  }
 }
 $brmerge$demorgan = $24 & $60;
 if ($brmerge$demorgan) {
  $$164$us = 0;
  while(1) {
   $61 = (($7) + ($$164$us<<2)|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = (($23) + ($$164$us<<2)|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = ($62|0)!=(0|0);
   $66 = ($64|0)!=(0);
   $or$cond3$i59$us = $65 & $66;
   if ($or$cond3$i59$us) {
    _png_write_data($0,$62,$64);
    _png_calculate_crc($0,$62,$64);
   }
   $67 = (($$164$us) + 1)|0;
   $exitcond = ($67|0)==($5|0);
   if ($exitcond) {
    break;
   } else {
    $$164$us = $67;
   }
  }
 }
 _png_free($0,$23);
 if ($35) {
  STACKTOP = sp;return;
 }
 $68 = ((($0)) + 800|0);
 HEAP32[$68>>2] = 130;
 $69 = ((($0)) + 412|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = $70 >>> 24;
 $72 = $71&255;
 HEAP8[$8>>0] = $72;
 $73 = $70 >>> 16;
 $74 = $73&255;
 $75 = ((($8)) + 1|0);
 HEAP8[$75>>0] = $74;
 $76 = $70 >>> 8;
 $77 = $76&255;
 $78 = ((($8)) + 2|0);
 HEAP8[$78>>0] = $77;
 $79 = $70&255;
 $80 = ((($8)) + 3|0);
 HEAP8[$80>>0] = $79;
 _png_write_data($0,$8,4);
 STACKTOP = sp;return;
}
function _png_write_sCAL_s($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $4 = sp + 72|0;
 $5 = sp + 64|0;
 $6 = sp;
 $7 = (_strlen($2)|0);
 $8 = (_strlen($3)|0);
 $9 = (($7) + 2)|0;
 $10 = (($9) + ($8))|0;
 $11 = ($10>>>0)>(64);
 if ($11) {
  _png_warning($0,26433);
  STACKTOP = sp;return;
 }
 $12 = $1&255;
 HEAP8[$6>>0] = $12;
 $13 = ((($6)) + 1|0);
 $14 = (($7) + 1)|0;
 _memcpy(($13|0),($2|0),($14|0))|0;
 $15 = (($6) + ($7)|0);
 $16 = ((($15)) + 2|0);
 _memcpy(($16|0),($3|0),($8|0))|0;
 $17 = ($0|0)==(0|0);
 if ($17) {
  STACKTOP = sp;return;
 }
 $18 = ((($0)) + 800|0);
 HEAP32[$18>>2] = 34;
 $19 = $10 >>> 24;
 $20 = $19&255;
 HEAP8[$5>>0] = $20;
 $21 = $10 >>> 16;
 $22 = $21&255;
 $23 = ((($5)) + 1|0);
 HEAP8[$23>>0] = $22;
 $24 = $10 >>> 8;
 $25 = $24&255;
 $26 = ((($5)) + 2|0);
 HEAP8[$26>>0] = $25;
 $27 = $10&255;
 $28 = ((($5)) + 3|0);
 HEAP8[$28>>0] = $27;
 $29 = ((($5)) + 4|0);
 HEAP8[$29>>0] = 115;
 $30 = ((($5)) + 5|0);
 HEAP8[$30>>0] = 67;
 $31 = ((($5)) + 6|0);
 HEAP8[$31>>0] = 65;
 $32 = ((($5)) + 7|0);
 HEAP8[$32>>0] = 76;
 _png_write_data($0,$5,8);
 $33 = ((($0)) + 376|0);
 HEAP32[$33>>2] = 1933787468;
 _png_reset_crc($0);
 _png_calculate_crc($0,$29,4);
 HEAP32[$18>>2] = 66;
 $34 = ($10|0)==(0);
 if (!($34)) {
  _png_write_data($0,$6,$10);
  _png_calculate_crc($0,$6,$10);
 }
 HEAP32[$18>>2] = 130;
 $35 = ((($0)) + 412|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = $36 >>> 24;
 $38 = $37&255;
 HEAP8[$4>>0] = $38;
 $39 = $36 >>> 16;
 $40 = $39&255;
 $41 = ((($4)) + 1|0);
 HEAP8[$41>>0] = $40;
 $42 = $36 >>> 8;
 $43 = $42&255;
 $44 = ((($4)) + 2|0);
 HEAP8[$44>>0] = $43;
 $45 = $36&255;
 $46 = ((($4)) + 3|0);
 HEAP8[$46>>0] = $45;
 _png_write_data($0,$4,4);
 STACKTOP = sp;return;
}
function _png_write_pHYs($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 16|0;
 $5 = sp + 12|0;
 $6 = sp;
 $7 = ($3|0)>(1);
 if ($7) {
  _png_warning($0,26395);
 }
 $8 = $1 >>> 24;
 $9 = $8&255;
 HEAP8[$6>>0] = $9;
 $10 = $1 >>> 16;
 $11 = $10&255;
 $12 = ((($6)) + 1|0);
 HEAP8[$12>>0] = $11;
 $13 = $1 >>> 8;
 $14 = $13&255;
 $15 = ((($6)) + 2|0);
 HEAP8[$15>>0] = $14;
 $16 = $1&255;
 $17 = ((($6)) + 3|0);
 HEAP8[$17>>0] = $16;
 $18 = ((($6)) + 4|0);
 $19 = $2 >>> 24;
 $20 = $19&255;
 HEAP8[$18>>0] = $20;
 $21 = $2 >>> 16;
 $22 = $21&255;
 $23 = ((($6)) + 5|0);
 HEAP8[$23>>0] = $22;
 $24 = $2 >>> 8;
 $25 = $24&255;
 $26 = ((($6)) + 6|0);
 HEAP8[$26>>0] = $25;
 $27 = $2&255;
 $28 = ((($6)) + 7|0);
 HEAP8[$28>>0] = $27;
 $29 = $3&255;
 $30 = ((($6)) + 8|0);
 HEAP8[$30>>0] = $29;
 $31 = ($0|0)==(0|0);
 if ($31) {
  STACKTOP = sp;return;
 }
 $32 = ((($0)) + 800|0);
 HEAP32[$32>>2] = 34;
 HEAP8[$4>>0] = 0;
 $33 = ((($4)) + 1|0);
 HEAP8[$33>>0] = 0;
 $34 = ((($4)) + 2|0);
 HEAP8[$34>>0] = 0;
 $35 = ((($4)) + 3|0);
 HEAP8[$35>>0] = 9;
 $36 = ((($4)) + 4|0);
 HEAP8[$36>>0] = 112;
 $37 = ((($4)) + 5|0);
 HEAP8[$37>>0] = 72;
 $38 = ((($4)) + 6|0);
 HEAP8[$38>>0] = 89;
 $39 = ((($4)) + 7|0);
 HEAP8[$39>>0] = 115;
 _png_write_data($0,$4,8);
 $40 = ((($0)) + 376|0);
 HEAP32[$40>>2] = 1883789683;
 _png_reset_crc($0);
 _png_calculate_crc($0,$36,4);
 HEAP32[$32>>2] = 66;
 _png_write_data($0,$6,9);
 _png_calculate_crc($0,$6,9);
 HEAP32[$32>>2] = 130;
 $41 = ((($0)) + 412|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = $42 >>> 24;
 $44 = $43&255;
 HEAP8[$5>>0] = $44;
 $45 = $42 >>> 16;
 $46 = $45&255;
 $47 = ((($5)) + 1|0);
 HEAP8[$47>>0] = $46;
 $48 = $42 >>> 8;
 $49 = $48&255;
 $50 = ((($5)) + 2|0);
 HEAP8[$50>>0] = $49;
 $51 = $42&255;
 $52 = ((($5)) + 3|0);
 HEAP8[$52>>0] = $51;
 _png_write_data($0,$5,4);
 STACKTOP = sp;return;
}
function _png_write_tIME($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $4 = sp;
 $5 = ((($1)) + 2|0);
 $6 = HEAP8[$5>>0]|0;
 $7 = (($6) + -1)<<24>>24;
 $8 = ($7&255)>(11);
 if (!($8)) {
  $9 = ((($1)) + 3|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = (($10) + -1)<<24>>24;
  $12 = ($11&255)>(30);
  if (!($12)) {
   $13 = ((($1)) + 4|0);
   $14 = HEAP8[$13>>0]|0;
   $15 = ($14&255)>(23);
   if (!($15)) {
    $16 = ((($1)) + 6|0);
    $17 = HEAP8[$16>>0]|0;
    $18 = ($17&255)>(60);
    if (!($18)) {
     $19 = HEAP16[$1>>1]|0;
     $20 = ($19&65535) >>> 8;
     $21 = $20&255;
     HEAP8[$4>>0] = $21;
     $22 = $19&255;
     $23 = ((($4)) + 1|0);
     HEAP8[$23>>0] = $22;
     $24 = ((($4)) + 2|0);
     HEAP8[$24>>0] = $6;
     $25 = ((($4)) + 3|0);
     HEAP8[$25>>0] = $10;
     $26 = ((($4)) + 4|0);
     HEAP8[$26>>0] = $14;
     $27 = ((($1)) + 5|0);
     $28 = HEAP8[$27>>0]|0;
     $29 = ((($4)) + 5|0);
     HEAP8[$29>>0] = $28;
     $30 = ((($4)) + 6|0);
     HEAP8[$30>>0] = $17;
     $31 = ($0|0)==(0|0);
     if ($31) {
      STACKTOP = sp;return;
     }
     $32 = ((($0)) + 800|0);
     HEAP32[$32>>2] = 34;
     HEAP8[$3>>0] = 0;
     $33 = ((($3)) + 1|0);
     HEAP8[$33>>0] = 0;
     $34 = ((($3)) + 2|0);
     HEAP8[$34>>0] = 0;
     $35 = ((($3)) + 3|0);
     HEAP8[$35>>0] = 7;
     $36 = ((($3)) + 4|0);
     HEAP8[$36>>0] = 116;
     $37 = ((($3)) + 5|0);
     HEAP8[$37>>0] = 73;
     $38 = ((($3)) + 6|0);
     HEAP8[$38>>0] = 77;
     $39 = ((($3)) + 7|0);
     HEAP8[$39>>0] = 69;
     _png_write_data($0,$3,8);
     $40 = ((($0)) + 376|0);
     HEAP32[$40>>2] = 1950960965;
     _png_reset_crc($0);
     _png_calculate_crc($0,$36,4);
     HEAP32[$32>>2] = 66;
     _png_write_data($0,$4,7);
     _png_calculate_crc($0,$4,7);
     HEAP32[$32>>2] = 130;
     $41 = ((($0)) + 412|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = $42 >>> 24;
     $44 = $43&255;
     HEAP8[$2>>0] = $44;
     $45 = $42 >>> 16;
     $46 = $45&255;
     $47 = ((($2)) + 1|0);
     HEAP8[$47>>0] = $46;
     $48 = $42 >>> 8;
     $49 = $48&255;
     $50 = ((($2)) + 2|0);
     HEAP8[$50>>0] = $49;
     $51 = $42&255;
     $52 = ((($2)) + 3|0);
     HEAP8[$52>>0] = $51;
     _png_write_data($0,$2,4);
     STACKTOP = sp;return;
    }
   }
  }
 }
 _png_warning($0,26357);
 STACKTOP = sp;return;
}
function _png_write_sPLT($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$041 = 0, $$041$us = 0, $$pre = 0, $$sink45 = 0, $$sink47 = 0, $$sink50 = 0, $$sink53 = 0, $$sink57 = 0, $$sink58$off0 = 0, $$sink59 = 0, $$sink60$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $extract$t = 0, $extract$t61 = 0, $extract$t62 = 0, $extract$t63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $2 = sp + 104|0;
 $3 = sp + 96|0;
 $4 = sp + 16|0;
 $5 = sp;
 $6 = ((($1)) + 4|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = ($7<<24>>24)==(8);
 $9 = $8 ? 6 : 10;
 $10 = ((($1)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = HEAP32[$1>>2]|0;
 $13 = (_png_check_keyword($0,$12,$4)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  _png_error($0,26335);
  // unreachable;
 }
 $15 = Math_imul($9, $11)|0;
 $16 = (($13) + 2)|0;
 $17 = (($16) + ($15))|0;
 $18 = ($0|0)==(0|0);
 if ($18) {
  $138 = 0;
 } else {
  $19 = ((($0)) + 800|0);
  HEAP32[$19>>2] = 34;
  $20 = $17 >>> 24;
  $21 = $20&255;
  HEAP8[$3>>0] = $21;
  $22 = $17 >>> 16;
  $23 = $22&255;
  $24 = ((($3)) + 1|0);
  HEAP8[$24>>0] = $23;
  $25 = $17 >>> 8;
  $26 = $25&255;
  $27 = ((($3)) + 2|0);
  HEAP8[$27>>0] = $26;
  $28 = $17&255;
  $29 = ((($3)) + 3|0);
  HEAP8[$29>>0] = $28;
  $30 = ((($3)) + 4|0);
  HEAP8[$30>>0] = 115;
  $31 = ((($3)) + 5|0);
  HEAP8[$31>>0] = 80;
  $32 = ((($3)) + 6|0);
  HEAP8[$32>>0] = 76;
  $33 = ((($3)) + 7|0);
  HEAP8[$33>>0] = 84;
  _png_write_data($0,$3,8);
  $34 = ((($0)) + 376|0);
  HEAP32[$34>>2] = 1934642260;
  _png_reset_crc($0);
  _png_calculate_crc($0,$30,4);
  HEAP32[$19>>2] = 66;
  $35 = (($13) + 1)|0;
  $36 = ($35|0)==(0);
  if (!($36)) {
   _png_write_data($0,$4,$35);
   _png_calculate_crc($0,$4,$35);
  }
  _png_write_data($0,$6,1);
  _png_calculate_crc($0,$6,1);
  $138 = 1;
 }
 $37 = ((($1)) + 8|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = HEAP32[$10>>2]|0;
 $40 = ($39|0)>(0);
 if ($40) {
  $41 = ((($5)) + 1|0);
  $42 = ((($5)) + 2|0);
  $43 = ((($5)) + 3|0);
  $44 = ((($5)) + 4|0);
  $45 = ((($5)) + 5|0);
  $46 = ((($5)) + 6|0);
  $47 = ((($5)) + 7|0);
  $48 = ((($5)) + 8|0);
  $49 = ((($5)) + 9|0);
  if ($138) {
   $$041$us = $38;
   while(1) {
    $50 = HEAP8[$6>>0]|0;
    $51 = ($50<<24>>24)==(8);
    $52 = HEAP16[$$041$us>>1]|0;
    if ($51) {
     $70 = $52&255;
     HEAP8[$5>>0] = $70;
     $71 = ((($$041$us)) + 2|0);
     $72 = HEAP16[$71>>1]|0;
     $73 = $72&255;
     HEAP8[$41>>0] = $73;
     $74 = ((($$041$us)) + 4|0);
     $75 = HEAP16[$74>>1]|0;
     $76 = $75&255;
     HEAP8[$42>>0] = $76;
     $77 = ((($$041$us)) + 6|0);
     $78 = HEAP16[$77>>1]|0;
     $extract$t63 = $78&255;
     $$sink45 = $45;$$sink47 = $44;$$sink57 = $43;$$sink58$off0 = $extract$t63;
    } else {
     $53 = ($52&65535) >>> 8;
     $54 = $53&255;
     HEAP8[$5>>0] = $54;
     $55 = $52&255;
     HEAP8[$41>>0] = $55;
     $56 = ((($$041$us)) + 2|0);
     $57 = HEAP16[$56>>1]|0;
     $58 = ($57&65535) >>> 8;
     $59 = $58&255;
     HEAP8[$42>>0] = $59;
     $60 = $57&255;
     HEAP8[$43>>0] = $60;
     $61 = ((($$041$us)) + 4|0);
     $62 = HEAP16[$61>>1]|0;
     $63 = ($62&65535) >>> 8;
     $64 = $63&255;
     HEAP8[$44>>0] = $64;
     $65 = $62&255;
     HEAP8[$45>>0] = $65;
     $66 = ((($$041$us)) + 6|0);
     $67 = HEAP16[$66>>1]|0;
     $68 = ($67&65535) >>> 8;
     $69 = $68&255;
     HEAP8[$46>>0] = $69;
     $extract$t62 = $67&255;
     $$sink45 = $49;$$sink47 = $48;$$sink57 = $47;$$sink58$off0 = $extract$t62;
    }
    HEAP8[$$sink57>>0] = $$sink58$off0;
    $79 = ((($$041$us)) + 8|0);
    $80 = HEAP16[$79>>1]|0;
    $81 = ($80&65535) >>> 8;
    $82 = $81&255;
    HEAP8[$$sink47>>0] = $82;
    $83 = $80&255;
    HEAP8[$$sink45>>0] = $83;
    _png_write_data($0,$5,$9);
    _png_calculate_crc($0,$5,$9);
    $84 = ((($$041$us)) + 10|0);
    $85 = HEAP32[$37>>2]|0;
    $86 = HEAP32[$10>>2]|0;
    $87 = (($85) + (($86*10)|0)|0);
    $88 = ($84>>>0)<($87>>>0);
    if ($88) {
     $$041$us = $84;
    } else {
     break;
    }
   }
  } else {
   $$pre = HEAP8[$6>>0]|0;
   $89 = ($$pre<<24>>24)==(8);
   $90 = (($38) + (($39*10)|0)|0);
   $$041 = $38;
   while(1) {
    $91 = HEAP16[$$041>>1]|0;
    if ($89) {
     $92 = $91&255;
     HEAP8[$5>>0] = $92;
     $93 = ((($$041)) + 2|0);
     $94 = HEAP16[$93>>1]|0;
     $95 = $94&255;
     HEAP8[$41>>0] = $95;
     $96 = ((($$041)) + 4|0);
     $97 = HEAP16[$96>>1]|0;
     $98 = $97&255;
     HEAP8[$42>>0] = $98;
     $99 = ((($$041)) + 6|0);
     $100 = HEAP16[$99>>1]|0;
     $extract$t = $100&255;
     $$sink50 = $45;$$sink53 = $44;$$sink59 = $43;$$sink60$off0 = $extract$t;
    } else {
     $101 = ($91&65535) >>> 8;
     $102 = $101&255;
     HEAP8[$5>>0] = $102;
     $103 = $91&255;
     HEAP8[$41>>0] = $103;
     $104 = ((($$041)) + 2|0);
     $105 = HEAP16[$104>>1]|0;
     $106 = ($105&65535) >>> 8;
     $107 = $106&255;
     HEAP8[$42>>0] = $107;
     $108 = $105&255;
     HEAP8[$43>>0] = $108;
     $109 = ((($$041)) + 4|0);
     $110 = HEAP16[$109>>1]|0;
     $111 = ($110&65535) >>> 8;
     $112 = $111&255;
     HEAP8[$44>>0] = $112;
     $113 = $110&255;
     HEAP8[$45>>0] = $113;
     $114 = ((($$041)) + 6|0);
     $115 = HEAP16[$114>>1]|0;
     $116 = ($115&65535) >>> 8;
     $117 = $116&255;
     HEAP8[$46>>0] = $117;
     $extract$t61 = $115&255;
     $$sink50 = $49;$$sink53 = $48;$$sink59 = $47;$$sink60$off0 = $extract$t61;
    }
    HEAP8[$$sink59>>0] = $$sink60$off0;
    $118 = ((($$041)) + 8|0);
    $119 = HEAP16[$118>>1]|0;
    $120 = ($119&65535) >>> 8;
    $121 = $120&255;
    HEAP8[$$sink53>>0] = $121;
    $122 = $119&255;
    HEAP8[$$sink50>>0] = $122;
    $123 = ((($$041)) + 10|0);
    $124 = ($123>>>0)<($90>>>0);
    if ($124) {
     $$041 = $123;
    } else {
     break;
    }
   }
  }
 }
 if ($18) {
  STACKTOP = sp;return;
 }
 $125 = ((($0)) + 800|0);
 HEAP32[$125>>2] = 130;
 $126 = ((($0)) + 412|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = $127 >>> 24;
 $129 = $128&255;
 HEAP8[$2>>0] = $129;
 $130 = $127 >>> 16;
 $131 = $130&255;
 $132 = ((($2)) + 1|0);
 HEAP8[$132>>0] = $131;
 $133 = $127 >>> 8;
 $134 = $133&255;
 $135 = ((($2)) + 2|0);
 HEAP8[$135>>0] = $134;
 $136 = $127&255;
 $137 = ((($2)) + 3|0);
 HEAP8[$137>>0] = $136;
 _png_write_data($0,$2,4);
 STACKTOP = sp;return;
}
function _png_write_iTXt($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i = 0, $$0$i71 = 0, $$0$i74 = 0, $$0$in$us$i = 0, $$0$us$i = 0, $$025$us$i = 0, $$026$us$i = 0, $$027$us$i = 0, $$054 = 0, $$057 = 0, $$1 = 0, $$lcssa$i = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond$i64 = 0, $or$cond$i6473 = 0, $or$cond$i65 = 0, $or$cond$us$i = 0, $or$cond3$i59 = 0, $or$cond3$i62 = 0, $or$cond3$i66 = 0, $spec$select = 0, $spec$select$i = 0, $spec$select$i72 = 0, $spec$select$us$i = 0;
 var $spec$select58 = 0, $switch$downshift = 0, $switch$idx$cast = 0, $switch$masked = 0, $switch$shiftamt = 0, $switch$tableidx = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1136|0);
 $6 = sp + 1128|0;
 $7 = sp + 1120|0;
 $8 = sp + 1036|0;
 $9 = sp;
 $10 = (_png_check_keyword($0,$2,$8)|0);
 $11 = ($10|0)==(0);
 if ($11) {
  _png_error($0,26254);
  // unreachable;
 }
 $switch$tableidx = (($1) + 1)|0;
 $12 = ($switch$tableidx>>>0)<(4);
 if (!($12)) {
  _png_error($0,26276);
  // unreachable;
 }
 $switch$shiftamt = $switch$tableidx << 3;
 $switch$downshift = 16777472 >>> $switch$shiftamt;
 $switch$masked = $switch$downshift&255;
 $13 = $switch$tableidx & 1;
 $switch$idx$cast = ($13|0)!=(0);
 $14 = (($10) + 1)|0;
 $15 = (($8) + ($14)|0);
 HEAP8[$15>>0] = $switch$masked;
 $16 = (($10) + 2)|0;
 $17 = (($8) + ($16)|0);
 HEAP8[$17>>0] = 0;
 $18 = (($10) + 3)|0;
 $19 = ($3|0)==(0|0);
 $spec$select = $19 ? 32252 : $3;
 $20 = (_strlen($spec$select)|0);
 $21 = (($20) + 1)|0;
 $22 = ($4|0)==(0|0);
 $$057 = $22 ? 32252 : $4;
 $23 = (_strlen($$057)|0);
 $24 = (($23) + 1)|0;
 $25 = ($5|0)==(0|0);
 $spec$select58 = $25 ? 32252 : $5;
 $26 = (2147483644 - ($10))|0;
 $27 = ($21>>>0)>($26>>>0);
 $28 = (($21) + ($18))|0;
 $$054 = $27 ? 2147483647 : $28;
 $29 = (2147483647 - ($$054))|0;
 $30 = ($24>>>0)>($29>>>0);
 $31 = (($$054) + ($24))|0;
 $$1 = $30 ? 2147483647 : $31;
 $32 = (_strlen($spec$select58)|0);
 HEAP32[$9>>2] = $spec$select58;
 $33 = ((($9)) + 4|0);
 HEAP32[$33>>2] = $32;
 $34 = ((($9)) + 8|0);
 HEAP32[$34>>2] = 0;
 do {
  if ($switch$idx$cast) {
   $35 = (_png_text_compress($0,1767135348,$9,$$1)|0);
   $36 = ($35|0)==(0);
   if ($36) {
    $$pre = HEAP32[$34>>2]|0;
    $42 = $$pre;
    break;
   } else {
    $37 = ((($0)) + 248|0);
    $38 = HEAP32[$37>>2]|0;
    _png_error($0,$38);
    // unreachable;
   }
  } else {
   $39 = (2147483647 - ($$1))|0;
   $40 = ($32>>>0)>($39>>>0);
   if ($40) {
    _png_error($0,26302);
    // unreachable;
   } else {
    HEAP32[$34>>2] = $32;
    $42 = $32;
    break;
   }
  }
 } while(0);
 $41 = (($42) + ($$1))|0;
 $43 = ($0|0)==(0|0);
 if ($43) {
  $87 = 0;
 } else {
  $44 = ((($0)) + 800|0);
  HEAP32[$44>>2] = 34;
  $45 = $41 >>> 24;
  $46 = $45&255;
  HEAP8[$6>>0] = $46;
  $47 = $41 >>> 16;
  $48 = $47&255;
  $49 = ((($6)) + 1|0);
  HEAP8[$49>>0] = $48;
  $50 = $41 >>> 8;
  $51 = $50&255;
  $52 = ((($6)) + 2|0);
  HEAP8[$52>>0] = $51;
  $53 = $41&255;
  $54 = ((($6)) + 3|0);
  HEAP8[$54>>0] = $53;
  $55 = ((($6)) + 4|0);
  HEAP8[$55>>0] = 105;
  $56 = ((($6)) + 5|0);
  HEAP8[$56>>0] = 84;
  $57 = ((($6)) + 6|0);
  HEAP8[$57>>0] = 88;
  $58 = ((($6)) + 7|0);
  HEAP8[$58>>0] = 116;
  _png_write_data($0,$6,8);
  $59 = ((($0)) + 376|0);
  HEAP32[$59>>2] = 1767135348;
  _png_reset_crc($0);
  _png_calculate_crc($0,$55,4);
  HEAP32[$44>>2] = 66;
  $60 = ($18|0)==(0);
  if (!($60)) {
   _png_write_data($0,$8,$18);
   _png_calculate_crc($0,$8,$18);
  }
  $61 = ($spec$select|0)!=(0|0);
  $62 = ($21|0)!=(0);
  $or$cond3$i59 = $62 & $61;
  if ($or$cond3$i59) {
   _png_write_data($0,$spec$select,$21);
   _png_calculate_crc($0,$spec$select,$21);
  }
  $63 = ($$057|0)!=(0|0);
  $64 = ($24|0)!=(0);
  $or$cond3$i62 = $64 & $63;
  if ($or$cond3$i62) {
   _png_write_data($0,$$057,$24);
   _png_calculate_crc($0,$$057,$24);
   $87 = 1;
  } else {
   $87 = 1;
  }
 }
 $65 = HEAP32[$34>>2]|0;
 if ($switch$idx$cast) {
  $66 = ((($0)) + 280|0);
  $67 = ((($0)) + 284|0);
  L30: do {
   if ($43) {
    $$0$i71 = HEAP32[$66>>2]|0;
    $76 = ($65>>>0)<(1024);
    $spec$select$i72 = $76 ? $65 : 1024;
    $77 = (($65) - ($spec$select$i72))|0;
    $78 = ($77|0)==(0);
    $79 = ($$0$i71|0)==(0|0);
    $or$cond$i6473 = $79 | $78;
    if ($or$cond$i6473) {
     $$lcssa$i = $78;
    } else {
     $80 = HEAP32[$67>>2]|0;
     $$0$i74 = $$0$i71;$82 = $77;
     while(1) {
      $$0$i = HEAP32[$$0$i74>>2]|0;
      $81 = ($80>>>0)>($82>>>0);
      $spec$select$i = $81 ? $82 : $80;
      $83 = (($82) - ($spec$select$i))|0;
      $84 = ($83|0)==(0);
      $85 = ($$0$i|0)==(0|0);
      $or$cond$i64 = $85 | $84;
      if ($or$cond$i64) {
       $$lcssa$i = $84;
       break;
      } else {
       $$0$i74 = $$0$i;$82 = $83;
      }
     }
    }
   } else {
    $68 = ((($9)) + 12|0);
    $$0$in$us$i = $66;$$025$us$i = 1024;$$026$us$i = $68;$$027$us$i = $65;
    while(1) {
     $$0$us$i = HEAP32[$$0$in$us$i>>2]|0;
     $69 = ($$025$us$i>>>0)>($$027$us$i>>>0);
     $spec$select$us$i = $69 ? $$027$us$i : $$025$us$i;
     $70 = ($spec$select$us$i|0)==(0);
     if (!($70)) {
      _png_write_data($0,$$026$us$i,$spec$select$us$i);
      _png_calculate_crc($0,$$026$us$i,$spec$select$us$i);
     }
     $71 = (($$027$us$i) - ($spec$select$us$i))|0;
     $72 = ($71|0)==(0);
     $73 = ($$0$us$i|0)==(0|0);
     $or$cond$us$i = $73 | $72;
     if ($or$cond$us$i) {
      $$lcssa$i = $72;
      break L30;
     }
     $74 = HEAP32[$67>>2]|0;
     $75 = ((($$0$us$i)) + 4|0);
     $$0$in$us$i = $$0$us$i;$$025$us$i = $74;$$026$us$i = $75;$$027$us$i = $71;
    }
   }
  } while(0);
  if (!($$lcssa$i)) {
   _png_error($0,25599);
   // unreachable;
  }
 } else {
  $86 = ($spec$select58|0)!=(0|0);
  $or$cond$i65 = $86 & $87;
  $88 = ($65|0)!=(0);
  $or$cond3$i66 = $or$cond$i65 & $88;
  if ($or$cond3$i66) {
   _png_write_data($0,$spec$select58,$65);
   _png_calculate_crc($0,$spec$select58,$65);
  }
 }
 if ($43) {
  STACKTOP = sp;return;
 }
 $89 = ((($0)) + 800|0);
 HEAP32[$89>>2] = 130;
 $90 = ((($0)) + 412|0);
 $91 = HEAP32[$90>>2]|0;
 $92 = $91 >>> 24;
 $93 = $92&255;
 HEAP8[$7>>0] = $93;
 $94 = $91 >>> 16;
 $95 = $94&255;
 $96 = ((($7)) + 1|0);
 HEAP8[$96>>0] = $95;
 $97 = $91 >>> 8;
 $98 = $97&255;
 $99 = ((($7)) + 2|0);
 HEAP8[$99>>0] = $98;
 $100 = $91&255;
 $101 = ((($7)) + 3|0);
 HEAP8[$101>>0] = $100;
 _png_write_data($0,$7,4);
 STACKTOP = sp;return;
}
function _png_write_zTXt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0$i = 0, $$0$i26 = 0, $$0$i29 = 0, $$0$in$us$i = 0, $$0$us$i = 0, $$025$us$i = 0, $$026$us$i = 0, $$027$us$i = 0, $$lcssa$i = 0, $$sink = 0, $$sink32 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $8 = 0, $9 = 0, $or$cond$i = 0, $or$cond$i28 = 0, $or$cond$us$i = 0, $spec$select$i = 0, $spec$select$i27 = 0, $spec$select$us$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1136|0);
 $4 = sp + 1128|0;
 $5 = sp + 1120|0;
 $6 = sp + 1036|0;
 $7 = sp;
 switch ($3|0) {
 case -1:  {
  _png_write_tEXt($0,$1,$2,0);
  STACKTOP = sp;return;
  break;
 }
 case 0:  {
  $8 = (_png_check_keyword($0,$1,$6)|0);
  $9 = ($8|0)==(0);
  if ($9) {
   _png_error($0,26232);
   // unreachable;
  }
  $10 = (($8) + 1)|0;
  $11 = (($6) + ($10)|0);
  HEAP8[$11>>0] = 0;
  $12 = (($8) + 2)|0;
  $13 = ($2|0)==(0|0);
  if ($13) {
   $$sink = 0;$$sink32 = 0;
  } else {
   $14 = (_strlen($2)|0);
   $$sink = $14;$$sink32 = $2;
  }
  HEAP32[$7>>2] = $$sink32;
  $15 = ((($7)) + 4|0);
  HEAP32[$15>>2] = $$sink;
  $16 = ((($7)) + 8|0);
  HEAP32[$16>>2] = 0;
  $17 = (_png_text_compress($0,2052348020,$7,$12)|0);
  $18 = ($17|0)==(0);
  if (!($18)) {
   $19 = ((($0)) + 248|0);
   $20 = HEAP32[$19>>2]|0;
   _png_error($0,$20);
   // unreachable;
  }
  $21 = HEAP32[$16>>2]|0;
  $22 = (($21) + ($12))|0;
  $23 = ($0|0)==(0|0);
  L15: do {
   if ($23) {
    $$0$i26 = HEAP32[(280)>>2]|0;
    $52 = ($21>>>0)<(1024);
    $spec$select$i27 = $52 ? $21 : 1024;
    $53 = (($21) - ($spec$select$i27))|0;
    $54 = ($53|0)==(0);
    $55 = ($$0$i26|0)==(0|0);
    $or$cond$i28 = $55 | $54;
    if ($or$cond$i28) {
     $$lcssa$i = $54;
    } else {
     $56 = HEAP32[(284)>>2]|0;
     $$0$i29 = $$0$i26;$58 = $53;
     while(1) {
      $$0$i = HEAP32[$$0$i29>>2]|0;
      $57 = ($56>>>0)>($58>>>0);
      $spec$select$i = $57 ? $58 : $56;
      $59 = (($58) - ($spec$select$i))|0;
      $60 = ($59|0)==(0);
      $61 = ($$0$i|0)==(0|0);
      $or$cond$i = $61 | $60;
      if ($or$cond$i) {
       $$lcssa$i = $60;
       break;
      } else {
       $$0$i29 = $$0$i;$58 = $59;
      }
     }
    }
   } else {
    $24 = ((($0)) + 800|0);
    HEAP32[$24>>2] = 34;
    $25 = $22 >>> 24;
    $26 = $25&255;
    HEAP8[$4>>0] = $26;
    $27 = $22 >>> 16;
    $28 = $27&255;
    $29 = ((($4)) + 1|0);
    HEAP8[$29>>0] = $28;
    $30 = $22 >>> 8;
    $31 = $30&255;
    $32 = ((($4)) + 2|0);
    HEAP8[$32>>0] = $31;
    $33 = $22&255;
    $34 = ((($4)) + 3|0);
    HEAP8[$34>>0] = $33;
    $35 = ((($4)) + 4|0);
    HEAP8[$35>>0] = 122;
    $36 = ((($4)) + 5|0);
    HEAP8[$36>>0] = 84;
    $37 = ((($4)) + 6|0);
    HEAP8[$37>>0] = 88;
    $38 = ((($4)) + 7|0);
    HEAP8[$38>>0] = 116;
    _png_write_data($0,$4,8);
    $39 = ((($0)) + 376|0);
    HEAP32[$39>>2] = 2052348020;
    _png_reset_crc($0);
    _png_calculate_crc($0,$35,4);
    HEAP32[$24>>2] = 66;
    $40 = ($12|0)==(0);
    if (!($40)) {
     _png_write_data($0,$6,$12);
     _png_calculate_crc($0,$6,$12);
    }
    $41 = HEAP32[$16>>2]|0;
    $42 = ((($0)) + 280|0);
    $43 = ((($0)) + 284|0);
    $44 = ((($7)) + 12|0);
    $$0$in$us$i = $42;$$025$us$i = 1024;$$026$us$i = $44;$$027$us$i = $41;
    while(1) {
     $$0$us$i = HEAP32[$$0$in$us$i>>2]|0;
     $45 = ($$025$us$i>>>0)>($$027$us$i>>>0);
     $spec$select$us$i = $45 ? $$027$us$i : $$025$us$i;
     $46 = ($spec$select$us$i|0)==(0);
     if (!($46)) {
      _png_write_data($0,$$026$us$i,$spec$select$us$i);
      _png_calculate_crc($0,$$026$us$i,$spec$select$us$i);
     }
     $47 = (($$027$us$i) - ($spec$select$us$i))|0;
     $48 = ($47|0)==(0);
     $49 = ($$0$us$i|0)==(0|0);
     $or$cond$us$i = $49 | $48;
     if ($or$cond$us$i) {
      $$lcssa$i = $48;
      break L15;
     }
     $50 = HEAP32[$43>>2]|0;
     $51 = ((($$0$us$i)) + 4|0);
     $$0$in$us$i = $$0$us$i;$$025$us$i = $50;$$026$us$i = $51;$$027$us$i = $47;
    }
   }
  } while(0);
  if (!($$lcssa$i)) {
   _png_error($0,25599);
   // unreachable;
  }
  if (!($23)) {
   $62 = ((($0)) + 800|0);
   HEAP32[$62>>2] = 130;
   $63 = ((($0)) + 412|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $64 >>> 24;
   $66 = $65&255;
   HEAP8[$5>>0] = $66;
   $67 = $64 >>> 16;
   $68 = $67&255;
   $69 = ((($5)) + 1|0);
   HEAP8[$69>>0] = $68;
   $70 = $64 >>> 8;
   $71 = $70&255;
   $72 = ((($5)) + 2|0);
   HEAP8[$72>>0] = $71;
   $73 = $64&255;
   $74 = ((($5)) + 3|0);
   HEAP8[$74>>0] = $73;
   _png_write_data($0,$5,4);
  }
  STACKTOP = sp;return;
  break;
 }
 default: {
  _png_error($0,26201);
  // unreachable;
 }
 }
}
function _png_write_tEXt($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$021 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $4 = sp + 88|0;
 $5 = sp + 80|0;
 $6 = sp;
 $7 = (_png_check_keyword($0,$1,$6)|0);
 $8 = ($7|0)==(0);
 if ($8) {
  _png_error($0,26159);
  // unreachable;
 }
 $9 = ($2|0)==(0|0);
 if ($9) {
  $$021 = 0;
 } else {
  $10 = HEAP8[$2>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if ($11) {
   $$021 = 0;
  } else {
   $12 = (_strlen($2)|0);
   $13 = (2147483646 - ($7))|0;
   $14 = ($12>>>0)>($13>>>0);
   if ($14) {
    _png_error($0,26181);
    // unreachable;
   } else {
    $$021 = $12;
   }
  }
 }
 $15 = (($7) + 1)|0;
 $16 = (($15) + ($$021))|0;
 $17 = ($0|0)==(0|0);
 if ($17) {
  $50 = $4;
  STACKTOP = sp;return;
 }
 $18 = ((($0)) + 800|0);
 HEAP32[$18>>2] = 34;
 $19 = $16 >>> 24;
 $20 = $19&255;
 HEAP8[$5>>0] = $20;
 $21 = $16 >>> 16;
 $22 = $21&255;
 $23 = ((($5)) + 1|0);
 HEAP8[$23>>0] = $22;
 $24 = $16 >>> 8;
 $25 = $24&255;
 $26 = ((($5)) + 2|0);
 HEAP8[$26>>0] = $25;
 $27 = $16&255;
 $28 = ((($5)) + 3|0);
 HEAP8[$28>>0] = $27;
 $29 = ((($5)) + 4|0);
 HEAP8[$29>>0] = 116;
 $30 = ((($5)) + 5|0);
 HEAP8[$30>>0] = 69;
 $31 = ((($5)) + 6|0);
 HEAP8[$31>>0] = 88;
 $32 = ((($5)) + 7|0);
 HEAP8[$32>>0] = 116;
 _png_write_data($0,$5,8);
 $33 = ((($0)) + 376|0);
 HEAP32[$33>>2] = 1950701684;
 _png_reset_crc($0);
 _png_calculate_crc($0,$29,4);
 HEAP32[$18>>2] = 66;
 $34 = ($15|0)==(0);
 if (!($34)) {
  _png_write_data($0,$6,$15);
  _png_calculate_crc($0,$6,$15);
 }
 $35 = ($$021|0)!=(0);
 $36 = ($2|0)!=(0|0);
 $or$cond = $35 & $36;
 if ($or$cond) {
  _png_write_data($0,$2,$$021);
  _png_calculate_crc($0,$2,$$021);
 }
 $37 = ((($0)) + 800|0);
 HEAP32[$37>>2] = 130;
 $38 = ((($0)) + 412|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = $39 >>> 24;
 $41 = $40&255;
 HEAP8[$4>>0] = $41;
 $42 = $39 >>> 16;
 $43 = $42&255;
 $44 = ((($4)) + 1|0);
 HEAP8[$44>>0] = $43;
 $45 = $39 >>> 8;
 $46 = $45&255;
 $47 = ((($4)) + 2|0);
 HEAP8[$47>>0] = $46;
 $48 = $39&255;
 $49 = ((($4)) + 3|0);
 HEAP8[$49>>0] = $48;
 _png_write_data($0,$4,4);
 $50 = $4;
 STACKTOP = sp;return;
}
function _png_write_end($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$024$i = 0, $$054 = 0, $$pre = 0, $$pre$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 208|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 4;
 $6 = ($5|0)==(0);
 if ($6) {
  _png_error($0,27084);
  // unreachable;
 }
 $7 = ((($0)) + 424|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 420|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = ($8|0)>($11|0);
 if ($12) {
  _png_benign_error($0,27111);
 }
 $13 = ($1|0)==(0|0);
 if (!($13)) {
  $14 = ((($1)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = $15 & 512;
  $17 = ($16|0)==(0);
  if (!($17)) {
   $18 = HEAP32[$3>>2]|0;
   $19 = $18 & 512;
   $20 = ($19|0)==(0);
   if ($20) {
    $21 = ((($1)) + 140|0);
    _png_write_tIME($0,$21);
   }
  }
  $22 = ((($1)) + 128|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)>(0);
  if ($24) {
   $25 = ((($1)) + 136|0);
   $$pre = HEAP32[$25>>2]|0;
   $$054 = 0;$27 = $$pre;
   while(1) {
    $26 = (($27) + (($$054*28)|0)|0);
    $28 = HEAP32[$26>>2]|0;
    $29 = ($28|0)>(0);
    do {
     if ($29) {
      $30 = (((($27) + (($$054*28)|0)|0)) + 4|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = (((($27) + (($$054*28)|0)|0)) + 20|0);
      $33 = HEAP32[$32>>2]|0;
      $34 = (((($27) + (($$054*28)|0)|0)) + 24|0);
      $35 = HEAP32[$34>>2]|0;
      $36 = (((($27) + (($$054*28)|0)|0)) + 8|0);
      $37 = HEAP32[$36>>2]|0;
      _png_write_iTXt($0,$28,$31,$33,$35,$37);
      $38 = HEAP32[$25>>2]|0;
      $39 = (($38) + (($$054*28)|0)|0);
      $40 = HEAP32[$39>>2]|0;
      $41 = ($40|0)==(-1);
      if ($41) {
       HEAP32[$39>>2] = -3;
       $91 = $38;
       break;
      } else {
       HEAP32[$39>>2] = -2;
       $91 = $38;
       break;
      }
     } else {
      $42 = ($28|0)>(-1);
      if ($42) {
       $43 = (((($27) + (($$054*28)|0)|0)) + 4|0);
       $44 = HEAP32[$43>>2]|0;
       $45 = (((($27) + (($$054*28)|0)|0)) + 8|0);
       $46 = HEAP32[$45>>2]|0;
       _png_write_zTXt($0,$44,$46,$28);
       $47 = HEAP32[$25>>2]|0;
       $48 = (($47) + (($$054*28)|0)|0);
       HEAP32[$48>>2] = -2;
       $91 = $47;
       break;
      }
      $49 = ($28|0)==(-1);
      if ($49) {
       $50 = (((($27) + (($$054*28)|0)|0)) + 4|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = (((($27) + (($$054*28)|0)|0)) + 8|0);
       $53 = HEAP32[$52>>2]|0;
       _png_write_tEXt($0,$51,$53,0);
       $54 = HEAP32[$25>>2]|0;
       $55 = (($54) + (($$054*28)|0)|0);
       HEAP32[$55>>2] = -3;
       $91 = $54;
      } else {
       $91 = $27;
      }
     }
    } while(0);
    $56 = (($$054) + 1)|0;
    $57 = HEAP32[$22>>2]|0;
    $58 = ($56|0)<($57|0);
    if ($58) {
     $$054 = $56;$27 = $91;
    } else {
     break;
    }
   }
  }
  $59 = ((($1)) + 240|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)==(0);
  if (!($61)) {
   $62 = ((($1)) + 236|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = (($63) + (($60*20)|0)|0);
   $65 = ($60|0)>(0);
   if ($65) {
    $66 = ((($0)) + 688|0);
    $$024$i = $63;
    while(1) {
     $67 = ((($$024$i)) + 16|0);
     $68 = HEAP8[$67>>0]|0;
     $69 = $68 & 8;
     $70 = ($69<<24>>24)==(0);
     do {
      if (!($70)) {
       $71 = (_png_handle_as_unknown($0,$$024$i)|0);
       $72 = ($71|0)==(1);
       if (!($72)) {
        $73 = ((($$024$i)) + 3|0);
        $74 = HEAP8[$73>>0]|0;
        $75 = $74 & 32;
        $76 = ($75<<24>>24)!=(0);
        $77 = ($71|0)==(3);
        $or$cond$i = $77 | $76;
        if (!($or$cond$i)) {
         $78 = ($71|0)==(0);
         if (!($78)) {
          break;
         }
         $79 = HEAP32[$66>>2]|0;
         $80 = ($79|0)==(3);
         if (!($80)) {
          break;
         }
        }
        $81 = ((($$024$i)) + 12|0);
        $82 = HEAP32[$81>>2]|0;
        $83 = ($82|0)==(0);
        if ($83) {
         _png_warning($0,25350);
         $$pre$i = HEAP32[$81>>2]|0;
         $86 = $$pre$i;
        } else {
         $86 = $82;
        }
        $84 = ((($$024$i)) + 8|0);
        $85 = HEAP32[$84>>2]|0;
        _png_write_chunk($0,$$024$i,$85,$86);
       }
      }
     } while(0);
     $87 = ((($$024$i)) + 20|0);
     $88 = ($87>>>0)<($64>>>0);
     if ($88) {
      $$024$i = $87;
     } else {
      break;
     }
    }
   }
  }
 }
 $89 = HEAP32[$3>>2]|0;
 $90 = $89 | 8;
 HEAP32[$3>>2] = $90;
 _png_write_IEND($0);
 return;
}
function _png_write_IEND($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = sp + 8|0;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $22 = ((($0)) + 208|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = $23 | 16;
  HEAP32[$22>>2] = $24;
  STACKTOP = sp;return;
 }
 $4 = ((($0)) + 800|0);
 HEAP32[$4>>2] = 34;
 $5 = ((($1)) + 4|0);
 HEAP32[$1>>2] = 0;
 HEAP8[$5>>0] = 73;
 $6 = ((($1)) + 5|0);
 HEAP8[$6>>0] = 69;
 $7 = ((($1)) + 6|0);
 HEAP8[$7>>0] = 78;
 $8 = ((($1)) + 7|0);
 HEAP8[$8>>0] = 68;
 _png_write_data($0,$1,8);
 $9 = ((($0)) + 376|0);
 HEAP32[$9>>2] = 1229278788;
 _png_reset_crc($0);
 _png_calculate_crc($0,$5,4);
 HEAP32[$4>>2] = 130;
 $10 = ((($0)) + 412|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 >>> 24;
 $13 = $12&255;
 HEAP8[$2>>0] = $13;
 $14 = $11 >>> 16;
 $15 = $14&255;
 $16 = ((($2)) + 1|0);
 HEAP8[$16>>0] = $15;
 $17 = $11 >>> 8;
 $18 = $17&255;
 $19 = ((($2)) + 2|0);
 HEAP8[$19>>0] = $18;
 $20 = $11&255;
 $21 = ((($2)) + 3|0);
 HEAP8[$21>>0] = $20;
 _png_write_data($0,$2,4);
 $22 = ((($0)) + 208|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = $23 | 16;
 HEAP32[$22>>2] = $24;
 STACKTOP = sp;return;
}
function _png_create_write_struct($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_png_create_png_struct($0,$1,$2,$3,0,0,0)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  return ($4|0);
 }
 $6 = ((($4)) + 284|0);
 HEAP32[$6>>2] = 8192;
 $7 = ((($4)) + 304|0);
 HEAP32[$7>>2] = 1;
 $8 = ((($4)) + 288|0);
 HEAP32[$8>>2] = -1;
 $9 = ((($4)) + 300|0);
 HEAP32[$9>>2] = 8;
 $10 = ((($4)) + 296|0);
 HEAP32[$10>>2] = 15;
 $11 = ((($4)) + 292|0);
 HEAP32[$11>>2] = 8;
 $12 = ((($4)) + 324|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($4)) + 308|0);
 HEAP32[$13>>2] = -1;
 $14 = ((($4)) + 320|0);
 HEAP32[$14>>2] = 8;
 $15 = ((($4)) + 316|0);
 HEAP32[$15>>2] = 15;
 $16 = ((($4)) + 312|0);
 HEAP32[$16>>2] = 8;
 $17 = ((($4)) + 212|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $18 | 2097152;
 HEAP32[$17>>2] = $19;
 _png_set_write_fn($4,0,0,0);
 return ($4|0);
}
function _png_write_row($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$i = 0, $$0673$i$lver$orig = 0, $$0682$i$lver$orig = 0, $$0715$i$lver$orig = 0, $$0724$i$lver$orig = 0, $$1$i = 0, $$idx$val = 0, $$idx53$val = 0, $$idx54$val = 0, $$pr = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i$lver$orig = 0, $exitcond8$i$lver$orig = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  STACKTOP = sp;return;
 }
 $4 = ((($0)) + 372|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = ((($0)) + 433|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = ($8<<24>>24)==(0);
   if ($9) {
    $10 = ((($0)) + 208|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = $11 & 1024;
    $13 = ($12|0)==(0);
    if ($13) {
     _png_error($0,27153);
     // unreachable;
    } else {
     _png_write_start_row($0);
     break;
    }
   }
  }
 } while(0);
 $14 = ((($0)) + 432|0);
 $15 = HEAP8[$14>>0]|0;
 $16 = ($15<<24>>24)==(0);
 L11: do {
  if (!($16)) {
   $17 = ((($0)) + 216|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $18 & 2;
   $20 = ($19|0)==(0);
   if (!($20)) {
    $21 = ((($0)) + 433|0);
    $22 = HEAP8[$21>>0]|0;
    switch ($22<<24>>24) {
    case 0:  {
     $23 = HEAP32[$4>>2]|0;
     $24 = $23 & 7;
     $25 = ($24|0)==(0);
     if ($25) {
      break L11;
     }
     _png_write_finish_row($0);
     STACKTOP = sp;return;
     break;
    }
    case 1:  {
     $26 = HEAP32[$4>>2]|0;
     $27 = $26 & 7;
     $28 = ($27|0)==(0);
     if ($28) {
      $29 = ((($0)) + 348|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = ($30>>>0)<(5);
      if (!($31)) {
       break L11;
      }
     }
     _png_write_finish_row($0);
     STACKTOP = sp;return;
     break;
    }
    case 2:  {
     $32 = HEAP32[$4>>2]|0;
     $33 = $32 & 7;
     $34 = ($33|0)==(4);
     if ($34) {
      break L11;
     }
     _png_write_finish_row($0);
     STACKTOP = sp;return;
     break;
    }
    case 3:  {
     $35 = HEAP32[$4>>2]|0;
     $36 = $35 & 3;
     $37 = ($36|0)==(0);
     if ($37) {
      $38 = ((($0)) + 348|0);
      $39 = HEAP32[$38>>2]|0;
      $40 = ($39>>>0)<(3);
      if (!($40)) {
       break L11;
      }
     }
     _png_write_finish_row($0);
     STACKTOP = sp;return;
     break;
    }
    case 4:  {
     $41 = HEAP32[$4>>2]|0;
     $42 = $41 & 3;
     $43 = ($42|0)==(2);
     if ($43) {
      break L11;
     }
     _png_write_finish_row($0);
     STACKTOP = sp;return;
     break;
    }
    case 5:  {
     $44 = HEAP32[$4>>2]|0;
     $45 = $44 & 1;
     $46 = ($45|0)==(0);
     if ($46) {
      $47 = ((($0)) + 348|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48>>>0)<(2);
      if (!($49)) {
       break L11;
      }
     }
     _png_write_finish_row($0);
     STACKTOP = sp;return;
     break;
    }
    case 6:  {
     $50 = HEAP32[$4>>2]|0;
     $51 = $50 & 1;
     $52 = ($51|0)==(0);
     if (!($52)) {
      break L11;
     }
     _png_write_finish_row($0);
     STACKTOP = sp;return;
     break;
    }
    default: {
     break L11;
    }
    }
   }
  }
 } while(0);
 $53 = ((($0)) + 435|0);
 $54 = HEAP8[$53>>0]|0;
 $55 = ((($2)) + 8|0);
 HEAP8[$55>>0] = $54;
 $56 = ((($0)) + 360|0);
 $57 = HEAP32[$56>>2]|0;
 HEAP32[$2>>2] = $57;
 $58 = ((($0)) + 440|0);
 $59 = HEAP8[$58>>0]|0;
 $60 = ((($2)) + 10|0);
 HEAP8[$60>>0] = $59;
 $61 = ((($0)) + 437|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = ((($2)) + 9|0);
 HEAP8[$63>>0] = $62;
 $64 = $62&255;
 $65 = $59&255;
 $66 = Math_imul($64, $65)|0;
 $67 = $66&255;
 $68 = ((($2)) + 11|0);
 HEAP8[$68>>0] = $67;
 $69 = $66 & 255;
 $70 = ($69>>>0)>(7);
 if ($70) {
  $71 = $69 >>> 3;
  $72 = Math_imul($71, $57)|0;
  $77 = $72;
 } else {
  $73 = Math_imul($69, $57)|0;
  $74 = (($73) + 7)|0;
  $75 = $74 >>> 3;
  $77 = $75;
 }
 $76 = ((($2)) + 4|0);
 HEAP32[$76>>2] = $77;
 $78 = ((($0)) + 384|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ((($79)) + 1|0);
 _memcpy(($80|0),($1|0),($77|0))|0;
 $81 = HEAP8[$14>>0]|0;
 $82 = ($81<<24>>24)==(0);
 if (!($82)) {
  $83 = ((($0)) + 433|0);
  $84 = HEAP8[$83>>0]|0;
  $85 = $84&255;
  $86 = ($84&255)<(6);
  if ($86) {
   $87 = ((($0)) + 216|0);
   $88 = HEAP32[$87>>2]|0;
   $89 = $88 & 2;
   $90 = ($89|0)==(0);
   if (!($90)) {
    $91 = HEAP32[$78>>2]|0;
    $92 = ((($91)) + 1|0);
    _png_do_write_interlace($2,$92,$85);
    $93 = HEAP32[$2>>2]|0;
    $94 = ($93|0)==(0);
    if ($94) {
     _png_write_finish_row($0);
     STACKTOP = sp;return;
    }
   }
  }
 }
 $95 = ((($0)) + 216|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ($96|0)==(0);
 if (!($97)) {
  _png_do_write_transformations($0,$2);
 }
 $98 = HEAP8[$68>>0]|0;
 $99 = ((($0)) + 438|0);
 $100 = HEAP8[$99>>0]|0;
 $101 = ($98<<24>>24)==($100<<24>>24);
 if (!($101)) {
  _png_error($0,27206);
  // unreachable;
 }
 $102 = ((($0)) + 443|0);
 $103 = HEAP8[$102>>0]|0;
 $104 = ($98<<24>>24)==($103<<24>>24);
 if (!($104)) {
  _png_error($0,27206);
  // unreachable;
 }
 $105 = ((($0)) + 708|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = $106 & 4;
 $108 = ($107|0)==(0);
 L63: do {
  if ($108) {
   label = 54;
  } else {
   $109 = ((($0)) + 712|0);
   $110 = HEAP8[$109>>0]|0;
   $111 = ($110<<24>>24)==(64);
   if ($111) {
    $112 = HEAP32[$78>>2]|0;
    $113 = ((($112)) + 1|0);
    $$idx$val = HEAP32[$2>>2]|0;
    $$idx53$val = HEAP8[$55>>0]|0;
    $114 = $$idx53$val & 2;
    $115 = ($114<<24>>24)==(0);
    if ($115) {
     $165 = $$idx53$val;
    } else {
     $$idx54$val = HEAP8[$63>>0]|0;
     switch ($$idx54$val<<24>>24) {
     case 8:  {
      switch ($$idx53$val<<24>>24) {
      case 2:  {
       $$0$i = 3;
       break;
      }
      case 6:  {
       $$0$i = 4;
       break;
      }
      default: {
       label = 54;
       break L63;
      }
      }
      $116 = ($$idx$val|0)==(0);
      if ($116) {
       label = 54;
       break L63;
      }
      $$0673$i$lver$orig = $113;$$0682$i$lver$orig = 0;
      while(1) {
       $117 = HEAP8[$$0673$i$lver$orig>>0]|0;
       $118 = $117&255;
       $119 = ((($$0673$i$lver$orig)) + 1|0);
       $120 = HEAP8[$119>>0]|0;
       $121 = $120&255;
       $122 = (($118) - ($121))|0;
       $123 = $122&255;
       HEAP8[$$0673$i$lver$orig>>0] = $123;
       $124 = ((($$0673$i$lver$orig)) + 2|0);
       $125 = HEAP8[$124>>0]|0;
       $126 = $125&255;
       $127 = (($126) - ($121))|0;
       $128 = $127&255;
       HEAP8[$124>>0] = $128;
       $129 = (($$0682$i$lver$orig) + 1)|0;
       $130 = (($$0673$i$lver$orig) + ($$0$i)|0);
       $exitcond$i$lver$orig = ($129|0)==($$idx$val|0);
       if ($exitcond$i$lver$orig) {
        label = 54;
        break;
       } else {
        $$0673$i$lver$orig = $130;$$0682$i$lver$orig = $129;
       }
      }
      break;
     }
     case 16:  {
      switch ($$idx53$val<<24>>24) {
      case 2:  {
       $$1$i = 6;
       break;
      }
      case 6:  {
       $$1$i = 8;
       break;
      }
      default: {
       label = 54;
       break L63;
      }
      }
      $131 = ($$idx$val|0)==(0);
      if ($131) {
       label = 54;
       break L63;
      }
      $$0715$i$lver$orig = $113;$$0724$i$lver$orig = 0;
      while(1) {
       $132 = HEAP8[$$0715$i$lver$orig>>0]|0;
       $133 = $132&255;
       $134 = $133 << 8;
       $135 = ((($$0715$i$lver$orig)) + 1|0);
       $136 = HEAP8[$135>>0]|0;
       $137 = $136&255;
       $138 = $134 | $137;
       $139 = ((($$0715$i$lver$orig)) + 2|0);
       $140 = HEAP8[$139>>0]|0;
       $141 = $140&255;
       $142 = $141 << 8;
       $143 = ((($$0715$i$lver$orig)) + 3|0);
       $144 = HEAP8[$143>>0]|0;
       $145 = $144&255;
       $146 = $142 | $145;
       $147 = ((($$0715$i$lver$orig)) + 4|0);
       $148 = HEAP8[$147>>0]|0;
       $149 = $148&255;
       $150 = $149 << 8;
       $151 = ((($$0715$i$lver$orig)) + 5|0);
       $152 = HEAP8[$151>>0]|0;
       $153 = $152&255;
       $154 = $150 | $153;
       $155 = (($138) - ($146))|0;
       $156 = (($154) - ($146))|0;
       $157 = $155 >>> 8;
       $158 = $157&255;
       HEAP8[$$0715$i$lver$orig>>0] = $158;
       $159 = $155&255;
       HEAP8[$135>>0] = $159;
       $160 = $156 >>> 8;
       $161 = $160&255;
       HEAP8[$147>>0] = $161;
       $162 = $156&255;
       HEAP8[$151>>0] = $162;
       $163 = (($$0724$i$lver$orig) + 1)|0;
       $164 = (($$0715$i$lver$orig) + ($$1$i)|0);
       $exitcond8$i$lver$orig = ($163|0)==($$idx$val|0);
       if ($exitcond8$i$lver$orig) {
        label = 54;
        break;
       } else {
        $$0715$i$lver$orig = $164;$$0724$i$lver$orig = $163;
       }
      }
      break;
     }
     default: {
      $165 = $$idx53$val;
      break L63;
     }
     }
    }
   } else {
    label = 54;
   }
  }
 } while(0);
 if ((label|0) == 54) {
  $$pr = HEAP8[$55>>0]|0;
  $165 = $$pr;
 }
 $166 = ($165<<24>>24)==(3);
 if ($166) {
  $167 = ((($0)) + 424|0);
  $168 = HEAP32[$167>>2]|0;
  $169 = ($168|0)>(-1);
  if ($169) {
   _png_do_check_palette_indexes($0,$2);
  }
 }
 _png_write_find_filter($0,$2);
 $170 = ((($0)) + 548|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = ($171|0)==(0|0);
 if ($172) {
  STACKTOP = sp;return;
 }
 $173 = HEAP32[$4>>2]|0;
 $174 = ((($0)) + 433|0);
 $175 = HEAP8[$174>>0]|0;
 $176 = $175&255;
 FUNCTION_TABLE_viii[$171 & 127]($0,$173,$176);
 STACKTOP = sp;return;
}
function _png_write_start_row($0) {
 $0 = $0|0;
 var $$pr = 0, $$pr51 = 0, $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 440|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2&255;
 $4 = ((($0)) + 437|0);
 $5 = HEAP8[$4>>0]|0;
 $6 = $5&255;
 $7 = Math_imul($6, $3)|0;
 $8 = ($7>>>0)>(7);
 $9 = ((($0)) + 348|0);
 $10 = HEAP32[$9>>2]|0;
 if ($8) {
  $11 = $7 >>> 3;
  $12 = Math_imul($11, $10)|0;
  $17 = $12;
 } else {
  $13 = Math_imul($7, $10)|0;
  $14 = (($13) + 7)|0;
  $15 = $14 >>> 3;
  $17 = $15;
 }
 $16 = (($17) + 1)|0;
 $18 = ((($0)) + 438|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = ((($0)) + 443|0);
 HEAP8[$20>>0] = $19;
 $21 = $7&255;
 $22 = ((($0)) + 442|0);
 HEAP8[$22>>0] = $21;
 $23 = (_png_malloc($0,$16)|0);
 $24 = ((($0)) + 384|0);
 HEAP32[$24>>2] = $23;
 HEAP8[$23>>0] = 0;
 $25 = ((($0)) + 434|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = $26 & 16;
 $28 = ($27<<24>>24)==(0);
 if ($28) {
  $34 = $26;
 } else {
  $29 = ((($0)) + 364|0);
  $30 = HEAP32[$29>>2]|0;
  $31 = (($30) + 1)|0;
  $32 = (_png_malloc($0,$31)|0);
  $33 = ((($0)) + 388|0);
  HEAP32[$33>>2] = $32;
  HEAP8[$32>>0] = 1;
  $$pr = HEAP8[$25>>0]|0;
  $34 = $$pr;
 }
 $35 = ($34&255)>(31);
 if ($35) {
  $36 = (_png_calloc($0,$16)|0);
  $37 = ((($0)) + 380|0);
  HEAP32[$37>>2] = $36;
  $38 = HEAP8[$25>>0]|0;
  $39 = $38 & 32;
  $40 = ($39<<24>>24)==(0);
  if ($40) {
   $47 = $38;
  } else {
   $41 = ((($0)) + 364|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = (($42) + 1)|0;
   $44 = (_png_malloc($0,$43)|0);
   $45 = ((($0)) + 392|0);
   HEAP32[$45>>2] = $44;
   HEAP8[$44>>0] = 2;
   $$pre = HEAP8[$25>>0]|0;
   $47 = $$pre;
  }
  $46 = $47 & 64;
  $48 = ($46<<24>>24)==(0);
  if ($48) {
   $54 = $47;
  } else {
   $49 = ((($0)) + 364|0);
   $50 = HEAP32[$49>>2]|0;
   $51 = (($50) + 1)|0;
   $52 = (_png_malloc($0,$51)|0);
   $53 = ((($0)) + 396|0);
   HEAP32[$53>>2] = $52;
   HEAP8[$52>>0] = 3;
   $$pr51 = HEAP8[$25>>0]|0;
   $54 = $$pr51;
  }
  $55 = ($54<<24>>24)<(0);
  if ($55) {
   $56 = ((($0)) + 364|0);
   $57 = HEAP32[$56>>2]|0;
   $58 = (($57) + 1)|0;
   $59 = (_png_malloc($0,$58)|0);
   $60 = ((($0)) + 400|0);
   HEAP32[$60>>2] = $59;
   HEAP8[$59>>0] = 4;
  }
 }
 $61 = ((($0)) + 432|0);
 $62 = HEAP8[$61>>0]|0;
 $63 = ($62<<24>>24)==(0);
 if ($63) {
  $78 = ((($0)) + 352|0);
  $79 = HEAP32[$78>>2]|0;
  $80 = ((($0)) + 356|0);
  HEAP32[$80>>2] = $79;
  $81 = HEAP32[$9>>2]|0;
  $$sink = $81;
  $82 = ((($0)) + 360|0);
  HEAP32[$82>>2] = $$sink;
  return;
 }
 $64 = ((($0)) + 216|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $65 & 2;
 $67 = ($66|0)==(0);
 $68 = ((($0)) + 352|0);
 $69 = HEAP32[$68>>2]|0;
 if ($67) {
  $70 = (($69) + 7)|0;
  $71 = $70 >>> 3;
  $72 = ((($0)) + 356|0);
  HEAP32[$72>>2] = $71;
  $73 = HEAP32[$9>>2]|0;
  $74 = (($73) + 7)|0;
  $75 = $74 >>> 3;
  $$sink = $75;
  $82 = ((($0)) + 360|0);
  HEAP32[$82>>2] = $$sink;
  return;
 } else {
  $76 = ((($0)) + 356|0);
  HEAP32[$76>>2] = $69;
  $77 = HEAP32[$9>>2]|0;
  $$sink = $77;
  $82 = ((($0)) + 360|0);
  HEAP32[$82>>2] = $$sink;
  return;
 }
}
function _png_write_finish_row($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 372|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (($2) + 1)|0;
 HEAP32[$1>>2] = $3;
 $4 = ((($0)) + 356|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  return;
 }
 $7 = ((($0)) + 432|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 L4: do {
  if (!($9)) {
   HEAP32[$1>>2] = 0;
   $10 = ((($0)) + 216|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = $11 & 2;
   $13 = ($12|0)==(0);
   $14 = ((($0)) + 433|0);
   $15 = HEAP8[$14>>0]|0;
   $16 = (($15) + 1)<<24>>24;
   HEAP8[$14>>0] = $16;
   do {
    if ($13) {
     $17 = ($16&255)>(6);
     if ($17) {
      break L4;
     }
     $18 = $16&255;
     $19 = ((($0)) + 348|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = (($20) + -1)|0;
     $22 = ((($0)) + 360|0);
     $23 = ((($0)) + 352|0);
     $24 = HEAP32[$23>>2]|0;
     $25 = (($24) + -1)|0;
     $27 = $18;$46 = $16;
     while(1) {
      $26 = (27285 + ($27)|0);
      $28 = HEAP8[$26>>0]|0;
      $29 = $28&255;
      $30 = (27278 + ($27)|0);
      $31 = HEAP8[$30>>0]|0;
      $32 = $31&255;
      $33 = (($21) + ($29))|0;
      $34 = (($33) - ($32))|0;
      $35 = (27292 + ($27)|0);
      $36 = HEAP8[$35>>0]|0;
      $37 = $36&255;
      $38 = (27299 + ($27)|0);
      $39 = HEAP8[$38>>0]|0;
      $40 = $39&255;
      $41 = (($25) + ($37))|0;
      $42 = (($41) - ($40))|0;
      $43 = ($34>>>0)<($29>>>0);
      $44 = ($42>>>0)<($37>>>0);
      $or$cond = $43 | $44;
      if (!($or$cond)) {
       label = 9;
       break;
      }
      $45 = (($46) + 1)<<24>>24;
      HEAP8[$14>>0] = $45;
      $47 = $45&255;
      $48 = ($45&255)>(6);
      if ($48) {
       label = 8;
       break;
      } else {
       $27 = $47;$46 = $45;
      }
     }
     if ((label|0) == 8) {
      $49 = $28&255;
      $50 = (($34>>>0) / ($49>>>0))&-1;
      $51 = $36&255;
      $52 = (($42>>>0) / ($51>>>0))&-1;
      HEAP32[$22>>2] = $50;
      HEAP32[$4>>2] = $52;
      break L4;
     }
     else if ((label|0) == 9) {
      $53 = $28&255;
      $54 = (($34>>>0) / ($53>>>0))&-1;
      $55 = $36&255;
      $56 = (($42>>>0) / ($55>>>0))&-1;
      HEAP32[$22>>2] = $54;
      HEAP32[$4>>2] = $56;
      break;
     }
    } else {
     $57 = ($16&255)<(7);
     if (!($57)) {
      break L4;
     }
    }
   } while(0);
   $58 = ((($0)) + 380|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($59|0)==(0|0);
   if ($60) {
    return;
   }
   $61 = ((($0)) + 440|0);
   $62 = HEAP8[$61>>0]|0;
   $63 = $62&255;
   $64 = ((($0)) + 437|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $67 = Math_imul($66, $63)|0;
   $68 = ($67>>>0)>(7);
   $69 = ((($0)) + 348|0);
   $70 = HEAP32[$69>>2]|0;
   if ($68) {
    $71 = $67 >>> 3;
    $72 = Math_imul($71, $70)|0;
    $77 = $72;
   } else {
    $73 = Math_imul($67, $70)|0;
    $74 = (($73) + 7)|0;
    $75 = $74 >>> 3;
    $77 = $75;
   }
   $76 = (($77) + 1)|0;
   _memset(($59|0),0,($76|0))|0;
   return;
  }
 } while(0);
 _png_compress_IDAT($0,0,0,4);
 return;
}
function _png_do_write_interlace($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0142167 = 0, $$0144164 = 0, $$0145163 = 0, $$0146166 = 0, $$0148165 = 0, $$0149185 = 0, $$0150175 = 0, $$0152184 = 0, $$0154183 = 0, $$0156182 = 0, $$0158174 = 0, $$0160173 = 0, $$0162172 = 0, $$0168 = 0, $$1 = 0, $$1143 = 0, $$1147 = 0, $$1151 = 0, $$1153 = 0, $$1155 = 0;
 var $$1157 = 0, $$1159 = 0, $$1161 = 0, $$pre$phi193Z2D = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)<(6);
 if (!($3)) {
  return;
 }
 $4 = ((($0)) + 11|0);
 $5 = HEAP8[$4>>0]|0;
 switch ($5<<24>>24) {
 case 1:  {
  $6 = HEAP32[$0>>2]|0;
  $7 = (27278 + ($2)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $8&255;
  $10 = ($6>>>0)>($9>>>0);
  if ($10) {
   $11 = (27285 + ($2)|0);
   $12 = HEAP8[$11>>0]|0;
   $13 = $12&255;
   $$0142167 = 7;$$0146166 = 0;$$0148165 = $9;$$0168 = $1;
   while(1) {
    $14 = $$0148165 >>> 3;
    $15 = (($1) + ($14)|0);
    $16 = HEAP8[$15>>0]|0;
    $17 = $16&255;
    $18 = $$0148165 & 7;
    $19 = $18 ^ 7;
    $20 = $17 >>> $19;
    $21 = $20 & 1;
    $22 = $21 << $$0142167;
    $23 = $22 | $$0146166;
    $24 = ($$0142167|0)==(0);
    if ($24) {
     $25 = $23&255;
     $26 = ((($$0168)) + 1|0);
     HEAP8[$$0168>>0] = $25;
     $$1 = $26;$$1143 = 7;$$1147 = 0;
    } else {
     $27 = (($$0142167) + -1)|0;
     $$1 = $$0168;$$1143 = $27;$$1147 = $23;
    }
    $28 = (($$0148165) + ($13))|0;
    $29 = ($28>>>0)<($6>>>0);
    if ($29) {
     $$0142167 = $$1143;$$0146166 = $$1147;$$0148165 = $28;$$0168 = $$1;
    } else {
     break;
    }
   }
   $30 = ($$1143|0)==(7);
   if ($30) {
    $$pre$phi193Z2D = $9;$$pre$phiZ2D = $0;
   } else {
    $31 = $$1147&255;
    HEAP8[$$1>>0] = $31;
    $$pre$phi193Z2D = $9;$$pre$phiZ2D = $0;
   }
  } else {
   $$pre$phi193Z2D = $9;$$pre$phiZ2D = $0;
  }
  break;
 }
 case 2:  {
  $32 = HEAP32[$0>>2]|0;
  $33 = (27278 + ($2)|0);
  $34 = HEAP8[$33>>0]|0;
  $35 = $34&255;
  $36 = ($32>>>0)>($35>>>0);
  if ($36) {
   $37 = (27285 + ($2)|0);
   $38 = HEAP8[$37>>0]|0;
   $39 = $38&255;
   $$0150175 = $1;$$0158174 = 6;$$0160173 = 0;$$0162172 = $35;
   while(1) {
    $40 = $$0162172 >>> 2;
    $41 = (($1) + ($40)|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42&255;
    $44 = $$0162172 << 1;
    $45 = $44 & 6;
    $46 = $45 ^ 6;
    $47 = $43 >>> $46;
    $48 = $47 & 3;
    $49 = $48 << $$0158174;
    $50 = $49 | $$0160173;
    $51 = ($$0158174|0)==(0);
    if ($51) {
     $52 = $50&255;
     $53 = ((($$0150175)) + 1|0);
     HEAP8[$$0150175>>0] = $52;
     $$1151 = $53;$$1159 = 6;$$1161 = 0;
    } else {
     $54 = (($$0158174) + -2)|0;
     $$1151 = $$0150175;$$1159 = $54;$$1161 = $50;
    }
    $55 = (($$0162172) + ($39))|0;
    $56 = ($55>>>0)<($32>>>0);
    if ($56) {
     $$0150175 = $$1151;$$0158174 = $$1159;$$0160173 = $$1161;$$0162172 = $55;
    } else {
     break;
    }
   }
   $57 = ($$1159|0)==(6);
   if ($57) {
    $$pre$phi193Z2D = $35;$$pre$phiZ2D = $0;
   } else {
    $58 = $$1161&255;
    HEAP8[$$1151>>0] = $58;
    $$pre$phi193Z2D = $35;$$pre$phiZ2D = $0;
   }
  } else {
   $$pre$phi193Z2D = $35;$$pre$phiZ2D = $0;
  }
  break;
 }
 case 4:  {
  $59 = HEAP32[$0>>2]|0;
  $60 = (27278 + ($2)|0);
  $61 = HEAP8[$60>>0]|0;
  $62 = $61&255;
  $63 = ($59>>>0)>($62>>>0);
  if ($63) {
   $64 = (27285 + ($2)|0);
   $65 = HEAP8[$64>>0]|0;
   $66 = $65&255;
   $$0149185 = $62;$$0152184 = 0;$$0154183 = 4;$$0156182 = $1;
   while(1) {
    $67 = $$0149185 >>> 1;
    $68 = (($1) + ($67)|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69&255;
    $71 = $$0149185 << 2;
    $72 = $71 & 4;
    $73 = $72 ^ 4;
    $74 = $70 >>> $73;
    $75 = $74 & 15;
    $76 = $75 << $$0154183;
    $77 = $76 | $$0152184;
    $78 = ($$0154183|0)==(0);
    if ($78) {
     $79 = $77&255;
     $80 = ((($$0156182)) + 1|0);
     HEAP8[$$0156182>>0] = $79;
     $$1153 = 0;$$1155 = 4;$$1157 = $80;
    } else {
     $81 = (($$0154183) + -4)|0;
     $$1153 = $77;$$1155 = $81;$$1157 = $$0156182;
    }
    $82 = (($$0149185) + ($66))|0;
    $83 = ($82>>>0)<($59>>>0);
    if ($83) {
     $$0149185 = $82;$$0152184 = $$1153;$$0154183 = $$1155;$$0156182 = $$1157;
    } else {
     break;
    }
   }
   $84 = ($$1155|0)==(4);
   if ($84) {
    $$pre$phi193Z2D = $62;$$pre$phiZ2D = $0;
   } else {
    $85 = $$1153&255;
    HEAP8[$$1157>>0] = $85;
    $$pre$phi193Z2D = $62;$$pre$phiZ2D = $0;
   }
  } else {
   $$pre$phi193Z2D = $62;$$pre$phiZ2D = $0;
  }
  break;
 }
 default: {
  $86 = $5&255;
  $87 = HEAP32[$0>>2]|0;
  $88 = $86 >>> 3;
  $89 = (27278 + ($2)|0);
  $90 = HEAP8[$89>>0]|0;
  $91 = $90&255;
  $92 = ($87>>>0)>($91>>>0);
  if ($92) {
   $93 = (27285 + ($2)|0);
   $94 = HEAP8[$93>>0]|0;
   $95 = $94&255;
   $$0144164 = $91;$$0145163 = $1;
   while(1) {
    $96 = Math_imul($$0144164, $88)|0;
    $97 = (($1) + ($96)|0);
    $98 = ($$0145163|0)==($97|0);
    if (!($98)) {
     _memcpy(($$0145163|0),($97|0),($88|0))|0;
    }
    $99 = (($$0145163) + ($88)|0);
    $100 = (($$0144164) + ($95))|0;
    $101 = ($100>>>0)<($87>>>0);
    if ($101) {
     $$0144164 = $100;$$0145163 = $99;
    } else {
     $$pre$phi193Z2D = $91;$$pre$phiZ2D = $0;
     break;
    }
   }
  } else {
   $$pre$phi193Z2D = $91;$$pre$phiZ2D = $0;
  }
 }
 }
 $102 = HEAP32[$$pre$phiZ2D>>2]|0;
 $103 = (27285 + ($2)|0);
 $104 = HEAP8[$103>>0]|0;
 $105 = $104&255;
 $106 = (($102) + -1)|0;
 $107 = (($106) + ($105))|0;
 $108 = (($107) - ($$pre$phi193Z2D))|0;
 $109 = (($108>>>0) / ($105>>>0))&-1;
 HEAP32[$$pre$phiZ2D>>2] = $109;
 $110 = HEAP8[$4>>0]|0;
 $111 = $110&255;
 $112 = ($110&255)>(7);
 if ($112) {
  $113 = $111 >>> 3;
  $114 = Math_imul($113, $109)|0;
  $119 = $114;
 } else {
  $115 = Math_imul($109, $111)|0;
  $116 = (($115) + 7)|0;
  $117 = $116 >>> 3;
  $119 = $117;
 }
 $118 = ((($0)) + 4|0);
 HEAP32[$118>>2] = $119;
 return;
}
function _png_write_find_filter($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$0662$lcssa = 0, $$0662856 = 0, $$0663$lcssa = 0, $$0663855 = 0, $$0665854 = 0, $$0669 = 0, $$06761068 = 0, $$0677$lcssa = 0, $$06771067 = 0, $$06801066 = 0, $$0681$lcssa = 0, $$0681891 = 0, $$0683$lcssa = 0, $$0683890 = 0, $$0685889 = 0, $$0686$lcssa = 0, $$0686879 = 0, $$0690$lcssa = 0, $$0690878 = 0;
 var $$0695866 = 0, $$0696865 = 0, $$0697$lcssa = 0, $$0697877 = 0, $$0699 = 0, $$0699$lcssa = 0, $$0699875 = 0, $$0699880 = 0, $$0701$lcssa = 0, $$0701876 = 0, $$0703$lcssa = 0, $$07031059 = 0, $$0705$lcssa = 0, $$07051058 = 0, $$07071057 = 0, $$0708$lcssa = 0, $$07081010 = 0, $$07101003 = 0, $$0711$lcssa = 0, $$0711845 = 0;
 var $$0713837 = 0, $$0714836 = 0, $$0715$lcssa = 0, $$0715844 = 0, $$0717 = 0, $$0717$lcssa = 0, $$0717842 = 0, $$0717846 = 0, $$0719$lcssa = 0, $$0719843 = 0, $$0721$lcssa = 0, $$0721920 = 0, $$0723$lcssa = 0, $$0723919 = 0, $$0725918 = 0, $$0726$lcssa = 0, $$0726955 = 0, $$0728$lcssa = 0, $$0728954 = 0, $$0730953 = 0;
 var $$0731$lcssa = 0, $$0731942 = 0, $$0735$lcssa = 0, $$0735941 = 0, $$0740929 = 0, $$0741 = 0, $$0741$lcssa = 0, $$0741938 = 0, $$0741943 = 0, $$0743 = 0, $$0743$lcssa = 0, $$0743939 = 0, $$0743944 = 0, $$0745$lcssa = 0, $$0745940 = 0, $$0747$lcssa = 0, $$0747908 = 0, $$0749900 = 0, $$0750 = 0, $$0750$lcssa = 0;
 var $$0750905 = 0, $$0750909 = 0, $$0752 = 0, $$0752$lcssa = 0, $$0752906 = 0, $$0752910 = 0, $$0754$lcssa = 0, $$0754907 = 0, $$0756$lcssa = 0, $$0756973 = 0, $$0758$lcssa = 0, $$0758972 = 0, $$0760971 = 0, $$0761$lcssa = 0, $$0761995 = 0, $$0763$lcssa = 0, $$0763994 = 0, $$0765993 = 0, $$0766 = 0, $$0766$lcssa = 0;
 var $$07661008 = 0, $$07661011 = 0, $$0768983 = 0, $$0771982 = 0, $$0775984 = 0, $$0776985 = 0, $$0777986 = 0, $$0778964 = 0, $$0779965 = 0, $$0780966 = 0, $$0781967 = 0, $$0782$lcssa = 0, $$07821020 = 0, $$0784$lcssa = 0, $$07841019 = 0, $$07861018 = 0, $$0787$lcssa = 0, $$07871051 = 0, $$0789$lcssa = 0, $$07891050 = 0;
 var $$07911049 = 0, $$0792$lcssa = 0, $$07921040 = 0, $$0796$lcssa = 0, $$07961039 = 0, $$08011028 = 0, $$0802 = 0, $$0802$lcssa = 0, $$08021037 = 0, $$08021041 = 0, $$0804$lcssa = 0, $$08041038 = 0, $$0806$lcssa = 0, $$08061009 = 0, $$0832 = 0, $$1 = 0, $$1664 = 0, $$1668 = 0, $$1682 = 0, $$1684 = 0;
 var $$1687868 = 0, $$1689 = 0, $$1691867 = 0, $$1698864 = 0, $$1700863 = 0, $$1702862 = 0, $$1704 = 0, $$1706 = 0, $$17091004 = 0, $$1712838 = 0, $$1716835 = 0, $$1718834 = 0, $$1720833 = 0, $$1722 = 0, $$1724 = 0, $$1727 = 0, $$1729 = 0, $$1732931 = 0, $$1734 = 0, $$1736930 = 0;
 var $$1742928 = 0, $$1744927 = 0, $$1746926 = 0, $$1748901 = 0, $$1751899 = 0, $$1753898 = 0, $$1755897 = 0, $$1757 = 0, $$1759 = 0, $$1762 = 0, $$1764 = 0, $$17671002 = 0, $$1770 = 0, $$1772 = 0, $$1783 = 0, $$1785 = 0, $$1788 = 0, $$1790 = 0, $$17931030 = 0, $$1795 = 0;
 var $$17971029 = 0, $$18031027 = 0, $$18051026 = 0, $$18071001 = 0, $$2671 = 0, $$2692 = 0, $$2737 = 0, $$2798 = 0, $$3 = 0, $$3774 = 0, $$4673 = 0, $$4694 = 0, $$4739 = 0, $$4800 = 0, $$5 = 0, $$6675 = 0, $$7 = 0, $$pn = 0, $$pn1073 = 0, $$pn1074 = 0;
 var $$pn1075 = 0, $$pn1076 = 0, $$pn1077 = 0, $$pn1078 = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0;
 var $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $exitcond = 0, $exitcond1110 = 0, $exitcond1113 = 0, $exitcond1114 = 0, $exitcond1118 = 0, $exitcond1119 = 0, $exitcond1120 = 0, $exitcond1124 = 0, $exitcond1125 = 0, $exitcond1129 = 0, $exitcond1130 = 0, $exitcond1131 = 0, $exitcond1132 = 0, $exitcond1133 = 0, $exitcond1134 = 0, $exitcond1137 = 0, $exitcond1138 = 0, $exitcond1141 = 0;
 var $exitcond1142 = 0, $exitcond1143 = 0, $exitcond1144 = 0, $or$cond = 0, $or$cond1079 = 0, $or$cond822 = 0, $or$cond823 = 0, $scevgep = 0, $scevgep1111 = 0, $scevgep1112 = 0, $scevgep1115 = 0, $scevgep1116 = 0, $scevgep1117 = 0, $scevgep1121 = 0, $scevgep1122 = 0, $scevgep1123 = 0, $scevgep1126 = 0, $scevgep1127 = 0, $scevgep1128 = 0, $scevgep1135 = 0;
 var $scevgep1136 = 0, $scevgep1139 = 0, $scevgep1140 = 0, $spec$select = 0, $spec$select824 = 0, $spec$select825 = 0, $spec$select826 = 0, $spec$select827 = 0, $spec$select828 = 0, $spec$select829 = 0, $spec$select830 = 0, $spec$select831 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 434|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = ((($1)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 621|0);
 $7 = HEAP8[$6>>0]|0;
 $8 = $7&255;
 $9 = ((($1)) + 11|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10&255;
 $12 = (($11) + 7)|0;
 $13 = $12 >>> 3;
 $14 = ((($0)) + 380|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ((($0)) + 384|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $3&255;
 $19 = $18 & 8;
 $20 = ($19|0)==(0);
 $21 = ($3<<24>>24)==(8);
 $or$cond = $21 | $20;
 if ($or$cond) {
  $$0669 = 2147483647;
 } else {
  $22 = ($5|0)==(0);
  if ($22) {
   $$0677$lcssa = 0;
  } else {
   $$06771067 = 0;$$06801066 = 0;$$pn1078 = $17;
   while(1) {
    $$06761068 = ((($$pn1078)) + 1|0);
    $23 = HEAP8[$$06761068>>0]|0;
    $24 = $23&255;
    $25 = ($23<<24>>24)>(-1);
    $26 = (256 - ($24))|0;
    $27 = $25 ? $24 : $26;
    $28 = (($27) + ($$06771067))|0;
    $29 = (($$06801066) + 1)|0;
    $exitcond1144 = ($29|0)==($5|0);
    if ($exitcond1144) {
     $$0677$lcssa = $28;
     break;
    } else {
     $$06771067 = $28;$$06801066 = $29;$$pn1078 = $$06761068;
    }
   }
  }
  $30 = ((($0)) + 620|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = ($31<<24>>24)==(2);
  if ($32) {
   $33 = $$0677$lcssa & 65535;
   $34 = $$0677$lcssa >>> 10;
   $35 = $34 & 4194240;
   $36 = ($7<<24>>24)==(0);
   if ($36) {
    $$0703$lcssa = $35;$$0705$lcssa = $33;
   } else {
    $37 = ((($0)) + 624|0);
    $38 = HEAP32[$37>>2]|0;
    $39 = ((($0)) + 628|0);
    $$07031059 = $35;$$07051058 = $33;$$07071057 = 0;
    while(1) {
     $40 = (($38) + ($$07071057)|0);
     $41 = HEAP8[$40>>0]|0;
     $42 = ($41<<24>>24)==(0);
     if ($42) {
      $43 = HEAP32[$39>>2]|0;
      $44 = (($43) + ($$07071057<<1)|0);
      $45 = HEAP16[$44>>1]|0;
      $46 = $45&65535;
      $47 = Math_imul($$07051058, $46)|0;
      $48 = $47 >>> 8;
      $49 = Math_imul($$07031059, $46)|0;
      $50 = $49 >>> 8;
      $$1704 = $50;$$1706 = $48;
     } else {
      $$1704 = $$07031059;$$1706 = $$07051058;
     }
     $51 = (($$07071057) + 1)|0;
     $exitcond1143 = ($51|0)==($8|0);
     if ($exitcond1143) {
      $$0703$lcssa = $$1704;$$0705$lcssa = $$1706;
      break;
     } else {
      $$07031059 = $$1704;$$07051058 = $$1706;$$07071057 = $51;
     }
    }
   }
   $52 = ((($0)) + 636|0);
   $53 = HEAP32[$52>>2]|0;
   $54 = HEAP16[$53>>1]|0;
   $55 = $54&65535;
   $56 = Math_imul($$0703$lcssa, $55)|0;
   $57 = ($56>>>0)>(33553927);
   $58 = $56 >>> 3;
   $59 = Math_imul($$0705$lcssa, $55)|0;
   $60 = $59 >>> 3;
   $61 = $58 << 10;
   $62 = (($61) + ($60))|0;
   $spec$select = $57 ? 2147483647 : $62;
   $$0669 = $spec$select;
  } else {
   $$0669 = $$0677$lcssa;
  }
 }
 $63 = ($3<<24>>24)==(16);
 if ($63) {
  $64 = ((($17)) + 1|0);
  $65 = ((($0)) + 388|0);
  $66 = HEAP32[$65>>2]|0;
  $$07661008 = ((($66)) + 1|0);
  $67 = ($13|0)==(0);
  if ($67) {
   $$0708$lcssa = $64;$$0766$lcssa = $$07661008;$$0806$lcssa = 0;
  } else {
   $68 = (($13) + 1)|0;
   $scevgep1135 = (($17) + ($68)|0);
   $$07081010 = $64;$$07661011 = $$07661008;$$08061009 = 0;
   while(1) {
    $69 = HEAP8[$$07081010>>0]|0;
    HEAP8[$$07661011>>0] = $69;
    $70 = (($$08061009) + 1)|0;
    $71 = ((($$07081010)) + 1|0);
    $$0766 = ((($$07661011)) + 1|0);
    $exitcond1137 = ($70|0)==($13|0);
    if ($exitcond1137) {
     break;
    } else {
     $$07081010 = $71;$$07661011 = $$0766;$$08061009 = $70;
    }
   }
   $scevgep1136 = (($66) + ($68)|0);
   $$0708$lcssa = $scevgep1135;$$0766$lcssa = $scevgep1136;$$0806$lcssa = $13;
  }
  $72 = ($$0806$lcssa>>>0)<($5>>>0);
  if ($72) {
   $$07101003 = $64;$$17091004 = $$0708$lcssa;$$17671002 = $$0766$lcssa;$$18071001 = $$0806$lcssa;
   while(1) {
    $73 = HEAP8[$$17091004>>0]|0;
    $74 = $73&255;
    $75 = HEAP8[$$07101003>>0]|0;
    $76 = $75&255;
    $77 = (($74) - ($76))|0;
    $78 = $77&255;
    HEAP8[$$17671002>>0] = $78;
    $79 = (($$18071001) + 1)|0;
    $80 = ((($$17091004)) + 1|0);
    $81 = ((($$07101003)) + 1|0);
    $82 = ((($$17671002)) + 1|0);
    $exitcond1134 = ($79|0)==($5|0);
    if ($exitcond1134) {
     break;
    } else {
     $$07101003 = $81;$$17091004 = $80;$$17671002 = $82;$$18071001 = $79;
    }
   }
  }
  $83 = HEAP32[$65>>2]|0;
  $$1668 = $83;$$2671 = $$0669;
 } else {
  $84 = $18 & 16;
  $85 = ($84|0)==(0);
  if ($85) {
   $$1668 = $17;$$2671 = $$0669;
  } else {
   $86 = ((($0)) + 620|0);
   $87 = HEAP8[$86>>0]|0;
   $88 = ($87<<24>>24)==(2);
   if ($88) {
    $89 = $$0669 & 65535;
    $90 = $$0669 >>> 10;
    $91 = $90 & 4194240;
    $92 = ($7<<24>>24)==(0);
    if ($92) {
     $$0787$lcssa = $89;$$0789$lcssa = $91;
    } else {
     $93 = ((($0)) + 624|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = ((($0)) + 632|0);
     $$07871051 = $89;$$07891050 = $91;$$07911049 = 0;
     while(1) {
      $96 = (($94) + ($$07911049)|0);
      $97 = HEAP8[$96>>0]|0;
      $98 = ($97<<24>>24)==(1);
      if ($98) {
       $99 = HEAP32[$95>>2]|0;
       $100 = (($99) + ($$07911049<<1)|0);
       $101 = HEAP16[$100>>1]|0;
       $102 = $101&65535;
       $103 = Math_imul($$07871051, $102)|0;
       $104 = $103 >>> 8;
       $105 = Math_imul($$07891050, $102)|0;
       $106 = $105 >>> 8;
       $$1788 = $104;$$1790 = $106;
      } else {
       $$1788 = $$07871051;$$1790 = $$07891050;
      }
      $107 = (($$07911049) + 1)|0;
      $exitcond1142 = ($107|0)==($8|0);
      if ($exitcond1142) {
       $$0787$lcssa = $$1788;$$0789$lcssa = $$1790;
       break;
      } else {
       $$07871051 = $$1788;$$07891050 = $$1790;$$07911049 = $107;
      }
     }
    }
    $108 = ((($0)) + 640|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ((($109)) + 2|0);
    $111 = HEAP16[$110>>1]|0;
    $112 = $111&65535;
    $113 = Math_imul($$0789$lcssa, $112)|0;
    $114 = ($113>>>0)>(33553927);
    $115 = $113 >>> 3;
    $116 = Math_imul($$0787$lcssa, $112)|0;
    $117 = $116 >>> 3;
    $118 = $115 << 10;
    $119 = (($118) + ($117))|0;
    $spec$select824 = $114 ? 2147483647 : $119;
    $$1795 = $spec$select824;
   } else {
    $$1795 = $$0669;
   }
   $120 = ((($17)) + 1|0);
   $121 = ((($0)) + 388|0);
   $122 = HEAP32[$121>>2]|0;
   $$08021037 = ((($122)) + 1|0);
   $123 = ($13|0)==(0);
   if ($123) {
    $$0792$lcssa = 0;$$0796$lcssa = 0;$$0802$lcssa = $$08021037;$$0804$lcssa = $120;
   } else {
    $124 = (($13) + 1)|0;
    $scevgep1139 = (($17) + ($124)|0);
    $$07921040 = 0;$$07961039 = 0;$$08021041 = $$08021037;$$08041038 = $120;
    while(1) {
     $125 = HEAP8[$$08041038>>0]|0;
     HEAP8[$$08021041>>0] = $125;
     $126 = $125&255;
     $127 = ($125<<24>>24)>(-1);
     $128 = (256 - ($126))|0;
     $129 = $127 ? $126 : $128;
     $130 = (($129) + ($$07961039))|0;
     $131 = (($$07921040) + 1)|0;
     $132 = ((($$08041038)) + 1|0);
     $$0802 = ((($$08021041)) + 1|0);
     $exitcond1141 = ($131|0)==($13|0);
     if ($exitcond1141) {
      break;
     } else {
      $$07921040 = $131;$$07961039 = $130;$$08021041 = $$0802;$$08041038 = $132;
     }
    }
    $scevgep1140 = (($122) + ($124)|0);
    $$0792$lcssa = $13;$$0796$lcssa = $130;$$0802$lcssa = $scevgep1140;$$0804$lcssa = $scevgep1139;
   }
   $133 = ($$0792$lcssa>>>0)<($5>>>0);
   L50: do {
    if ($133) {
     $$08011028 = $120;$$17931030 = $$0792$lcssa;$$17971029 = $$0796$lcssa;$$18031027 = $$0802$lcssa;$$18051026 = $$0804$lcssa;
     while(1) {
      $134 = HEAP8[$$18051026>>0]|0;
      $135 = $134&255;
      $136 = HEAP8[$$08011028>>0]|0;
      $137 = $136&255;
      $138 = (($135) - ($137))|0;
      $139 = $138&255;
      HEAP8[$$18031027>>0] = $139;
      $140 = $138 & 255;
      $141 = ($140>>>0)<(128);
      $142 = (256 - ($140))|0;
      $143 = $141 ? $140 : $142;
      $144 = (($143) + ($$17971029))|0;
      $145 = ($144>>>0)>($$1795>>>0);
      if ($145) {
       $$2798 = $144;
       break L50;
      }
      $146 = (($$17931030) + 1)|0;
      $147 = ((($$18051026)) + 1|0);
      $148 = ((($$08011028)) + 1|0);
      $149 = ((($$18031027)) + 1|0);
      $150 = ($146>>>0)<($5>>>0);
      if ($150) {
       $$08011028 = $148;$$17931030 = $146;$$17971029 = $144;$$18031027 = $149;$$18051026 = $147;
      } else {
       $$2798 = $144;
       break;
      }
     }
    } else {
     $$2798 = $$0796$lcssa;
    }
   } while(0);
   $151 = HEAP8[$86>>0]|0;
   $152 = ($151<<24>>24)==(2);
   if ($152) {
    $153 = $$2798 & 65535;
    $154 = $$2798 >>> 10;
    $155 = $154 & 4194240;
    $156 = ($7<<24>>24)==(0);
    if ($156) {
     $$0782$lcssa = $153;$$0784$lcssa = $155;
    } else {
     $157 = ((($0)) + 624|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ((($0)) + 632|0);
     $$07821020 = $153;$$07841019 = $155;$$07861018 = 0;
     while(1) {
      $160 = (($158) + ($$07861018)|0);
      $161 = HEAP8[$160>>0]|0;
      $162 = ($161<<24>>24)==(1);
      if ($162) {
       $163 = HEAP32[$159>>2]|0;
       $164 = (($163) + ($$07861018<<1)|0);
       $165 = HEAP16[$164>>1]|0;
       $166 = $165&65535;
       $167 = Math_imul($$07821020, $166)|0;
       $168 = $167 >>> 8;
       $169 = Math_imul($$07841019, $166)|0;
       $170 = $169 >>> 8;
       $$1783 = $168;$$1785 = $170;
      } else {
       $$1783 = $$07821020;$$1785 = $$07841019;
      }
      $171 = (($$07861018) + 1)|0;
      $exitcond1138 = ($171|0)==($8|0);
      if ($exitcond1138) {
       $$0782$lcssa = $$1783;$$0784$lcssa = $$1785;
       break;
      } else {
       $$07821020 = $$1783;$$07841019 = $$1785;$$07861018 = $171;
      }
     }
    }
    $172 = ((($0)) + 640|0);
    $173 = HEAP32[$172>>2]|0;
    $174 = ((($173)) + 2|0);
    $175 = HEAP16[$174>>1]|0;
    $176 = $175&65535;
    $177 = Math_imul($$0784$lcssa, $176)|0;
    $178 = ($177>>>0)>(33553927);
    $179 = $177 >>> 3;
    $180 = Math_imul($$0782$lcssa, $176)|0;
    $181 = $180 >>> 3;
    $182 = $179 << 10;
    $183 = (($182) + ($181))|0;
    $spec$select825 = $178 ? 2147483647 : $183;
    $$4800 = $spec$select825;
   } else {
    $$4800 = $$2798;
   }
   $184 = ($$4800>>>0)<($$0669>>>0);
   if ($184) {
    $185 = HEAP32[$121>>2]|0;
    $$1668 = $185;$$2671 = $$4800;
   } else {
    $$1668 = $17;$$2671 = $$0669;
   }
  }
 }
 $186 = ($3<<24>>24)==(32);
 if ($186) {
  $187 = ((($0)) + 392|0);
  $188 = ($5|0)==(0);
  if (!($188)) {
   $189 = HEAP32[$187>>2]|0;
   $$0778964 = 0;$$pn1075 = $17;$$pn1076 = $189;$$pn1077 = $15;
   while(1) {
    $$0779965 = ((($$pn1077)) + 1|0);
    $$0780966 = ((($$pn1076)) + 1|0);
    $$0781967 = ((($$pn1075)) + 1|0);
    $190 = HEAP8[$$0781967>>0]|0;
    $191 = $190&255;
    $192 = HEAP8[$$0779965>>0]|0;
    $193 = $192&255;
    $194 = (($191) - ($193))|0;
    $195 = $194&255;
    HEAP8[$$0780966>>0] = $195;
    $196 = (($$0778964) + 1)|0;
    $exitcond1131 = ($196|0)==($5|0);
    if ($exitcond1131) {
     break;
    } else {
     $$0778964 = $196;$$pn1075 = $$0781967;$$pn1076 = $$0780966;$$pn1077 = $$0779965;
    }
   }
  }
  $197 = HEAP32[$187>>2]|0;
  $$3 = $197;$$4673 = $$2671;
 } else {
  $198 = $18 & 32;
  $199 = ($198|0)==(0);
  if ($199) {
   $$3 = $$1668;$$4673 = $$2671;
  } else {
   $200 = ((($0)) + 620|0);
   $201 = HEAP8[$200>>0]|0;
   $202 = ($201<<24>>24)==(2);
   if ($202) {
    $203 = $$2671 & 65535;
    $204 = $$2671 >>> 10;
    $205 = $204 & 4194240;
    $206 = ($7<<24>>24)==(0);
    if ($206) {
     $$0761$lcssa = $203;$$0763$lcssa = $205;
    } else {
     $207 = ((($0)) + 624|0);
     $208 = HEAP32[$207>>2]|0;
     $209 = ((($0)) + 632|0);
     $$0761995 = $203;$$0763994 = $205;$$0765993 = 0;
     while(1) {
      $210 = (($208) + ($$0765993)|0);
      $211 = HEAP8[$210>>0]|0;
      $212 = ($211<<24>>24)==(2);
      if ($212) {
       $213 = HEAP32[$209>>2]|0;
       $214 = (($213) + ($$0765993<<1)|0);
       $215 = HEAP16[$214>>1]|0;
       $216 = $215&65535;
       $217 = Math_imul($$0761995, $216)|0;
       $218 = $217 >>> 8;
       $219 = Math_imul($$0763994, $216)|0;
       $220 = $219 >>> 8;
       $$1762 = $218;$$1764 = $220;
      } else {
       $$1762 = $$0761995;$$1764 = $$0763994;
      }
      $221 = (($$0765993) + 1)|0;
      $exitcond1133 = ($221|0)==($8|0);
      if ($exitcond1133) {
       $$0761$lcssa = $$1762;$$0763$lcssa = $$1764;
       break;
      } else {
       $$0761995 = $$1762;$$0763994 = $$1764;$$0765993 = $221;
      }
     }
    }
    $222 = ((($0)) + 640|0);
    $223 = HEAP32[$222>>2]|0;
    $224 = ((($223)) + 4|0);
    $225 = HEAP16[$224>>1]|0;
    $226 = $225&65535;
    $227 = Math_imul($$0763$lcssa, $226)|0;
    $228 = ($227>>>0)>(33553927);
    $229 = $227 >>> 3;
    $230 = Math_imul($$0761$lcssa, $226)|0;
    $231 = $230 >>> 3;
    $232 = $229 << 10;
    $233 = (($232) + ($231))|0;
    $spec$select826 = $228 ? 2147483647 : $233;
    $$1770 = $spec$select826;
   } else {
    $$1770 = $$2671;
   }
   $234 = ((($0)) + 392|0);
   $235 = ($5|0)==(0);
   if ($235) {
    $$1772 = 0;$251 = $201;
   } else {
    $236 = HEAP32[$234>>2]|0;
    $$0768983 = 0;$$0771982 = 0;$$pn = $17;$$pn1073 = $236;$$pn1074 = $15;
    while(1) {
     $$0775984 = ((($$pn1074)) + 1|0);
     $$0776985 = ((($$pn1073)) + 1|0);
     $$0777986 = ((($$pn)) + 1|0);
     $237 = HEAP8[$$0777986>>0]|0;
     $238 = $237&255;
     $239 = HEAP8[$$0775984>>0]|0;
     $240 = $239&255;
     $241 = (($238) - ($240))|0;
     $242 = $241&255;
     HEAP8[$$0776985>>0] = $242;
     $243 = $241 & 255;
     $244 = ($243>>>0)<(128);
     $245 = (256 - ($243))|0;
     $246 = $244 ? $243 : $245;
     $247 = (($246) + ($$0771982))|0;
     $248 = ($247>>>0)<=($$1770>>>0);
     $249 = (($$0768983) + 1)|0;
     $250 = ($249>>>0)<($5>>>0);
     $or$cond1079 = $248 & $250;
     if ($or$cond1079) {
      $$0768983 = $249;$$0771982 = $247;$$pn = $$0777986;$$pn1073 = $$0776985;$$pn1074 = $$0775984;
     } else {
      break;
     }
    }
    $$pre = HEAP8[$200>>0]|0;
    $$1772 = $247;$251 = $$pre;
   }
   $252 = ($251<<24>>24)==(2);
   if ($252) {
    $253 = $$1772 & 65535;
    $254 = $$1772 >>> 10;
    $255 = $254 & 4194240;
    $256 = ($7<<24>>24)==(0);
    if ($256) {
     $$0756$lcssa = $253;$$0758$lcssa = $255;
    } else {
     $257 = ((($0)) + 624|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = ((($0)) + 628|0);
     $$0756973 = $253;$$0758972 = $255;$$0760971 = 0;
     while(1) {
      $260 = (($258) + ($$0760971)|0);
      $261 = HEAP8[$260>>0]|0;
      $262 = ($261<<24>>24)==(2);
      if ($262) {
       $263 = HEAP32[$259>>2]|0;
       $264 = (($263) + ($$0760971<<1)|0);
       $265 = HEAP16[$264>>1]|0;
       $266 = $265&65535;
       $267 = Math_imul($$0756973, $266)|0;
       $268 = $267 >>> 8;
       $269 = Math_imul($$0758972, $266)|0;
       $270 = $269 >>> 8;
       $$1757 = $268;$$1759 = $270;
      } else {
       $$1757 = $$0756973;$$1759 = $$0758972;
      }
      $271 = (($$0760971) + 1)|0;
      $exitcond1132 = ($271|0)==($8|0);
      if ($exitcond1132) {
       $$0756$lcssa = $$1757;$$0758$lcssa = $$1759;
       break;
      } else {
       $$0756973 = $$1757;$$0758972 = $$1759;$$0760971 = $271;
      }
     }
    }
    $272 = ((($0)) + 636|0);
    $273 = HEAP32[$272>>2]|0;
    $274 = ((($273)) + 4|0);
    $275 = HEAP16[$274>>1]|0;
    $276 = $275&65535;
    $277 = Math_imul($$0758$lcssa, $276)|0;
    $278 = ($277>>>0)>(33553927);
    $279 = $277 >>> 3;
    $280 = Math_imul($$0756$lcssa, $276)|0;
    $281 = $280 >>> 3;
    $282 = $279 << 10;
    $283 = (($282) + ($281))|0;
    $spec$select827 = $278 ? 2147483647 : $283;
    $$3774 = $spec$select827;
   } else {
    $$3774 = $$1772;
   }
   $284 = ($$3774>>>0)<($$2671>>>0);
   if ($284) {
    $285 = HEAP32[$234>>2]|0;
    $$3 = $285;$$4673 = $$3774;
   } else {
    $$3 = $$1668;$$4673 = $$2671;
   }
  }
 }
 $286 = ($3<<24>>24)==(64);
 if ($286) {
  $287 = ((($17)) + 1|0);
  $288 = ((($0)) + 396|0);
  $289 = HEAP32[$288>>2]|0;
  $$0750905 = ((($15)) + 1|0);
  $$0752906 = ((($289)) + 1|0);
  $290 = ($13|0)==(0);
  if ($290) {
   $$0747$lcssa = 0;$$0750$lcssa = $$0750905;$$0752$lcssa = $$0752906;$$0754$lcssa = $287;
  } else {
   $291 = (($13) + 1)|0;
   $scevgep1122 = (($15) + ($291)|0);
   $$0747908 = 0;$$0750909 = $$0750905;$$0752910 = $$0752906;$$0754907 = $287;
   while(1) {
    $292 = ((($$0754907)) + 1|0);
    $293 = HEAP8[$$0754907>>0]|0;
    $294 = $293&255;
    $295 = HEAP8[$$0750909>>0]|0;
    $296 = ($295&255) >>> 1;
    $297 = $296&255;
    $298 = (($294) - ($297))|0;
    $299 = $298&255;
    HEAP8[$$0752910>>0] = $299;
    $300 = (($$0747908) + 1)|0;
    $$0750 = ((($$0750909)) + 1|0);
    $$0752 = ((($$0752910)) + 1|0);
    $exitcond1124 = ($300|0)==($13|0);
    if ($exitcond1124) {
     break;
    } else {
     $$0747908 = $300;$$0750909 = $$0750;$$0752910 = $$0752;$$0754907 = $292;
    }
   }
   $scevgep1121 = (($17) + ($291)|0);
   $scevgep1123 = (($289) + ($291)|0);
   $$0747$lcssa = $13;$$0750$lcssa = $scevgep1122;$$0752$lcssa = $scevgep1123;$$0754$lcssa = $scevgep1121;
  }
  $301 = ($$0747$lcssa>>>0)<($5>>>0);
  if ($301) {
   $$0749900 = $287;$$1748901 = $$0747$lcssa;$$1751899 = $$0750$lcssa;$$1753898 = $$0752$lcssa;$$1755897 = $$0754$lcssa;
   while(1) {
    $302 = ((($$1755897)) + 1|0);
    $303 = HEAP8[$$1755897>>0]|0;
    $304 = $303&255;
    $305 = ((($$1751899)) + 1|0);
    $306 = HEAP8[$$1751899>>0]|0;
    $307 = $306&255;
    $308 = ((($$0749900)) + 1|0);
    $309 = HEAP8[$$0749900>>0]|0;
    $310 = $309&255;
    $311 = (($310) + ($307))|0;
    $312 = $311 >>> 1;
    $313 = (($304) - ($312))|0;
    $314 = $313&255;
    $315 = ((($$1753898)) + 1|0);
    HEAP8[$$1753898>>0] = $314;
    $316 = (($$1748901) + 1)|0;
    $exitcond1120 = ($316|0)==($5|0);
    if ($exitcond1120) {
     break;
    } else {
     $$0749900 = $308;$$1748901 = $316;$$1751899 = $305;$$1753898 = $315;$$1755897 = $302;
    }
   }
  }
  $317 = HEAP32[$288>>2]|0;
  $$5 = $317;$$6675 = $$4673;
 } else {
  $318 = $18 & 64;
  $319 = ($318|0)==(0);
  if ($319) {
   $$5 = $$3;$$6675 = $$4673;
  } else {
   $320 = ((($0)) + 620|0);
   $321 = HEAP8[$320>>0]|0;
   $322 = ($321<<24>>24)==(2);
   if ($322) {
    $323 = $$4673 & 65535;
    $324 = $$4673 >>> 10;
    $325 = $324 & 4194240;
    $326 = ($7<<24>>24)==(0);
    if ($326) {
     $$0726$lcssa = $323;$$0728$lcssa = $325;
    } else {
     $327 = ((($0)) + 624|0);
     $328 = HEAP32[$327>>2]|0;
     $329 = ((($0)) + 632|0);
     $$0726955 = $323;$$0728954 = $325;$$0730953 = 0;
     while(1) {
      $330 = (($328) + ($$0730953)|0);
      $331 = HEAP8[$330>>0]|0;
      $332 = ($331<<24>>24)==(3);
      if ($332) {
       $333 = HEAP32[$329>>2]|0;
       $334 = (($333) + ($$0730953<<1)|0);
       $335 = HEAP16[$334>>1]|0;
       $336 = $335&65535;
       $337 = Math_imul($$0726955, $336)|0;
       $338 = $337 >>> 8;
       $339 = Math_imul($$0728954, $336)|0;
       $340 = $339 >>> 8;
       $$1727 = $338;$$1729 = $340;
      } else {
       $$1727 = $$0726955;$$1729 = $$0728954;
      }
      $341 = (($$0730953) + 1)|0;
      $exitcond1130 = ($341|0)==($8|0);
      if ($exitcond1130) {
       $$0726$lcssa = $$1727;$$0728$lcssa = $$1729;
       break;
      } else {
       $$0726955 = $$1727;$$0728954 = $$1729;$$0730953 = $341;
      }
     }
    }
    $342 = ((($0)) + 640|0);
    $343 = HEAP32[$342>>2]|0;
    $344 = ((($343)) + 6|0);
    $345 = HEAP16[$344>>1]|0;
    $346 = $345&65535;
    $347 = Math_imul($$0728$lcssa, $346)|0;
    $348 = ($347>>>0)>(33553927);
    $349 = $347 >>> 3;
    $350 = Math_imul($$0726$lcssa, $346)|0;
    $351 = $350 >>> 3;
    $352 = $349 << 10;
    $353 = (($352) + ($351))|0;
    $spec$select828 = $348 ? 2147483647 : $353;
    $$1734 = $spec$select828;
   } else {
    $$1734 = $$4673;
   }
   $354 = ((($17)) + 1|0);
   $355 = ((($0)) + 396|0);
   $356 = HEAP32[$355>>2]|0;
   $$0741938 = ((($15)) + 1|0);
   $$0743939 = ((($356)) + 1|0);
   $357 = ($13|0)==(0);
   if ($357) {
    $$0731$lcssa = 0;$$0735$lcssa = 0;$$0741$lcssa = $$0741938;$$0743$lcssa = $$0743939;$$0745$lcssa = $354;
   } else {
    $358 = (($13) + 1)|0;
    $scevgep1127 = (($15) + ($358)|0);
    $$0731942 = 0;$$0735941 = 0;$$0741943 = $$0741938;$$0743944 = $$0743939;$$0745940 = $354;
    while(1) {
     $359 = ((($$0745940)) + 1|0);
     $360 = HEAP8[$$0745940>>0]|0;
     $361 = $360&255;
     $362 = HEAP8[$$0741943>>0]|0;
     $363 = ($362&255) >>> 1;
     $364 = $363&255;
     $365 = (($361) - ($364))|0;
     $366 = $365&255;
     HEAP8[$$0743944>>0] = $366;
     $367 = $365 & 255;
     $368 = ($367>>>0)<(128);
     $369 = (256 - ($367))|0;
     $370 = $368 ? $367 : $369;
     $371 = (($370) + ($$0735941))|0;
     $372 = (($$0731942) + 1)|0;
     $$0741 = ((($$0741943)) + 1|0);
     $$0743 = ((($$0743944)) + 1|0);
     $exitcond1129 = ($372|0)==($13|0);
     if ($exitcond1129) {
      break;
     } else {
      $$0731942 = $372;$$0735941 = $371;$$0741943 = $$0741;$$0743944 = $$0743;$$0745940 = $359;
     }
    }
    $scevgep1126 = (($17) + ($358)|0);
    $scevgep1128 = (($356) + ($358)|0);
    $$0731$lcssa = $13;$$0735$lcssa = $371;$$0741$lcssa = $scevgep1127;$$0743$lcssa = $scevgep1128;$$0745$lcssa = $scevgep1126;
   }
   $373 = ($$0731$lcssa>>>0)<($5>>>0);
   L140: do {
    if ($373) {
     $$0740929 = $354;$$1732931 = $$0731$lcssa;$$1736930 = $$0735$lcssa;$$1742928 = $$0741$lcssa;$$1744927 = $$0743$lcssa;$$1746926 = $$0745$lcssa;
     while(1) {
      $374 = HEAP8[$$1746926>>0]|0;
      $375 = $374&255;
      $376 = HEAP8[$$1742928>>0]|0;
      $377 = $376&255;
      $378 = HEAP8[$$0740929>>0]|0;
      $379 = $378&255;
      $380 = (($379) + ($377))|0;
      $381 = $380 >>> 1;
      $382 = (($375) - ($381))|0;
      $383 = $382&255;
      HEAP8[$$1744927>>0] = $383;
      $384 = $382 & 255;
      $385 = ($384>>>0)<(128);
      $386 = (256 - ($384))|0;
      $387 = $385 ? $384 : $386;
      $388 = (($387) + ($$1736930))|0;
      $389 = ($388>>>0)>($$1734>>>0);
      if ($389) {
       $$2737 = $388;
       break L140;
      }
      $390 = ((($$1744927)) + 1|0);
      $391 = ((($$0740929)) + 1|0);
      $392 = ((($$1742928)) + 1|0);
      $393 = ((($$1746926)) + 1|0);
      $394 = (($$1732931) + 1)|0;
      $395 = ($394>>>0)<($5>>>0);
      if ($395) {
       $$0740929 = $391;$$1732931 = $394;$$1736930 = $388;$$1742928 = $392;$$1744927 = $390;$$1746926 = $393;
      } else {
       $$2737 = $388;
       break;
      }
     }
    } else {
     $$2737 = $$0735$lcssa;
    }
   } while(0);
   $396 = HEAP8[$320>>0]|0;
   $397 = ($396<<24>>24)==(2);
   if ($397) {
    $398 = $$2737 & 65535;
    $399 = $$2737 >>> 10;
    $400 = $399 & 4194240;
    $401 = ($7<<24>>24)==(0);
    if ($401) {
     $$0721$lcssa = $398;$$0723$lcssa = $400;
    } else {
     $402 = ((($0)) + 624|0);
     $403 = HEAP32[$402>>2]|0;
     $404 = ((($0)) + 628|0);
     $$0721920 = $398;$$0723919 = $400;$$0725918 = 0;
     while(1) {
      $405 = (($403) + ($$0725918)|0);
      $406 = HEAP8[$405>>0]|0;
      $407 = ($406<<24>>24)==(0);
      if ($407) {
       $408 = HEAP32[$404>>2]|0;
       $409 = (($408) + ($$0725918<<1)|0);
       $410 = HEAP16[$409>>1]|0;
       $411 = $410&65535;
       $412 = Math_imul($$0721920, $411)|0;
       $413 = $412 >>> 8;
       $414 = Math_imul($$0723919, $411)|0;
       $415 = $414 >>> 8;
       $$1722 = $413;$$1724 = $415;
      } else {
       $$1722 = $$0721920;$$1724 = $$0723919;
      }
      $416 = (($$0725918) + 1)|0;
      $exitcond1125 = ($416|0)==($8|0);
      if ($exitcond1125) {
       $$0721$lcssa = $$1722;$$0723$lcssa = $$1724;
       break;
      } else {
       $$0721920 = $$1722;$$0723919 = $$1724;$$0725918 = $416;
      }
     }
    }
    $417 = ((($0)) + 636|0);
    $418 = HEAP32[$417>>2]|0;
    $419 = ((($418)) + 6|0);
    $420 = HEAP16[$419>>1]|0;
    $421 = $420&65535;
    $422 = Math_imul($$0723$lcssa, $421)|0;
    $423 = ($422>>>0)>(33553927);
    $424 = $422 >>> 3;
    $425 = Math_imul($$0721$lcssa, $421)|0;
    $426 = $425 >>> 3;
    $427 = $424 << 10;
    $428 = (($427) + ($426))|0;
    $spec$select829 = $423 ? 2147483647 : $428;
    $$4739 = $spec$select829;
   } else {
    $$4739 = $$2737;
   }
   $429 = ($$4739>>>0)<($$4673>>>0);
   if ($429) {
    $430 = HEAP32[$355>>2]|0;
    $$5 = $430;$$6675 = $$4739;
   } else {
    $$5 = $$3;$$6675 = $$4673;
   }
  }
 }
 $431 = ($3<<24>>24)==(-128);
 if ($431) {
  $432 = ((($17)) + 1|0);
  $433 = ((($0)) + 400|0);
  $434 = HEAP32[$433>>2]|0;
  $435 = ((($15)) + 1|0);
  $$0717842 = ((($434)) + 1|0);
  $436 = ($13|0)==(0);
  if ($436) {
   $$0711$lcssa = 0;$$0715$lcssa = $435;$$0717$lcssa = $$0717842;$$0719$lcssa = $432;
  } else {
   $437 = (($13) + 1)|0;
   $scevgep1111 = (($15) + ($437)|0);
   $$0711845 = 0;$$0715844 = $435;$$0717846 = $$0717842;$$0719843 = $432;
   while(1) {
    $438 = ((($$0719843)) + 1|0);
    $439 = HEAP8[$$0719843>>0]|0;
    $440 = $439&255;
    $441 = ((($$0715844)) + 1|0);
    $442 = HEAP8[$$0715844>>0]|0;
    $443 = $442&255;
    $444 = (($440) - ($443))|0;
    $445 = $444&255;
    HEAP8[$$0717846>>0] = $445;
    $446 = (($$0711845) + 1)|0;
    $$0717 = ((($$0717846)) + 1|0);
    $exitcond1113 = ($446|0)==($13|0);
    if ($exitcond1113) {
     break;
    } else {
     $$0711845 = $446;$$0715844 = $441;$$0717846 = $$0717;$$0719843 = $438;
    }
   }
   $scevgep = (($17) + ($437)|0);
   $scevgep1112 = (($434) + ($437)|0);
   $$0711$lcssa = $13;$$0715$lcssa = $scevgep1111;$$0717$lcssa = $scevgep1112;$$0719$lcssa = $scevgep;
  }
  $447 = ($$0711$lcssa>>>0)<($5>>>0);
  if ($447) {
   $$0713837 = $432;$$0714836 = $435;$$1712838 = $$0711$lcssa;$$1716835 = $$0715$lcssa;$$1718834 = $$0717$lcssa;$$1720833 = $$0719$lcssa;
   while(1) {
    $448 = ((($$1716835)) + 1|0);
    $449 = HEAP8[$$1716835>>0]|0;
    $450 = $449&255;
    $451 = ((($$0714836)) + 1|0);
    $452 = HEAP8[$$0714836>>0]|0;
    $453 = $452&255;
    $454 = ((($$0713837)) + 1|0);
    $455 = HEAP8[$$0713837>>0]|0;
    $456 = $455&255;
    $457 = (($450) - ($453))|0;
    $458 = (($456) - ($453))|0;
    $459 = ($457|0)<(0);
    $460 = (0 - ($457))|0;
    $461 = $459 ? $460 : $457;
    $462 = ($458|0)<(0);
    $463 = (0 - ($458))|0;
    $464 = $462 ? $463 : $458;
    $465 = (($458) + ($457))|0;
    $466 = ($465|0)<(0);
    $467 = (0 - ($465))|0;
    $468 = $466 ? $467 : $465;
    $469 = ($461|0)>($464|0);
    $470 = ($461|0)>($468|0);
    $or$cond822 = $469 | $470;
    $471 = ($464|0)>($468|0);
    $472 = $471 ? $453 : $450;
    $473 = $or$cond822 ? $472 : $456;
    $474 = ((($$1720833)) + 1|0);
    $475 = HEAP8[$$1720833>>0]|0;
    $476 = $475&255;
    $477 = (($476) - ($473))|0;
    $478 = $477&255;
    $479 = ((($$1718834)) + 1|0);
    HEAP8[$$1718834>>0] = $478;
    $480 = (($$1712838) + 1)|0;
    $exitcond1110 = ($480|0)==($5|0);
    if ($exitcond1110) {
     break;
    } else {
     $$0713837 = $454;$$0714836 = $451;$$1712838 = $480;$$1716835 = $448;$$1718834 = $479;$$1720833 = $474;
    }
   }
  }
  $481 = HEAP32[$433>>2]|0;
  $$7 = $481;
 } else {
  $482 = $18 & 128;
  $483 = ($482|0)==(0);
  if ($483) {
   $$7 = $$5;
  } else {
   $484 = ((($0)) + 620|0);
   $485 = HEAP8[$484>>0]|0;
   $486 = ($485<<24>>24)==(2);
   if ($486) {
    $487 = $$6675 & 65535;
    $488 = $$6675 >>> 10;
    $489 = $488 & 4194240;
    $490 = ($7<<24>>24)==(0);
    if ($490) {
     $$0681$lcssa = $487;$$0683$lcssa = $489;
    } else {
     $491 = ((($0)) + 624|0);
     $492 = HEAP32[$491>>2]|0;
     $493 = ((($0)) + 632|0);
     $$0681891 = $487;$$0683890 = $489;$$0685889 = 0;
     while(1) {
      $494 = (($492) + ($$0685889)|0);
      $495 = HEAP8[$494>>0]|0;
      $496 = ($495<<24>>24)==(4);
      if ($496) {
       $497 = HEAP32[$493>>2]|0;
       $498 = (($497) + ($$0685889<<1)|0);
       $499 = HEAP16[$498>>1]|0;
       $500 = $499&65535;
       $501 = Math_imul($$0681891, $500)|0;
       $502 = $501 >>> 8;
       $503 = Math_imul($$0683890, $500)|0;
       $504 = $503 >>> 8;
       $$1682 = $502;$$1684 = $504;
      } else {
       $$1682 = $$0681891;$$1684 = $$0683890;
      }
      $505 = (($$0685889) + 1)|0;
      $exitcond1119 = ($505|0)==($8|0);
      if ($exitcond1119) {
       $$0681$lcssa = $$1682;$$0683$lcssa = $$1684;
       break;
      } else {
       $$0681891 = $$1682;$$0683890 = $$1684;$$0685889 = $505;
      }
     }
    }
    $506 = ((($0)) + 640|0);
    $507 = HEAP32[$506>>2]|0;
    $508 = ((($507)) + 8|0);
    $509 = HEAP16[$508>>1]|0;
    $510 = $509&65535;
    $511 = Math_imul($$0683$lcssa, $510)|0;
    $512 = ($511>>>0)>(33553927);
    $513 = $511 >>> 3;
    $514 = Math_imul($$0681$lcssa, $510)|0;
    $515 = $514 >>> 3;
    $516 = $513 << 10;
    $517 = (($516) + ($515))|0;
    $spec$select830 = $512 ? 2147483647 : $517;
    $$1689 = $spec$select830;
   } else {
    $$1689 = $$6675;
   }
   $518 = ((($17)) + 1|0);
   $519 = ((($0)) + 400|0);
   $520 = HEAP32[$519>>2]|0;
   $521 = ((($15)) + 1|0);
   $$0699875 = ((($520)) + 1|0);
   $522 = ($13|0)==(0);
   if ($522) {
    $$0686$lcssa = 0;$$0690$lcssa = 0;$$0697$lcssa = $521;$$0699$lcssa = $$0699875;$$0701$lcssa = $518;
   } else {
    $523 = (($13) + 1)|0;
    $scevgep1116 = (($15) + ($523)|0);
    $$0686879 = 0;$$0690878 = 0;$$0697877 = $521;$$0699880 = $$0699875;$$0701876 = $518;
    while(1) {
     $524 = ((($$0701876)) + 1|0);
     $525 = HEAP8[$$0701876>>0]|0;
     $526 = $525&255;
     $527 = ((($$0697877)) + 1|0);
     $528 = HEAP8[$$0697877>>0]|0;
     $529 = $528&255;
     $530 = (($526) - ($529))|0;
     $531 = $530&255;
     HEAP8[$$0699880>>0] = $531;
     $532 = $530 & 255;
     $533 = ($532>>>0)<(128);
     $534 = (256 - ($532))|0;
     $535 = $533 ? $532 : $534;
     $536 = (($535) + ($$0690878))|0;
     $537 = (($$0686879) + 1)|0;
     $$0699 = ((($$0699880)) + 1|0);
     $exitcond1118 = ($537|0)==($13|0);
     if ($exitcond1118) {
      break;
     } else {
      $$0686879 = $537;$$0690878 = $536;$$0697877 = $527;$$0699880 = $$0699;$$0701876 = $524;
     }
    }
    $scevgep1115 = (($17) + ($523)|0);
    $scevgep1117 = (($520) + ($523)|0);
    $$0686$lcssa = $13;$$0690$lcssa = $536;$$0697$lcssa = $scevgep1116;$$0699$lcssa = $scevgep1117;$$0701$lcssa = $scevgep1115;
   }
   $538 = ($$0686$lcssa>>>0)<($5>>>0);
   L191: do {
    if ($538) {
     $$0695866 = $518;$$0696865 = $521;$$1687868 = $$0686$lcssa;$$1691867 = $$0690$lcssa;$$1698864 = $$0697$lcssa;$$1700863 = $$0699$lcssa;$$1702862 = $$0701$lcssa;
     while(1) {
      $539 = HEAP8[$$1698864>>0]|0;
      $540 = $539&255;
      $541 = HEAP8[$$0696865>>0]|0;
      $542 = $541&255;
      $543 = HEAP8[$$0695866>>0]|0;
      $544 = $543&255;
      $545 = (($540) - ($542))|0;
      $546 = (($544) - ($542))|0;
      $547 = ($545|0)<(0);
      $548 = (0 - ($545))|0;
      $549 = $547 ? $548 : $545;
      $550 = ($546|0)<(0);
      $551 = (0 - ($546))|0;
      $552 = $550 ? $551 : $546;
      $553 = (($546) + ($545))|0;
      $554 = ($553|0)<(0);
      $555 = (0 - ($553))|0;
      $556 = $554 ? $555 : $553;
      $557 = ($549|0)>($552|0);
      $558 = ($549|0)>($556|0);
      $or$cond823 = $557 | $558;
      $559 = ($552|0)>($556|0);
      $560 = $559 ? $542 : $540;
      $561 = $or$cond823 ? $560 : $544;
      $562 = HEAP8[$$1702862>>0]|0;
      $563 = $562&255;
      $564 = (($563) - ($561))|0;
      $565 = $564&255;
      HEAP8[$$1700863>>0] = $565;
      $566 = $564 & 255;
      $567 = ($566>>>0)<(128);
      $568 = (256 - ($566))|0;
      $569 = $567 ? $566 : $568;
      $570 = (($569) + ($$1691867))|0;
      $571 = ($570>>>0)>($$1689>>>0);
      if ($571) {
       $$2692 = $570;
       break L191;
      }
      $572 = ((($$1700863)) + 1|0);
      $573 = ((($$1702862)) + 1|0);
      $574 = ((($$0695866)) + 1|0);
      $575 = ((($$0696865)) + 1|0);
      $576 = ((($$1698864)) + 1|0);
      $577 = (($$1687868) + 1)|0;
      $578 = ($577>>>0)<($5>>>0);
      if ($578) {
       $$0695866 = $574;$$0696865 = $575;$$1687868 = $577;$$1691867 = $570;$$1698864 = $576;$$1700863 = $572;$$1702862 = $573;
      } else {
       $$2692 = $570;
       break;
      }
     }
    } else {
     $$2692 = $$0690$lcssa;
    }
   } while(0);
   $579 = HEAP8[$484>>0]|0;
   $580 = ($579<<24>>24)==(2);
   if ($580) {
    $581 = $$2692 & 65535;
    $582 = $$2692 >>> 10;
    $583 = $582 & 4194240;
    $584 = ($7<<24>>24)==(0);
    if ($584) {
     $$0662$lcssa = $581;$$0663$lcssa = $583;
    } else {
     $585 = ((($0)) + 624|0);
     $586 = HEAP32[$585>>2]|0;
     $587 = ((($0)) + 628|0);
     $$0662856 = $581;$$0663855 = $583;$$0665854 = 0;
     while(1) {
      $588 = (($586) + ($$0665854)|0);
      $589 = HEAP8[$588>>0]|0;
      $590 = ($589<<24>>24)==(4);
      if ($590) {
       $591 = HEAP32[$587>>2]|0;
       $592 = (($591) + ($$0665854<<1)|0);
       $593 = HEAP16[$592>>1]|0;
       $594 = $593&65535;
       $595 = Math_imul($$0662856, $594)|0;
       $596 = $595 >>> 8;
       $597 = Math_imul($$0663855, $594)|0;
       $598 = $597 >>> 8;
       $$1 = $596;$$1664 = $598;
      } else {
       $$1 = $$0662856;$$1664 = $$0663855;
      }
      $599 = (($$0665854) + 1)|0;
      $exitcond1114 = ($599|0)==($8|0);
      if ($exitcond1114) {
       $$0662$lcssa = $$1;$$0663$lcssa = $$1664;
       break;
      } else {
       $$0662856 = $$1;$$0663855 = $$1664;$$0665854 = $599;
      }
     }
    }
    $600 = ((($0)) + 636|0);
    $601 = HEAP32[$600>>2]|0;
    $602 = ((($601)) + 8|0);
    $603 = HEAP16[$602>>1]|0;
    $604 = $603&65535;
    $605 = Math_imul($$0663$lcssa, $604)|0;
    $606 = ($605>>>0)>(33553927);
    $607 = $605 >>> 3;
    $608 = Math_imul($$0662$lcssa, $604)|0;
    $609 = $608 >>> 3;
    $610 = $607 << 10;
    $611 = (($610) + ($609))|0;
    $spec$select831 = $606 ? 2147483647 : $611;
    $$4694 = $spec$select831;
   } else {
    $$4694 = $$2692;
   }
   $612 = ($$4694>>>0)<($$6675>>>0);
   if ($612) {
    $613 = HEAP32[$519>>2]|0;
    $$7 = $613;
   } else {
    $$7 = $$5;
   }
  }
 }
 $614 = HEAP32[$4>>2]|0;
 $615 = (($614) + 1)|0;
 _png_compress_IDAT($0,$$7,$615,0);
 $616 = HEAP32[$14>>2]|0;
 $617 = ($616|0)==(0|0);
 if (!($617)) {
  $618 = HEAP32[$16>>2]|0;
  HEAP32[$14>>2] = $618;
  HEAP32[$16>>2] = $616;
 }
 _png_write_finish_row($0);
 $619 = ((($0)) + 480|0);
 $620 = HEAP32[$619>>2]|0;
 $621 = (($620) + 1)|0;
 HEAP32[$619>>2] = $621;
 $622 = ((($0)) + 476|0);
 $623 = HEAP32[$622>>2]|0;
 $624 = (($623) + -1)|0;
 $625 = ($624>>>0)<($621>>>0);
 if ($625) {
  _png_write_flush($0);
 }
 $626 = HEAP8[$6>>0]|0;
 $627 = ($626<<24>>24)==(0);
 if ($627) {
  return;
 }
 $628 = ($7&255)>(1);
 $629 = ((($0)) + 624|0);
 if ($628) {
  $$0832 = 1;
  while(1) {
   $630 = HEAP32[$629>>2]|0;
   $631 = (($$0832) + -1)|0;
   $632 = (($630) + ($631)|0);
   $633 = HEAP8[$632>>0]|0;
   $634 = (($630) + ($$0832)|0);
   HEAP8[$634>>0] = $633;
   $635 = (($$0832) + 1)|0;
   $exitcond = ($635|0)==($8|0);
   if ($exitcond) {
    $$0$lcssa = $8;
    break;
   } else {
    $$0832 = $635;
   }
  }
 } else {
  $$0$lcssa = 1;
 }
 $636 = HEAP8[$$7>>0]|0;
 $637 = HEAP32[$629>>2]|0;
 $638 = (($637) + ($$0$lcssa)|0);
 HEAP8[$638>>0] = $636;
 return;
}
function _png_compress_IDAT($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$i = 0, $$0$i87 = 0, $$0$i92 = 0, $$029$i = 0, $$029$i91 = 0, $$pre = 0, $$pre$phi111Z2D = 0, $$pre$phi113Z2D = 0, $$pre$phi115Z2D = 0, $$pre$phiZ2D = 0, $$pre110 = 0, $$pre112 = 0, $$pre114 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$or$cond = 0, $or$cond$i = 0, $or$cond$i90 = 0, $or$cond3 = 0, $or$cond31$i = 0;
 var $or$cond31$i93 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp + 24|0;
 $5 = sp + 16|0;
 $6 = sp + 8|0;
 $7 = sp;
 $8 = ((($0)) + 220|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(1229209940);
 do {
  if ($10) {
   $$pre = ((($0)) + 240|0);
   $$pre110 = ((($0)) + 280|0);
   $$pre112 = ((($0)) + 284|0);
   $$pre114 = ((($0)) + 236|0);
   $$pre$phi111Z2D = $$pre110;$$pre$phi113Z2D = $$pre112;$$pre$phi115Z2D = $$pre114;$$pre$phiZ2D = $$pre;
  } else {
   $11 = ((($0)) + 280|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    $14 = ((($0)) + 284|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = (($15) + 4)|0;
    $17 = (_png_malloc($0,$16)|0);
    HEAP32[$11>>2] = $17;
    HEAP32[$17>>2] = 0;
   } else {
    $18 = HEAP32[$12>>2]|0;
    $19 = ($18|0)==(0|0);
    if (!($19)) {
     HEAP32[$12>>2] = 0;
     $$0$i = $18;
     while(1) {
      $20 = HEAP32[$$0$i>>2]|0;
      _png_free($0,$$0$i);
      $21 = ($20|0)==(0|0);
      if ($21) {
       break;
      } else {
       $$0$i = $20;
      }
     }
    }
   }
   $22 = (_png_image_size($0)|0);
   $23 = (_png_deflate_claim($0,1229209940,$22)|0);
   $24 = ($23|0)==(0);
   if ($24) {
    $27 = HEAP32[$11>>2]|0;
    $28 = ((($27)) + 4|0);
    $29 = ((($0)) + 236|0);
    HEAP32[$29>>2] = $28;
    $30 = ((($0)) + 284|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ((($0)) + 240|0);
    HEAP32[$32>>2] = $31;
    $$pre$phi111Z2D = $11;$$pre$phi113Z2D = $30;$$pre$phi115Z2D = $29;$$pre$phiZ2D = $32;
    break;
   } else {
    $25 = ((($0)) + 248|0);
    $26 = HEAP32[$25>>2]|0;
    _png_error($0,$26);
    // unreachable;
   }
  }
 } while(0);
 $33 = ((($0)) + 224|0);
 HEAP32[$33>>2] = $1;
 $34 = ((($0)) + 228|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($0)) + 208|0);
 $36 = ((($0)) + 744|0);
 $37 = ($3|0)==(0);
 $38 = ((($0)) + 800|0);
 $39 = ((($4)) + 1|0);
 $40 = ((($4)) + 2|0);
 $41 = ((($4)) + 3|0);
 $42 = ((($4)) + 4|0);
 $43 = ((($4)) + 5|0);
 $44 = ((($4)) + 6|0);
 $45 = ((($4)) + 7|0);
 $46 = ((($0)) + 376|0);
 $47 = ((($0)) + 412|0);
 $48 = ((($7)) + 1|0);
 $49 = ((($7)) + 2|0);
 $50 = ((($7)) + 3|0);
 $$0 = $2;
 while(1) {
  HEAP32[$34>>2] = $$0;
  $51 = (_deflate($33,$3)|0);
  $52 = HEAP32[$34>>2]|0;
  HEAP32[$34>>2] = 0;
  $53 = HEAP32[$$pre$phiZ2D>>2]|0;
  $54 = ($53|0)==(0);
  if ($54) {
   $55 = HEAP32[$$pre$phi111Z2D>>2]|0;
   $56 = ((($55)) + 4|0);
   $57 = HEAP32[$$pre$phi113Z2D>>2]|0;
   $58 = HEAP32[$35>>2]|0;
   $59 = $58 & 4;
   $60 = ($59|0)==(0);
   if ($60) {
    $61 = HEAP8[$36>>0]|0;
    $62 = ($61<<24>>24)==(0);
    if ($62) {
     $63 = (_png_image_size($0)|0);
     $64 = ($63>>>0)<(16385);
     if ($64) {
      $65 = HEAP8[$56>>0]|0;
      $66 = $65&255;
      $67 = $66 & 15;
      $68 = ($67|0)==(8);
      $69 = $66 & 240;
      $70 = ($69>>>0)<(113);
      $or$cond$i = $68 & $70;
      if ($or$cond$i) {
       $71 = $66 >>> 4;
       $72 = 128 << $71;
       $73 = ($72>>>0)<($63>>>0);
       if (!($73)) {
        $$0$i87 = $72;$$029$i = $71;
        while(1) {
         $74 = $$0$i87 >>> 1;
         $75 = (($$029$i) + -1)|0;
         $76 = ($75|0)==(0);
         $77 = ($74>>>0)<($63>>>0);
         $or$cond31$i = $76 | $77;
         if ($or$cond31$i) {
          break;
         } else {
          $$0$i87 = $74;$$029$i = $75;
         }
        }
        $78 = $75 << 4;
        $79 = $78 | 8;
        $80 = $79&255;
        HEAP8[$56>>0] = $80;
        $81 = ((($55)) + 5|0);
        $82 = HEAP8[$81>>0]|0;
        $83 = $82 & -32;
        $84 = $83&255;
        $85 = $79 << 8;
        $86 = $85 | $84;
        $87 = (($86>>>0) % 31)&-1;
        $88 = $87 | $84;
        $89 = $88 ^ 31;
        $90 = $89&255;
        HEAP8[$81>>0] = $90;
       }
      }
     }
    }
   }
   $91 = ($57|0)<(0);
   if ($91) {
    label = 22;
    break;
   }
   HEAP32[$38>>2] = 34;
   $92 = $57 >>> 24;
   $93 = $92&255;
   HEAP8[$4>>0] = $93;
   $94 = $57 >>> 16;
   $95 = $94&255;
   HEAP8[$39>>0] = $95;
   $96 = $57 >>> 8;
   $97 = $96&255;
   HEAP8[$40>>0] = $97;
   $98 = $57&255;
   HEAP8[$41>>0] = $98;
   HEAP8[$42>>0] = 73;
   HEAP8[$43>>0] = 68;
   HEAP8[$44>>0] = 65;
   HEAP8[$45>>0] = 84;
   _png_write_data($0,$4,8);
   HEAP32[$46>>2] = 1229209940;
   _png_reset_crc($0);
   _png_calculate_crc($0,$42,4);
   HEAP32[$38>>2] = 66;
   $99 = ($57|0)==(0);
   if (!($99)) {
    _png_write_data($0,$56,$57);
    _png_calculate_crc($0,$56,$57);
   }
   HEAP32[$38>>2] = 130;
   $100 = HEAP32[$47>>2]|0;
   $101 = $100 >>> 24;
   $102 = $101&255;
   HEAP8[$7>>0] = $102;
   $103 = $100 >>> 16;
   $104 = $103&255;
   HEAP8[$48>>0] = $104;
   $105 = $100 >>> 8;
   $106 = $105&255;
   HEAP8[$49>>0] = $106;
   $107 = $100&255;
   HEAP8[$50>>0] = $107;
   _png_write_data($0,$7,4);
   $108 = HEAP32[$35>>2]|0;
   $109 = $108 | 4;
   HEAP32[$35>>2] = $109;
   HEAP32[$$pre$phi115Z2D>>2] = $56;
   HEAP32[$$pre$phiZ2D>>2] = $57;
   $110 = ($51|0)!=(0);
   $not$or$cond = $37 | $110;
   if ($not$or$cond) {
    $120 = $57;
    label = 26;
   }
  } else {
   $120 = $53;
   label = 26;
  }
  if ((label|0) == 26) {
   label = 0;
   $111 = ($51|0)==(0);
   if (!($111)) {
    label = 31;
    break;
   }
   $112 = ($52|0)==(0);
   if ($112) {
    label = 29;
    break;
   }
  }
  $$0 = $52;
 }
 if ((label|0) == 22) {
  _png_error($0,25384);
  // unreachable;
 }
 else if ((label|0) == 29) {
  $113 = ($3|0)==(4);
  if ($113) {
   _png_error($0,27243);
   // unreachable;
  } else {
   STACKTOP = sp;return;
  }
 }
 else if ((label|0) == 31) {
  $114 = ($51|0)==(1);
  $115 = ($3|0)==(4);
  $or$cond3 = $115 & $114;
  if (!($or$cond3)) {
   _png_zstream_error($0,$51);
   $183 = ((($0)) + 248|0);
   $184 = HEAP32[$183>>2]|0;
   _png_error($0,$184);
   // unreachable;
  }
  $116 = HEAP32[$$pre$phi111Z2D>>2]|0;
  $117 = ((($116)) + 4|0);
  $118 = HEAP32[$$pre$phi113Z2D>>2]|0;
  $119 = (($118) - ($120))|0;
  $121 = HEAP32[$35>>2]|0;
  $122 = $121 & 4;
  $123 = ($122|0)==(0);
  if ($123) {
   $124 = HEAP8[$36>>0]|0;
   $125 = ($124<<24>>24)==(0);
   if ($125) {
    $126 = (_png_image_size($0)|0);
    $127 = ($126>>>0)<(16385);
    if ($127) {
     $128 = HEAP8[$117>>0]|0;
     $129 = $128&255;
     $130 = $129 & 15;
     $131 = ($130|0)==(8);
     $132 = $129 & 240;
     $133 = ($132>>>0)<(113);
     $or$cond$i90 = $131 & $133;
     if ($or$cond$i90) {
      $134 = $129 >>> 4;
      $135 = 128 << $134;
      $136 = ($135>>>0)<($126>>>0);
      if (!($136)) {
       $$0$i92 = $135;$$029$i91 = $134;
       while(1) {
        $137 = $$0$i92 >>> 1;
        $138 = (($$029$i91) + -1)|0;
        $139 = ($138|0)==(0);
        $140 = ($137>>>0)<($126>>>0);
        $or$cond31$i93 = $139 | $140;
        if ($or$cond31$i93) {
         break;
        } else {
         $$0$i92 = $137;$$029$i91 = $138;
        }
       }
       $141 = $138 << 4;
       $142 = $141 | 8;
       $143 = $142&255;
       HEAP8[$117>>0] = $143;
       $144 = ((($116)) + 5|0);
       $145 = HEAP8[$144>>0]|0;
       $146 = $145 & -32;
       $147 = $146&255;
       $148 = $142 << 8;
       $149 = $148 | $147;
       $150 = (($149>>>0) % 31)&-1;
       $151 = $150 | $147;
       $152 = $151 ^ 31;
       $153 = $152&255;
       HEAP8[$144>>0] = $153;
      }
     }
    }
   }
  }
  $154 = ($119|0)<(0);
  if ($154) {
   _png_error($0,25384);
   // unreachable;
  }
  HEAP32[$38>>2] = 34;
  $155 = $119 >>> 24;
  $156 = $155&255;
  HEAP8[$6>>0] = $156;
  $157 = $119 >>> 16;
  $158 = $157&255;
  $159 = ((($6)) + 1|0);
  HEAP8[$159>>0] = $158;
  $160 = $119 >>> 8;
  $161 = $160&255;
  $162 = ((($6)) + 2|0);
  HEAP8[$162>>0] = $161;
  $163 = $119&255;
  $164 = ((($6)) + 3|0);
  HEAP8[$164>>0] = $163;
  $165 = ((($6)) + 4|0);
  HEAP8[$165>>0] = 73;
  $166 = ((($6)) + 5|0);
  HEAP8[$166>>0] = 68;
  $167 = ((($6)) + 6|0);
  HEAP8[$167>>0] = 65;
  $168 = ((($6)) + 7|0);
  HEAP8[$168>>0] = 84;
  _png_write_data($0,$6,8);
  HEAP32[$46>>2] = 1229209940;
  _png_reset_crc($0);
  _png_calculate_crc($0,$165,4);
  HEAP32[$38>>2] = 66;
  $169 = ($119|0)==(0);
  if (!($169)) {
   _png_write_data($0,$117,$119);
   _png_calculate_crc($0,$117,$119);
  }
  HEAP32[$38>>2] = 130;
  $170 = HEAP32[$47>>2]|0;
  $171 = $170 >>> 24;
  $172 = $171&255;
  HEAP8[$5>>0] = $172;
  $173 = $170 >>> 16;
  $174 = $173&255;
  $175 = ((($5)) + 1|0);
  HEAP8[$175>>0] = $174;
  $176 = $170 >>> 8;
  $177 = $176&255;
  $178 = ((($5)) + 2|0);
  HEAP8[$178>>0] = $177;
  $179 = $170&255;
  $180 = ((($5)) + 3|0);
  HEAP8[$180>>0] = $179;
  _png_write_data($0,$5,4);
  HEAP32[$$pre$phiZ2D>>2] = 0;
  HEAP32[$$pre$phi115Z2D>>2] = 0;
  $181 = HEAP32[$35>>2]|0;
  $182 = $181 | 12;
  HEAP32[$35>>2] = $182;
  HEAP32[$8>>2] = 0;
  STACKTOP = sp;return;
 }
}
function _png_write_flush($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + 372|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 356|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if (!($6)) {
  return;
 }
 _png_compress_IDAT($0,0,0,2);
 $7 = ((($0)) + 480|0);
 HEAP32[$7>>2] = 0;
 _png_flush($0);
 return;
}
function _png_image_size($0) {
 $0 = $0|0;
 var $$0 = 0, $$1 = 0, $$1$1 = 0, $$1$2 = 0, $$1$3 = 0, $$1$4 = 0, $$1$5 = 0, $$1$us = 0, $$1$us$1 = 0, $$1$us$2 = 0, $$1$us$3 = 0, $$1$us$4 = 0, $$1$us$5 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 352|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 364|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 | $2;
 $6 = ($5>>>0)<(32768);
 if (!($6)) {
  $$0 = -1;
  return ($$0|0);
 }
 $7 = ((($0)) + 432|0);
 $8 = HEAP8[$7>>0]|0;
 $9 = ($8<<24>>24)==(0);
 if ($9) {
  $38 = (($4) + 1)|0;
  $39 = Math_imul($38, $2)|0;
  $$0 = $39;
  return ($$0|0);
 }
 $10 = ((($0)) + 348|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 438|0);
 $13 = HEAP8[$12>>0]|0;
 $14 = $13&255;
 $15 = ($13&255)>(7);
 $16 = $14 >>> 3;
 $17 = (($11) + 7)|0;
 $18 = $17 >>> 3;
 $19 = ($18|0)==(0);
 if ($15) {
  if ($19) {
   $$1$us = 0;
  } else {
   $20 = Math_imul($18, $16)|0;
   $21 = (($20) + 1)|0;
   $22 = (($2) + 7)|0;
   $23 = $22 >>> 3;
   $24 = Math_imul($21, $23)|0;
   $$1$us = $24;
  }
  $25 = (($11) + 3)|0;
  $26 = $25 >>> 3;
  $27 = ($26|0)==(0);
  if ($27) {
   $$1$us$1 = $$1$us;
  } else {
   $40 = Math_imul($26, $16)|0;
   $41 = (($40) + 1)|0;
   $42 = (($2) + 7)|0;
   $43 = $42 >>> 3;
   $44 = Math_imul($41, $43)|0;
   $45 = (($44) + ($$1$us))|0;
   $$1$us$1 = $45;
  }
  $46 = (($11) + 3)|0;
  $47 = $46 >>> 2;
  $48 = ($47|0)==(0);
  if ($48) {
   $$1$us$2 = $$1$us$1;
  } else {
   $49 = Math_imul($47, $16)|0;
   $50 = (($49) + 1)|0;
   $51 = (($2) + 3)|0;
   $52 = $51 >>> 3;
   $53 = Math_imul($50, $52)|0;
   $54 = (($53) + ($$1$us$1))|0;
   $$1$us$2 = $54;
  }
  $55 = (($11) + 1)|0;
  $56 = $55 >>> 2;
  $57 = ($56|0)==(0);
  if ($57) {
   $$1$us$3 = $$1$us$2;
  } else {
   $58 = Math_imul($56, $16)|0;
   $59 = (($58) + 1)|0;
   $60 = (($2) + 3)|0;
   $61 = $60 >>> 2;
   $62 = Math_imul($59, $61)|0;
   $63 = (($62) + ($$1$us$2))|0;
   $$1$us$3 = $63;
  }
  $64 = (($11) + 1)|0;
  $65 = $64 >>> 1;
  $66 = ($65|0)==(0);
  if ($66) {
   $$1$us$4 = $$1$us$3;
  } else {
   $67 = Math_imul($65, $16)|0;
   $68 = (($67) + 1)|0;
   $69 = (($2) + 1)|0;
   $70 = $69 >>> 2;
   $71 = Math_imul($68, $70)|0;
   $72 = (($71) + ($$1$us$3))|0;
   $$1$us$4 = $72;
  }
  $73 = $11 >>> 1;
  $74 = ($73|0)==(0);
  if ($74) {
   $$1$us$5 = $$1$us$4;
  } else {
   $75 = Math_imul($73, $16)|0;
   $76 = (($75) + 1)|0;
   $77 = (($2) + 1)|0;
   $78 = $77 >>> 1;
   $79 = Math_imul($76, $78)|0;
   $80 = (($79) + ($$1$us$4))|0;
   $$1$us$5 = $80;
  }
  $81 = ($11|0)==(0);
  if ($81) {
   $$0 = $$1$us$5;
   return ($$0|0);
  }
  $82 = Math_imul($11, $16)|0;
  $83 = (($82) + 1)|0;
  $84 = $2 >>> 1;
  $85 = Math_imul($83, $84)|0;
  $86 = (($85) + ($$1$us$5))|0;
  $$0 = $86;
  return ($$0|0);
 } else {
  if ($19) {
   $$1 = 0;
  } else {
   $28 = Math_imul($18, $14)|0;
   $29 = (($28) + 7)|0;
   $30 = $29 >>> 3;
   $31 = (($30) + 1)|0;
   $32 = (($2) + 7)|0;
   $33 = $32 >>> 3;
   $34 = Math_imul($31, $33)|0;
   $$1 = $34;
  }
  $35 = (($11) + 3)|0;
  $36 = $35 >>> 3;
  $37 = ($36|0)==(0);
  if ($37) {
   $$1$1 = $$1;
  } else {
   $87 = Math_imul($36, $14)|0;
   $88 = (($87) + 7)|0;
   $89 = $88 >>> 3;
   $90 = (($89) + 1)|0;
   $91 = (($2) + 7)|0;
   $92 = $91 >>> 3;
   $93 = Math_imul($90, $92)|0;
   $94 = (($93) + ($$1))|0;
   $$1$1 = $94;
  }
  $95 = (($11) + 3)|0;
  $96 = $95 >>> 2;
  $97 = ($96|0)==(0);
  if ($97) {
   $$1$2 = $$1$1;
  } else {
   $98 = Math_imul($96, $14)|0;
   $99 = (($98) + 7)|0;
   $100 = $99 >>> 3;
   $101 = (($100) + 1)|0;
   $102 = (($2) + 3)|0;
   $103 = $102 >>> 3;
   $104 = Math_imul($101, $103)|0;
   $105 = (($104) + ($$1$1))|0;
   $$1$2 = $105;
  }
  $106 = (($11) + 1)|0;
  $107 = $106 >>> 2;
  $108 = ($107|0)==(0);
  if ($108) {
   $$1$3 = $$1$2;
  } else {
   $109 = Math_imul($107, $14)|0;
   $110 = (($109) + 7)|0;
   $111 = $110 >>> 3;
   $112 = (($111) + 1)|0;
   $113 = (($2) + 3)|0;
   $114 = $113 >>> 2;
   $115 = Math_imul($112, $114)|0;
   $116 = (($115) + ($$1$2))|0;
   $$1$3 = $116;
  }
  $117 = (($11) + 1)|0;
  $118 = $117 >>> 1;
  $119 = ($118|0)==(0);
  if ($119) {
   $$1$4 = $$1$3;
  } else {
   $120 = Math_imul($118, $14)|0;
   $121 = (($120) + 7)|0;
   $122 = $121 >>> 3;
   $123 = (($122) + 1)|0;
   $124 = (($2) + 1)|0;
   $125 = $124 >>> 2;
   $126 = Math_imul($123, $125)|0;
   $127 = (($126) + ($$1$3))|0;
   $$1$4 = $127;
  }
  $128 = $11 >>> 1;
  $129 = ($128|0)==(0);
  if ($129) {
   $$1$5 = $$1$4;
  } else {
   $130 = Math_imul($128, $14)|0;
   $131 = (($130) + 7)|0;
   $132 = $131 >>> 3;
   $133 = (($132) + 1)|0;
   $134 = (($2) + 1)|0;
   $135 = $134 >>> 1;
   $136 = Math_imul($133, $135)|0;
   $137 = (($136) + ($$1$4))|0;
   $$1$5 = $137;
  }
  $138 = ($11|0)==(0);
  if ($138) {
   $$0 = $$1$5;
   return ($$0|0);
  }
  $139 = Math_imul($11, $14)|0;
  $140 = (($139) + 7)|0;
  $141 = $140 >>> 3;
  $142 = (($141) + 1)|0;
  $143 = $2 >>> 1;
  $144 = Math_imul($142, $143)|0;
  $145 = (($144) + ($$1$5))|0;
  $$0 = $145;
  return ($$0|0);
 }
 return (0)|0;
}
function _png_write_image($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$01820 = 0, $$01922 = 0, $$021 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = (_png_set_interlace_handling($0)|0);
 $4 = ($3|0)>(0);
 if (!($4)) {
  return;
 }
 $5 = ((($0)) + 352|0);
 $$pre = HEAP32[$5>>2]|0;
 $$01922 = 0;$6 = $$pre;
 while(1) {
  $7 = ($6|0)==(0);
  if ($7) {
   $14 = 0;
  } else {
   $$01820 = 0;$$021 = $1;
   while(1) {
    $8 = HEAP32[$$021>>2]|0;
    _png_write_row($0,$8);
    $9 = (($$01820) + 1)|0;
    $10 = ((($$021)) + 4|0);
    $11 = HEAP32[$5>>2]|0;
    $12 = ($9>>>0)<($11>>>0);
    if ($12) {
     $$01820 = $9;$$021 = $10;
    } else {
     $14 = $11;
     break;
    }
   }
  }
  $13 = (($$01922) + 1)|0;
  $exitcond = ($13|0)==($3|0);
  if ($exitcond) {
   break;
  } else {
   $$01922 = $13;$6 = $14;
  }
 }
 return;
}
function _png_set_filter($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pr$pre = 0, $$pr50$pre = 0, $$pre = 0, $$pre51 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $or$cond = 0, $trunc = 0, $trunc$sink = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 if ($3) {
  return;
 }
 $4 = ((($0)) + 708|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & 4;
 $7 = ($6|0)!=(0);
 $8 = ($1|0)==(64);
 $or$cond = $8 & $7;
 $9 = ($1|0)==(0);
 $10 = $9 | $or$cond;
 if (!($10)) {
  _png_error($0,27451);
  // unreachable;
 }
 $trunc = $2&255;
 switch ($trunc<<24>>24) {
 case 7: case 6: case 5:  {
  _png_app_error($0,27306);
  $trunc$sink = 8;
  break;
 }
 case 0:  {
  $trunc$sink = 8;
  break;
 }
 case 1:  {
  $trunc$sink = 16;
  break;
 }
 case 2:  {
  $trunc$sink = 32;
  break;
 }
 case 3:  {
  $trunc$sink = 64;
  break;
 }
 case 4:  {
  $trunc$sink = -128;
  break;
 }
 default: {
  $trunc$sink = $trunc;
 }
 }
 $11 = ((($0)) + 434|0);
 HEAP8[$11>>0] = $trunc$sink;
 $12 = ((($0)) + 384|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0|0);
 if ($14) {
  return;
 }
 $15 = ((($0)) + 434|0);
 $16 = $trunc$sink & 16;
 $17 = ($16<<24>>24)==(0);
 if ($17) {
  $26 = $trunc$sink;
 } else {
  $18 = ((($0)) + 388|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)==(0|0);
  if ($20) {
   $21 = ((($0)) + 364|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = (($22) + 1)|0;
   $24 = (_png_malloc($0,$23)|0);
   HEAP32[$18>>2] = $24;
   HEAP8[$24>>0] = 1;
   $$pre = HEAP8[$15>>0]|0;
   $26 = $$pre;
  } else {
   $26 = $trunc$sink;
  }
 }
 $25 = $26 & 32;
 $27 = ($25<<24>>24)==(0);
 do {
  if ($27) {
   $41 = $26;
  } else {
   $28 = ((($0)) + 392|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ($29|0)==(0|0);
   if ($30) {
    $31 = ((($0)) + 380|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ($32|0)==(0|0);
    if ($33) {
     _png_warning($0,27338);
     $34 = HEAP8[$15>>0]|0;
     $35 = $34 & -33;
     HEAP8[$15>>0] = $35;
     $41 = $35;
     break;
    } else {
     $36 = ((($0)) + 364|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (($37) + 1)|0;
     $39 = (_png_malloc($0,$38)|0);
     HEAP32[$28>>2] = $39;
     HEAP8[$39>>0] = 2;
     $$pre51 = HEAP8[$15>>0]|0;
     $41 = $$pre51;
     break;
    }
   } else {
    $41 = $26;
   }
  }
 } while(0);
 $40 = $41 & 64;
 $42 = ($40<<24>>24)==(0);
 do {
  if ($42) {
   $55 = $41;
  } else {
   $43 = ((($0)) + 396|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==(0|0);
   if ($45) {
    $46 = ((($0)) + 380|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)==(0|0);
    if ($48) {
     _png_warning($0,27373);
     $49 = HEAP8[$15>>0]|0;
     $50 = $49 & -65;
     HEAP8[$15>>0] = $50;
     $55 = $50;
     break;
    } else {
     $51 = ((($0)) + 364|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (($52) + 1)|0;
     $54 = (_png_malloc($0,$53)|0);
     HEAP32[$43>>2] = $54;
     HEAP8[$54>>0] = 3;
     $$pr$pre = HEAP8[$15>>0]|0;
     $55 = $$pr$pre;
     break;
    }
   } else {
    $55 = $41;
   }
  }
 } while(0);
 $56 = ($55<<24>>24)<(0);
 do {
  if ($56) {
   $57 = ((($0)) + 400|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ($58|0)==(0|0);
   if (!($59)) {
    return;
   }
   $60 = ((($0)) + 380|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = ($61|0)==(0|0);
   if ($62) {
    _png_warning($0,27413);
    $63 = HEAP8[$15>>0]|0;
    $64 = $63 & 127;
    HEAP8[$15>>0] = $64;
    $69 = $64;
    break;
   } else {
    $65 = ((($0)) + 364|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = (($66) + 1)|0;
    $68 = (_png_malloc($0,$67)|0);
    HEAP32[$57>>2] = $68;
    HEAP8[$68>>0] = 4;
    $$pr50$pre = HEAP8[$15>>0]|0;
    $69 = $$pr50$pre;
    break;
   }
  } else {
   $69 = $55;
  }
 } while(0);
 $70 = ($69<<24>>24)==(0);
 if (!($70)) {
  return;
 }
 HEAP8[$15>>0] = 8;
 return;
}
function _png_set_compression_level($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 288|0);
 HEAP32[$3>>2] = $1;
 return;
}
function _png_set_compression_mem_level($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  return;
 }
 $3 = ((($0)) + 300|0);
 HEAP32[$3>>2] = $1;
 return;
}
function _png_get_error_ptr($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 0;
  return ($$0|0);
 }
 $2 = ((($0)) + 176|0);
 $3 = HEAP32[$2>>2]|0;
 $$0 = $3;
 return ($$0|0);
}
function _adler32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0174196 = 0, $$0178195 = 0, $$0190 = 0, $$1$lcssa = 0, $$1175$lcssa247250 = 0, $$1175221 = 0, $$1179$lcssa246251 = 0, $$1179220 = 0, $$1184$lcssa = 0, $$1184194 = 0, $$1197 = 0, $$2$lcssa248249 = 0, $$2176210 = 0, $$2180 = 0, $$2222 = 0, $$3 = 0, $$3177201 = 0, $$3177201$ph = 0, $$3181209 = 0;
 var $$3186$lcssa245252 = 0, $$3186219 = 0, $$4182200 = 0, $$4182200$ph = 0, $$4187 = 0, $$4211 = 0, $$5$lcssa = 0, $$5188208 = 0, $$5202 = 0, $$5202$ph = 0, $$6 = 0, $$6189$lcssa = 0, $$6189199 = 0, $$6189199$ph = 0, $$7 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep = 0, $scevgep243 = 0, $spec$select = 0, $spec$select191 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $0 >>> 16;
 $4 = $0 & 65535;
 $5 = ($2|0)==(1);
 if ($5) {
  $6 = HEAP8[$1>>0]|0;
  $7 = $6&255;
  $8 = (($4) + ($7))|0;
  $9 = ($8>>>0)>(65520);
  $10 = (($8) + -65521)|0;
  $spec$select = $9 ? $10 : $8;
  $11 = (($spec$select) + ($3))|0;
  $12 = ($11>>>0)>(65520);
  $13 = $11 << 16;
  $14 = (($13) + 983040)|0;
  $15 = $12 ? $14 : $13;
  $16 = $15 | $spec$select;
  $$0190 = $16;
  return ($$0190|0);
 }
 $17 = ($1|0)==(0|0);
 if ($17) {
  $$0190 = 1;
  return ($$0190|0);
 }
 $18 = ($2>>>0)<(16);
 if ($18) {
  $19 = ($2|0)==(0);
  if ($19) {
   $$1$lcssa = $3;$$1184$lcssa = $4;
  } else {
   $$0174196 = $2;$$0178195 = $1;$$1184194 = $4;$$1197 = $3;
   while(1) {
    $20 = (($$0174196) + -1)|0;
    $21 = ((($$0178195)) + 1|0);
    $22 = HEAP8[$$0178195>>0]|0;
    $23 = $22&255;
    $24 = (($$1184194) + ($23))|0;
    $25 = (($24) + ($$1197))|0;
    $26 = ($20|0)==(0);
    if ($26) {
     $$1$lcssa = $25;$$1184$lcssa = $24;
     break;
    } else {
     $$0174196 = $20;$$0178195 = $21;$$1184194 = $24;$$1197 = $25;
    }
   }
  }
  $27 = ($$1184$lcssa>>>0)>(65520);
  $28 = (($$1184$lcssa) + -65521)|0;
  $spec$select191 = $27 ? $28 : $$1184$lcssa;
  $29 = (($$1$lcssa>>>0) % 65521)&-1;
  $30 = $29 << 16;
  $31 = $30 | $spec$select191;
  $$0190 = $31;
  return ($$0190|0);
 }
 $32 = ($2>>>0)>(5551);
 if ($32) {
  $$1175221 = $2;$$1179220 = $1;$$2222 = $3;$$3186219 = $4;
  while(1) {
   $33 = (($$1175221) + -5552)|0;
   $$0 = 347;$$2180 = $$1179220;$$3 = $$2222;$$4187 = $$3186219;
   while(1) {
    $34 = HEAP8[$$2180>>0]|0;
    $35 = $34&255;
    $36 = (($$4187) + ($35))|0;
    $37 = (($36) + ($$3))|0;
    $38 = ((($$2180)) + 1|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39&255;
    $41 = (($36) + ($40))|0;
    $42 = (($37) + ($41))|0;
    $43 = ((($$2180)) + 2|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44&255;
    $46 = (($41) + ($45))|0;
    $47 = (($42) + ($46))|0;
    $48 = ((($$2180)) + 3|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = $49&255;
    $51 = (($46) + ($50))|0;
    $52 = (($47) + ($51))|0;
    $53 = ((($$2180)) + 4|0);
    $54 = HEAP8[$53>>0]|0;
    $55 = $54&255;
    $56 = (($51) + ($55))|0;
    $57 = (($52) + ($56))|0;
    $58 = ((($$2180)) + 5|0);
    $59 = HEAP8[$58>>0]|0;
    $60 = $59&255;
    $61 = (($56) + ($60))|0;
    $62 = (($57) + ($61))|0;
    $63 = ((($$2180)) + 6|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $64&255;
    $66 = (($61) + ($65))|0;
    $67 = (($62) + ($66))|0;
    $68 = ((($$2180)) + 7|0);
    $69 = HEAP8[$68>>0]|0;
    $70 = $69&255;
    $71 = (($66) + ($70))|0;
    $72 = (($67) + ($71))|0;
    $73 = ((($$2180)) + 8|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74&255;
    $76 = (($71) + ($75))|0;
    $77 = (($72) + ($76))|0;
    $78 = ((($$2180)) + 9|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79&255;
    $81 = (($76) + ($80))|0;
    $82 = (($77) + ($81))|0;
    $83 = ((($$2180)) + 10|0);
    $84 = HEAP8[$83>>0]|0;
    $85 = $84&255;
    $86 = (($81) + ($85))|0;
    $87 = (($82) + ($86))|0;
    $88 = ((($$2180)) + 11|0);
    $89 = HEAP8[$88>>0]|0;
    $90 = $89&255;
    $91 = (($86) + ($90))|0;
    $92 = (($87) + ($91))|0;
    $93 = ((($$2180)) + 12|0);
    $94 = HEAP8[$93>>0]|0;
    $95 = $94&255;
    $96 = (($91) + ($95))|0;
    $97 = (($92) + ($96))|0;
    $98 = ((($$2180)) + 13|0);
    $99 = HEAP8[$98>>0]|0;
    $100 = $99&255;
    $101 = (($96) + ($100))|0;
    $102 = (($97) + ($101))|0;
    $103 = ((($$2180)) + 14|0);
    $104 = HEAP8[$103>>0]|0;
    $105 = $104&255;
    $106 = (($101) + ($105))|0;
    $107 = (($102) + ($106))|0;
    $108 = ((($$2180)) + 15|0);
    $109 = HEAP8[$108>>0]|0;
    $110 = $109&255;
    $111 = (($106) + ($110))|0;
    $112 = (($107) + ($111))|0;
    $113 = ((($$2180)) + 16|0);
    $114 = (($$0) + -1)|0;
    $115 = ($114|0)==(0);
    if ($115) {
     break;
    } else {
     $$0 = $114;$$2180 = $113;$$3 = $112;$$4187 = $111;
    }
   }
   $scevgep243 = ((($$1179220)) + 5552|0);
   $116 = (($111>>>0) % 65521)&-1;
   $117 = (($112>>>0) % 65521)&-1;
   $118 = ($33>>>0)>(5551);
   if ($118) {
    $$1175221 = $33;$$1179220 = $scevgep243;$$2222 = $117;$$3186219 = $116;
   } else {
    break;
   }
  }
  $119 = ($33|0)==(0);
  if ($119) {
   $$6 = $117;$$7 = $116;
  } else {
   $120 = ($33>>>0)>(15);
   if ($120) {
    $$1175$lcssa247250 = $33;$$1179$lcssa246251 = $scevgep243;$$2$lcssa248249 = $117;$$3186$lcssa245252 = $116;
    label = 16;
   } else {
    $$3177201$ph = $33;$$4182200$ph = $scevgep243;$$5202$ph = $117;$$6189199$ph = $116;
    label = 19;
   }
  }
 } else {
  $$1175$lcssa247250 = $2;$$1179$lcssa246251 = $1;$$2$lcssa248249 = $3;$$3186$lcssa245252 = $4;
  label = 16;
 }
 if ((label|0) == 16) {
  $121 = (($$1175$lcssa247250) + -16)|0;
  $122 = $121 & -16;
  $123 = (($122) + 16)|0;
  $$2176210 = $$1175$lcssa247250;$$3181209 = $$1179$lcssa246251;$$4211 = $$2$lcssa248249;$$5188208 = $$3186$lcssa245252;
  while(1) {
   $124 = (($$2176210) + -16)|0;
   $125 = HEAP8[$$3181209>>0]|0;
   $126 = $125&255;
   $127 = (($$5188208) + ($126))|0;
   $128 = (($127) + ($$4211))|0;
   $129 = ((($$3181209)) + 1|0);
   $130 = HEAP8[$129>>0]|0;
   $131 = $130&255;
   $132 = (($127) + ($131))|0;
   $133 = (($128) + ($132))|0;
   $134 = ((($$3181209)) + 2|0);
   $135 = HEAP8[$134>>0]|0;
   $136 = $135&255;
   $137 = (($132) + ($136))|0;
   $138 = (($133) + ($137))|0;
   $139 = ((($$3181209)) + 3|0);
   $140 = HEAP8[$139>>0]|0;
   $141 = $140&255;
   $142 = (($137) + ($141))|0;
   $143 = (($138) + ($142))|0;
   $144 = ((($$3181209)) + 4|0);
   $145 = HEAP8[$144>>0]|0;
   $146 = $145&255;
   $147 = (($142) + ($146))|0;
   $148 = (($143) + ($147))|0;
   $149 = ((($$3181209)) + 5|0);
   $150 = HEAP8[$149>>0]|0;
   $151 = $150&255;
   $152 = (($147) + ($151))|0;
   $153 = (($148) + ($152))|0;
   $154 = ((($$3181209)) + 6|0);
   $155 = HEAP8[$154>>0]|0;
   $156 = $155&255;
   $157 = (($152) + ($156))|0;
   $158 = (($153) + ($157))|0;
   $159 = ((($$3181209)) + 7|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = (($157) + ($161))|0;
   $163 = (($158) + ($162))|0;
   $164 = ((($$3181209)) + 8|0);
   $165 = HEAP8[$164>>0]|0;
   $166 = $165&255;
   $167 = (($162) + ($166))|0;
   $168 = (($163) + ($167))|0;
   $169 = ((($$3181209)) + 9|0);
   $170 = HEAP8[$169>>0]|0;
   $171 = $170&255;
   $172 = (($167) + ($171))|0;
   $173 = (($168) + ($172))|0;
   $174 = ((($$3181209)) + 10|0);
   $175 = HEAP8[$174>>0]|0;
   $176 = $175&255;
   $177 = (($172) + ($176))|0;
   $178 = (($173) + ($177))|0;
   $179 = ((($$3181209)) + 11|0);
   $180 = HEAP8[$179>>0]|0;
   $181 = $180&255;
   $182 = (($177) + ($181))|0;
   $183 = (($178) + ($182))|0;
   $184 = ((($$3181209)) + 12|0);
   $185 = HEAP8[$184>>0]|0;
   $186 = $185&255;
   $187 = (($182) + ($186))|0;
   $188 = (($183) + ($187))|0;
   $189 = ((($$3181209)) + 13|0);
   $190 = HEAP8[$189>>0]|0;
   $191 = $190&255;
   $192 = (($187) + ($191))|0;
   $193 = (($188) + ($192))|0;
   $194 = ((($$3181209)) + 14|0);
   $195 = HEAP8[$194>>0]|0;
   $196 = $195&255;
   $197 = (($192) + ($196))|0;
   $198 = (($193) + ($197))|0;
   $199 = ((($$3181209)) + 15|0);
   $200 = HEAP8[$199>>0]|0;
   $201 = $200&255;
   $202 = (($197) + ($201))|0;
   $203 = (($198) + ($202))|0;
   $204 = ((($$3181209)) + 16|0);
   $205 = ($124>>>0)>(15);
   if ($205) {
    $$2176210 = $124;$$3181209 = $204;$$4211 = $203;$$5188208 = $202;
   } else {
    break;
   }
  }
  $206 = (($121) - ($122))|0;
  $scevgep = (($$1179$lcssa246251) + ($123)|0);
  $207 = ($206|0)==(0);
  if ($207) {
   $$5$lcssa = $203;$$6189$lcssa = $202;
   label = 21;
  } else {
   $$3177201$ph = $206;$$4182200$ph = $scevgep;$$5202$ph = $203;$$6189199$ph = $202;
   label = 19;
  }
 }
 if ((label|0) == 19) {
  $$3177201 = $$3177201$ph;$$4182200 = $$4182200$ph;$$5202 = $$5202$ph;$$6189199 = $$6189199$ph;
  while(1) {
   $208 = (($$3177201) + -1)|0;
   $209 = ((($$4182200)) + 1|0);
   $210 = HEAP8[$$4182200>>0]|0;
   $211 = $210&255;
   $212 = (($$6189199) + ($211))|0;
   $213 = (($212) + ($$5202))|0;
   $214 = ($208|0)==(0);
   if ($214) {
    $$5$lcssa = $213;$$6189$lcssa = $212;
    label = 21;
    break;
   } else {
    $$3177201 = $208;$$4182200 = $209;$$5202 = $213;$$6189199 = $212;
   }
  }
 }
 if ((label|0) == 21) {
  $215 = (($$6189$lcssa>>>0) % 65521)&-1;
  $216 = (($$5$lcssa>>>0) % 65521)&-1;
  $$6 = $216;$$7 = $215;
 }
 $217 = $$6 << 16;
 $218 = $217 | $$7;
 $$0190 = $218;
 return ($$0190|0);
}
function _crc32($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa$i = 0, $$076$masked$i = 0, $$07699$i = 0, $$07898$i = 0, $$08297$i = 0, $$091$i = 0, $$1 = 0, $$1$lcssa$i = 0, $$177$lcssa$i = 0, $$17790$i = 0, $$179$lcssa$i = 0, $$17989$i = 0, $$183$i = 0, $$186$i = 0, $$2$lcssa$i = 0, $$280$lcssa$i = 0, $$28084$i = 0, $$285$i = 0, $$3$i = 0, $$3$masked$i = 0;
 var $$381$i = 0, $$4$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $scevgep$i = 0, $scevgep115$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0|0);
 if ($3) {
  $$1 = 0;
  return ($$1|0);
 }
 $4 = $0 ^ -1;
 $5 = ($2|0)==(0);
 L4: do {
  if ($5) {
   $$4$i = $4;
  } else {
   $$07699$i = $4;$$07898$i = $2;$$08297$i = $1;
   while(1) {
    $6 = $$08297$i;
    $7 = $6 & 3;
    $8 = ($7|0)==(0);
    if ($8) {
     break;
    }
    $9 = ((($$08297$i)) + 1|0);
    $10 = HEAP8[$$08297$i>>0]|0;
    $11 = $10&255;
    $$076$masked$i = $$07699$i & 255;
    $12 = $$076$masked$i ^ $11;
    $13 = (864 + ($12<<2)|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $$07699$i >>> 8;
    $16 = $14 ^ $15;
    $17 = (($$07898$i) + -1)|0;
    $18 = ($17|0)==(0);
    if ($18) {
     $$4$i = $16;
     break L4;
    } else {
     $$07699$i = $16;$$07898$i = $17;$$08297$i = $9;
    }
   }
   $19 = ($$07898$i>>>0)>(31);
   if ($19) {
    $20 = (($$07898$i) + -32)|0;
    $21 = $20 & -32;
    $22 = (($21) + 32)|0;
    $scevgep115$i = (($$08297$i) + ($22)|0);
    $$091$i = $$08297$i;$$17790$i = $$07699$i;$$17989$i = $$07898$i;
    while(1) {
     $23 = ((($$091$i)) + 4|0);
     $24 = HEAP32[$$091$i>>2]|0;
     $25 = $24 ^ $$17790$i;
     $26 = $25 & 255;
     $27 = (3936 + ($26<<2)|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = $25 >>> 8;
     $30 = $29 & 255;
     $31 = (2912 + ($30<<2)|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = $32 ^ $28;
     $34 = $25 >>> 16;
     $35 = $34 & 255;
     $36 = (1888 + ($35<<2)|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = $33 ^ $37;
     $39 = $25 >>> 24;
     $40 = (864 + ($39<<2)|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = $38 ^ $41;
     $43 = ((($$091$i)) + 8|0);
     $44 = HEAP32[$23>>2]|0;
     $45 = $42 ^ $44;
     $46 = $45 & 255;
     $47 = (3936 + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = $45 >>> 8;
     $50 = $49 & 255;
     $51 = (2912 + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = $52 ^ $48;
     $54 = $45 >>> 16;
     $55 = $54 & 255;
     $56 = (1888 + ($55<<2)|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = $53 ^ $57;
     $59 = $45 >>> 24;
     $60 = (864 + ($59<<2)|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = $58 ^ $61;
     $63 = ((($$091$i)) + 12|0);
     $64 = HEAP32[$43>>2]|0;
     $65 = $62 ^ $64;
     $66 = $65 & 255;
     $67 = (3936 + ($66<<2)|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = $65 >>> 8;
     $70 = $69 & 255;
     $71 = (2912 + ($70<<2)|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = $72 ^ $68;
     $74 = $65 >>> 16;
     $75 = $74 & 255;
     $76 = (1888 + ($75<<2)|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = $73 ^ $77;
     $79 = $65 >>> 24;
     $80 = (864 + ($79<<2)|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = $78 ^ $81;
     $83 = ((($$091$i)) + 16|0);
     $84 = HEAP32[$63>>2]|0;
     $85 = $82 ^ $84;
     $86 = $85 & 255;
     $87 = (3936 + ($86<<2)|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = $85 >>> 8;
     $90 = $89 & 255;
     $91 = (2912 + ($90<<2)|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = $92 ^ $88;
     $94 = $85 >>> 16;
     $95 = $94 & 255;
     $96 = (1888 + ($95<<2)|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = $93 ^ $97;
     $99 = $85 >>> 24;
     $100 = (864 + ($99<<2)|0);
     $101 = HEAP32[$100>>2]|0;
     $102 = $98 ^ $101;
     $103 = ((($$091$i)) + 20|0);
     $104 = HEAP32[$83>>2]|0;
     $105 = $102 ^ $104;
     $106 = $105 & 255;
     $107 = (3936 + ($106<<2)|0);
     $108 = HEAP32[$107>>2]|0;
     $109 = $105 >>> 8;
     $110 = $109 & 255;
     $111 = (2912 + ($110<<2)|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = $112 ^ $108;
     $114 = $105 >>> 16;
     $115 = $114 & 255;
     $116 = (1888 + ($115<<2)|0);
     $117 = HEAP32[$116>>2]|0;
     $118 = $113 ^ $117;
     $119 = $105 >>> 24;
     $120 = (864 + ($119<<2)|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = $118 ^ $121;
     $123 = ((($$091$i)) + 24|0);
     $124 = HEAP32[$103>>2]|0;
     $125 = $122 ^ $124;
     $126 = $125 & 255;
     $127 = (3936 + ($126<<2)|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = $125 >>> 8;
     $130 = $129 & 255;
     $131 = (2912 + ($130<<2)|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = $132 ^ $128;
     $134 = $125 >>> 16;
     $135 = $134 & 255;
     $136 = (1888 + ($135<<2)|0);
     $137 = HEAP32[$136>>2]|0;
     $138 = $133 ^ $137;
     $139 = $125 >>> 24;
     $140 = (864 + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = $138 ^ $141;
     $143 = ((($$091$i)) + 28|0);
     $144 = HEAP32[$123>>2]|0;
     $145 = $142 ^ $144;
     $146 = $145 & 255;
     $147 = (3936 + ($146<<2)|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = $145 >>> 8;
     $150 = $149 & 255;
     $151 = (2912 + ($150<<2)|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = $152 ^ $148;
     $154 = $145 >>> 16;
     $155 = $154 & 255;
     $156 = (1888 + ($155<<2)|0);
     $157 = HEAP32[$156>>2]|0;
     $158 = $153 ^ $157;
     $159 = $145 >>> 24;
     $160 = (864 + ($159<<2)|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = $158 ^ $161;
     $163 = ((($$091$i)) + 32|0);
     $164 = HEAP32[$143>>2]|0;
     $165 = $162 ^ $164;
     $166 = $165 & 255;
     $167 = (3936 + ($166<<2)|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = $165 >>> 8;
     $170 = $169 & 255;
     $171 = (2912 + ($170<<2)|0);
     $172 = HEAP32[$171>>2]|0;
     $173 = $172 ^ $168;
     $174 = $165 >>> 16;
     $175 = $174 & 255;
     $176 = (1888 + ($175<<2)|0);
     $177 = HEAP32[$176>>2]|0;
     $178 = $173 ^ $177;
     $179 = $165 >>> 24;
     $180 = (864 + ($179<<2)|0);
     $181 = HEAP32[$180>>2]|0;
     $182 = $178 ^ $181;
     $183 = (($$17989$i) + -32)|0;
     $184 = ($183>>>0)>(31);
     if ($184) {
      $$091$i = $163;$$17790$i = $182;$$17989$i = $183;
     } else {
      break;
     }
    }
    $185 = (($20) - ($21))|0;
    $$0$lcssa$i = $scevgep115$i;$$177$lcssa$i = $182;$$179$lcssa$i = $185;
   } else {
    $$0$lcssa$i = $$08297$i;$$177$lcssa$i = $$07699$i;$$179$lcssa$i = $$07898$i;
   }
   $186 = ($$179$lcssa$i>>>0)>(3);
   if ($186) {
    $187 = (($$179$lcssa$i) + -4)|0;
    $188 = $187 >>> 2;
    $$186$i = $$0$lcssa$i;$$28084$i = $$179$lcssa$i;$$285$i = $$177$lcssa$i;
    while(1) {
     $189 = ((($$186$i)) + 4|0);
     $190 = HEAP32[$$186$i>>2]|0;
     $191 = $190 ^ $$285$i;
     $192 = $191 & 255;
     $193 = (3936 + ($192<<2)|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = $191 >>> 8;
     $196 = $195 & 255;
     $197 = (2912 + ($196<<2)|0);
     $198 = HEAP32[$197>>2]|0;
     $199 = $198 ^ $194;
     $200 = $191 >>> 16;
     $201 = $200 & 255;
     $202 = (1888 + ($201<<2)|0);
     $203 = HEAP32[$202>>2]|0;
     $204 = $199 ^ $203;
     $205 = $191 >>> 24;
     $206 = (864 + ($205<<2)|0);
     $207 = HEAP32[$206>>2]|0;
     $208 = $204 ^ $207;
     $209 = (($$28084$i) + -4)|0;
     $210 = ($209>>>0)>(3);
     if ($210) {
      $$186$i = $189;$$28084$i = $209;$$285$i = $208;
     } else {
      break;
     }
    }
    $211 = (($188) + 1)|0;
    $scevgep$i = (($$0$lcssa$i) + ($211<<2)|0);
    $212 = $187 & 3;
    $$1$lcssa$i = $scevgep$i;$$2$lcssa$i = $208;$$280$lcssa$i = $212;
   } else {
    $$1$lcssa$i = $$0$lcssa$i;$$2$lcssa$i = $$177$lcssa$i;$$280$lcssa$i = $$179$lcssa$i;
   }
   $213 = ($$280$lcssa$i|0)==(0);
   if ($213) {
    $$4$i = $$2$lcssa$i;
   } else {
    $$183$i = $$1$lcssa$i;$$3$i = $$2$lcssa$i;$$381$i = $$280$lcssa$i;
    while(1) {
     $214 = ((($$183$i)) + 1|0);
     $215 = HEAP8[$$183$i>>0]|0;
     $216 = $215&255;
     $$3$masked$i = $$3$i & 255;
     $217 = $$3$masked$i ^ $216;
     $218 = (864 + ($217<<2)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = $$3$i >>> 8;
     $221 = $219 ^ $220;
     $222 = (($$381$i) + -1)|0;
     $223 = ($222|0)==(0);
     if ($223) {
      $$4$i = $221;
      break;
     } else {
      $$183$i = $214;$$3$i = $221;$$381$i = $222;
     }
    }
   }
  }
 } while(0);
 $224 = $$4$i ^ -1;
 $$1 = $224;
 return ($$1|0);
}
function _deflateInit2_($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0 = 0, $$0113 = 0, $$0115 = 0, $$off = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond119 = 0;
 var $or$cond5 = 0, $spec$select = 0, $spec$select116 = 0, $spec$select117 = 0, $spec$select118 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $8 = ($6|0)==(0|0);
 if ($8) {
  $$0 = -6;
  return ($$0|0);
 }
 $9 = HEAP8[$6>>0]|0;
 $10 = ($9<<24>>24)!=(49);
 $11 = ($7|0)!=(56);
 $or$cond = $11 | $10;
 if ($or$cond) {
  $$0 = -6;
  return ($$0|0);
 }
 $12 = ($0|0)==(0|0);
 if ($12) {
  $$0 = -2;
  return ($$0|0);
 }
 $13 = ((($0)) + 24|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($0)) + 32|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  HEAP32[$14>>2] = 68;
  $17 = ((($0)) + 40|0);
  HEAP32[$17>>2] = 0;
  $38 = 68;
 } else {
  $38 = $15;
 }
 $18 = ((($0)) + 36|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(0|0);
 if ($20) {
  HEAP32[$18>>2] = 69;
 }
 $21 = ($1|0)==(-1);
 $spec$select = $21 ? 6 : $1;
 $22 = ($3|0)<(0);
 if ($22) {
  $23 = (0 - ($3))|0;
  $$0113 = 0;$$0115 = $23;
 } else {
  $24 = ($3|0)>(15);
  $25 = (($3) + -16)|0;
  $spec$select116 = $24 ? $25 : $3;
  $spec$select117 = $24 ? 2 : 1;
  $$0113 = $spec$select117;$$0115 = $spec$select116;
 }
 $$off = (($4) + -1)|0;
 $26 = ($$off>>>0)>(8);
 $27 = ($2|0)!=(8);
 $or$cond5 = $27 | $26;
 $28 = $$0115 & -8;
 $29 = ($28|0)!=(8);
 $30 = $or$cond5 | $29;
 $31 = ($spec$select>>>0)>(9);
 $32 = $31 | $30;
 $33 = ($5>>>0)>(4);
 $34 = $33 | $32;
 if ($34) {
  $$0 = -2;
  return ($$0|0);
 }
 $35 = ($$0115|0)==(8);
 $spec$select118 = $35 ? 9 : $$0115;
 $36 = ((($0)) + 40|0);
 $37 = HEAP32[$36>>2]|0;
 $39 = (FUNCTION_TABLE_iiii[$38 & 127]($37,1,5828)|0);
 $40 = ($39|0)==(0|0);
 if ($40) {
  $$0 = -4;
  return ($$0|0);
 }
 $41 = ((($0)) + 28|0);
 HEAP32[$41>>2] = $39;
 HEAP32[$39>>2] = $0;
 $42 = ((($39)) + 24|0);
 HEAP32[$42>>2] = $$0113;
 $43 = ((($39)) + 28|0);
 HEAP32[$43>>2] = 0;
 $44 = ((($39)) + 48|0);
 HEAP32[$44>>2] = $spec$select118;
 $45 = 1 << $spec$select118;
 $46 = ((($39)) + 44|0);
 HEAP32[$46>>2] = $45;
 $47 = (($45) + -1)|0;
 $48 = ((($39)) + 52|0);
 HEAP32[$48>>2] = $47;
 $49 = (($4) + 7)|0;
 $50 = ((($39)) + 80|0);
 HEAP32[$50>>2] = $49;
 $51 = 1 << $49;
 $52 = ((($39)) + 76|0);
 HEAP32[$52>>2] = $51;
 $53 = (($51) + -1)|0;
 $54 = ((($39)) + 84|0);
 HEAP32[$54>>2] = $53;
 $55 = (($4) + 9)|0;
 $56 = (($55>>>0) / 3)&-1;
 $57 = ((($39)) + 88|0);
 HEAP32[$57>>2] = $56;
 $58 = HEAP32[$14>>2]|0;
 $59 = HEAP32[$36>>2]|0;
 $60 = (FUNCTION_TABLE_iiii[$58 & 127]($59,$45,2)|0);
 $61 = ((($39)) + 56|0);
 HEAP32[$61>>2] = $60;
 $62 = HEAP32[$14>>2]|0;
 $63 = HEAP32[$36>>2]|0;
 $64 = HEAP32[$46>>2]|0;
 $65 = (FUNCTION_TABLE_iiii[$62 & 127]($63,$64,2)|0);
 $66 = ((($39)) + 64|0);
 HEAP32[$66>>2] = $65;
 $67 = HEAP32[$14>>2]|0;
 $68 = HEAP32[$36>>2]|0;
 $69 = HEAP32[$52>>2]|0;
 $70 = (FUNCTION_TABLE_iiii[$67 & 127]($68,$69,2)|0);
 $71 = ((($39)) + 68|0);
 HEAP32[$71>>2] = $70;
 $72 = ((($39)) + 5824|0);
 HEAP32[$72>>2] = 0;
 $73 = (($4) + 6)|0;
 $74 = 1 << $73;
 $75 = ((($39)) + 5788|0);
 HEAP32[$75>>2] = $74;
 $76 = HEAP32[$14>>2]|0;
 $77 = HEAP32[$36>>2]|0;
 $78 = (FUNCTION_TABLE_iiii[$76 & 127]($77,$74,4)|0);
 $79 = ((($39)) + 8|0);
 HEAP32[$79>>2] = $78;
 $80 = HEAP32[$75>>2]|0;
 $81 = $80 << 2;
 $82 = ((($39)) + 12|0);
 HEAP32[$82>>2] = $81;
 $83 = HEAP32[$61>>2]|0;
 $84 = ($83|0)==(0|0);
 if (!($84)) {
  $85 = HEAP32[$66>>2]|0;
  $86 = ($85|0)==(0|0);
  if (!($86)) {
   $87 = HEAP32[$71>>2]|0;
   $88 = ($87|0)==(0|0);
   $89 = ($78|0)==(0|0);
   $or$cond119 = $89 | $88;
   if (!($or$cond119)) {
    $92 = $80 >>> 1;
    $93 = (($78) + ($92<<1)|0);
    $94 = ((($39)) + 5796|0);
    HEAP32[$94>>2] = $93;
    $95 = ($80*3)|0;
    $96 = (($78) + ($95)|0);
    $97 = ((($39)) + 5784|0);
    HEAP32[$97>>2] = $96;
    $98 = ((($39)) + 132|0);
    HEAP32[$98>>2] = $spec$select;
    $99 = ((($39)) + 136|0);
    HEAP32[$99>>2] = $5;
    $100 = ((($39)) + 36|0);
    HEAP8[$100>>0] = 8;
    $101 = (_deflateReset($0)|0);
    $$0 = $101;
    return ($$0|0);
   }
  }
 }
 $90 = ((($39)) + 4|0);
 HEAP32[$90>>2] = 666;
 $91 = HEAP32[(9808)>>2]|0;
 HEAP32[$13>>2] = $91;
 (_deflateEnd($0)|0);
 $$0 = -4;
 return ($$0|0);
}
function _deflateEnd($0) {
 $0 = $0|0;
 var $$0 = 0, $$in = 0, $$in51 = 0, $$in52 = 0, $$pre = 0, $$pre$phi48Z2D = 0, $$pre$phiZ2D = 0, $$pre43 = 0, $$pre44 = 0, $$pre45 = 0, $$pre46 = 0, $$pre47 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = -2;
  return ($$0|0);
 }
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = -2;
  return ($$0|0);
 }
 $5 = ((($3)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 switch ($6|0) {
 case 42: case 69: case 73: case 91: case 103: case 113: case 666:  {
  break;
 }
 default: {
  $$0 = -2;
  return ($$0|0);
 }
 }
 $7 = ((($3)) + 8|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$in = $3;
 } else {
  $10 = ((($0)) + 36|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 40|0);
  $13 = HEAP32[$12>>2]|0;
  FUNCTION_TABLE_vii[$11 & 127]($13,$8);
  $$pre = HEAP32[$2>>2]|0;
  $$in = $$pre;
 }
 $14 = ((($$in)) + 68|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $$in51 = $$in;
 } else {
  $17 = ((($0)) + 36|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($0)) + 40|0);
  $20 = HEAP32[$19>>2]|0;
  FUNCTION_TABLE_vii[$18 & 127]($20,$15);
  $$pre43 = HEAP32[$2>>2]|0;
  $$in51 = $$pre43;
 }
 $21 = ((($$in51)) + 64|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)==(0|0);
 if ($23) {
  $$in52 = $$in51;
 } else {
  $24 = ((($0)) + 36|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = ((($0)) + 40|0);
  $27 = HEAP32[$26>>2]|0;
  FUNCTION_TABLE_vii[$25 & 127]($27,$22);
  $$pre44 = HEAP32[$2>>2]|0;
  $$in52 = $$pre44;
 }
 $28 = ((($$in52)) + 56|0);
 $29 = HEAP32[$28>>2]|0;
 $30 = ($29|0)==(0|0);
 if ($30) {
  $$pre46 = ((($0)) + 36|0);
  $$pre47 = ((($0)) + 40|0);
  $$pre$phi48Z2D = $$pre47;$$pre$phiZ2D = $$pre46;$37 = $$in52;
 } else {
  $31 = ((($0)) + 36|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($0)) + 40|0);
  $34 = HEAP32[$33>>2]|0;
  FUNCTION_TABLE_vii[$32 & 127]($34,$29);
  $$pre45 = HEAP32[$2>>2]|0;
  $$pre$phi48Z2D = $33;$$pre$phiZ2D = $31;$37 = $$pre45;
 }
 $35 = HEAP32[$$pre$phiZ2D>>2]|0;
 $36 = HEAP32[$$pre$phi48Z2D>>2]|0;
 FUNCTION_TABLE_vii[$35 & 127]($36,$37);
 HEAP32[$2>>2] = 0;
 $38 = ($6|0)==(113);
 $39 = $38 ? -3 : 0;
 $$0 = $39;
 return ($$0|0);
}
function _deflateReset($0) {
 $0 = $0|0;
 var $$0$i4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0$i4 = -2;
  return ($$0$i4|0);
 }
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0$i4 = -2;
  return ($$0$i4|0);
 }
 $5 = ((($0)) + 32|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0$i4 = -2;
  return ($$0$i4|0);
 }
 $8 = ((($0)) + 36|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $$0$i4 = -2;
  return ($$0$i4|0);
 }
 $11 = ((($0)) + 20|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($0)) + 8|0);
 HEAP32[$12>>2] = 0;
 $13 = ((($0)) + 24|0);
 HEAP32[$13>>2] = 0;
 $14 = ((($0)) + 44|0);
 HEAP32[$14>>2] = 2;
 $15 = ((($3)) + 20|0);
 HEAP32[$15>>2] = 0;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 16|0);
 HEAP32[$18>>2] = $17;
 $19 = ((($3)) + 24|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)<(0);
 $22 = (0 - ($20))|0;
 if ($21) {
  HEAP32[$19>>2] = $22;
  $23 = $22;
 } else {
  $23 = $20;
 }
 $24 = ($23|0)==(0);
 $25 = $24 ? 113 : 42;
 $26 = ((($3)) + 4|0);
 HEAP32[$26>>2] = $25;
 $27 = ($23|0)==(2);
 if ($27) {
  $28 = (_crc32(0,0,0)|0);
  $31 = $28;
 } else {
  $29 = (_adler32(0,0,0)|0);
  $31 = $29;
 }
 $30 = ((($0)) + 48|0);
 HEAP32[$30>>2] = $31;
 $32 = ((($3)) + 40|0);
 HEAP32[$32>>2] = 0;
 __tr_init($3);
 $33 = HEAP32[$2>>2]|0;
 $34 = ((($33)) + 44|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = $35 << 1;
 $37 = ((($33)) + 60|0);
 HEAP32[$37>>2] = $36;
 $38 = ((($33)) + 68|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ((($33)) + 76|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = (($41) + -1)|0;
 $43 = (($39) + ($42<<1)|0);
 HEAP16[$43>>1] = 0;
 $44 = $41 << 1;
 $45 = (($44) + -2)|0;
 _memset(($39|0),0,($45|0))|0;
 $46 = ((($33)) + 132|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = (((9056 + (($47*12)|0)|0)) + 2|0);
 $49 = HEAP16[$48>>1]|0;
 $50 = $49&65535;
 $51 = ((($33)) + 128|0);
 HEAP32[$51>>2] = $50;
 $52 = (9056 + (($47*12)|0)|0);
 $53 = HEAP16[$52>>1]|0;
 $54 = $53&65535;
 $55 = ((($33)) + 140|0);
 HEAP32[$55>>2] = $54;
 $56 = (((9056 + (($47*12)|0)|0)) + 4|0);
 $57 = HEAP16[$56>>1]|0;
 $58 = $57&65535;
 $59 = ((($33)) + 144|0);
 HEAP32[$59>>2] = $58;
 $60 = (((9056 + (($47*12)|0)|0)) + 6|0);
 $61 = HEAP16[$60>>1]|0;
 $62 = $61&65535;
 $63 = ((($33)) + 124|0);
 HEAP32[$63>>2] = $62;
 $64 = ((($33)) + 108|0);
 HEAP32[$64>>2] = 0;
 $65 = ((($33)) + 92|0);
 HEAP32[$65>>2] = 0;
 $66 = ((($33)) + 116|0);
 HEAP32[$66>>2] = 0;
 $67 = ((($33)) + 5812|0);
 HEAP32[$67>>2] = 0;
 $68 = ((($33)) + 120|0);
 HEAP32[$68>>2] = 2;
 $69 = ((($33)) + 96|0);
 HEAP32[$69>>2] = 2;
 $70 = ((($33)) + 104|0);
 HEAP32[$70>>2] = 0;
 $71 = ((($33)) + 72|0);
 HEAP32[$71>>2] = 0;
 $$0$i4 = 0;
 return ($$0$i4|0);
}
function _deflate_stored($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$pr = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $spec$select = 0, $spec$select$i = 0, $spec$select$i72 = 0, $spec$select$i74 = 0, $spec$select$i76 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (($3) + -5)|0;
 $5 = ($4>>>0)<(65535);
 $spec$select = $5 ? $4 : 65535;
 $6 = ((($0)) + 116|0);
 $7 = ((($0)) + 108|0);
 $8 = ((($0)) + 92|0);
 $9 = ((($0)) + 44|0);
 $10 = ((($0)) + 56|0);
 while(1) {
  $11 = HEAP32[$6>>2]|0;
  $12 = ($11>>>0)<(2);
  if ($12) {
   _fill_window($0);
   $13 = HEAP32[$6>>2]|0;
   $14 = $13 | $1;
   $15 = ($14|0)==(0);
   if ($15) {
    $$0 = 0;
    label = 36;
    break;
   }
   $16 = ($13|0)==(0);
   if ($16) {
    label = 21;
    break;
   } else {
    $19 = $13;
   }
  } else {
   $19 = $11;
  }
  $17 = HEAP32[$7>>2]|0;
  $18 = (($17) + ($19))|0;
  HEAP32[$7>>2] = $18;
  HEAP32[$6>>2] = 0;
  $20 = HEAP32[$8>>2]|0;
  $21 = (($20) + ($spec$select))|0;
  $22 = ($18|0)!=(0);
  $23 = ($18>>>0)<($21>>>0);
  $or$cond = $22 & $23;
  if ($or$cond) {
   $62 = $20;$63 = $18;
  } else {
   $24 = (($18) - ($21))|0;
   HEAP32[$6>>2] = $24;
   HEAP32[$7>>2] = $21;
   $25 = ($20|0)>(-1);
   if ($25) {
    $26 = HEAP32[$10>>2]|0;
    $27 = (($26) + ($20)|0);
    $28 = $27;
   } else {
    $28 = 0;
   }
   __tr_flush_block($0,$28,$spec$select,0);
   $29 = HEAP32[$7>>2]|0;
   HEAP32[$8>>2] = $29;
   $30 = HEAP32[$0>>2]|0;
   $31 = ((($30)) + 28|0);
   $32 = HEAP32[$31>>2]|0;
   __tr_flush_bits($32);
   $33 = ((($32)) + 20|0);
   $34 = HEAP32[$33>>2]|0;
   $35 = ((($30)) + 16|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ($34>>>0)>($36>>>0);
   $spec$select$i = $37 ? $36 : $34;
   $38 = ($spec$select$i|0)==(0);
   if (!($38)) {
    $39 = ((($30)) + 12|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ((($32)) + 16|0);
    $42 = HEAP32[$41>>2]|0;
    _memcpy(($40|0),($42|0),($spec$select$i|0))|0;
    $43 = HEAP32[$39>>2]|0;
    $44 = (($43) + ($spec$select$i)|0);
    HEAP32[$39>>2] = $44;
    $45 = HEAP32[$41>>2]|0;
    $46 = (($45) + ($spec$select$i)|0);
    HEAP32[$41>>2] = $46;
    $47 = ((($30)) + 20|0);
    $48 = HEAP32[$47>>2]|0;
    $49 = (($48) + ($spec$select$i))|0;
    HEAP32[$47>>2] = $49;
    $50 = HEAP32[$35>>2]|0;
    $51 = (($50) - ($spec$select$i))|0;
    HEAP32[$35>>2] = $51;
    $52 = HEAP32[$33>>2]|0;
    $53 = (($52) - ($spec$select$i))|0;
    HEAP32[$33>>2] = $53;
    $54 = ($53|0)==(0);
    if ($54) {
     $55 = ((($32)) + 8|0);
     $56 = HEAP32[$55>>2]|0;
     HEAP32[$41>>2] = $56;
    }
   }
   $57 = HEAP32[$0>>2]|0;
   $58 = ((($57)) + 16|0);
   $59 = HEAP32[$58>>2]|0;
   $60 = ($59|0)==(0);
   if ($60) {
    $$0 = 0;
    label = 36;
    break;
   }
   $$pr = HEAP32[$8>>2]|0;
   $$pre = HEAP32[$7>>2]|0;
   $62 = $$pr;$63 = $$pre;
  }
  $61 = (($63) - ($62))|0;
  $64 = HEAP32[$9>>2]|0;
  $65 = (($64) + -262)|0;
  $66 = ($61>>>0)<($65>>>0);
  if (!($66)) {
   $67 = ($62|0)>(-1);
   if ($67) {
    $68 = HEAP32[$10>>2]|0;
    $69 = (($68) + ($62)|0);
    $70 = $69;
   } else {
    $70 = 0;
   }
   __tr_flush_block($0,$70,$61,0);
   $71 = HEAP32[$7>>2]|0;
   HEAP32[$8>>2] = $71;
   $72 = HEAP32[$0>>2]|0;
   $73 = ((($72)) + 28|0);
   $74 = HEAP32[$73>>2]|0;
   __tr_flush_bits($74);
   $75 = ((($74)) + 20|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ((($72)) + 16|0);
   $78 = HEAP32[$77>>2]|0;
   $79 = ($76>>>0)>($78>>>0);
   $spec$select$i72 = $79 ? $78 : $76;
   $80 = ($spec$select$i72|0)==(0);
   if (!($80)) {
    $81 = ((($72)) + 12|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ((($74)) + 16|0);
    $84 = HEAP32[$83>>2]|0;
    _memcpy(($82|0),($84|0),($spec$select$i72|0))|0;
    $85 = HEAP32[$81>>2]|0;
    $86 = (($85) + ($spec$select$i72)|0);
    HEAP32[$81>>2] = $86;
    $87 = HEAP32[$83>>2]|0;
    $88 = (($87) + ($spec$select$i72)|0);
    HEAP32[$83>>2] = $88;
    $89 = ((($72)) + 20|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = (($90) + ($spec$select$i72))|0;
    HEAP32[$89>>2] = $91;
    $92 = HEAP32[$77>>2]|0;
    $93 = (($92) - ($spec$select$i72))|0;
    HEAP32[$77>>2] = $93;
    $94 = HEAP32[$75>>2]|0;
    $95 = (($94) - ($spec$select$i72))|0;
    HEAP32[$75>>2] = $95;
    $96 = ($95|0)==(0);
    if ($96) {
     $97 = ((($74)) + 8|0);
     $98 = HEAP32[$97>>2]|0;
     HEAP32[$83>>2] = $98;
    }
   }
   $99 = HEAP32[$0>>2]|0;
   $100 = ((($99)) + 16|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ($101|0)==(0);
   if ($102) {
    $$0 = 0;
    label = 36;
    break;
   }
  }
 }
 if ((label|0) == 21) {
  $103 = ((($0)) + 5812|0);
  HEAP32[$103>>2] = 0;
  $104 = ($1|0)==(4);
  if ($104) {
   $105 = HEAP32[$8>>2]|0;
   $106 = ($105|0)>(-1);
   if ($106) {
    $107 = HEAP32[$10>>2]|0;
    $108 = (($107) + ($105)|0);
    $111 = $108;
   } else {
    $111 = 0;
   }
   $109 = HEAP32[$7>>2]|0;
   $110 = (($109) - ($105))|0;
   __tr_flush_block($0,$111,$110,1);
   $112 = HEAP32[$7>>2]|0;
   HEAP32[$8>>2] = $112;
   $113 = HEAP32[$0>>2]|0;
   $114 = ((($113)) + 28|0);
   $115 = HEAP32[$114>>2]|0;
   __tr_flush_bits($115);
   $116 = ((($115)) + 20|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = ((($113)) + 16|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ($117>>>0)>($119>>>0);
   $spec$select$i74 = $120 ? $119 : $117;
   $121 = ($spec$select$i74|0)==(0);
   if (!($121)) {
    $122 = ((($113)) + 12|0);
    $123 = HEAP32[$122>>2]|0;
    $124 = ((($115)) + 16|0);
    $125 = HEAP32[$124>>2]|0;
    _memcpy(($123|0),($125|0),($spec$select$i74|0))|0;
    $126 = HEAP32[$122>>2]|0;
    $127 = (($126) + ($spec$select$i74)|0);
    HEAP32[$122>>2] = $127;
    $128 = HEAP32[$124>>2]|0;
    $129 = (($128) + ($spec$select$i74)|0);
    HEAP32[$124>>2] = $129;
    $130 = ((($113)) + 20|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = (($131) + ($spec$select$i74))|0;
    HEAP32[$130>>2] = $132;
    $133 = HEAP32[$118>>2]|0;
    $134 = (($133) - ($spec$select$i74))|0;
    HEAP32[$118>>2] = $134;
    $135 = HEAP32[$116>>2]|0;
    $136 = (($135) - ($spec$select$i74))|0;
    HEAP32[$116>>2] = $136;
    $137 = ($136|0)==(0);
    if ($137) {
     $138 = ((($115)) + 8|0);
     $139 = HEAP32[$138>>2]|0;
     HEAP32[$124>>2] = $139;
    }
   }
   $140 = HEAP32[$0>>2]|0;
   $141 = ((($140)) + 16|0);
   $142 = HEAP32[$141>>2]|0;
   $143 = ($142|0)==(0);
   $$ = $143 ? 2 : 3;
   $$0 = $$;
   return ($$0|0);
  }
  $144 = HEAP32[$7>>2]|0;
  $145 = HEAP32[$8>>2]|0;
  $146 = ($144|0)>($145|0);
  if ($146) {
   $147 = ($145|0)>(-1);
   if ($147) {
    $148 = HEAP32[$10>>2]|0;
    $149 = (($148) + ($145)|0);
    $151 = $149;
   } else {
    $151 = 0;
   }
   $150 = (($144) - ($145))|0;
   __tr_flush_block($0,$151,$150,0);
   $152 = HEAP32[$7>>2]|0;
   HEAP32[$8>>2] = $152;
   $153 = HEAP32[$0>>2]|0;
   $154 = ((($153)) + 28|0);
   $155 = HEAP32[$154>>2]|0;
   __tr_flush_bits($155);
   $156 = ((($155)) + 20|0);
   $157 = HEAP32[$156>>2]|0;
   $158 = ((($153)) + 16|0);
   $159 = HEAP32[$158>>2]|0;
   $160 = ($157>>>0)>($159>>>0);
   $spec$select$i76 = $160 ? $159 : $157;
   $161 = ($spec$select$i76|0)==(0);
   if (!($161)) {
    $162 = ((($153)) + 12|0);
    $163 = HEAP32[$162>>2]|0;
    $164 = ((($155)) + 16|0);
    $165 = HEAP32[$164>>2]|0;
    _memcpy(($163|0),($165|0),($spec$select$i76|0))|0;
    $166 = HEAP32[$162>>2]|0;
    $167 = (($166) + ($spec$select$i76)|0);
    HEAP32[$162>>2] = $167;
    $168 = HEAP32[$164>>2]|0;
    $169 = (($168) + ($spec$select$i76)|0);
    HEAP32[$164>>2] = $169;
    $170 = ((($153)) + 20|0);
    $171 = HEAP32[$170>>2]|0;
    $172 = (($171) + ($spec$select$i76))|0;
    HEAP32[$170>>2] = $172;
    $173 = HEAP32[$158>>2]|0;
    $174 = (($173) - ($spec$select$i76))|0;
    HEAP32[$158>>2] = $174;
    $175 = HEAP32[$156>>2]|0;
    $176 = (($175) - ($spec$select$i76))|0;
    HEAP32[$156>>2] = $176;
    $177 = ($176|0)==(0);
    if ($177) {
     $178 = ((($155)) + 8|0);
     $179 = HEAP32[$178>>2]|0;
     HEAP32[$164>>2] = $179;
    }
   }
   $180 = HEAP32[$0>>2]|0;
   $181 = ((($180)) + 16|0);
   $182 = HEAP32[$181>>2]|0;
   $183 = ($182|0)==(0);
   if ($183) {
    $$0 = 0;
    return ($$0|0);
   }
  }
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 36) {
  return ($$0|0);
 }
 return (0)|0;
}
function _deflate_fast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $$0135 = 0, $$pr = 0, $$pre = 0, $$pre142 = 0, $$pre143 = 0, $$pre144 = 0, $$pre145 = 0, $$pre146 = 0, $$pre147 = 0, $$pre148 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond136 = 0, $spec$select = 0, $spec$select$i = 0, $spec$select$i137 = 0, $spec$select$i139 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 116|0);
 $3 = ($1|0)==(0);
 $4 = ((($0)) + 72|0);
 $5 = ((($0)) + 88|0);
 $6 = ((($0)) + 56|0);
 $7 = ((($0)) + 108|0);
 $8 = ((($0)) + 84|0);
 $9 = ((($0)) + 68|0);
 $10 = ((($0)) + 64|0);
 $11 = ((($0)) + 52|0);
 $12 = ((($0)) + 96|0);
 $13 = ((($0)) + 44|0);
 $14 = ((($0)) + 112|0);
 $15 = ((($0)) + 5796|0);
 $16 = ((($0)) + 5792|0);
 $17 = ((($0)) + 5784|0);
 $18 = ((($0)) + 5788|0);
 $19 = ((($0)) + 128|0);
 $20 = ((($0)) + 92|0);
 while(1) {
  $21 = HEAP32[$2>>2]|0;
  $22 = ($21>>>0)<(262);
  if ($22) {
   _fill_window($0);
   $23 = HEAP32[$2>>2]|0;
   $24 = ($23>>>0)<(262);
   $or$cond = $3 & $24;
   if ($or$cond) {
    $$0 = 0;
    label = 40;
    break;
   }
   $25 = ($23|0)==(0);
   if ($25) {
    label = 25;
    break;
   }
   $26 = ($23>>>0)>(2);
   if ($26) {
    label = 6;
   } else {
    label = 9;
   }
  } else {
   label = 6;
  }
  if ((label|0) == 6) {
   label = 0;
   $27 = HEAP32[$4>>2]|0;
   $28 = HEAP32[$5>>2]|0;
   $29 = $27 << $28;
   $30 = HEAP32[$6>>2]|0;
   $31 = HEAP32[$7>>2]|0;
   $32 = (($31) + 2)|0;
   $33 = (($30) + ($32)|0);
   $34 = HEAP8[$33>>0]|0;
   $35 = $34&255;
   $36 = $29 ^ $35;
   $37 = HEAP32[$8>>2]|0;
   $38 = $36 & $37;
   HEAP32[$4>>2] = $38;
   $39 = HEAP32[$9>>2]|0;
   $40 = (($39) + ($38<<1)|0);
   $41 = HEAP16[$40>>1]|0;
   $42 = HEAP32[$10>>2]|0;
   $43 = HEAP32[$11>>2]|0;
   $44 = $43 & $31;
   $45 = (($42) + ($44<<1)|0);
   HEAP16[$45>>1] = $41;
   $46 = $41&65535;
   $47 = $31&65535;
   HEAP16[$40>>1] = $47;
   $48 = ($41<<16>>16)==(0);
   if ($48) {
    label = 9;
   } else {
    $49 = (($31) - ($46))|0;
    $50 = HEAP32[$13>>2]|0;
    $51 = (($50) + -262)|0;
    $52 = ($49>>>0)>($51>>>0);
    if ($52) {
     label = 9;
    } else {
     $53 = (_longest_match($0,$46)|0);
     HEAP32[$12>>2] = $53;
     $54 = $53;
    }
   }
  }
  if ((label|0) == 9) {
   label = 0;
   $$pr = HEAP32[$12>>2]|0;
   $54 = $$pr;
  }
  $55 = ($54>>>0)>(2);
  do {
   if ($55) {
    $56 = (($54) + 253)|0;
    $57 = $56&255;
    $58 = HEAP32[$7>>2]|0;
    $59 = HEAP32[$14>>2]|0;
    $60 = (($58) - ($59))|0;
    $61 = $60&65535;
    $62 = HEAP32[$15>>2]|0;
    $63 = HEAP32[$16>>2]|0;
    $64 = (($62) + ($63<<1)|0);
    HEAP16[$64>>1] = $61;
    $65 = HEAP32[$17>>2]|0;
    $66 = (($63) + 1)|0;
    HEAP32[$16>>2] = $66;
    $67 = (($65) + ($63)|0);
    HEAP8[$67>>0] = $57;
    $68 = (($60) + 65535)|0;
    $69 = $56 & 255;
    $70 = (28373 + ($69)|0);
    $71 = HEAP8[$70>>0]|0;
    $72 = $71&255;
    $73 = $72 | 256;
    $74 = (($73) + 1)|0;
    $75 = (((($0)) + 148|0) + ($74<<2)|0);
    $76 = HEAP16[$75>>1]|0;
    $77 = (($76) + 1)<<16>>16;
    HEAP16[$75>>1] = $77;
    $78 = $68 & 65535;
    $79 = ($78>>>0)<(256);
    $80 = $78 >>> 7;
    $81 = (($80) + 256)|0;
    $$sink = $79 ? $78 : $81;
    $82 = (27861 + ($$sink)|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $83&255;
    $85 = (((($0)) + 2440|0) + ($84<<2)|0);
    $86 = HEAP16[$85>>1]|0;
    $87 = (($86) + 1)<<16>>16;
    HEAP16[$85>>1] = $87;
    $88 = HEAP32[$16>>2]|0;
    $89 = HEAP32[$18>>2]|0;
    $90 = (($89) + -1)|0;
    $91 = ($88|0)==($90|0);
    $92 = $91&1;
    $93 = HEAP32[$12>>2]|0;
    $94 = HEAP32[$2>>2]|0;
    $95 = (($94) - ($93))|0;
    HEAP32[$2>>2] = $95;
    $96 = HEAP32[$19>>2]|0;
    $97 = ($93>>>0)<=($96>>>0);
    $98 = ($95>>>0)>(2);
    $or$cond136 = $98 & $97;
    if (!($or$cond136)) {
     $119 = HEAP32[$7>>2]|0;
     $120 = (($119) + ($93))|0;
     HEAP32[$7>>2] = $120;
     HEAP32[$12>>2] = 0;
     $121 = HEAP32[$6>>2]|0;
     $122 = (($121) + ($120)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     HEAP32[$4>>2] = $124;
     $125 = HEAP32[$5>>2]|0;
     $126 = $124 << $125;
     $127 = (($120) + 1)|0;
     $128 = (($121) + ($127)|0);
     $129 = HEAP8[$128>>0]|0;
     $130 = $129&255;
     $131 = $126 ^ $130;
     $132 = HEAP32[$8>>2]|0;
     $133 = $131 & $132;
     HEAP32[$4>>2] = $133;
     $$0135 = $92;$163 = $120;
     break;
    }
    $99 = (($93) + -1)|0;
    HEAP32[$12>>2] = $99;
    $$pre = HEAP32[$7>>2]|0;
    $$pre142 = HEAP32[$4>>2]|0;
    $$pre143 = HEAP32[$5>>2]|0;
    $$pre144 = HEAP32[$6>>2]|0;
    $$pre145 = HEAP32[$8>>2]|0;
    $$pre146 = HEAP32[$9>>2]|0;
    $$pre147 = HEAP32[$10>>2]|0;
    $$pre148 = HEAP32[$11>>2]|0;
    $101 = $$pre;$103 = $$pre142;$116 = $99;
    while(1) {
     $100 = (($101) + 1)|0;
     HEAP32[$7>>2] = $100;
     $102 = $103 << $$pre143;
     $104 = (($101) + 3)|0;
     $105 = (($$pre144) + ($104)|0);
     $106 = HEAP8[$105>>0]|0;
     $107 = $106&255;
     $108 = $102 ^ $107;
     $109 = $108 & $$pre145;
     HEAP32[$4>>2] = $109;
     $110 = (($$pre146) + ($109<<1)|0);
     $111 = HEAP16[$110>>1]|0;
     $112 = $$pre148 & $100;
     $113 = (($$pre147) + ($112<<1)|0);
     HEAP16[$113>>1] = $111;
     $114 = $100&65535;
     HEAP16[$110>>1] = $114;
     $115 = (($116) + -1)|0;
     HEAP32[$12>>2] = $115;
     $117 = ($115|0)==(0);
     if ($117) {
      break;
     } else {
      $101 = $100;$103 = $109;$116 = $115;
     }
    }
    $118 = (($101) + 2)|0;
    HEAP32[$7>>2] = $118;
    $$0135 = $92;$163 = $118;
   } else {
    $134 = HEAP32[$6>>2]|0;
    $135 = HEAP32[$7>>2]|0;
    $136 = (($134) + ($135)|0);
    $137 = HEAP8[$136>>0]|0;
    $138 = HEAP32[$15>>2]|0;
    $139 = HEAP32[$16>>2]|0;
    $140 = (($138) + ($139<<1)|0);
    HEAP16[$140>>1] = 0;
    $141 = HEAP32[$17>>2]|0;
    $142 = (($139) + 1)|0;
    HEAP32[$16>>2] = $142;
    $143 = (($141) + ($139)|0);
    HEAP8[$143>>0] = $137;
    $144 = $137&255;
    $145 = (((($0)) + 148|0) + ($144<<2)|0);
    $146 = HEAP16[$145>>1]|0;
    $147 = (($146) + 1)<<16>>16;
    HEAP16[$145>>1] = $147;
    $148 = HEAP32[$16>>2]|0;
    $149 = HEAP32[$18>>2]|0;
    $150 = (($149) + -1)|0;
    $151 = ($148|0)==($150|0);
    $152 = $151&1;
    $153 = HEAP32[$2>>2]|0;
    $154 = (($153) + -1)|0;
    HEAP32[$2>>2] = $154;
    $155 = HEAP32[$7>>2]|0;
    $156 = (($155) + 1)|0;
    HEAP32[$7>>2] = $156;
    $$0135 = $152;$163 = $156;
   }
  } while(0);
  $157 = ($$0135|0)==(0);
  if (!($157)) {
   $158 = HEAP32[$20>>2]|0;
   $159 = ($158|0)>(-1);
   if ($159) {
    $160 = HEAP32[$6>>2]|0;
    $161 = (($160) + ($158)|0);
    $164 = $161;
   } else {
    $164 = 0;
   }
   $162 = (($163) - ($158))|0;
   __tr_flush_block($0,$164,$162,0);
   $165 = HEAP32[$7>>2]|0;
   HEAP32[$20>>2] = $165;
   $166 = HEAP32[$0>>2]|0;
   $167 = ((($166)) + 28|0);
   $168 = HEAP32[$167>>2]|0;
   __tr_flush_bits($168);
   $169 = ((($168)) + 20|0);
   $170 = HEAP32[$169>>2]|0;
   $171 = ((($166)) + 16|0);
   $172 = HEAP32[$171>>2]|0;
   $173 = ($170>>>0)>($172>>>0);
   $spec$select$i = $173 ? $172 : $170;
   $174 = ($spec$select$i|0)==(0);
   if (!($174)) {
    $175 = ((($166)) + 12|0);
    $176 = HEAP32[$175>>2]|0;
    $177 = ((($168)) + 16|0);
    $178 = HEAP32[$177>>2]|0;
    _memcpy(($176|0),($178|0),($spec$select$i|0))|0;
    $179 = HEAP32[$175>>2]|0;
    $180 = (($179) + ($spec$select$i)|0);
    HEAP32[$175>>2] = $180;
    $181 = HEAP32[$177>>2]|0;
    $182 = (($181) + ($spec$select$i)|0);
    HEAP32[$177>>2] = $182;
    $183 = ((($166)) + 20|0);
    $184 = HEAP32[$183>>2]|0;
    $185 = (($184) + ($spec$select$i))|0;
    HEAP32[$183>>2] = $185;
    $186 = HEAP32[$171>>2]|0;
    $187 = (($186) - ($spec$select$i))|0;
    HEAP32[$171>>2] = $187;
    $188 = HEAP32[$169>>2]|0;
    $189 = (($188) - ($spec$select$i))|0;
    HEAP32[$169>>2] = $189;
    $190 = ($189|0)==(0);
    if ($190) {
     $191 = ((($168)) + 8|0);
     $192 = HEAP32[$191>>2]|0;
     HEAP32[$177>>2] = $192;
    }
   }
   $193 = HEAP32[$0>>2]|0;
   $194 = ((($193)) + 16|0);
   $195 = HEAP32[$194>>2]|0;
   $196 = ($195|0)==(0);
   if ($196) {
    $$0 = 0;
    label = 40;
    break;
   }
  }
 }
 if ((label|0) == 25) {
  $197 = HEAP32[$7>>2]|0;
  $198 = ($197>>>0)<(2);
  $spec$select = $198 ? $197 : 2;
  $199 = ((($0)) + 5812|0);
  HEAP32[$199>>2] = $spec$select;
  $200 = ($1|0)==(4);
  if ($200) {
   $201 = HEAP32[$20>>2]|0;
   $202 = ($201|0)>(-1);
   if ($202) {
    $203 = HEAP32[$6>>2]|0;
    $204 = (($203) + ($201)|0);
    $206 = $204;
   } else {
    $206 = 0;
   }
   $205 = (($197) - ($201))|0;
   __tr_flush_block($0,$206,$205,1);
   $207 = HEAP32[$7>>2]|0;
   HEAP32[$20>>2] = $207;
   $208 = HEAP32[$0>>2]|0;
   $209 = ((($208)) + 28|0);
   $210 = HEAP32[$209>>2]|0;
   __tr_flush_bits($210);
   $211 = ((($210)) + 20|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = ((($208)) + 16|0);
   $214 = HEAP32[$213>>2]|0;
   $215 = ($212>>>0)>($214>>>0);
   $spec$select$i137 = $215 ? $214 : $212;
   $216 = ($spec$select$i137|0)==(0);
   if (!($216)) {
    $217 = ((($208)) + 12|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = ((($210)) + 16|0);
    $220 = HEAP32[$219>>2]|0;
    _memcpy(($218|0),($220|0),($spec$select$i137|0))|0;
    $221 = HEAP32[$217>>2]|0;
    $222 = (($221) + ($spec$select$i137)|0);
    HEAP32[$217>>2] = $222;
    $223 = HEAP32[$219>>2]|0;
    $224 = (($223) + ($spec$select$i137)|0);
    HEAP32[$219>>2] = $224;
    $225 = ((($208)) + 20|0);
    $226 = HEAP32[$225>>2]|0;
    $227 = (($226) + ($spec$select$i137))|0;
    HEAP32[$225>>2] = $227;
    $228 = HEAP32[$213>>2]|0;
    $229 = (($228) - ($spec$select$i137))|0;
    HEAP32[$213>>2] = $229;
    $230 = HEAP32[$211>>2]|0;
    $231 = (($230) - ($spec$select$i137))|0;
    HEAP32[$211>>2] = $231;
    $232 = ($231|0)==(0);
    if ($232) {
     $233 = ((($210)) + 8|0);
     $234 = HEAP32[$233>>2]|0;
     HEAP32[$219>>2] = $234;
    }
   }
   $235 = HEAP32[$0>>2]|0;
   $236 = ((($235)) + 16|0);
   $237 = HEAP32[$236>>2]|0;
   $238 = ($237|0)==(0);
   $$ = $238 ? 2 : 3;
   $$0 = $$;
   return ($$0|0);
  }
  $239 = HEAP32[$16>>2]|0;
  $240 = ($239|0)==(0);
  if (!($240)) {
   $241 = HEAP32[$20>>2]|0;
   $242 = ($241|0)>(-1);
   if ($242) {
    $243 = HEAP32[$6>>2]|0;
    $244 = (($243) + ($241)|0);
    $246 = $244;
   } else {
    $246 = 0;
   }
   $245 = (($197) - ($241))|0;
   __tr_flush_block($0,$246,$245,0);
   $247 = HEAP32[$7>>2]|0;
   HEAP32[$20>>2] = $247;
   $248 = HEAP32[$0>>2]|0;
   $249 = ((($248)) + 28|0);
   $250 = HEAP32[$249>>2]|0;
   __tr_flush_bits($250);
   $251 = ((($250)) + 20|0);
   $252 = HEAP32[$251>>2]|0;
   $253 = ((($248)) + 16|0);
   $254 = HEAP32[$253>>2]|0;
   $255 = ($252>>>0)>($254>>>0);
   $spec$select$i139 = $255 ? $254 : $252;
   $256 = ($spec$select$i139|0)==(0);
   if (!($256)) {
    $257 = ((($248)) + 12|0);
    $258 = HEAP32[$257>>2]|0;
    $259 = ((($250)) + 16|0);
    $260 = HEAP32[$259>>2]|0;
    _memcpy(($258|0),($260|0),($spec$select$i139|0))|0;
    $261 = HEAP32[$257>>2]|0;
    $262 = (($261) + ($spec$select$i139)|0);
    HEAP32[$257>>2] = $262;
    $263 = HEAP32[$259>>2]|0;
    $264 = (($263) + ($spec$select$i139)|0);
    HEAP32[$259>>2] = $264;
    $265 = ((($248)) + 20|0);
    $266 = HEAP32[$265>>2]|0;
    $267 = (($266) + ($spec$select$i139))|0;
    HEAP32[$265>>2] = $267;
    $268 = HEAP32[$253>>2]|0;
    $269 = (($268) - ($spec$select$i139))|0;
    HEAP32[$253>>2] = $269;
    $270 = HEAP32[$251>>2]|0;
    $271 = (($270) - ($spec$select$i139))|0;
    HEAP32[$251>>2] = $271;
    $272 = ($271|0)==(0);
    if ($272) {
     $273 = ((($250)) + 8|0);
     $274 = HEAP32[$273>>2]|0;
     HEAP32[$259>>2] = $274;
    }
   }
   $275 = HEAP32[$0>>2]|0;
   $276 = ((($275)) + 16|0);
   $277 = HEAP32[$276>>2]|0;
   $278 = ($277|0)==(0);
   if ($278) {
    $$0 = 0;
    return ($$0|0);
   }
  }
  $$0 = 1;
  return ($$0|0);
 }
 else if ((label|0) == 40) {
  return ($$0|0);
 }
 return (0)|0;
}
function _deflate_slow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$3 = 0, $$neg179 = 0, $$ph = 0, $$pr = 0, $$pre = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond181 = 0, $spec$select = 0;
 var $spec$select$i = 0, $spec$select$i172 = 0, $spec$select$i174 = 0, $spec$select$i176 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 116|0);
 $3 = ($1|0)==(0);
 $4 = ((($0)) + 72|0);
 $5 = ((($0)) + 88|0);
 $6 = ((($0)) + 56|0);
 $7 = ((($0)) + 108|0);
 $8 = ((($0)) + 84|0);
 $9 = ((($0)) + 68|0);
 $10 = ((($0)) + 64|0);
 $11 = ((($0)) + 52|0);
 $12 = ((($0)) + 96|0);
 $13 = ((($0)) + 120|0);
 $14 = ((($0)) + 112|0);
 $15 = ((($0)) + 100|0);
 $16 = ((($0)) + 128|0);
 $17 = ((($0)) + 104|0);
 $18 = ((($0)) + 44|0);
 $19 = ((($0)) + 5796|0);
 $20 = ((($0)) + 5792|0);
 $21 = ((($0)) + 5784|0);
 $22 = ((($0)) + 5788|0);
 $23 = ((($0)) + 92|0);
 $24 = ((($0)) + 136|0);
 L1: while(1) {
  $25 = HEAP32[$2>>2]|0;
  $26 = ($25>>>0)<(262);
  if ($26) {
   _fill_window($0);
   $27 = HEAP32[$2>>2]|0;
   $28 = ($27>>>0)<(262);
   $or$cond = $3 & $28;
   if ($or$cond) {
    $$3 = 0;
    label = 55;
    break;
   }
   $29 = ($27|0)==(0);
   if ($29) {
    label = 38;
    break;
   }
   $30 = ($27>>>0)>(2);
   if ($30) {
    label = 7;
   } else {
    $31 = HEAP32[$12>>2]|0;
    HEAP32[$13>>2] = $31;
    $32 = HEAP32[$14>>2]|0;
    HEAP32[$15>>2] = $32;
    HEAP32[$12>>2] = 2;
    $73 = $31;$75 = 2;
   }
  } else {
   label = 7;
  }
  if ((label|0) == 7) {
   label = 0;
   $33 = HEAP32[$4>>2]|0;
   $34 = HEAP32[$5>>2]|0;
   $35 = $33 << $34;
   $36 = HEAP32[$6>>2]|0;
   $37 = HEAP32[$7>>2]|0;
   $38 = (($37) + 2)|0;
   $39 = (($36) + ($38)|0);
   $40 = HEAP8[$39>>0]|0;
   $41 = $40&255;
   $42 = $35 ^ $41;
   $43 = HEAP32[$8>>2]|0;
   $44 = $42 & $43;
   HEAP32[$4>>2] = $44;
   $45 = HEAP32[$9>>2]|0;
   $46 = (($45) + ($44<<1)|0);
   $47 = HEAP16[$46>>1]|0;
   $48 = HEAP32[$10>>2]|0;
   $49 = HEAP32[$11>>2]|0;
   $50 = $49 & $37;
   $51 = (($48) + ($50<<1)|0);
   HEAP16[$51>>1] = $47;
   $52 = $47&65535;
   $53 = $37&65535;
   HEAP16[$46>>1] = $53;
   $54 = HEAP32[$12>>2]|0;
   HEAP32[$13>>2] = $54;
   $55 = HEAP32[$14>>2]|0;
   HEAP32[$15>>2] = $55;
   HEAP32[$12>>2] = 2;
   $56 = ($47<<16>>16)==(0);
   if ($56) {
    $73 = $54;$75 = 2;
   } else {
    $57 = HEAP32[$16>>2]|0;
    $58 = ($54>>>0)<($57>>>0);
    do {
     if ($58) {
      $59 = HEAP32[$7>>2]|0;
      $60 = (($59) - ($52))|0;
      $61 = HEAP32[$18>>2]|0;
      $62 = (($61) + -262)|0;
      $63 = ($60>>>0)>($62>>>0);
      if ($63) {
       $$ph = 2;
      } else {
       $64 = (_longest_match($0,$52)|0);
       HEAP32[$12>>2] = $64;
       $65 = ($64>>>0)<(6);
       if ($65) {
        $66 = HEAP32[$24>>2]|0;
        $67 = ($66|0)==(1);
        if (!($67)) {
         $68 = ($64|0)==(3);
         if (!($68)) {
          $$ph = $64;
          break;
         }
         $69 = HEAP32[$7>>2]|0;
         $70 = HEAP32[$14>>2]|0;
         $71 = (($69) - ($70))|0;
         $72 = ($71>>>0)>(4096);
         if (!($72)) {
          $$ph = 3;
          break;
         }
        }
        HEAP32[$12>>2] = 2;
        $$ph = 2;
       } else {
        $$ph = $64;
       }
      }
     } else {
      $$ph = 2;
     }
    } while(0);
    $$pr = HEAP32[$13>>2]|0;
    $73 = $$pr;$75 = $$ph;
   }
  }
  $74 = ($73>>>0)<(3);
  $76 = ($75>>>0)>($73>>>0);
  $or$cond181 = $74 | $76;
  do {
   if ($or$cond181) {
    $185 = HEAP32[$17>>2]|0;
    $186 = ($185|0)==(0);
    if ($186) {
     HEAP32[$17>>2] = 1;
     $249 = HEAP32[$7>>2]|0;
     $250 = (($249) + 1)|0;
     HEAP32[$7>>2] = $250;
     $251 = HEAP32[$2>>2]|0;
     $252 = (($251) + -1)|0;
     HEAP32[$2>>2] = $252;
     break;
    }
    $187 = HEAP32[$6>>2]|0;
    $188 = HEAP32[$7>>2]|0;
    $189 = (($188) + -1)|0;
    $190 = (($187) + ($189)|0);
    $191 = HEAP8[$190>>0]|0;
    $192 = HEAP32[$19>>2]|0;
    $193 = HEAP32[$20>>2]|0;
    $194 = (($192) + ($193<<1)|0);
    HEAP16[$194>>1] = 0;
    $195 = HEAP32[$21>>2]|0;
    $196 = (($193) + 1)|0;
    HEAP32[$20>>2] = $196;
    $197 = (($195) + ($193)|0);
    HEAP8[$197>>0] = $191;
    $198 = $191&255;
    $199 = (((($0)) + 148|0) + ($198<<2)|0);
    $200 = HEAP16[$199>>1]|0;
    $201 = (($200) + 1)<<16>>16;
    HEAP16[$199>>1] = $201;
    $202 = HEAP32[$20>>2]|0;
    $203 = HEAP32[$22>>2]|0;
    $204 = (($203) + -1)|0;
    $205 = ($202|0)==($204|0);
    if ($205) {
     $206 = HEAP32[$23>>2]|0;
     $207 = ($206|0)>(-1);
     if ($207) {
      $208 = HEAP32[$6>>2]|0;
      $209 = (($208) + ($206)|0);
      $212 = $209;
     } else {
      $212 = 0;
     }
     $210 = HEAP32[$7>>2]|0;
     $211 = (($210) - ($206))|0;
     __tr_flush_block($0,$212,$211,0);
     $213 = HEAP32[$7>>2]|0;
     HEAP32[$23>>2] = $213;
     $214 = HEAP32[$0>>2]|0;
     $215 = ((($214)) + 28|0);
     $216 = HEAP32[$215>>2]|0;
     __tr_flush_bits($216);
     $217 = ((($216)) + 20|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = ((($214)) + 16|0);
     $220 = HEAP32[$219>>2]|0;
     $221 = ($218>>>0)>($220>>>0);
     $spec$select$i172 = $221 ? $220 : $218;
     $222 = ($spec$select$i172|0)==(0);
     if (!($222)) {
      $223 = ((($214)) + 12|0);
      $224 = HEAP32[$223>>2]|0;
      $225 = ((($216)) + 16|0);
      $226 = HEAP32[$225>>2]|0;
      _memcpy(($224|0),($226|0),($spec$select$i172|0))|0;
      $227 = HEAP32[$223>>2]|0;
      $228 = (($227) + ($spec$select$i172)|0);
      HEAP32[$223>>2] = $228;
      $229 = HEAP32[$225>>2]|0;
      $230 = (($229) + ($spec$select$i172)|0);
      HEAP32[$225>>2] = $230;
      $231 = ((($214)) + 20|0);
      $232 = HEAP32[$231>>2]|0;
      $233 = (($232) + ($spec$select$i172))|0;
      HEAP32[$231>>2] = $233;
      $234 = HEAP32[$219>>2]|0;
      $235 = (($234) - ($spec$select$i172))|0;
      HEAP32[$219>>2] = $235;
      $236 = HEAP32[$217>>2]|0;
      $237 = (($236) - ($spec$select$i172))|0;
      HEAP32[$217>>2] = $237;
      $238 = ($237|0)==(0);
      if ($238) {
       $239 = ((($216)) + 8|0);
       $240 = HEAP32[$239>>2]|0;
       HEAP32[$225>>2] = $240;
      }
     }
    }
    $241 = HEAP32[$7>>2]|0;
    $242 = (($241) + 1)|0;
    HEAP32[$7>>2] = $242;
    $243 = HEAP32[$2>>2]|0;
    $244 = (($243) + -1)|0;
    HEAP32[$2>>2] = $244;
    $245 = HEAP32[$0>>2]|0;
    $246 = ((($245)) + 16|0);
    $247 = HEAP32[$246>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$3 = 0;
     label = 55;
     break L1;
    }
   } else {
    $77 = HEAP32[$7>>2]|0;
    $78 = HEAP32[$2>>2]|0;
    $79 = (($77) + -3)|0;
    $80 = (($79) + ($78))|0;
    $81 = (($73) + 253)|0;
    $82 = $81&255;
    $83 = (($77) + 65535)|0;
    $84 = HEAP32[$15>>2]|0;
    $85 = (($83) - ($84))|0;
    $86 = $85&65535;
    $87 = HEAP32[$19>>2]|0;
    $88 = HEAP32[$20>>2]|0;
    $89 = (($87) + ($88<<1)|0);
    HEAP16[$89>>1] = $86;
    $90 = HEAP32[$21>>2]|0;
    $91 = (($88) + 1)|0;
    HEAP32[$20>>2] = $91;
    $92 = (($90) + ($88)|0);
    HEAP8[$92>>0] = $82;
    $93 = (($85) + 65535)|0;
    $94 = $81 & 255;
    $95 = (28373 + ($94)|0);
    $96 = HEAP8[$95>>0]|0;
    $97 = $96&255;
    $98 = $97 | 256;
    $99 = (($98) + 1)|0;
    $100 = (((($0)) + 148|0) + ($99<<2)|0);
    $101 = HEAP16[$100>>1]|0;
    $102 = (($101) + 1)<<16>>16;
    HEAP16[$100>>1] = $102;
    $103 = $93 & 65535;
    $104 = ($103>>>0)<(256);
    $105 = $103 >>> 7;
    $106 = (($105) + 256)|0;
    $$sink = $104 ? $103 : $106;
    $107 = (27861 + ($$sink)|0);
    $108 = HEAP8[$107>>0]|0;
    $109 = $108&255;
    $110 = (((($0)) + 2440|0) + ($109<<2)|0);
    $111 = HEAP16[$110>>1]|0;
    $112 = (($111) + 1)<<16>>16;
    HEAP16[$110>>1] = $112;
    $113 = HEAP32[$20>>2]|0;
    $114 = HEAP32[$22>>2]|0;
    $115 = (($114) + -1)|0;
    $116 = HEAP32[$13>>2]|0;
    $117 = HEAP32[$2>>2]|0;
    $$neg179 = (1 - ($116))|0;
    $118 = (($$neg179) + ($117))|0;
    HEAP32[$2>>2] = $118;
    $119 = (($116) + -2)|0;
    HEAP32[$13>>2] = $119;
    $$pre = HEAP32[$7>>2]|0;
    $121 = $$pre;$143 = $119;
    while(1) {
     $120 = (($121) + 1)|0;
     HEAP32[$7>>2] = $120;
     $122 = ($120>>>0)>($80>>>0);
     if (!($122)) {
      $123 = HEAP32[$4>>2]|0;
      $124 = HEAP32[$5>>2]|0;
      $125 = $123 << $124;
      $126 = HEAP32[$6>>2]|0;
      $127 = (($121) + 3)|0;
      $128 = (($126) + ($127)|0);
      $129 = HEAP8[$128>>0]|0;
      $130 = $129&255;
      $131 = $125 ^ $130;
      $132 = HEAP32[$8>>2]|0;
      $133 = $131 & $132;
      HEAP32[$4>>2] = $133;
      $134 = HEAP32[$9>>2]|0;
      $135 = (($134) + ($133<<1)|0);
      $136 = HEAP16[$135>>1]|0;
      $137 = HEAP32[$10>>2]|0;
      $138 = HEAP32[$11>>2]|0;
      $139 = $138 & $120;
      $140 = (($137) + ($139<<1)|0);
      HEAP16[$140>>1] = $136;
      $141 = $120&65535;
      HEAP16[$135>>1] = $141;
     }
     $142 = (($143) + -1)|0;
     HEAP32[$13>>2] = $142;
     $144 = ($142|0)==(0);
     if ($144) {
      break;
     } else {
      $121 = $120;$143 = $142;
     }
    }
    $145 = ($113|0)==($115|0);
    HEAP32[$17>>2] = 0;
    HEAP32[$12>>2] = 2;
    $146 = (($121) + 2)|0;
    HEAP32[$7>>2] = $146;
    if ($145) {
     $147 = HEAP32[$23>>2]|0;
     $148 = ($147|0)>(-1);
     if ($148) {
      $149 = HEAP32[$6>>2]|0;
      $150 = (($149) + ($147)|0);
      $152 = $150;
     } else {
      $152 = 0;
     }
     $151 = (($146) - ($147))|0;
     __tr_flush_block($0,$152,$151,0);
     $153 = HEAP32[$7>>2]|0;
     HEAP32[$23>>2] = $153;
     $154 = HEAP32[$0>>2]|0;
     $155 = ((($154)) + 28|0);
     $156 = HEAP32[$155>>2]|0;
     __tr_flush_bits($156);
     $157 = ((($156)) + 20|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ((($154)) + 16|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($158>>>0)>($160>>>0);
     $spec$select$i = $161 ? $160 : $158;
     $162 = ($spec$select$i|0)==(0);
     if (!($162)) {
      $163 = ((($154)) + 12|0);
      $164 = HEAP32[$163>>2]|0;
      $165 = ((($156)) + 16|0);
      $166 = HEAP32[$165>>2]|0;
      _memcpy(($164|0),($166|0),($spec$select$i|0))|0;
      $167 = HEAP32[$163>>2]|0;
      $168 = (($167) + ($spec$select$i)|0);
      HEAP32[$163>>2] = $168;
      $169 = HEAP32[$165>>2]|0;
      $170 = (($169) + ($spec$select$i)|0);
      HEAP32[$165>>2] = $170;
      $171 = ((($154)) + 20|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = (($172) + ($spec$select$i))|0;
      HEAP32[$171>>2] = $173;
      $174 = HEAP32[$159>>2]|0;
      $175 = (($174) - ($spec$select$i))|0;
      HEAP32[$159>>2] = $175;
      $176 = HEAP32[$157>>2]|0;
      $177 = (($176) - ($spec$select$i))|0;
      HEAP32[$157>>2] = $177;
      $178 = ($177|0)==(0);
      if ($178) {
       $179 = ((($156)) + 8|0);
       $180 = HEAP32[$179>>2]|0;
       HEAP32[$165>>2] = $180;
      }
     }
     $181 = HEAP32[$0>>2]|0;
     $182 = ((($181)) + 16|0);
     $183 = HEAP32[$182>>2]|0;
     $184 = ($183|0)==(0);
     if ($184) {
      $$3 = 0;
      label = 55;
      break L1;
     }
    }
   }
  } while(0);
 }
 if ((label|0) == 38) {
  $253 = HEAP32[$17>>2]|0;
  $254 = ($253|0)==(0);
  if (!($254)) {
   $255 = HEAP32[$6>>2]|0;
   $256 = HEAP32[$7>>2]|0;
   $257 = (($256) + -1)|0;
   $258 = (($255) + ($257)|0);
   $259 = HEAP8[$258>>0]|0;
   $260 = HEAP32[$19>>2]|0;
   $261 = HEAP32[$20>>2]|0;
   $262 = (($260) + ($261<<1)|0);
   HEAP16[$262>>1] = 0;
   $263 = HEAP32[$21>>2]|0;
   $264 = (($261) + 1)|0;
   HEAP32[$20>>2] = $264;
   $265 = (($263) + ($261)|0);
   HEAP8[$265>>0] = $259;
   $266 = $259&255;
   $267 = (((($0)) + 148|0) + ($266<<2)|0);
   $268 = HEAP16[$267>>1]|0;
   $269 = (($268) + 1)<<16>>16;
   HEAP16[$267>>1] = $269;
   HEAP32[$17>>2] = 0;
  }
  $270 = HEAP32[$7>>2]|0;
  $271 = ($270>>>0)<(2);
  $spec$select = $271 ? $270 : 2;
  $272 = ((($0)) + 5812|0);
  HEAP32[$272>>2] = $spec$select;
  $273 = ($1|0)==(4);
  if ($273) {
   $274 = HEAP32[$23>>2]|0;
   $275 = ($274|0)>(-1);
   if ($275) {
    $276 = HEAP32[$6>>2]|0;
    $277 = (($276) + ($274)|0);
    $279 = $277;
   } else {
    $279 = 0;
   }
   $278 = (($270) - ($274))|0;
   __tr_flush_block($0,$279,$278,1);
   $280 = HEAP32[$7>>2]|0;
   HEAP32[$23>>2] = $280;
   $281 = HEAP32[$0>>2]|0;
   $282 = ((($281)) + 28|0);
   $283 = HEAP32[$282>>2]|0;
   __tr_flush_bits($283);
   $284 = ((($283)) + 20|0);
   $285 = HEAP32[$284>>2]|0;
   $286 = ((($281)) + 16|0);
   $287 = HEAP32[$286>>2]|0;
   $288 = ($285>>>0)>($287>>>0);
   $spec$select$i174 = $288 ? $287 : $285;
   $289 = ($spec$select$i174|0)==(0);
   if (!($289)) {
    $290 = ((($281)) + 12|0);
    $291 = HEAP32[$290>>2]|0;
    $292 = ((($283)) + 16|0);
    $293 = HEAP32[$292>>2]|0;
    _memcpy(($291|0),($293|0),($spec$select$i174|0))|0;
    $294 = HEAP32[$290>>2]|0;
    $295 = (($294) + ($spec$select$i174)|0);
    HEAP32[$290>>2] = $295;
    $296 = HEAP32[$292>>2]|0;
    $297 = (($296) + ($spec$select$i174)|0);
    HEAP32[$292>>2] = $297;
    $298 = ((($281)) + 20|0);
    $299 = HEAP32[$298>>2]|0;
    $300 = (($299) + ($spec$select$i174))|0;
    HEAP32[$298>>2] = $300;
    $301 = HEAP32[$286>>2]|0;
    $302 = (($301) - ($spec$select$i174))|0;
    HEAP32[$286>>2] = $302;
    $303 = HEAP32[$284>>2]|0;
    $304 = (($303) - ($spec$select$i174))|0;
    HEAP32[$284>>2] = $304;
    $305 = ($304|0)==(0);
    if ($305) {
     $306 = ((($283)) + 8|0);
     $307 = HEAP32[$306>>2]|0;
     HEAP32[$292>>2] = $307;
    }
   }
   $308 = HEAP32[$0>>2]|0;
   $309 = ((($308)) + 16|0);
   $310 = HEAP32[$309>>2]|0;
   $311 = ($310|0)==(0);
   $$ = $311 ? 2 : 3;
   $$3 = $$;
   return ($$3|0);
  }
  $312 = HEAP32[$20>>2]|0;
  $313 = ($312|0)==(0);
  if (!($313)) {
   $314 = HEAP32[$23>>2]|0;
   $315 = ($314|0)>(-1);
   if ($315) {
    $316 = HEAP32[$6>>2]|0;
    $317 = (($316) + ($314)|0);
    $319 = $317;
   } else {
    $319 = 0;
   }
   $318 = (($270) - ($314))|0;
   __tr_flush_block($0,$319,$318,0);
   $320 = HEAP32[$7>>2]|0;
   HEAP32[$23>>2] = $320;
   $321 = HEAP32[$0>>2]|0;
   $322 = ((($321)) + 28|0);
   $323 = HEAP32[$322>>2]|0;
   __tr_flush_bits($323);
   $324 = ((($323)) + 20|0);
   $325 = HEAP32[$324>>2]|0;
   $326 = ((($321)) + 16|0);
   $327 = HEAP32[$326>>2]|0;
   $328 = ($325>>>0)>($327>>>0);
   $spec$select$i176 = $328 ? $327 : $325;
   $329 = ($spec$select$i176|0)==(0);
   if (!($329)) {
    $330 = ((($321)) + 12|0);
    $331 = HEAP32[$330>>2]|0;
    $332 = ((($323)) + 16|0);
    $333 = HEAP32[$332>>2]|0;
    _memcpy(($331|0),($333|0),($spec$select$i176|0))|0;
    $334 = HEAP32[$330>>2]|0;
    $335 = (($334) + ($spec$select$i176)|0);
    HEAP32[$330>>2] = $335;
    $336 = HEAP32[$332>>2]|0;
    $337 = (($336) + ($spec$select$i176)|0);
    HEAP32[$332>>2] = $337;
    $338 = ((($321)) + 20|0);
    $339 = HEAP32[$338>>2]|0;
    $340 = (($339) + ($spec$select$i176))|0;
    HEAP32[$338>>2] = $340;
    $341 = HEAP32[$326>>2]|0;
    $342 = (($341) - ($spec$select$i176))|0;
    HEAP32[$326>>2] = $342;
    $343 = HEAP32[$324>>2]|0;
    $344 = (($343) - ($spec$select$i176))|0;
    HEAP32[$324>>2] = $344;
    $345 = ($344|0)==(0);
    if ($345) {
     $346 = ((($323)) + 8|0);
     $347 = HEAP32[$346>>2]|0;
     HEAP32[$332>>2] = $347;
    }
   }
   $348 = HEAP32[$0>>2]|0;
   $349 = ((($348)) + 16|0);
   $350 = HEAP32[$349>>2]|0;
   $351 = ($350|0)==(0);
   if ($351) {
    $$3 = 0;
    return ($$3|0);
   }
  }
  $$3 = 1;
  return ($$3|0);
 }
 else if ((label|0) == 55) {
  return ($$3|0);
 }
 return (0)|0;
}
function _fill_window($0) {
 $0 = $0|0;
 var $$0123 = 0, $$0124132 = 0, $$0125 = 0, $$0126 = 0, $$025$i = 0, $$1 = 0, $$1127 = 0, $$pre = 0, $$pre134 = 0, $$pre135 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $spec$select$i = 0, $spec$select129 = 0, $spec$store$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 44|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 60|0);
 $4 = ((($0)) + 116|0);
 $5 = ((($0)) + 108|0);
 $6 = (($2) + -262)|0;
 $7 = ((($0)) + 56|0);
 $8 = ((($0)) + 112|0);
 $9 = ((($0)) + 92|0);
 $10 = ((($0)) + 76|0);
 $11 = ((($0)) + 68|0);
 $12 = ((($0)) + 5812|0);
 $13 = ((($0)) + 64|0);
 $14 = ((($0)) + 72|0);
 $15 = ((($0)) + 88|0);
 $16 = ((($0)) + 84|0);
 $17 = ((($0)) + 52|0);
 $$pre = HEAP32[$4>>2]|0;
 $20 = $$pre;$24 = $2;
 while(1) {
  $18 = HEAP32[$3>>2]|0;
  $19 = (($18) - ($20))|0;
  $21 = HEAP32[$5>>2]|0;
  $22 = (($19) - ($21))|0;
  $23 = (($6) + ($24))|0;
  $25 = ($21>>>0)<($23>>>0);
  if ($25) {
   $$0125 = $22;$64 = $21;
  } else {
   $26 = HEAP32[$7>>2]|0;
   $27 = (($26) + ($2)|0);
   _memcpy(($26|0),($27|0),($2|0))|0;
   $28 = HEAP32[$8>>2]|0;
   $29 = (($28) - ($2))|0;
   HEAP32[$8>>2] = $29;
   $30 = HEAP32[$5>>2]|0;
   $31 = (($30) - ($2))|0;
   HEAP32[$5>>2] = $31;
   $32 = HEAP32[$9>>2]|0;
   $33 = (($32) - ($2))|0;
   HEAP32[$9>>2] = $33;
   $34 = HEAP32[$10>>2]|0;
   $35 = HEAP32[$11>>2]|0;
   $36 = (($35) + ($34<<1)|0);
   $$0123 = $34;$$0126 = $36;
   while(1) {
    $37 = ((($$0126)) + -2|0);
    $38 = HEAP16[$37>>1]|0;
    $39 = $38&65535;
    $40 = ($2>>>0)>($39>>>0);
    $41 = (($39) - ($2))|0;
    $42 = $41&65535;
    $43 = $40 ? 0 : $42;
    HEAP16[$37>>1] = $43;
    $44 = (($$0123) + -1)|0;
    $45 = ($44|0)==(0);
    if ($45) {
     break;
    } else {
     $$0123 = $44;$$0126 = $37;
    }
   }
   $46 = HEAP32[$13>>2]|0;
   $47 = (($46) + ($2<<1)|0);
   $$1 = $2;$$1127 = $47;
   while(1) {
    $48 = ((($$1127)) + -2|0);
    $49 = HEAP16[$48>>1]|0;
    $50 = $49&65535;
    $51 = ($2>>>0)>($50>>>0);
    $52 = (($50) - ($2))|0;
    $53 = $52&65535;
    $54 = $51 ? 0 : $53;
    HEAP16[$48>>1] = $54;
    $55 = (($$1) + -1)|0;
    $56 = ($55|0)==(0);
    if ($56) {
     break;
    } else {
     $$1 = $55;$$1127 = $48;
    }
   }
   $57 = (($22) + ($2))|0;
   $$0125 = $57;$64 = $31;
  }
  $58 = HEAP32[$0>>2]|0;
  $59 = ((($58)) + 4|0);
  $60 = HEAP32[$59>>2]|0;
  $61 = ($60|0)==(0);
  if ($61) {
   break;
  }
  $62 = HEAP32[$7>>2]|0;
  $63 = (($62) + ($64)|0);
  $65 = HEAP32[$4>>2]|0;
  $66 = (($63) + ($65)|0);
  $67 = ($60>>>0)>($$0125>>>0);
  $spec$select$i = $67 ? $$0125 : $60;
  $68 = ($spec$select$i|0)==(0);
  if ($68) {
   $$025$i = 0;$87 = $65;
  } else {
   $69 = (($60) - ($spec$select$i))|0;
   HEAP32[$59>>2] = $69;
   $70 = HEAP32[$58>>2]|0;
   _memcpy(($66|0),($70|0),($spec$select$i|0))|0;
   $71 = ((($58)) + 28|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = ((($72)) + 24|0);
   $74 = HEAP32[$73>>2]|0;
   switch ($74|0) {
   case 1:  {
    $75 = ((($58)) + 48|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = (_adler32($76,$66,$spec$select$i)|0);
    HEAP32[$75>>2] = $77;
    break;
   }
   case 2:  {
    $78 = ((($58)) + 48|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = (_crc32($79,$66,$spec$select$i)|0);
    HEAP32[$78>>2] = $80;
    break;
   }
   default: {
   }
   }
   $81 = HEAP32[$58>>2]|0;
   $82 = (($81) + ($spec$select$i)|0);
   HEAP32[$58>>2] = $82;
   $83 = ((($58)) + 8|0);
   $84 = HEAP32[$83>>2]|0;
   $85 = (($84) + ($spec$select$i))|0;
   HEAP32[$83>>2] = $85;
   $$pre135 = HEAP32[$4>>2]|0;
   $$025$i = $spec$select$i;$87 = $$pre135;
  }
  $86 = (($87) + ($$025$i))|0;
  HEAP32[$4>>2] = $86;
  $88 = HEAP32[$12>>2]|0;
  $89 = (($88) + ($86))|0;
  $90 = ($89>>>0)>(2);
  L20: do {
   if ($90) {
    $91 = HEAP32[$5>>2]|0;
    $92 = (($91) - ($88))|0;
    $93 = HEAP32[$7>>2]|0;
    $94 = (($93) + ($92)|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = $95&255;
    HEAP32[$14>>2] = $96;
    $97 = HEAP32[$15>>2]|0;
    $98 = $96 << $97;
    $99 = (($92) + 1)|0;
    $100 = (($93) + ($99)|0);
    $101 = HEAP8[$100>>0]|0;
    $102 = $101&255;
    $103 = $98 ^ $102;
    $104 = HEAP32[$16>>2]|0;
    $105 = $103 & $104;
    HEAP32[$14>>2] = $105;
    $106 = ($88|0)==(0);
    if (!($106)) {
     $$0124132 = $92;$111 = $105;$126 = $88;
     while(1) {
      $110 = $111 << $97;
      $112 = (($$0124132) + 2)|0;
      $113 = (($93) + ($112)|0);
      $114 = HEAP8[$113>>0]|0;
      $115 = $114&255;
      $116 = $110 ^ $115;
      $117 = $116 & $104;
      HEAP32[$14>>2] = $117;
      $118 = HEAP32[$11>>2]|0;
      $119 = (($118) + ($117<<1)|0);
      $120 = HEAP16[$119>>1]|0;
      $121 = HEAP32[$13>>2]|0;
      $122 = HEAP32[$17>>2]|0;
      $123 = $122 & $$0124132;
      $124 = (($121) + ($123<<1)|0);
      HEAP16[$124>>1] = $120;
      $125 = $$0124132&65535;
      HEAP16[$119>>1] = $125;
      $108 = (($126) + -1)|0;
      HEAP32[$12>>2] = $108;
      $127 = (($108) + ($86))|0;
      $128 = ($127>>>0)<(3);
      if ($128) {
       break L20;
      }
      $107 = (($$0124132) + 1)|0;
      $109 = ($108|0)==(0);
      if ($109) {
       break;
      } else {
       $$0124132 = $107;$111 = $117;$126 = $108;
      }
     }
    }
   }
  } while(0);
  $129 = ($86>>>0)<(262);
  if (!($129)) {
   break;
  }
  $130 = HEAP32[$0>>2]|0;
  $131 = ((($130)) + 4|0);
  $132 = HEAP32[$131>>2]|0;
  $133 = ($132|0)==(0);
  if ($133) {
   break;
  }
  $$pre134 = HEAP32[$1>>2]|0;
  $20 = $86;$24 = $$pre134;
 }
 $134 = ((($0)) + 5824|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = HEAP32[$3>>2]|0;
 $137 = ($136>>>0)>($135>>>0);
 if (!($137)) {
  return;
 }
 $138 = HEAP32[$5>>2]|0;
 $139 = HEAP32[$4>>2]|0;
 $140 = (($139) + ($138))|0;
 $141 = ($135>>>0)<($140>>>0);
 if ($141) {
  $142 = (($136) - ($140))|0;
  $143 = ($142>>>0)<(258);
  $spec$store$select = $143 ? $142 : 258;
  $144 = HEAP32[$7>>2]|0;
  $145 = (($144) + ($140)|0);
  _memset(($145|0),0,($spec$store$select|0))|0;
  $146 = (($spec$store$select) + ($140))|0;
  HEAP32[$134>>2] = $146;
  return;
 }
 $147 = (($140) + 258)|0;
 $148 = ($147>>>0)>($135>>>0);
 if (!($148)) {
  return;
 }
 $149 = (($147) - ($135))|0;
 $150 = (($136) - ($135))|0;
 $151 = ($149>>>0)>($150>>>0);
 $spec$select129 = $151 ? $150 : $149;
 $152 = HEAP32[$7>>2]|0;
 $153 = (($152) + ($135)|0);
 _memset(($153|0),0,($spec$select129|0))|0;
 $154 = HEAP32[$134>>2]|0;
 $155 = (($154) + ($spec$select129))|0;
 HEAP32[$134>>2] = $155;
 return;
}
function _longest_match($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$$2116 = 0, $$0 = 0, $$0105 = 0, $$0108 = 0, $$0109 = 0, $$0114 = 0, $$1 = 0, $$1106 = 0, $$1110 = 0, $$1112$add = 0, $$1112$idx = 0, $$1112$ptr = 0, $$1115 = 0, $$2 = 0, $$2116 = 0, $$ptr = 0, $$ptr$le = 0, $$ptr120 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $12 = 0, $13 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $spec$select = 0, $spec$select118 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 124|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 56|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($0)) + 108|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($5) + ($7)|0);
 $9 = ((($0)) + 120|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ((($0)) + 144|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ((($0)) + 44|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) + -262)|0;
 $16 = ($7>>>0)>($15>>>0);
 $17 = (($7) - ($15))|0;
 $spec$select = $16 ? $17 : 0;
 $18 = ((($0)) + 64|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ((($0)) + 52|0);
 $21 = HEAP32[$20>>2]|0;
 $$ptr120 = ((($8)) + 258|0);
 $22 = (($10) + -1)|0;
 $23 = (($8) + ($22)|0);
 $24 = HEAP8[$23>>0]|0;
 $25 = (($8) + ($10)|0);
 $26 = HEAP8[$25>>0]|0;
 $27 = ((($0)) + 140|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($10>>>0)<($28>>>0);
 $30 = $3 >>> 2;
 $$0109 = $29 ? $3 : $30;
 $31 = ((($0)) + 116|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($12>>>0)>($32>>>0);
 $spec$select118 = $33 ? $32 : $12;
 $34 = ((($0)) + 112|0);
 $35 = ((($8)) + 1|0);
 $36 = $$ptr120;
 $$0 = $26;$$0105 = $24;$$0108 = $1;$$0114 = $10;$$1110 = $$0109;
 while(1) {
  $37 = (($5) + ($$0108)|0);
  $38 = (($37) + ($$0114)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = ($39<<24>>24)==($$0<<24>>24);
  if ($40) {
   $41 = (($$0114) + -1)|0;
   $42 = (($37) + ($41)|0);
   $43 = HEAP8[$42>>0]|0;
   $44 = ($43<<24>>24)==($$0105<<24>>24);
   if ($44) {
    $45 = HEAP8[$37>>0]|0;
    $46 = HEAP8[$8>>0]|0;
    $47 = ($45<<24>>24)==($46<<24>>24);
    if ($47) {
     $48 = ((($37)) + 1|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = HEAP8[$35>>0]|0;
     $51 = ($49<<24>>24)==($50<<24>>24);
     if ($51) {
      $$1112$idx = 2;$55 = $48;
      while(1) {
       $$1112$ptr = (($8) + ($$1112$idx)|0);
       $52 = ((($$1112$ptr)) + 1|0);
       $53 = HEAP8[$52>>0]|0;
       $54 = ((($55)) + 2|0);
       $56 = HEAP8[$54>>0]|0;
       $57 = ($53<<24>>24)==($56<<24>>24);
       if (!($57)) {
        label = 22;
        break;
       }
       $58 = ((($$1112$ptr)) + 2|0);
       $59 = HEAP8[$58>>0]|0;
       $60 = ((($55)) + 3|0);
       $61 = HEAP8[$60>>0]|0;
       $62 = ($59<<24>>24)==($61<<24>>24);
       if (!($62)) {
        label = 21;
        break;
       }
       $63 = ((($$1112$ptr)) + 3|0);
       $64 = HEAP8[$63>>0]|0;
       $65 = ((($55)) + 4|0);
       $66 = HEAP8[$65>>0]|0;
       $67 = ($64<<24>>24)==($66<<24>>24);
       if (!($67)) {
        label = 20;
        break;
       }
       $68 = ((($$1112$ptr)) + 4|0);
       $69 = HEAP8[$68>>0]|0;
       $70 = ((($55)) + 5|0);
       $71 = HEAP8[$70>>0]|0;
       $72 = ($69<<24>>24)==($71<<24>>24);
       if (!($72)) {
        label = 19;
        break;
       }
       $73 = ((($$1112$ptr)) + 5|0);
       $74 = HEAP8[$73>>0]|0;
       $75 = ((($55)) + 6|0);
       $76 = HEAP8[$75>>0]|0;
       $77 = ($74<<24>>24)==($76<<24>>24);
       if (!($77)) {
        label = 18;
        break;
       }
       $78 = ((($$1112$ptr)) + 6|0);
       $79 = HEAP8[$78>>0]|0;
       $80 = ((($55)) + 7|0);
       $81 = HEAP8[$80>>0]|0;
       $82 = ($79<<24>>24)==($81<<24>>24);
       if (!($82)) {
        label = 17;
        break;
       }
       $83 = ((($$1112$ptr)) + 7|0);
       $84 = HEAP8[$83>>0]|0;
       $85 = ((($55)) + 8|0);
       $86 = HEAP8[$85>>0]|0;
       $87 = ($84<<24>>24)==($86<<24>>24);
       if (!($87)) {
        label = 16;
        break;
       }
       $$1112$add = (($$1112$idx) + 8)|0;
       $$ptr = (($8) + ($$1112$add)|0);
       $88 = HEAP8[$$ptr>>0]|0;
       $89 = ((($55)) + 9|0);
       $90 = HEAP8[$89>>0]|0;
       $91 = ($88<<24>>24)==($90<<24>>24);
       $92 = ($$1112$idx>>>0)<(250);
       $or$cond = $92 & $91;
       if ($or$cond) {
        $$1112$idx = $$1112$add;$55 = $85;
       } else {
        label = 15;
        break;
       }
      }
      if ((label|0) == 15) {
       label = 0;
       $$ptr$le = (($8) + ($$1112$add)|0);
       $$2 = $$ptr$le;
      }
      else if ((label|0) == 16) {
       label = 0;
       $93 = ((($$1112$ptr)) + 7|0);
       $$2 = $93;
      }
      else if ((label|0) == 17) {
       label = 0;
       $94 = ((($$1112$ptr)) + 6|0);
       $$2 = $94;
      }
      else if ((label|0) == 18) {
       label = 0;
       $95 = ((($$1112$ptr)) + 5|0);
       $$2 = $95;
      }
      else if ((label|0) == 19) {
       label = 0;
       $96 = ((($$1112$ptr)) + 4|0);
       $$2 = $96;
      }
      else if ((label|0) == 20) {
       label = 0;
       $97 = ((($$1112$ptr)) + 3|0);
       $$2 = $97;
      }
      else if ((label|0) == 21) {
       label = 0;
       $98 = ((($$1112$ptr)) + 2|0);
       $$2 = $98;
      }
      else if ((label|0) == 22) {
       label = 0;
       $99 = ((($$1112$ptr)) + 1|0);
       $$2 = $99;
      }
      $100 = $$2;
      $101 = (($100) - ($36))|0;
      $102 = (($101) + 258)|0;
      $103 = ($102|0)>($$0114|0);
      if ($103) {
       HEAP32[$34>>2] = $$0108;
       $104 = ($102|0)<($spec$select118|0);
       if (!($104)) {
        $$2116 = $102;
        label = 28;
        break;
       }
       $105 = (($101) + 257)|0;
       $106 = (($8) + ($105)|0);
       $107 = HEAP8[$106>>0]|0;
       $108 = (($8) + ($102)|0);
       $109 = HEAP8[$108>>0]|0;
       $$1 = $109;$$1106 = $107;$$1115 = $102;
      } else {
       $$1 = $$0;$$1106 = $$0105;$$1115 = $$0114;
      }
     } else {
      $$1 = $$0;$$1106 = $$0105;$$1115 = $$0114;
     }
    } else {
     $$1 = $$0;$$1106 = $$0105;$$1115 = $$0114;
    }
   } else {
    $$1 = $$0;$$1106 = $$0105;$$1115 = $$0114;
   }
  } else {
   $$1 = $$0;$$1106 = $$0105;$$1115 = $$0114;
  }
  $110 = $$0108 & $21;
  $111 = (($19) + ($110<<1)|0);
  $112 = HEAP16[$111>>1]|0;
  $113 = $112&65535;
  $114 = ($spec$select>>>0)<($113>>>0);
  if (!($114)) {
   $$2116 = $$1115;
   label = 28;
   break;
  }
  $115 = (($$1110) + -1)|0;
  $116 = ($115|0)==(0);
  if ($116) {
   $$2116 = $$1115;
   label = 28;
   break;
  } else {
   $$0 = $$1;$$0105 = $$1106;$$0108 = $113;$$0114 = $$1115;$$1110 = $115;
  }
 }
 if ((label|0) == 28) {
  $117 = ($$2116>>>0)>($32>>>0);
  $$$2116 = $117 ? $32 : $$2116;
  return ($$$2116|0);
 }
 return (0)|0;
}
function _deflate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$$i = 0, $$$i381 = 0, $$0348 = 0, $$0349 = 0, $$0351 = 0, $$0352 = 0, $$0355424 = 0, $$0358 = 0, $$1 = 0, $$1$i = 0, $$1350 = 0, $$1353 = 0, $$1356 = 0, $$2 = 0, $$2354 = 0, $$2357 = 0, $$add$i = 0, $$add130$i = 0, $$idx$i = 0;
 var $$phi$trans$insert = 0, $$pr = 0, $$pr$pre = 0, $$pr384 = 0, $$pr388 = 0, $$pr388$pre = 0, $$pr393 = 0, $$pre = 0, $$pre$i = 0, $$pre$phi455Z2D = 0, $$pre$phi459Z2D = 0, $$pre$phi461Z2D = 0, $$pre$phi463Z2D = 0, $$pre438 = 0, $$pre441 = 0, $$pre442$pre = 0, $$pre443 = 0, $$pre444 = 0, $$pre446 = 0, $$pre450 = 0;
 var $$pre458 = 0, $$pre460 = 0, $$pre462 = 0, $$pre464 = 0, $$ptr$i = 0, $$ptr131$i = 0, $$ptr131$i$le = 0, $$ptr132$i = 0, $$ptr132$i$le = 0, $$ptr133$i = 0, $$ptr135$i = 0, $$sink = 0, $$sink$in = 0, $$sink498 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0;
 var $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0;
 var $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0;
 var $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0;
 var $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0, $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $1071 = 0, $1072 = 0, $1073 = 0, $1074 = 0, $1075 = 0, $1076 = 0;
 var $1077 = 0, $1078 = 0, $1079 = 0, $108 = 0, $1080 = 0, $1081 = 0, $1082 = 0, $1083 = 0, $1084 = 0, $1085 = 0, $1086 = 0, $1087 = 0, $1088 = 0, $1089 = 0, $109 = 0, $1090 = 0, $1091 = 0, $1092 = 0, $1093 = 0, $1094 = 0;
 var $1095 = 0, $1096 = 0, $1097 = 0, $1098 = 0, $1099 = 0, $11 = 0, $110 = 0, $1100 = 0, $1101 = 0, $1102 = 0, $1103 = 0, $1104 = 0, $1105 = 0, $1106 = 0, $1107 = 0, $1108 = 0, $1109 = 0, $111 = 0, $1110 = 0, $1111 = 0;
 var $1112 = 0, $1113 = 0, $1114 = 0, $1115 = 0, $1116 = 0, $1117 = 0, $1118 = 0, $1119 = 0, $112 = 0, $1120 = 0, $1121 = 0, $1122 = 0, $1123 = 0, $1124 = 0, $1125 = 0, $1126 = 0, $1127 = 0, $1128 = 0, $1129 = 0, $113 = 0;
 var $1130 = 0, $1131 = 0, $1132 = 0, $1133 = 0, $1134 = 0, $1135 = 0, $1136 = 0, $1137 = 0, $1138 = 0, $1139 = 0, $114 = 0, $1140 = 0, $1141 = 0, $1142 = 0, $1143 = 0, $1144 = 0, $1145 = 0, $1146 = 0, $1147 = 0, $1148 = 0;
 var $1149 = 0, $115 = 0, $1150 = 0, $1151 = 0, $1152 = 0, $1153 = 0, $1154 = 0, $1155 = 0, $1156 = 0, $1157 = 0, $1158 = 0, $1159 = 0, $116 = 0, $1160 = 0, $1161 = 0, $1162 = 0, $1163 = 0, $1164 = 0, $1165 = 0, $1166 = 0;
 var $1167 = 0, $1168 = 0, $1169 = 0, $117 = 0, $1170 = 0, $1171 = 0, $1172 = 0, $1173 = 0, $1174 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0;
 var $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0;
 var $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0;
 var $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0;
 var $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0;
 var $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0;
 var $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0;
 var $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0;
 var $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0;
 var $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0;
 var $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0;
 var $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0;
 var $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0;
 var $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0;
 var $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0;
 var $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0;
 var $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0;
 var $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0;
 var $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0;
 var $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0;
 var $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0;
 var $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0;
 var $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0;
 var $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0;
 var $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0;
 var $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0;
 var $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0;
 var $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0;
 var $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0;
 var $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0;
 var $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0;
 var $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0;
 var $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0;
 var $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0;
 var $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0;
 var $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0;
 var $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0;
 var $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0;
 var $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0;
 var $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0;
 var $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0;
 var $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $brmerge = 0, $or$cond = 0, $or$cond$i = 0, $or$cond136$i = 0, $or$cond363 = 0, $or$cond364 = 0, $or$cond403 = 0, $or$cond5 = 0, $or$cond7 = 0, $spec$select = 0, $spec$select$i = 0, $spec$select$i$i = 0, $spec$select$i$i379 = 0;
 var $spec$select$i137$i = 0, $spec$select$i139$i = 0, $spec$select$i367 = 0, $spec$select$i369 = 0, $spec$select$i371 = 0, $spec$select$i373 = 0, $spec$select$i375 = 0, $spec$select$i377 = 0, $spec$select$i52$i = 0, $spec$select$i54$i = 0, $spec$select361 = 0, $spec$select362 = 0, $spec$select402 = 0, $spec$store$select$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$1 = -2;
  return ($$1|0);
 }
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 $6 = ($1>>>0)>(5);
 $7 = $6 | $5;
 if ($7) {
  $$1 = -2;
  return ($$1|0);
 }
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 do {
  if (!($10)) {
   $11 = HEAP32[$0>>2]|0;
   $12 = ($11|0)==(0|0);
   if ($12) {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($14|0)==(0);
    if (!($15)) {
     break;
    }
   }
   $16 = ((($4)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(666);
   $19 = ($1|0)!=(4);
   $or$cond5 = $19 & $18;
   if (!($or$cond5)) {
    $22 = ((($0)) + 16|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)==(0);
    if ($24) {
     $25 = HEAP32[(9812)>>2]|0;
     $26 = ((($0)) + 24|0);
     HEAP32[$26>>2] = $25;
     $$1 = -5;
     return ($$1|0);
    }
    HEAP32[$4>>2] = $0;
    $27 = ((($4)) + 40|0);
    $28 = HEAP32[$27>>2]|0;
    HEAP32[$27>>2] = $1;
    $29 = ($17|0)==(42);
    do {
     if ($29) {
      $30 = ((($4)) + 24|0);
      $31 = HEAP32[$30>>2]|0;
      $32 = ($31|0)==(2);
      if (!($32)) {
       $204 = ((($4)) + 48|0);
       $205 = HEAP32[$204>>2]|0;
       $206 = $205 << 12;
       $207 = (($206) + -30720)|0;
       $208 = ((($4)) + 136|0);
       $209 = HEAP32[$208>>2]|0;
       $210 = ($209|0)>(1);
       if ($210) {
        $$0358 = 0;
       } else {
        $211 = ((($4)) + 132|0);
        $212 = HEAP32[$211>>2]|0;
        $213 = ($212|0)<(2);
        if ($213) {
         $$0358 = 0;
        } else {
         $214 = ($212|0)<(6);
         $215 = ($212|0)==(6);
         $$ = $215 ? 128 : 192;
         $spec$select402 = $214 ? 64 : $$;
         $$0358 = $spec$select402;
        }
       }
       $216 = $$0358 | $207;
       $217 = ((($4)) + 108|0);
       $218 = HEAP32[$217>>2]|0;
       $219 = ($218|0)==(0);
       $220 = $216 | 32;
       $spec$select362 = $219 ? $216 : $220;
       $221 = (($spec$select362>>>0) % 31)&-1;
       $222 = $221 ^ 31;
       $223 = (($222) + ($spec$select362))|0;
       HEAP32[$16>>2] = 113;
       $224 = $223 >>> 8;
       $225 = $224&255;
       $226 = ((($4)) + 8|0);
       $227 = HEAP32[$226>>2]|0;
       $228 = ((($4)) + 20|0);
       $229 = HEAP32[$228>>2]|0;
       $230 = (($229) + 1)|0;
       HEAP32[$228>>2] = $230;
       $231 = (($227) + ($229)|0);
       HEAP8[$231>>0] = $225;
       $232 = $223&255;
       $233 = HEAP32[$226>>2]|0;
       $234 = HEAP32[$228>>2]|0;
       $235 = (($234) + 1)|0;
       HEAP32[$228>>2] = $235;
       $236 = (($233) + ($234)|0);
       HEAP8[$236>>0] = $232;
       $237 = HEAP32[$217>>2]|0;
       $238 = ($237|0)==(0);
       $$pre464 = ((($0)) + 48|0);
       if (!($238)) {
        $239 = HEAP32[$$pre464>>2]|0;
        $240 = $239 >>> 16;
        $241 = $239 >>> 24;
        $242 = $241&255;
        $243 = HEAP32[$226>>2]|0;
        $244 = HEAP32[$228>>2]|0;
        $245 = (($244) + 1)|0;
        HEAP32[$228>>2] = $245;
        $246 = (($243) + ($244)|0);
        HEAP8[$246>>0] = $242;
        $247 = $240&255;
        $248 = HEAP32[$226>>2]|0;
        $249 = HEAP32[$228>>2]|0;
        $250 = (($249) + 1)|0;
        HEAP32[$228>>2] = $250;
        $251 = (($248) + ($249)|0);
        HEAP8[$251>>0] = $247;
        $252 = HEAP32[$$pre464>>2]|0;
        $253 = $252 >>> 8;
        $254 = $253&255;
        $255 = HEAP32[$226>>2]|0;
        $256 = HEAP32[$228>>2]|0;
        $257 = (($256) + 1)|0;
        HEAP32[$228>>2] = $257;
        $258 = (($255) + ($256)|0);
        HEAP8[$258>>0] = $254;
        $259 = $252&255;
        $260 = HEAP32[$226>>2]|0;
        $261 = HEAP32[$228>>2]|0;
        $262 = (($261) + 1)|0;
        HEAP32[$228>>2] = $262;
        $263 = (($260) + ($261)|0);
        HEAP8[$263>>0] = $259;
       }
       $264 = (_adler32(0,0,0)|0);
       HEAP32[$$pre464>>2] = $264;
       $$pr$pre = HEAP32[$16>>2]|0;
       $$pr = $$pr$pre;
       label = 29;
       break;
      }
      $33 = (_crc32(0,0,0)|0);
      $34 = ((($0)) + 48|0);
      HEAP32[$34>>2] = $33;
      $35 = ((($4)) + 8|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = ((($4)) + 20|0);
      $38 = HEAP32[$37>>2]|0;
      $39 = (($38) + 1)|0;
      HEAP32[$37>>2] = $39;
      $40 = (($36) + ($38)|0);
      HEAP8[$40>>0] = 31;
      $41 = HEAP32[$35>>2]|0;
      $42 = HEAP32[$37>>2]|0;
      $43 = (($42) + 1)|0;
      HEAP32[$37>>2] = $43;
      $44 = (($41) + ($42)|0);
      HEAP8[$44>>0] = -117;
      $45 = HEAP32[$35>>2]|0;
      $46 = HEAP32[$37>>2]|0;
      $47 = (($46) + 1)|0;
      HEAP32[$37>>2] = $47;
      $48 = (($45) + ($46)|0);
      HEAP8[$48>>0] = 8;
      $49 = ((($4)) + 28|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ($50|0)==(0|0);
      if ($51) {
       $52 = HEAP32[$35>>2]|0;
       $53 = HEAP32[$37>>2]|0;
       $54 = (($53) + 1)|0;
       HEAP32[$37>>2] = $54;
       $55 = (($52) + ($53)|0);
       HEAP8[$55>>0] = 0;
       $56 = HEAP32[$35>>2]|0;
       $57 = HEAP32[$37>>2]|0;
       $58 = (($57) + 1)|0;
       HEAP32[$37>>2] = $58;
       $59 = (($56) + ($57)|0);
       HEAP8[$59>>0] = 0;
       $60 = HEAP32[$35>>2]|0;
       $61 = HEAP32[$37>>2]|0;
       $62 = (($61) + 1)|0;
       HEAP32[$37>>2] = $62;
       $63 = (($60) + ($61)|0);
       HEAP8[$63>>0] = 0;
       $64 = HEAP32[$35>>2]|0;
       $65 = HEAP32[$37>>2]|0;
       $66 = (($65) + 1)|0;
       HEAP32[$37>>2] = $66;
       $67 = (($64) + ($65)|0);
       HEAP8[$67>>0] = 0;
       $68 = HEAP32[$35>>2]|0;
       $69 = HEAP32[$37>>2]|0;
       $70 = (($69) + 1)|0;
       HEAP32[$37>>2] = $70;
       $71 = (($68) + ($69)|0);
       HEAP8[$71>>0] = 0;
       $72 = ((($4)) + 132|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = ($73|0)==(9);
       if ($74) {
        $81 = 2;
       } else {
        $75 = ($73|0)<(2);
        $76 = ((($4)) + 136|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = ($77|0)>(1);
        $spec$select = $75 | $78;
        $79 = $spec$select ? 4 : 0;
        $81 = $79;
       }
       $80 = $81&255;
       $82 = HEAP32[$35>>2]|0;
       $83 = HEAP32[$37>>2]|0;
       $84 = (($83) + 1)|0;
       HEAP32[$37>>2] = $84;
       $85 = (($82) + ($83)|0);
       HEAP8[$85>>0] = $80;
       $86 = HEAP32[$35>>2]|0;
       $87 = HEAP32[$37>>2]|0;
       $88 = (($87) + 1)|0;
       HEAP32[$37>>2] = $88;
       $89 = (($86) + ($87)|0);
       HEAP8[$89>>0] = 3;
       HEAP32[$16>>2] = 113;
       break;
      }
      $90 = HEAP32[$50>>2]|0;
      $91 = ($90|0)!=(0);
      $92 = $91&1;
      $93 = ((($50)) + 44|0);
      $94 = HEAP32[$93>>2]|0;
      $95 = ($94|0)==(0);
      $96 = $95 ? 0 : 2;
      $97 = $96 | $92;
      $98 = ((($50)) + 16|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = ($99|0)==(0|0);
      $101 = $100 ? 0 : 4;
      $102 = $97 | $101;
      $103 = ((($50)) + 28|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = ($104|0)==(0|0);
      $106 = $105 ? 0 : 8;
      $107 = $102 | $106;
      $108 = ((($50)) + 36|0);
      $109 = HEAP32[$108>>2]|0;
      $110 = ($109|0)==(0|0);
      $111 = $110 ? 0 : 16;
      $112 = $107 | $111;
      $113 = $112&255;
      $114 = HEAP32[$35>>2]|0;
      $115 = HEAP32[$37>>2]|0;
      $116 = (($115) + 1)|0;
      HEAP32[$37>>2] = $116;
      $117 = (($114) + ($115)|0);
      HEAP8[$117>>0] = $113;
      $118 = HEAP32[$49>>2]|0;
      $119 = ((($118)) + 4|0);
      $120 = HEAP32[$119>>2]|0;
      $121 = $120&255;
      $122 = HEAP32[$35>>2]|0;
      $123 = HEAP32[$37>>2]|0;
      $124 = (($123) + 1)|0;
      HEAP32[$37>>2] = $124;
      $125 = (($122) + ($123)|0);
      HEAP8[$125>>0] = $121;
      $126 = HEAP32[$49>>2]|0;
      $127 = ((($126)) + 4|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = $128 >>> 8;
      $130 = $129&255;
      $131 = HEAP32[$35>>2]|0;
      $132 = HEAP32[$37>>2]|0;
      $133 = (($132) + 1)|0;
      HEAP32[$37>>2] = $133;
      $134 = (($131) + ($132)|0);
      HEAP8[$134>>0] = $130;
      $135 = HEAP32[$49>>2]|0;
      $136 = ((($135)) + 4|0);
      $137 = HEAP32[$136>>2]|0;
      $138 = $137 >>> 16;
      $139 = $138&255;
      $140 = HEAP32[$35>>2]|0;
      $141 = HEAP32[$37>>2]|0;
      $142 = (($141) + 1)|0;
      HEAP32[$37>>2] = $142;
      $143 = (($140) + ($141)|0);
      HEAP8[$143>>0] = $139;
      $144 = HEAP32[$49>>2]|0;
      $145 = ((($144)) + 4|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = $146 >>> 24;
      $148 = $147&255;
      $149 = HEAP32[$35>>2]|0;
      $150 = HEAP32[$37>>2]|0;
      $151 = (($150) + 1)|0;
      HEAP32[$37>>2] = $151;
      $152 = (($149) + ($150)|0);
      HEAP8[$152>>0] = $148;
      $153 = ((($4)) + 132|0);
      $154 = HEAP32[$153>>2]|0;
      $155 = ($154|0)==(9);
      if ($155) {
       $162 = 2;
      } else {
       $156 = ($154|0)<(2);
       $157 = ((($4)) + 136|0);
       $158 = HEAP32[$157>>2]|0;
       $159 = ($158|0)>(1);
       $spec$select361 = $156 | $159;
       $160 = $spec$select361 ? 4 : 0;
       $162 = $160;
      }
      $161 = $162&255;
      $163 = HEAP32[$35>>2]|0;
      $164 = HEAP32[$37>>2]|0;
      $165 = (($164) + 1)|0;
      HEAP32[$37>>2] = $165;
      $166 = (($163) + ($164)|0);
      HEAP8[$166>>0] = $161;
      $167 = HEAP32[$49>>2]|0;
      $168 = ((($167)) + 12|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = $169&255;
      $171 = HEAP32[$35>>2]|0;
      $172 = HEAP32[$37>>2]|0;
      $173 = (($172) + 1)|0;
      HEAP32[$37>>2] = $173;
      $174 = (($171) + ($172)|0);
      HEAP8[$174>>0] = $170;
      $175 = HEAP32[$49>>2]|0;
      $176 = ((($175)) + 16|0);
      $177 = HEAP32[$176>>2]|0;
      $178 = ($177|0)==(0|0);
      if ($178) {
       $196 = $175;
      } else {
       $179 = ((($175)) + 20|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = $180&255;
       $182 = HEAP32[$35>>2]|0;
       $183 = HEAP32[$37>>2]|0;
       $184 = (($183) + 1)|0;
       HEAP32[$37>>2] = $184;
       $185 = (($182) + ($183)|0);
       HEAP8[$185>>0] = $181;
       $186 = HEAP32[$49>>2]|0;
       $187 = ((($186)) + 20|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = $188 >>> 8;
       $190 = $189&255;
       $191 = HEAP32[$35>>2]|0;
       $192 = HEAP32[$37>>2]|0;
       $193 = (($192) + 1)|0;
       HEAP32[$37>>2] = $193;
       $194 = (($191) + ($192)|0);
       HEAP8[$194>>0] = $190;
       $$pre = HEAP32[$49>>2]|0;
       $196 = $$pre;
      }
      $195 = ((($196)) + 44|0);
      $197 = HEAP32[$195>>2]|0;
      $198 = ($197|0)==(0);
      if (!($198)) {
       $199 = HEAP32[$34>>2]|0;
       $200 = HEAP32[$35>>2]|0;
       $201 = HEAP32[$37>>2]|0;
       $202 = (_crc32($199,$200,$201)|0);
       HEAP32[$34>>2] = $202;
      }
      $203 = ((($4)) + 32|0);
      HEAP32[$203>>2] = 0;
      HEAP32[$16>>2] = 69;
      $$pre$phi459Z2D = $49;
      label = 31;
     } else {
      $$pr = $17;
      label = 29;
     }
    } while(0);
    if ((label|0) == 29) {
     $265 = ($$pr|0)==(69);
     if ($265) {
      $$pre458 = ((($4)) + 28|0);
      $$pre$phi459Z2D = $$pre458;
      label = 31;
     } else {
      $355 = $$pr;
      label = 51;
     }
    }
    do {
     if ((label|0) == 31) {
      $266 = HEAP32[$$pre$phi459Z2D>>2]|0;
      $267 = ((($266)) + 16|0);
      $268 = HEAP32[$267>>2]|0;
      $269 = ($268|0)==(0|0);
      if ($269) {
       HEAP32[$16>>2] = 73;
       $$pre$phi455Z2D = $$pre$phi459Z2D;$358 = $266;
       label = 53;
       break;
      }
      $270 = ((($4)) + 20|0);
      $271 = HEAP32[$270>>2]|0;
      $272 = ((($4)) + 32|0);
      $273 = HEAP32[$272>>2]|0;
      $274 = ((($266)) + 20|0);
      $275 = HEAP32[$274>>2]|0;
      $276 = $275 & 65535;
      $277 = ($273>>>0)<($276>>>0);
      L52: do {
       if ($277) {
        $278 = ((($4)) + 12|0);
        $279 = ((($4)) + 8|0);
        $280 = ((($0)) + 48|0);
        $281 = ((($0)) + 20|0);
        $$0355424 = $271;$1174 = $273;$283 = $271;$286 = $266;
        while(1) {
         $282 = HEAP32[$278>>2]|0;
         $284 = ($283|0)==($282|0);
         if ($284) {
          $285 = ((($286)) + 44|0);
          $287 = HEAP32[$285>>2]|0;
          $288 = ($287|0)!=(0);
          $289 = ($283>>>0)>($$0355424>>>0);
          $or$cond = $289 & $288;
          if ($or$cond) {
           $290 = HEAP32[$280>>2]|0;
           $291 = HEAP32[$279>>2]|0;
           $292 = (($291) + ($$0355424)|0);
           $293 = (($283) - ($$0355424))|0;
           $294 = (_crc32($290,$292,$293)|0);
           HEAP32[$280>>2] = $294;
          }
          $295 = HEAP32[$3>>2]|0;
          __tr_flush_bits($295);
          $296 = ((($295)) + 20|0);
          $297 = HEAP32[$296>>2]|0;
          $298 = HEAP32[$22>>2]|0;
          $299 = ($297>>>0)>($298>>>0);
          $spec$select$i369 = $299 ? $298 : $297;
          $300 = ($spec$select$i369|0)==(0);
          if (!($300)) {
           $301 = HEAP32[$8>>2]|0;
           $302 = ((($295)) + 16|0);
           $303 = HEAP32[$302>>2]|0;
           _memcpy(($301|0),($303|0),($spec$select$i369|0))|0;
           $304 = HEAP32[$8>>2]|0;
           $305 = (($304) + ($spec$select$i369)|0);
           HEAP32[$8>>2] = $305;
           $306 = HEAP32[$302>>2]|0;
           $307 = (($306) + ($spec$select$i369)|0);
           HEAP32[$302>>2] = $307;
           $308 = HEAP32[$281>>2]|0;
           $309 = (($308) + ($spec$select$i369))|0;
           HEAP32[$281>>2] = $309;
           $310 = HEAP32[$22>>2]|0;
           $311 = (($310) - ($spec$select$i369))|0;
           HEAP32[$22>>2] = $311;
           $312 = HEAP32[$296>>2]|0;
           $313 = (($312) - ($spec$select$i369))|0;
           HEAP32[$296>>2] = $313;
           $314 = ($313|0)==(0);
           if ($314) {
            $315 = ((($295)) + 8|0);
            $316 = HEAP32[$315>>2]|0;
            HEAP32[$302>>2] = $316;
           }
          }
          $317 = HEAP32[$270>>2]|0;
          $318 = HEAP32[$278>>2]|0;
          $319 = ($317|0)==($318|0);
          $$pre442$pre = HEAP32[$$pre$phi459Z2D>>2]|0;
          if ($319) {
           $$2357 = $317;$338 = $$pre442$pre;
           break L52;
          }
          $$pre441 = HEAP32[$272>>2]|0;
          $$1356 = $317;$321 = $$pre442$pre;$324 = $$pre441;$328 = $317;
         } else {
          $$1356 = $$0355424;$321 = $286;$324 = $1174;$328 = $283;
         }
         $320 = ((($321)) + 16|0);
         $322 = HEAP32[$320>>2]|0;
         $323 = (($322) + ($324)|0);
         $325 = HEAP8[$323>>0]|0;
         $326 = HEAP32[$279>>2]|0;
         $327 = (($328) + 1)|0;
         HEAP32[$270>>2] = $327;
         $329 = (($326) + ($328)|0);
         HEAP8[$329>>0] = $325;
         $330 = HEAP32[$272>>2]|0;
         $331 = (($330) + 1)|0;
         HEAP32[$272>>2] = $331;
         $332 = HEAP32[$$pre$phi459Z2D>>2]|0;
         $333 = ((($332)) + 20|0);
         $334 = HEAP32[$333>>2]|0;
         $335 = $334 & 65535;
         $336 = ($331>>>0)<($335>>>0);
         if (!($336)) {
          $$2357 = $$1356;$338 = $332;
          break L52;
         }
         $$pre438 = HEAP32[$270>>2]|0;
         $$0355424 = $$1356;$1174 = $331;$283 = $$pre438;$286 = $332;
        }
       } else {
        $$2357 = $271;$338 = $266;
       }
      } while(0);
      $337 = ((($338)) + 44|0);
      $339 = HEAP32[$337>>2]|0;
      $340 = ($339|0)==(0);
      if ($340) {
       $352 = $338;
      } else {
       $341 = HEAP32[$270>>2]|0;
       $342 = ($341>>>0)>($$2357>>>0);
       if ($342) {
        $343 = ((($0)) + 48|0);
        $344 = HEAP32[$343>>2]|0;
        $345 = ((($4)) + 8|0);
        $346 = HEAP32[$345>>2]|0;
        $347 = (($346) + ($$2357)|0);
        $348 = (($341) - ($$2357))|0;
        $349 = (_crc32($344,$347,$348)|0);
        HEAP32[$343>>2] = $349;
        $$pre443 = HEAP32[$$pre$phi459Z2D>>2]|0;
        $352 = $$pre443;
       } else {
        $352 = $338;
       }
      }
      $350 = HEAP32[$272>>2]|0;
      $351 = ((($352)) + 20|0);
      $353 = HEAP32[$351>>2]|0;
      $354 = ($350|0)==($353|0);
      if ($354) {
       HEAP32[$272>>2] = 0;
       HEAP32[$16>>2] = 73;
       $$pre$phi455Z2D = $$pre$phi459Z2D;$358 = $352;
       label = 53;
       break;
      } else {
       $$pr384 = HEAP32[$16>>2]|0;
       $355 = $$pr384;
       label = 51;
       break;
      }
     }
    } while(0);
    if ((label|0) == 51) {
     $356 = ($355|0)==(73);
     if ($356) {
      $$phi$trans$insert = ((($4)) + 28|0);
      $$pre444 = HEAP32[$$phi$trans$insert>>2]|0;
      $$pre$phi455Z2D = $$phi$trans$insert;$358 = $$pre444;
      label = 53;
     } else {
      $$pr388 = $355;
      label = 71;
     }
    }
    do {
     if ((label|0) == 53) {
      $357 = ((($358)) + 28|0);
      $359 = HEAP32[$357>>2]|0;
      $360 = ($359|0)==(0|0);
      if ($360) {
       HEAP32[$16>>2] = 91;
       $$pre$phi461Z2D = $$pre$phi455Z2D;
       label = 73;
       break;
      }
      $361 = ((($4)) + 20|0);
      $362 = HEAP32[$361>>2]|0;
      $363 = ((($4)) + 12|0);
      $364 = ((($4)) + 32|0);
      $365 = ((($4)) + 8|0);
      $366 = ((($0)) + 48|0);
      $367 = ((($0)) + 20|0);
      $$0352 = $362;$369 = $362;
      while(1) {
       $368 = HEAP32[$363>>2]|0;
       $370 = ($369|0)==($368|0);
       if ($370) {
        $371 = HEAP32[$$pre$phi455Z2D>>2]|0;
        $372 = ((($371)) + 44|0);
        $373 = HEAP32[$372>>2]|0;
        $374 = ($373|0)!=(0);
        $375 = ($369>>>0)>($$0352>>>0);
        $or$cond363 = $375 & $374;
        if ($or$cond363) {
         $376 = HEAP32[$366>>2]|0;
         $377 = HEAP32[$365>>2]|0;
         $378 = (($377) + ($$0352)|0);
         $379 = (($369) - ($$0352))|0;
         $380 = (_crc32($376,$378,$379)|0);
         HEAP32[$366>>2] = $380;
        }
        $381 = HEAP32[$3>>2]|0;
        __tr_flush_bits($381);
        $382 = ((($381)) + 20|0);
        $383 = HEAP32[$382>>2]|0;
        $384 = HEAP32[$22>>2]|0;
        $385 = ($383>>>0)>($384>>>0);
        $spec$select$i371 = $385 ? $384 : $383;
        $386 = ($spec$select$i371|0)==(0);
        if (!($386)) {
         $387 = HEAP32[$8>>2]|0;
         $388 = ((($381)) + 16|0);
         $389 = HEAP32[$388>>2]|0;
         _memcpy(($387|0),($389|0),($spec$select$i371|0))|0;
         $390 = HEAP32[$8>>2]|0;
         $391 = (($390) + ($spec$select$i371)|0);
         HEAP32[$8>>2] = $391;
         $392 = HEAP32[$388>>2]|0;
         $393 = (($392) + ($spec$select$i371)|0);
         HEAP32[$388>>2] = $393;
         $394 = HEAP32[$367>>2]|0;
         $395 = (($394) + ($spec$select$i371))|0;
         HEAP32[$367>>2] = $395;
         $396 = HEAP32[$22>>2]|0;
         $397 = (($396) - ($spec$select$i371))|0;
         HEAP32[$22>>2] = $397;
         $398 = HEAP32[$382>>2]|0;
         $399 = (($398) - ($spec$select$i371))|0;
         HEAP32[$382>>2] = $399;
         $400 = ($399|0)==(0);
         if ($400) {
          $401 = ((($381)) + 8|0);
          $402 = HEAP32[$401>>2]|0;
          HEAP32[$388>>2] = $402;
         }
        }
        $403 = HEAP32[$361>>2]|0;
        $404 = HEAP32[$363>>2]|0;
        $405 = ($403|0)==($404|0);
        if ($405) {
         $$0351 = 1;$$2354 = $403;
         break;
        } else {
         $$1353 = $403;$415 = $403;
        }
       } else {
        $$1353 = $$0352;$415 = $369;
       }
       $406 = HEAP32[$$pre$phi455Z2D>>2]|0;
       $407 = ((($406)) + 28|0);
       $408 = HEAP32[$407>>2]|0;
       $409 = HEAP32[$364>>2]|0;
       $410 = (($409) + 1)|0;
       HEAP32[$364>>2] = $410;
       $411 = (($408) + ($409)|0);
       $412 = HEAP8[$411>>0]|0;
       $413 = HEAP32[$365>>2]|0;
       $414 = (($415) + 1)|0;
       HEAP32[$361>>2] = $414;
       $416 = (($413) + ($415)|0);
       HEAP8[$416>>0] = $412;
       $417 = ($412<<24>>24)==(0);
       if ($417) {
        $$0351 = 0;$$2354 = $$1353;
        break;
       }
       $$pre446 = HEAP32[$361>>2]|0;
       $$0352 = $$1353;$369 = $$pre446;
      }
      $418 = HEAP32[$$pre$phi455Z2D>>2]|0;
      $419 = ((($418)) + 44|0);
      $420 = HEAP32[$419>>2]|0;
      $421 = ($420|0)==(0);
      if (!($421)) {
       $422 = HEAP32[$361>>2]|0;
       $423 = ($422>>>0)>($$2354>>>0);
       if ($423) {
        $424 = HEAP32[$366>>2]|0;
        $425 = HEAP32[$365>>2]|0;
        $426 = (($425) + ($$2354)|0);
        $427 = (($422) - ($$2354))|0;
        $428 = (_crc32($424,$426,$427)|0);
        HEAP32[$366>>2] = $428;
       }
      }
      $429 = ($$0351|0)==(0);
      if ($429) {
       HEAP32[$364>>2] = 0;
       HEAP32[$16>>2] = 91;
       $$pre$phi461Z2D = $$pre$phi455Z2D;
       label = 73;
       break;
      } else {
       $$pr388$pre = HEAP32[$16>>2]|0;
       $$pr388 = $$pr388$pre;
       label = 71;
       break;
      }
     }
    } while(0);
    if ((label|0) == 71) {
     $430 = ($$pr388|0)==(91);
     if ($430) {
      $$pre460 = ((($4)) + 28|0);
      $$pre$phi461Z2D = $$pre460;
      label = 73;
     } else {
      $504 = $$pr388;
      label = 91;
     }
    }
    do {
     if ((label|0) == 73) {
      $431 = HEAP32[$$pre$phi461Z2D>>2]|0;
      $432 = ((($431)) + 36|0);
      $433 = HEAP32[$432>>2]|0;
      $434 = ($433|0)==(0|0);
      if ($434) {
       HEAP32[$16>>2] = 103;
       $$pre$phi463Z2D = $$pre$phi461Z2D;
       label = 93;
       break;
      }
      $435 = ((($4)) + 20|0);
      $436 = HEAP32[$435>>2]|0;
      $437 = ((($4)) + 12|0);
      $438 = ((($4)) + 32|0);
      $439 = ((($4)) + 8|0);
      $440 = ((($0)) + 48|0);
      $441 = ((($0)) + 20|0);
      $$0349 = $436;$443 = $436;
      while(1) {
       $442 = HEAP32[$437>>2]|0;
       $444 = ($443|0)==($442|0);
       if ($444) {
        $445 = HEAP32[$$pre$phi461Z2D>>2]|0;
        $446 = ((($445)) + 44|0);
        $447 = HEAP32[$446>>2]|0;
        $448 = ($447|0)!=(0);
        $449 = ($443>>>0)>($$0349>>>0);
        $or$cond364 = $449 & $448;
        if ($or$cond364) {
         $450 = HEAP32[$440>>2]|0;
         $451 = HEAP32[$439>>2]|0;
         $452 = (($451) + ($$0349)|0);
         $453 = (($443) - ($$0349))|0;
         $454 = (_crc32($450,$452,$453)|0);
         HEAP32[$440>>2] = $454;
        }
        $455 = HEAP32[$3>>2]|0;
        __tr_flush_bits($455);
        $456 = ((($455)) + 20|0);
        $457 = HEAP32[$456>>2]|0;
        $458 = HEAP32[$22>>2]|0;
        $459 = ($457>>>0)>($458>>>0);
        $spec$select$i373 = $459 ? $458 : $457;
        $460 = ($spec$select$i373|0)==(0);
        if (!($460)) {
         $461 = HEAP32[$8>>2]|0;
         $462 = ((($455)) + 16|0);
         $463 = HEAP32[$462>>2]|0;
         _memcpy(($461|0),($463|0),($spec$select$i373|0))|0;
         $464 = HEAP32[$8>>2]|0;
         $465 = (($464) + ($spec$select$i373)|0);
         HEAP32[$8>>2] = $465;
         $466 = HEAP32[$462>>2]|0;
         $467 = (($466) + ($spec$select$i373)|0);
         HEAP32[$462>>2] = $467;
         $468 = HEAP32[$441>>2]|0;
         $469 = (($468) + ($spec$select$i373))|0;
         HEAP32[$441>>2] = $469;
         $470 = HEAP32[$22>>2]|0;
         $471 = (($470) - ($spec$select$i373))|0;
         HEAP32[$22>>2] = $471;
         $472 = HEAP32[$456>>2]|0;
         $473 = (($472) - ($spec$select$i373))|0;
         HEAP32[$456>>2] = $473;
         $474 = ($473|0)==(0);
         if ($474) {
          $475 = ((($455)) + 8|0);
          $476 = HEAP32[$475>>2]|0;
          HEAP32[$462>>2] = $476;
         }
        }
        $477 = HEAP32[$435>>2]|0;
        $478 = HEAP32[$437>>2]|0;
        $479 = ($477|0)==($478|0);
        if ($479) {
         $$0348 = 1;$$2 = $477;
         break;
        } else {
         $$1350 = $477;$489 = $477;
        }
       } else {
        $$1350 = $$0349;$489 = $443;
       }
       $480 = HEAP32[$$pre$phi461Z2D>>2]|0;
       $481 = ((($480)) + 36|0);
       $482 = HEAP32[$481>>2]|0;
       $483 = HEAP32[$438>>2]|0;
       $484 = (($483) + 1)|0;
       HEAP32[$438>>2] = $484;
       $485 = (($482) + ($483)|0);
       $486 = HEAP8[$485>>0]|0;
       $487 = HEAP32[$439>>2]|0;
       $488 = (($489) + 1)|0;
       HEAP32[$435>>2] = $488;
       $490 = (($487) + ($489)|0);
       HEAP8[$490>>0] = $486;
       $491 = ($486<<24>>24)==(0);
       if ($491) {
        $$0348 = 0;$$2 = $$1350;
        break;
       }
       $$pre450 = HEAP32[$435>>2]|0;
       $$0349 = $$1350;$443 = $$pre450;
      }
      $492 = HEAP32[$$pre$phi461Z2D>>2]|0;
      $493 = ((($492)) + 44|0);
      $494 = HEAP32[$493>>2]|0;
      $495 = ($494|0)==(0);
      if (!($495)) {
       $496 = HEAP32[$435>>2]|0;
       $497 = ($496>>>0)>($$2>>>0);
       if ($497) {
        $498 = HEAP32[$440>>2]|0;
        $499 = HEAP32[$439>>2]|0;
        $500 = (($499) + ($$2)|0);
        $501 = (($496) - ($$2))|0;
        $502 = (_crc32($498,$500,$501)|0);
        HEAP32[$440>>2] = $502;
       }
      }
      $503 = ($$0348|0)==(0);
      if ($503) {
       HEAP32[$16>>2] = 103;
       $$pre$phi463Z2D = $$pre$phi461Z2D;
       label = 93;
       break;
      } else {
       $$pr393 = HEAP32[$16>>2]|0;
       $504 = $$pr393;
       label = 91;
       break;
      }
     }
    } while(0);
    if ((label|0) == 91) {
     $505 = ($504|0)==(103);
     if ($505) {
      $$pre462 = ((($4)) + 28|0);
      $$pre$phi463Z2D = $$pre462;
      label = 93;
     }
    }
    do {
     if ((label|0) == 93) {
      $506 = HEAP32[$$pre$phi463Z2D>>2]|0;
      $507 = ((($506)) + 44|0);
      $508 = HEAP32[$507>>2]|0;
      $509 = ($508|0)==(0);
      if ($509) {
       HEAP32[$16>>2] = 113;
       break;
      }
      $510 = ((($4)) + 20|0);
      $511 = HEAP32[$510>>2]|0;
      $512 = (($511) + 2)|0;
      $513 = ((($4)) + 12|0);
      $514 = HEAP32[$513>>2]|0;
      $515 = ($512>>>0)>($514>>>0);
      if ($515) {
       $516 = HEAP32[$3>>2]|0;
       __tr_flush_bits($516);
       $517 = ((($516)) + 20|0);
       $518 = HEAP32[$517>>2]|0;
       $519 = HEAP32[$22>>2]|0;
       $520 = ($518>>>0)>($519>>>0);
       $spec$select$i375 = $520 ? $519 : $518;
       $521 = ($spec$select$i375|0)==(0);
       if (!($521)) {
        $522 = HEAP32[$8>>2]|0;
        $523 = ((($516)) + 16|0);
        $524 = HEAP32[$523>>2]|0;
        _memcpy(($522|0),($524|0),($spec$select$i375|0))|0;
        $525 = HEAP32[$8>>2]|0;
        $526 = (($525) + ($spec$select$i375)|0);
        HEAP32[$8>>2] = $526;
        $527 = HEAP32[$523>>2]|0;
        $528 = (($527) + ($spec$select$i375)|0);
        HEAP32[$523>>2] = $528;
        $529 = ((($0)) + 20|0);
        $530 = HEAP32[$529>>2]|0;
        $531 = (($530) + ($spec$select$i375))|0;
        HEAP32[$529>>2] = $531;
        $532 = HEAP32[$22>>2]|0;
        $533 = (($532) - ($spec$select$i375))|0;
        HEAP32[$22>>2] = $533;
        $534 = HEAP32[$517>>2]|0;
        $535 = (($534) - ($spec$select$i375))|0;
        HEAP32[$517>>2] = $535;
        $536 = ($535|0)==(0);
        if ($536) {
         $537 = ((($516)) + 8|0);
         $538 = HEAP32[$537>>2]|0;
         HEAP32[$523>>2] = $538;
        }
       }
      }
      $539 = HEAP32[$510>>2]|0;
      $540 = (($539) + 2)|0;
      $541 = HEAP32[$513>>2]|0;
      $542 = ($540>>>0)>($541>>>0);
      if (!($542)) {
       $543 = ((($0)) + 48|0);
       $544 = HEAP32[$543>>2]|0;
       $545 = $544&255;
       $546 = ((($4)) + 8|0);
       $547 = HEAP32[$546>>2]|0;
       $548 = (($539) + 1)|0;
       HEAP32[$510>>2] = $548;
       $549 = (($547) + ($539)|0);
       HEAP8[$549>>0] = $545;
       $550 = HEAP32[$543>>2]|0;
       $551 = $550 >>> 8;
       $552 = $551&255;
       $553 = HEAP32[$546>>2]|0;
       $554 = HEAP32[$510>>2]|0;
       $555 = (($554) + 1)|0;
       HEAP32[$510>>2] = $555;
       $556 = (($553) + ($554)|0);
       HEAP8[$556>>0] = $552;
       $557 = (_crc32(0,0,0)|0);
       HEAP32[$543>>2] = $557;
       HEAP32[$16>>2] = 113;
      }
     }
    } while(0);
    $558 = ((($4)) + 20|0);
    $559 = HEAP32[$558>>2]|0;
    $560 = ($559|0)==(0);
    if ($560) {
     $586 = ((($0)) + 4|0);
     $587 = HEAP32[$586>>2]|0;
     $588 = ($587|0)==(0);
     if ($588) {
      $589 = $1 << 1;
      $590 = ($1|0)>(4);
      $591 = $590 ? 9 : 0;
      $592 = (($589) - ($591))|0;
      $593 = $28 << 1;
      $594 = ($28|0)>(4);
      $595 = $594 ? 9 : 0;
      $596 = (($593) - ($595))|0;
      $597 = ($592|0)<=($596|0);
      $or$cond7 = $19 & $597;
      if ($or$cond7) {
       $598 = HEAP32[(9812)>>2]|0;
       $599 = ((($0)) + 24|0);
       HEAP32[$599>>2] = $598;
       $$1 = -5;
       return ($$1|0);
      }
     }
    } else {
     $561 = HEAP32[$3>>2]|0;
     __tr_flush_bits($561);
     $562 = ((($561)) + 20|0);
     $563 = HEAP32[$562>>2]|0;
     $564 = HEAP32[$22>>2]|0;
     $565 = ($563>>>0)>($564>>>0);
     $spec$select$i377 = $565 ? $564 : $563;
     $566 = ($spec$select$i377|0)==(0);
     if ($566) {
      $584 = $564;
     } else {
      $567 = HEAP32[$8>>2]|0;
      $568 = ((($561)) + 16|0);
      $569 = HEAP32[$568>>2]|0;
      _memcpy(($567|0),($569|0),($spec$select$i377|0))|0;
      $570 = HEAP32[$8>>2]|0;
      $571 = (($570) + ($spec$select$i377)|0);
      HEAP32[$8>>2] = $571;
      $572 = HEAP32[$568>>2]|0;
      $573 = (($572) + ($spec$select$i377)|0);
      HEAP32[$568>>2] = $573;
      $574 = ((($0)) + 20|0);
      $575 = HEAP32[$574>>2]|0;
      $576 = (($575) + ($spec$select$i377))|0;
      HEAP32[$574>>2] = $576;
      $577 = HEAP32[$22>>2]|0;
      $578 = (($577) - ($spec$select$i377))|0;
      HEAP32[$22>>2] = $578;
      $579 = HEAP32[$562>>2]|0;
      $580 = (($579) - ($spec$select$i377))|0;
      HEAP32[$562>>2] = $580;
      $581 = ($580|0)==(0);
      if ($581) {
       $582 = ((($561)) + 8|0);
       $583 = HEAP32[$582>>2]|0;
       HEAP32[$568>>2] = $583;
       $584 = $578;
      } else {
       $584 = $578;
      }
     }
     $585 = ($584|0)==(0);
     if ($585) {
      HEAP32[$27>>2] = -1;
      $$1 = 0;
      return ($$1|0);
     }
    }
    $600 = HEAP32[$16>>2]|0;
    $601 = ($600|0)==(666);
    $602 = ((($0)) + 4|0);
    $603 = HEAP32[$602>>2]|0;
    $604 = ($603|0)==(0);
    if ($601) {
     if ($604) {
      label = 114;
     } else {
      $605 = HEAP32[(9812)>>2]|0;
      $606 = ((($0)) + 24|0);
      HEAP32[$606>>2] = $605;
      $$1 = -5;
      return ($$1|0);
     }
    } else {
     if ($604) {
      label = 114;
     } else {
      label = 115;
     }
    }
    if ((label|0) == 114) {
     $607 = ((($4)) + 116|0);
     $608 = HEAP32[$607>>2]|0;
     $609 = ($608|0)==(0);
     $610 = ($1|0)==(0);
     $brmerge = $610 | $601;
     $or$cond403 = $brmerge & $609;
     if (!($or$cond403)) {
      label = 115;
     }
    }
    do {
     if ((label|0) == 115) {
      $611 = ((($4)) + 136|0);
      $612 = HEAP32[$611>>2]|0;
      L171: do {
       switch ($612|0) {
       case 2:  {
        $613 = ((($4)) + 116|0);
        $614 = ((($4)) + 96|0);
        $615 = ((($4)) + 56|0);
        $616 = ((($4)) + 108|0);
        $617 = ((($4)) + 5796|0);
        $618 = ((($4)) + 5792|0);
        $619 = ((($4)) + 5784|0);
        $620 = ((($4)) + 5788|0);
        $621 = ((($4)) + 92|0);
        while(1) {
         $622 = HEAP32[$613>>2]|0;
         $623 = ($622|0)==(0);
         if ($623) {
          _fill_window($4);
          $624 = HEAP32[$613>>2]|0;
          $625 = ($624|0)==(0);
          if ($625) {
           break;
          }
         }
         HEAP32[$614>>2] = 0;
         $627 = HEAP32[$615>>2]|0;
         $628 = HEAP32[$616>>2]|0;
         $629 = (($627) + ($628)|0);
         $630 = HEAP8[$629>>0]|0;
         $631 = HEAP32[$617>>2]|0;
         $632 = HEAP32[$618>>2]|0;
         $633 = (($631) + ($632<<1)|0);
         HEAP16[$633>>1] = 0;
         $634 = HEAP32[$619>>2]|0;
         $635 = (($632) + 1)|0;
         HEAP32[$618>>2] = $635;
         $636 = (($634) + ($632)|0);
         HEAP8[$636>>0] = $630;
         $637 = $630&255;
         $638 = (((($4)) + 148|0) + ($637<<2)|0);
         $639 = HEAP16[$638>>1]|0;
         $640 = (($639) + 1)<<16>>16;
         HEAP16[$638>>1] = $640;
         $641 = HEAP32[$618>>2]|0;
         $642 = HEAP32[$620>>2]|0;
         $643 = (($642) + -1)|0;
         $644 = ($641|0)==($643|0);
         $645 = HEAP32[$613>>2]|0;
         $646 = (($645) + -1)|0;
         HEAP32[$613>>2] = $646;
         $647 = HEAP32[$616>>2]|0;
         $648 = (($647) + 1)|0;
         HEAP32[$616>>2] = $648;
         if ($644) {
          $649 = HEAP32[$621>>2]|0;
          $650 = ($649|0)>(-1);
          if ($650) {
           $651 = HEAP32[$615>>2]|0;
           $652 = (($651) + ($649)|0);
           $654 = $652;
          } else {
           $654 = 0;
          }
          $653 = (($648) - ($649))|0;
          __tr_flush_block($4,$654,$653,0);
          $655 = HEAP32[$616>>2]|0;
          HEAP32[$621>>2] = $655;
          $656 = HEAP32[$4>>2]|0;
          $657 = ((($656)) + 28|0);
          $658 = HEAP32[$657>>2]|0;
          __tr_flush_bits($658);
          $659 = ((($658)) + 20|0);
          $660 = HEAP32[$659>>2]|0;
          $661 = ((($656)) + 16|0);
          $662 = HEAP32[$661>>2]|0;
          $663 = ($660>>>0)>($662>>>0);
          $spec$select$i$i = $663 ? $662 : $660;
          $664 = ($spec$select$i$i|0)==(0);
          if (!($664)) {
           $665 = ((($656)) + 12|0);
           $666 = HEAP32[$665>>2]|0;
           $667 = ((($658)) + 16|0);
           $668 = HEAP32[$667>>2]|0;
           _memcpy(($666|0),($668|0),($spec$select$i$i|0))|0;
           $669 = HEAP32[$665>>2]|0;
           $670 = (($669) + ($spec$select$i$i)|0);
           HEAP32[$665>>2] = $670;
           $671 = HEAP32[$667>>2]|0;
           $672 = (($671) + ($spec$select$i$i)|0);
           HEAP32[$667>>2] = $672;
           $673 = ((($656)) + 20|0);
           $674 = HEAP32[$673>>2]|0;
           $675 = (($674) + ($spec$select$i$i))|0;
           HEAP32[$673>>2] = $675;
           $676 = HEAP32[$661>>2]|0;
           $677 = (($676) - ($spec$select$i$i))|0;
           HEAP32[$661>>2] = $677;
           $678 = HEAP32[$659>>2]|0;
           $679 = (($678) - ($spec$select$i$i))|0;
           HEAP32[$659>>2] = $679;
           $680 = ($679|0)==(0);
           if ($680) {
            $681 = ((($658)) + 8|0);
            $682 = HEAP32[$681>>2]|0;
            HEAP32[$667>>2] = $682;
           }
          }
          $683 = HEAP32[$4>>2]|0;
          $684 = ((($683)) + 16|0);
          $685 = HEAP32[$684>>2]|0;
          $686 = ($685|0)==(0);
          if ($686) {
           label = 198;
           break L171;
          }
         }
        }
        $626 = ($1|0)==(0);
        if ($626) {
         label = 198;
        } else {
         $687 = ((($4)) + 5812|0);
         HEAP32[$687>>2] = 0;
         $688 = ($1|0)==(4);
         if ($688) {
          $689 = HEAP32[$621>>2]|0;
          $690 = ($689|0)>(-1);
          if ($690) {
           $691 = HEAP32[$615>>2]|0;
           $692 = (($691) + ($689)|0);
           $695 = $692;
          } else {
           $695 = 0;
          }
          $693 = HEAP32[$616>>2]|0;
          $694 = (($693) - ($689))|0;
          __tr_flush_block($4,$695,$694,1);
          $696 = HEAP32[$616>>2]|0;
          HEAP32[$621>>2] = $696;
          $697 = HEAP32[$4>>2]|0;
          $698 = ((($697)) + 28|0);
          $699 = HEAP32[$698>>2]|0;
          __tr_flush_bits($699);
          $700 = ((($699)) + 20|0);
          $701 = HEAP32[$700>>2]|0;
          $702 = ((($697)) + 16|0);
          $703 = HEAP32[$702>>2]|0;
          $704 = ($701>>>0)>($703>>>0);
          $spec$select$i52$i = $704 ? $703 : $701;
          $705 = ($spec$select$i52$i|0)==(0);
          if (!($705)) {
           $706 = ((($697)) + 12|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($699)) + 16|0);
           $709 = HEAP32[$708>>2]|0;
           _memcpy(($707|0),($709|0),($spec$select$i52$i|0))|0;
           $710 = HEAP32[$706>>2]|0;
           $711 = (($710) + ($spec$select$i52$i)|0);
           HEAP32[$706>>2] = $711;
           $712 = HEAP32[$708>>2]|0;
           $713 = (($712) + ($spec$select$i52$i)|0);
           HEAP32[$708>>2] = $713;
           $714 = ((($697)) + 20|0);
           $715 = HEAP32[$714>>2]|0;
           $716 = (($715) + ($spec$select$i52$i))|0;
           HEAP32[$714>>2] = $716;
           $717 = HEAP32[$702>>2]|0;
           $718 = (($717) - ($spec$select$i52$i))|0;
           HEAP32[$702>>2] = $718;
           $719 = HEAP32[$700>>2]|0;
           $720 = (($719) - ($spec$select$i52$i))|0;
           HEAP32[$700>>2] = $720;
           $721 = ($720|0)==(0);
           if ($721) {
            $722 = ((($699)) + 8|0);
            $723 = HEAP32[$722>>2]|0;
            HEAP32[$708>>2] = $723;
           }
          }
          $724 = HEAP32[$4>>2]|0;
          $725 = ((($724)) + 16|0);
          $726 = HEAP32[$725>>2]|0;
          $727 = ($726|0)==(0);
          $$$i = $727 ? 2 : 3;
          $1014 = $$$i;
          label = 195;
          break L171;
         }
         $728 = HEAP32[$618>>2]|0;
         $729 = ($728|0)==(0);
         if (!($729)) {
          $730 = HEAP32[$621>>2]|0;
          $731 = ($730|0)>(-1);
          if ($731) {
           $732 = HEAP32[$615>>2]|0;
           $733 = (($732) + ($730)|0);
           $736 = $733;
          } else {
           $736 = 0;
          }
          $734 = HEAP32[$616>>2]|0;
          $735 = (($734) - ($730))|0;
          __tr_flush_block($4,$736,$735,0);
          $737 = HEAP32[$616>>2]|0;
          HEAP32[$621>>2] = $737;
          $738 = HEAP32[$4>>2]|0;
          $739 = ((($738)) + 28|0);
          $740 = HEAP32[$739>>2]|0;
          __tr_flush_bits($740);
          $741 = ((($740)) + 20|0);
          $742 = HEAP32[$741>>2]|0;
          $743 = ((($738)) + 16|0);
          $744 = HEAP32[$743>>2]|0;
          $745 = ($742>>>0)>($744>>>0);
          $spec$select$i54$i = $745 ? $744 : $742;
          $746 = ($spec$select$i54$i|0)==(0);
          if (!($746)) {
           $747 = ((($738)) + 12|0);
           $748 = HEAP32[$747>>2]|0;
           $749 = ((($740)) + 16|0);
           $750 = HEAP32[$749>>2]|0;
           _memcpy(($748|0),($750|0),($spec$select$i54$i|0))|0;
           $751 = HEAP32[$747>>2]|0;
           $752 = (($751) + ($spec$select$i54$i)|0);
           HEAP32[$747>>2] = $752;
           $753 = HEAP32[$749>>2]|0;
           $754 = (($753) + ($spec$select$i54$i)|0);
           HEAP32[$749>>2] = $754;
           $755 = ((($738)) + 20|0);
           $756 = HEAP32[$755>>2]|0;
           $757 = (($756) + ($spec$select$i54$i))|0;
           HEAP32[$755>>2] = $757;
           $758 = HEAP32[$743>>2]|0;
           $759 = (($758) - ($spec$select$i54$i))|0;
           HEAP32[$743>>2] = $759;
           $760 = HEAP32[$741>>2]|0;
           $761 = (($760) - ($spec$select$i54$i))|0;
           HEAP32[$741>>2] = $761;
           $762 = ($761|0)==(0);
           if ($762) {
            $763 = ((($740)) + 8|0);
            $764 = HEAP32[$763>>2]|0;
            HEAP32[$749>>2] = $764;
           }
          }
          $765 = HEAP32[$4>>2]|0;
          $766 = ((($765)) + 16|0);
          $767 = HEAP32[$766>>2]|0;
          $768 = ($767|0)==(0);
          if ($768) {
           label = 198;
          }
         }
        }
        break;
       }
       case 3:  {
        $769 = ((($4)) + 116|0);
        $770 = ($1|0)==(0);
        $771 = ((($4)) + 108|0);
        $772 = ((($4)) + 92|0);
        $773 = ((($4)) + 56|0);
        $774 = ((($4)) + 5796|0);
        $775 = ((($4)) + 5792|0);
        $776 = ((($4)) + 5784|0);
        $777 = ((($4)) + 5788|0);
        $778 = ((($4)) + 96|0);
        while(1) {
         $779 = HEAP32[$769>>2]|0;
         $780 = ($779>>>0)<(259);
         if ($780) {
          _fill_window($4);
          $781 = HEAP32[$769>>2]|0;
          $782 = ($781>>>0)<(259);
          $or$cond$i = $770 & $782;
          if ($or$cond$i) {
           label = 198;
           break L171;
          }
          $783 = ($781|0)==(0);
          if ($783) {
           break;
          }
          HEAP32[$778>>2] = 0;
          $784 = ($781>>>0)>(2);
          if ($784) {
           $832 = $781;
           label = 149;
          } else {
           $$pre$i = HEAP32[$771>>2]|0;
           $867 = $$pre$i;
           label = 172;
          }
         } else {
          HEAP32[$778>>2] = 0;
          $832 = $779;
          label = 149;
         }
         if ((label|0) == 149) {
          label = 0;
          $785 = HEAP32[$771>>2]|0;
          $786 = ($785|0)==(0);
          if ($786) {
           $867 = 0;
           label = 172;
          } else {
           $787 = HEAP32[$773>>2]|0;
           $788 = (($787) + ($785)|0);
           $$ptr133$i = ((($788)) + -1|0);
           $789 = HEAP8[$$ptr133$i>>0]|0;
           $790 = HEAP8[$788>>0]|0;
           $791 = ($789<<24>>24)==($790<<24>>24);
           if ($791) {
            $$ptr135$i = ((($788)) + 1|0);
            $792 = HEAP8[$$ptr135$i>>0]|0;
            $793 = ($789<<24>>24)==($792<<24>>24);
            if ($793) {
             $794 = ((($$ptr135$i)) + 1|0);
             $795 = HEAP8[$794>>0]|0;
             $796 = ($789<<24>>24)==($795<<24>>24);
             if ($796) {
              $797 = ((($788)) + 258|0);
              $$idx$i = 1;
              while(1) {
               $$ptr$i = (($788) + ($$idx$i)|0);
               $798 = ((($$ptr$i)) + 2|0);
               $799 = HEAP8[$798>>0]|0;
               $800 = ($789<<24>>24)==($799<<24>>24);
               if (!($800)) {
                label = 162;
                break;
               }
               $801 = ((($$ptr$i)) + 3|0);
               $802 = HEAP8[$801>>0]|0;
               $803 = ($789<<24>>24)==($802<<24>>24);
               if (!($803)) {
                label = 163;
                break;
               }
               $804 = ((($$ptr$i)) + 4|0);
               $805 = HEAP8[$804>>0]|0;
               $806 = ($789<<24>>24)==($805<<24>>24);
               if (!($806)) {
                label = 164;
                break;
               }
               $807 = ((($$ptr$i)) + 5|0);
               $808 = HEAP8[$807>>0]|0;
               $809 = ($789<<24>>24)==($808<<24>>24);
               if (!($809)) {
                label = 165;
                break;
               }
               $810 = ((($$ptr$i)) + 6|0);
               $811 = HEAP8[$810>>0]|0;
               $812 = ($789<<24>>24)==($811<<24>>24);
               if (!($812)) {
                label = 166;
                break;
               }
               $813 = ((($$ptr$i)) + 7|0);
               $814 = HEAP8[$813>>0]|0;
               $815 = ($789<<24>>24)==($814<<24>>24);
               if (!($815)) {
                label = 167;
                break;
               }
               $$add130$i = (($$idx$i) + 8)|0;
               $$ptr132$i = (($788) + ($$add130$i)|0);
               $816 = HEAP8[$$ptr132$i>>0]|0;
               $817 = ($789<<24>>24)==($816<<24>>24);
               if (!($817)) {
                label = 168;
                break;
               }
               $$add$i = (($$idx$i) + 9)|0;
               $$ptr131$i = (($788) + ($$add$i)|0);
               $818 = HEAP8[$$ptr131$i>>0]|0;
               $819 = ($789<<24>>24)==($818<<24>>24);
               $820 = ($$add$i>>>0)<(258);
               $or$cond136$i = $820 & $819;
               if ($or$cond136$i) {
                $$idx$i = $$add130$i;
               } else {
                label = 169;
                break;
               }
              }
              if ((label|0) == 162) {
               label = 0;
               $821 = ((($$ptr$i)) + 2|0);
               $$1$i = $821;
              }
              else if ((label|0) == 163) {
               label = 0;
               $822 = ((($$ptr$i)) + 3|0);
               $$1$i = $822;
              }
              else if ((label|0) == 164) {
               label = 0;
               $823 = ((($$ptr$i)) + 4|0);
               $$1$i = $823;
              }
              else if ((label|0) == 165) {
               label = 0;
               $824 = ((($$ptr$i)) + 5|0);
               $$1$i = $824;
              }
              else if ((label|0) == 166) {
               label = 0;
               $825 = ((($$ptr$i)) + 6|0);
               $$1$i = $825;
              }
              else if ((label|0) == 167) {
               label = 0;
               $826 = ((($$ptr$i)) + 7|0);
               $$1$i = $826;
              }
              else if ((label|0) == 168) {
               label = 0;
               $$ptr132$i$le = (($788) + ($$add130$i)|0);
               $$1$i = $$ptr132$i$le;
              }
              else if ((label|0) == 169) {
               label = 0;
               $$ptr131$i$le = (($788) + ($$add$i)|0);
               $$1$i = $$ptr131$i$le;
              }
              $827 = $797;
              $828 = $$1$i;
              $829 = (($828) - ($827))|0;
              $830 = (($829) + 258)|0;
              $831 = ($830>>>0)>($832>>>0);
              $spec$store$select$i = $831 ? $832 : $830;
              HEAP32[$778>>2] = $spec$store$select$i;
              $833 = ($spec$store$select$i>>>0)>(2);
              if ($833) {
               $834 = (($spec$store$select$i) + 253)|0;
               $835 = $834&255;
               $836 = HEAP32[$774>>2]|0;
               $837 = HEAP32[$775>>2]|0;
               $838 = (($836) + ($837<<1)|0);
               HEAP16[$838>>1] = 1;
               $839 = HEAP32[$776>>2]|0;
               $840 = (($837) + 1)|0;
               HEAP32[$775>>2] = $840;
               $841 = (($839) + ($837)|0);
               HEAP8[$841>>0] = $835;
               $842 = $834 & 255;
               $843 = (28373 + ($842)|0);
               $844 = HEAP8[$843>>0]|0;
               $845 = $844&255;
               $846 = $845 | 256;
               $847 = (($846) + 1)|0;
               $848 = (((($4)) + 148|0) + ($847<<2)|0);
               $849 = HEAP16[$848>>1]|0;
               $850 = (($849) + 1)<<16>>16;
               HEAP16[$848>>1] = $850;
               $851 = HEAP8[27861]|0;
               $852 = $851&255;
               $853 = (((($4)) + 2440|0) + ($852<<2)|0);
               $854 = HEAP16[$853>>1]|0;
               $855 = (($854) + 1)<<16>>16;
               HEAP16[$853>>1] = $855;
               $856 = HEAP32[$775>>2]|0;
               $857 = HEAP32[$777>>2]|0;
               $858 = (($857) + -1)|0;
               $859 = ($856|0)==($858|0);
               $860 = HEAP32[$778>>2]|0;
               $861 = HEAP32[$769>>2]|0;
               $862 = (($861) - ($860))|0;
               HEAP32[$769>>2] = $862;
               $863 = HEAP32[$771>>2]|0;
               $864 = (($863) + ($860))|0;
               HEAP32[$771>>2] = $864;
               HEAP32[$778>>2] = 0;
               if ($859) {
                $892 = $864;
                label = 173;
               }
              } else {
               $867 = $785;
               label = 172;
              }
             } else {
              $867 = $785;
              label = 172;
             }
            } else {
             $867 = $785;
             label = 172;
            }
           } else {
            $867 = $785;
            label = 172;
           }
          }
         }
         if ((label|0) == 172) {
          label = 0;
          $865 = HEAP32[$773>>2]|0;
          $866 = (($865) + ($867)|0);
          $868 = HEAP8[$866>>0]|0;
          $869 = HEAP32[$774>>2]|0;
          $870 = HEAP32[$775>>2]|0;
          $871 = (($869) + ($870<<1)|0);
          HEAP16[$871>>1] = 0;
          $872 = HEAP32[$776>>2]|0;
          $873 = (($870) + 1)|0;
          HEAP32[$775>>2] = $873;
          $874 = (($872) + ($870)|0);
          HEAP8[$874>>0] = $868;
          $875 = $868&255;
          $876 = (((($4)) + 148|0) + ($875<<2)|0);
          $877 = HEAP16[$876>>1]|0;
          $878 = (($877) + 1)<<16>>16;
          HEAP16[$876>>1] = $878;
          $879 = HEAP32[$775>>2]|0;
          $880 = HEAP32[$777>>2]|0;
          $881 = (($880) + -1)|0;
          $882 = ($879|0)==($881|0);
          $883 = HEAP32[$769>>2]|0;
          $884 = (($883) + -1)|0;
          HEAP32[$769>>2] = $884;
          $885 = HEAP32[$771>>2]|0;
          $886 = (($885) + 1)|0;
          HEAP32[$771>>2] = $886;
          if ($882) {
           $892 = $886;
           label = 173;
          }
         }
         if ((label|0) == 173) {
          label = 0;
          $887 = HEAP32[$772>>2]|0;
          $888 = ($887|0)>(-1);
          if ($888) {
           $889 = HEAP32[$773>>2]|0;
           $890 = (($889) + ($887)|0);
           $893 = $890;
          } else {
           $893 = 0;
          }
          $891 = (($892) - ($887))|0;
          __tr_flush_block($4,$893,$891,0);
          $894 = HEAP32[$771>>2]|0;
          HEAP32[$772>>2] = $894;
          $895 = HEAP32[$4>>2]|0;
          $896 = ((($895)) + 28|0);
          $897 = HEAP32[$896>>2]|0;
          __tr_flush_bits($897);
          $898 = ((($897)) + 20|0);
          $899 = HEAP32[$898>>2]|0;
          $900 = ((($895)) + 16|0);
          $901 = HEAP32[$900>>2]|0;
          $902 = ($899>>>0)>($901>>>0);
          $spec$select$i$i379 = $902 ? $901 : $899;
          $903 = ($spec$select$i$i379|0)==(0);
          if (!($903)) {
           $904 = ((($895)) + 12|0);
           $905 = HEAP32[$904>>2]|0;
           $906 = ((($897)) + 16|0);
           $907 = HEAP32[$906>>2]|0;
           _memcpy(($905|0),($907|0),($spec$select$i$i379|0))|0;
           $908 = HEAP32[$904>>2]|0;
           $909 = (($908) + ($spec$select$i$i379)|0);
           HEAP32[$904>>2] = $909;
           $910 = HEAP32[$906>>2]|0;
           $911 = (($910) + ($spec$select$i$i379)|0);
           HEAP32[$906>>2] = $911;
           $912 = ((($895)) + 20|0);
           $913 = HEAP32[$912>>2]|0;
           $914 = (($913) + ($spec$select$i$i379))|0;
           HEAP32[$912>>2] = $914;
           $915 = HEAP32[$900>>2]|0;
           $916 = (($915) - ($spec$select$i$i379))|0;
           HEAP32[$900>>2] = $916;
           $917 = HEAP32[$898>>2]|0;
           $918 = (($917) - ($spec$select$i$i379))|0;
           HEAP32[$898>>2] = $918;
           $919 = ($918|0)==(0);
           if ($919) {
            $920 = ((($897)) + 8|0);
            $921 = HEAP32[$920>>2]|0;
            HEAP32[$906>>2] = $921;
           }
          }
          $922 = HEAP32[$4>>2]|0;
          $923 = ((($922)) + 16|0);
          $924 = HEAP32[$923>>2]|0;
          $925 = ($924|0)==(0);
          if ($925) {
           label = 198;
           break L171;
          }
         }
        }
        $926 = ((($4)) + 5812|0);
        HEAP32[$926>>2] = 0;
        $927 = ($1|0)==(4);
        if ($927) {
         $928 = HEAP32[$772>>2]|0;
         $929 = ($928|0)>(-1);
         if ($929) {
          $930 = HEAP32[$773>>2]|0;
          $931 = (($930) + ($928)|0);
          $934 = $931;
         } else {
          $934 = 0;
         }
         $932 = HEAP32[$771>>2]|0;
         $933 = (($932) - ($928))|0;
         __tr_flush_block($4,$934,$933,1);
         $935 = HEAP32[$771>>2]|0;
         HEAP32[$772>>2] = $935;
         $936 = HEAP32[$4>>2]|0;
         $937 = ((($936)) + 28|0);
         $938 = HEAP32[$937>>2]|0;
         __tr_flush_bits($938);
         $939 = ((($938)) + 20|0);
         $940 = HEAP32[$939>>2]|0;
         $941 = ((($936)) + 16|0);
         $942 = HEAP32[$941>>2]|0;
         $943 = ($940>>>0)>($942>>>0);
         $spec$select$i137$i = $943 ? $942 : $940;
         $944 = ($spec$select$i137$i|0)==(0);
         if (!($944)) {
          $945 = ((($936)) + 12|0);
          $946 = HEAP32[$945>>2]|0;
          $947 = ((($938)) + 16|0);
          $948 = HEAP32[$947>>2]|0;
          _memcpy(($946|0),($948|0),($spec$select$i137$i|0))|0;
          $949 = HEAP32[$945>>2]|0;
          $950 = (($949) + ($spec$select$i137$i)|0);
          HEAP32[$945>>2] = $950;
          $951 = HEAP32[$947>>2]|0;
          $952 = (($951) + ($spec$select$i137$i)|0);
          HEAP32[$947>>2] = $952;
          $953 = ((($936)) + 20|0);
          $954 = HEAP32[$953>>2]|0;
          $955 = (($954) + ($spec$select$i137$i))|0;
          HEAP32[$953>>2] = $955;
          $956 = HEAP32[$941>>2]|0;
          $957 = (($956) - ($spec$select$i137$i))|0;
          HEAP32[$941>>2] = $957;
          $958 = HEAP32[$939>>2]|0;
          $959 = (($958) - ($spec$select$i137$i))|0;
          HEAP32[$939>>2] = $959;
          $960 = ($959|0)==(0);
          if ($960) {
           $961 = ((($938)) + 8|0);
           $962 = HEAP32[$961>>2]|0;
           HEAP32[$947>>2] = $962;
          }
         }
         $963 = HEAP32[$4>>2]|0;
         $964 = ((($963)) + 16|0);
         $965 = HEAP32[$964>>2]|0;
         $966 = ($965|0)==(0);
         $$$i381 = $966 ? 2 : 3;
         $1014 = $$$i381;
         label = 195;
         break L171;
        }
        $967 = HEAP32[$775>>2]|0;
        $968 = ($967|0)==(0);
        if (!($968)) {
         $969 = HEAP32[$772>>2]|0;
         $970 = ($969|0)>(-1);
         if ($970) {
          $971 = HEAP32[$773>>2]|0;
          $972 = (($971) + ($969)|0);
          $975 = $972;
         } else {
          $975 = 0;
         }
         $973 = HEAP32[$771>>2]|0;
         $974 = (($973) - ($969))|0;
         __tr_flush_block($4,$975,$974,0);
         $976 = HEAP32[$771>>2]|0;
         HEAP32[$772>>2] = $976;
         $977 = HEAP32[$4>>2]|0;
         $978 = ((($977)) + 28|0);
         $979 = HEAP32[$978>>2]|0;
         __tr_flush_bits($979);
         $980 = ((($979)) + 20|0);
         $981 = HEAP32[$980>>2]|0;
         $982 = ((($977)) + 16|0);
         $983 = HEAP32[$982>>2]|0;
         $984 = ($981>>>0)>($983>>>0);
         $spec$select$i139$i = $984 ? $983 : $981;
         $985 = ($spec$select$i139$i|0)==(0);
         if (!($985)) {
          $986 = ((($977)) + 12|0);
          $987 = HEAP32[$986>>2]|0;
          $988 = ((($979)) + 16|0);
          $989 = HEAP32[$988>>2]|0;
          _memcpy(($987|0),($989|0),($spec$select$i139$i|0))|0;
          $990 = HEAP32[$986>>2]|0;
          $991 = (($990) + ($spec$select$i139$i)|0);
          HEAP32[$986>>2] = $991;
          $992 = HEAP32[$988>>2]|0;
          $993 = (($992) + ($spec$select$i139$i)|0);
          HEAP32[$988>>2] = $993;
          $994 = ((($977)) + 20|0);
          $995 = HEAP32[$994>>2]|0;
          $996 = (($995) + ($spec$select$i139$i))|0;
          HEAP32[$994>>2] = $996;
          $997 = HEAP32[$982>>2]|0;
          $998 = (($997) - ($spec$select$i139$i))|0;
          HEAP32[$982>>2] = $998;
          $999 = HEAP32[$980>>2]|0;
          $1000 = (($999) - ($spec$select$i139$i))|0;
          HEAP32[$980>>2] = $1000;
          $1001 = ($1000|0)==(0);
          if ($1001) {
           $1002 = ((($979)) + 8|0);
           $1003 = HEAP32[$1002>>2]|0;
           HEAP32[$988>>2] = $1003;
          }
         }
         $1004 = HEAP32[$4>>2]|0;
         $1005 = ((($1004)) + 16|0);
         $1006 = HEAP32[$1005>>2]|0;
         $1007 = ($1006|0)==(0);
         if ($1007) {
          label = 198;
         }
        }
        break;
       }
       default: {
        $1008 = ((($4)) + 132|0);
        $1009 = HEAP32[$1008>>2]|0;
        $1010 = (((9056 + (($1009*12)|0)|0)) + 8|0);
        $1011 = HEAP32[$1010>>2]|0;
        $1012 = (FUNCTION_TABLE_iii[$1011 & 63]($4,$1)|0);
        $1014 = $1012;
        label = 195;
       }
       }
      } while(0);
      if ((label|0) == 195) {
       $1013 = $1014 | 1;
       $1015 = ($1013|0)==(3);
       if ($1015) {
        HEAP32[$16>>2] = 666;
       }
       $1016 = $1014 | 2;
       $1017 = ($1016|0)==(2);
       if ($1017) {
        label = 198;
       } else {
        $1020 = ($1014|0)==(1);
        if (!($1020)) {
         break;
        }
       }
      }
      if ((label|0) == 198) {
       $1018 = HEAP32[$22>>2]|0;
       $1019 = ($1018|0)==(0);
       if (!($1019)) {
        $$1 = 0;
        return ($$1|0);
       }
       HEAP32[$27>>2] = -1;
       $$1 = 0;
       return ($$1|0);
      }
      switch ($1|0) {
      case 1:  {
       __tr_align($4);
       break;
      }
      case 5:  {
       break;
      }
      default: {
       __tr_stored_block($4,0,0,0);
       $1021 = ($1|0)==(3);
       if ($1021) {
        $1022 = ((($4)) + 68|0);
        $1023 = HEAP32[$1022>>2]|0;
        $1024 = ((($4)) + 76|0);
        $1025 = HEAP32[$1024>>2]|0;
        $1026 = (($1025) + -1)|0;
        $1027 = (($1023) + ($1026<<1)|0);
        HEAP16[$1027>>1] = 0;
        $1028 = $1025 << 1;
        $1029 = (($1028) + -2)|0;
        _memset(($1023|0),0,($1029|0))|0;
        $1030 = ((($4)) + 116|0);
        $1031 = HEAP32[$1030>>2]|0;
        $1032 = ($1031|0)==(0);
        if ($1032) {
         $1033 = ((($4)) + 108|0);
         HEAP32[$1033>>2] = 0;
         $1034 = ((($4)) + 92|0);
         HEAP32[$1034>>2] = 0;
         $1035 = ((($4)) + 5812|0);
         HEAP32[$1035>>2] = 0;
        }
       }
      }
      }
      $1036 = HEAP32[$3>>2]|0;
      __tr_flush_bits($1036);
      $1037 = ((($1036)) + 20|0);
      $1038 = HEAP32[$1037>>2]|0;
      $1039 = HEAP32[$22>>2]|0;
      $1040 = ($1038>>>0)>($1039>>>0);
      $spec$select$i367 = $1040 ? $1039 : $1038;
      $1041 = ($spec$select$i367|0)==(0);
      if ($1041) {
       $1059 = $1039;
      } else {
       $1042 = HEAP32[$8>>2]|0;
       $1043 = ((($1036)) + 16|0);
       $1044 = HEAP32[$1043>>2]|0;
       _memcpy(($1042|0),($1044|0),($spec$select$i367|0))|0;
       $1045 = HEAP32[$8>>2]|0;
       $1046 = (($1045) + ($spec$select$i367)|0);
       HEAP32[$8>>2] = $1046;
       $1047 = HEAP32[$1043>>2]|0;
       $1048 = (($1047) + ($spec$select$i367)|0);
       HEAP32[$1043>>2] = $1048;
       $1049 = ((($0)) + 20|0);
       $1050 = HEAP32[$1049>>2]|0;
       $1051 = (($1050) + ($spec$select$i367))|0;
       HEAP32[$1049>>2] = $1051;
       $1052 = HEAP32[$22>>2]|0;
       $1053 = (($1052) - ($spec$select$i367))|0;
       HEAP32[$22>>2] = $1053;
       $1054 = HEAP32[$1037>>2]|0;
       $1055 = (($1054) - ($spec$select$i367))|0;
       HEAP32[$1037>>2] = $1055;
       $1056 = ($1055|0)==(0);
       if ($1056) {
        $1057 = ((($1036)) + 8|0);
        $1058 = HEAP32[$1057>>2]|0;
        HEAP32[$1043>>2] = $1058;
        $1059 = $1053;
       } else {
        $1059 = $1053;
       }
      }
      $1060 = ($1059|0)==(0);
      if ($1060) {
       HEAP32[$27>>2] = -1;
       $$1 = 0;
       return ($$1|0);
      }
     }
    } while(0);
    if ($19) {
     $$1 = 0;
     return ($$1|0);
    }
    $1061 = ((($4)) + 24|0);
    $1062 = HEAP32[$1061>>2]|0;
    $1063 = ($1062|0)<(1);
    if ($1063) {
     $$1 = 1;
     return ($$1|0);
    }
    $1064 = ($1062|0)==(2);
    $1065 = ((($0)) + 48|0);
    $1066 = HEAP32[$1065>>2]|0;
    if ($1064) {
     $1067 = $1066&255;
     $1068 = ((($4)) + 8|0);
     $1069 = HEAP32[$1068>>2]|0;
     $1070 = HEAP32[$558>>2]|0;
     $1071 = (($1070) + 1)|0;
     HEAP32[$558>>2] = $1071;
     $1072 = (($1069) + ($1070)|0);
     HEAP8[$1072>>0] = $1067;
     $1073 = HEAP32[$1065>>2]|0;
     $1074 = $1073 >>> 8;
     $1075 = $1074&255;
     $1076 = HEAP32[$1068>>2]|0;
     $1077 = HEAP32[$558>>2]|0;
     $1078 = (($1077) + 1)|0;
     HEAP32[$558>>2] = $1078;
     $1079 = (($1076) + ($1077)|0);
     HEAP8[$1079>>0] = $1075;
     $1080 = HEAP32[$1065>>2]|0;
     $1081 = $1080 >>> 16;
     $1082 = $1081&255;
     $1083 = HEAP32[$1068>>2]|0;
     $1084 = HEAP32[$558>>2]|0;
     $1085 = (($1084) + 1)|0;
     HEAP32[$558>>2] = $1085;
     $1086 = (($1083) + ($1084)|0);
     HEAP8[$1086>>0] = $1082;
     $1087 = HEAP32[$1065>>2]|0;
     $1088 = $1087 >>> 24;
     $1089 = $1088&255;
     $1090 = HEAP32[$1068>>2]|0;
     $1091 = HEAP32[$558>>2]|0;
     $1092 = (($1091) + 1)|0;
     HEAP32[$558>>2] = $1092;
     $1093 = (($1090) + ($1091)|0);
     HEAP8[$1093>>0] = $1089;
     $1094 = ((($0)) + 8|0);
     $1095 = HEAP32[$1094>>2]|0;
     $1096 = $1095&255;
     $1097 = HEAP32[$1068>>2]|0;
     $1098 = HEAP32[$558>>2]|0;
     $1099 = (($1098) + 1)|0;
     HEAP32[$558>>2] = $1099;
     $1100 = (($1097) + ($1098)|0);
     HEAP8[$1100>>0] = $1096;
     $1101 = HEAP32[$1094>>2]|0;
     $1102 = $1101 >>> 8;
     $1103 = $1102&255;
     $1104 = HEAP32[$1068>>2]|0;
     $1105 = HEAP32[$558>>2]|0;
     $1106 = (($1105) + 1)|0;
     HEAP32[$558>>2] = $1106;
     $1107 = (($1104) + ($1105)|0);
     HEAP8[$1107>>0] = $1103;
     $1108 = HEAP32[$1094>>2]|0;
     $1109 = $1108 >>> 16;
     $1110 = $1109&255;
     $1111 = HEAP32[$1068>>2]|0;
     $1112 = HEAP32[$558>>2]|0;
     $1113 = (($1112) + 1)|0;
     HEAP32[$558>>2] = $1113;
     $1114 = (($1111) + ($1112)|0);
     HEAP8[$1114>>0] = $1110;
     $1115 = HEAP32[$1094>>2]|0;
     $1116 = $1115 >>> 24;
     $1117 = HEAP32[$1068>>2]|0;
     $1118 = HEAP32[$558>>2]|0;
     $1119 = (($1118) + 1)|0;
     HEAP32[$558>>2] = $1119;
     $1120 = (($1117) + ($1118)|0);
     $$sink$in = $1116;$$sink498 = $1120;
    } else {
     $1121 = $1066 >>> 16;
     $1122 = $1066 >>> 24;
     $1123 = $1122&255;
     $1124 = ((($4)) + 8|0);
     $1125 = HEAP32[$1124>>2]|0;
     $1126 = HEAP32[$558>>2]|0;
     $1127 = (($1126) + 1)|0;
     HEAP32[$558>>2] = $1127;
     $1128 = (($1125) + ($1126)|0);
     HEAP8[$1128>>0] = $1123;
     $1129 = $1121&255;
     $1130 = HEAP32[$1124>>2]|0;
     $1131 = HEAP32[$558>>2]|0;
     $1132 = (($1131) + 1)|0;
     HEAP32[$558>>2] = $1132;
     $1133 = (($1130) + ($1131)|0);
     HEAP8[$1133>>0] = $1129;
     $1134 = HEAP32[$1065>>2]|0;
     $1135 = $1134 >>> 8;
     $1136 = $1135&255;
     $1137 = HEAP32[$1124>>2]|0;
     $1138 = HEAP32[$558>>2]|0;
     $1139 = (($1138) + 1)|0;
     HEAP32[$558>>2] = $1139;
     $1140 = (($1137) + ($1138)|0);
     HEAP8[$1140>>0] = $1136;
     $1141 = HEAP32[$1124>>2]|0;
     $1142 = HEAP32[$558>>2]|0;
     $1143 = (($1142) + 1)|0;
     HEAP32[$558>>2] = $1143;
     $1144 = (($1141) + ($1142)|0);
     $$sink$in = $1134;$$sink498 = $1144;
    }
    $$sink = $$sink$in&255;
    HEAP8[$$sink498>>0] = $$sink;
    $1145 = HEAP32[$3>>2]|0;
    __tr_flush_bits($1145);
    $1146 = ((($1145)) + 20|0);
    $1147 = HEAP32[$1146>>2]|0;
    $1148 = HEAP32[$22>>2]|0;
    $1149 = ($1147>>>0)>($1148>>>0);
    $spec$select$i = $1149 ? $1148 : $1147;
    $1150 = ($spec$select$i|0)==(0);
    if (!($1150)) {
     $1151 = HEAP32[$8>>2]|0;
     $1152 = ((($1145)) + 16|0);
     $1153 = HEAP32[$1152>>2]|0;
     _memcpy(($1151|0),($1153|0),($spec$select$i|0))|0;
     $1154 = HEAP32[$8>>2]|0;
     $1155 = (($1154) + ($spec$select$i)|0);
     HEAP32[$8>>2] = $1155;
     $1156 = HEAP32[$1152>>2]|0;
     $1157 = (($1156) + ($spec$select$i)|0);
     HEAP32[$1152>>2] = $1157;
     $1158 = ((($0)) + 20|0);
     $1159 = HEAP32[$1158>>2]|0;
     $1160 = (($1159) + ($spec$select$i))|0;
     HEAP32[$1158>>2] = $1160;
     $1161 = HEAP32[$22>>2]|0;
     $1162 = (($1161) - ($spec$select$i))|0;
     HEAP32[$22>>2] = $1162;
     $1163 = HEAP32[$1146>>2]|0;
     $1164 = (($1163) - ($spec$select$i))|0;
     HEAP32[$1146>>2] = $1164;
     $1165 = ($1164|0)==(0);
     if ($1165) {
      $1166 = ((($1145)) + 8|0);
      $1167 = HEAP32[$1166>>2]|0;
      HEAP32[$1152>>2] = $1167;
     }
    }
    $1168 = HEAP32[$1061>>2]|0;
    $1169 = ($1168|0)>(0);
    if ($1169) {
     $1170 = (0 - ($1168))|0;
     HEAP32[$1061>>2] = $1170;
    }
    $1171 = HEAP32[$558>>2]|0;
    $1172 = ($1171|0)==(0);
    $1173 = $1172&1;
    $$1 = $1173;
    return ($$1|0);
   }
  }
 } while(0);
 $20 = HEAP32[(9800)>>2]|0;
 $21 = ((($0)) + 24|0);
 HEAP32[$21>>2] = $20;
 $$1 = -2;
 return ($$1|0);
}
function _inflateReset($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = -2;
  return ($$0|0);
 }
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = -2;
  return ($$0|0);
 }
 $5 = ((($3)) + 40|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($3)) + 44|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($3)) + 48|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($3)) + 28|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 20|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 8|0);
 HEAP32[$10>>2] = 0;
 $11 = ((($0)) + 24|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($3)) + 8|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($13|0)==(0);
 if (!($14)) {
  $15 = $13 & 1;
  $16 = ((($0)) + 48|0);
  HEAP32[$16>>2] = $15;
 }
 HEAP32[$3>>2] = 0;
 $17 = ((($3)) + 4|0);
 HEAP32[$17>>2] = 0;
 $18 = ((($3)) + 12|0);
 HEAP32[$18>>2] = 0;
 $19 = ((($3)) + 20|0);
 HEAP32[$19>>2] = 32768;
 $20 = ((($3)) + 32|0);
 HEAP32[$20>>2] = 0;
 $21 = ((($3)) + 56|0);
 HEAP32[$21>>2] = 0;
 $22 = ((($3)) + 60|0);
 HEAP32[$22>>2] = 0;
 $23 = ((($3)) + 1328|0);
 $24 = ((($3)) + 108|0);
 HEAP32[$24>>2] = $23;
 $25 = ((($3)) + 80|0);
 HEAP32[$25>>2] = $23;
 $26 = ((($3)) + 76|0);
 HEAP32[$26>>2] = $23;
 $27 = ((($3)) + 7104|0);
 HEAP32[$27>>2] = 1;
 $28 = ((($3)) + 7108|0);
 HEAP32[$28>>2] = -1;
 $$0 = 0;
 return ($$0|0);
}
function _inflateInit_($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$i = 0, $$pre30$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1|0)==(0|0);
 if ($3) {
  $$0$i = -6;
  return ($$0$i|0);
 }
 $4 = HEAP8[$1>>0]|0;
 $5 = ($4<<24>>24)!=(49);
 $6 = ($2|0)!=(56);
 $or$cond$i = $6 | $5;
 if ($or$cond$i) {
  $$0$i = -6;
  return ($$0$i|0);
 }
 $7 = ($0|0)==(0|0);
 if ($7) {
  $$0$i = -2;
  return ($$0$i|0);
 }
 $8 = ((($0)) + 24|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($0)) + 32|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  HEAP32[$9>>2] = 68;
  $12 = ((($0)) + 40|0);
  HEAP32[$12>>2] = 0;
  $18 = 68;
 } else {
  $18 = $10;
 }
 $13 = ((($0)) + 36|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  HEAP32[$13>>2] = 69;
 }
 $16 = ((($0)) + 40|0);
 $17 = HEAP32[$16>>2]|0;
 $19 = (FUNCTION_TABLE_iiii[$18 & 127]($17,1,7116)|0);
 $20 = ($19|0)==(0|0);
 if ($20) {
  $$0$i = -4;
  return ($$0$i|0);
 }
 $21 = ((($0)) + 28|0);
 HEAP32[$21>>2] = $19;
 $22 = ((($19)) + 52|0);
 HEAP32[$22>>2] = 0;
 $$pre30$i = ((($19)) + 36|0);
 $23 = ((($19)) + 8|0);
 HEAP32[$23>>2] = 1;
 HEAP32[$$pre30$i>>2] = 15;
 $24 = ((($19)) + 40|0);
 HEAP32[$24>>2] = 0;
 $25 = ((($19)) + 44|0);
 HEAP32[$25>>2] = 0;
 $26 = ((($19)) + 48|0);
 HEAP32[$26>>2] = 0;
 $27 = ((($19)) + 28|0);
 HEAP32[$27>>2] = 0;
 $28 = ((($0)) + 20|0);
 HEAP32[$28>>2] = 0;
 $29 = ((($0)) + 8|0);
 HEAP32[$29>>2] = 0;
 HEAP32[$8>>2] = 0;
 $30 = ((($0)) + 48|0);
 HEAP32[$30>>2] = 1;
 HEAP32[$19>>2] = 0;
 $31 = ((($19)) + 4|0);
 HEAP32[$31>>2] = 0;
 $32 = ((($19)) + 12|0);
 HEAP32[$32>>2] = 0;
 $33 = ((($19)) + 20|0);
 HEAP32[$33>>2] = 32768;
 $34 = ((($19)) + 32|0);
 HEAP32[$34>>2] = 0;
 $35 = ((($19)) + 56|0);
 HEAP32[$35>>2] = 0;
 $36 = ((($19)) + 60|0);
 HEAP32[$36>>2] = 0;
 $37 = ((($19)) + 1328|0);
 $38 = ((($19)) + 108|0);
 HEAP32[$38>>2] = $37;
 $39 = ((($19)) + 80|0);
 HEAP32[$39>>2] = $37;
 $40 = ((($19)) + 76|0);
 HEAP32[$40>>2] = $37;
 $41 = ((($19)) + 7104|0);
 HEAP32[$41>>2] = 1;
 $42 = ((($19)) + 7108|0);
 HEAP32[$42>>2] = -1;
 $$0$i = 0;
 return ($$0$i|0);
}
function _inflate($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01059 = 0, $$01062 = 0, $$01127 = 0, $$0903 = 0, $$0918 = 0, $$0924 = 0, $$0935 = 0, $$0996 = 0, $$09962286 = 0, $$09962286$ph = 0, $$0998 = 0, $$1 = 0, $$101008 = 0, $$101072 = 0, $$10917 = 0, $$10934 = 0, $$10945 = 0, $$11 = 0, $$11060 = 0;
 var $$11063$lcssa = 0, $$110631907 = 0, $$111009 = 0, $$111073 = 0, $$11946 = 0, $$12 = 0, $$121010 = 0, $$121074 = 0, $$12947 = 0, $$13 = 0, $$131011 = 0, $$131075 = 0, $$13948 = 0, $$14$lcssa = 0, $$141012 = 0, $$141076 = 0, $$141899 = 0, $$14949$lcssa = 0, $$149491898 = 0, $$15 = 0;
 var $$151013 = 0, $$151077 = 0, $$15950 = 0, $$161014 = 0, $$161078 = 0, $$161837 = 0, $$16951$lcssa = 0, $$169511836 = 0, $$17 = 0, $$171015 = 0, $$171079 = 0, $$17952 = 0, $$18 = 0, $$181016$lcssa = 0, $$1810161897 = 0, $$181080$lcssa = 0, $$1810801896 = 0, $$18953 = 0, $$19 = 0, $$1905 = 0;
 var $$1908 = 0, $$191017 = 0, $$191081 = 0, $$1919 = 0, $$1925$lcssa = 0, $$19251910 = 0, $$1936$lcssa = 0, $$19361909 = 0, $$19954 = 0, $$1997 = 0, $$1999$lcssa = 0, $$19991908 = 0, $$2 = 0, $$20$lcssa = 0, $$201018$lcssa = 0, $$2010181835 = 0, $$201082$lcssa = 0, $$2010821834 = 0, $$20955$lcssa = 0, $$21$lcssa = 0;
 var $$21000$lcssa = 0, $$210001856 = 0, $$21061 = 0, $$21064$lcssa = 0, $$210641855 = 0, $$211019 = 0, $$211083 = 0, $$211826 = 0, $$21956$lcssa = 0, $$219561825 = 0, $$22 = 0, $$221020 = 0, $$221084 = 0, $$22957 = 0, $$23 = 0, $$231021 = 0, $$231085 = 0, $$23958 = 0, $$24$lcssa = 0, $$241022$lcssa = 0;
 var $$241086$lcssa = 0, $$241612 = 0, $$24959$lcssa = 0, $$249591611 = 0, $$251023$lcssa = 0, $$2510231824 = 0, $$251087$lcssa = 0, $$2510871823 = 0, $$252421 = 0, $$259602420 = 0, $$26$lcssa = 0, $$261024 = 0, $$261088 = 0, $$261634 = 0, $$26961$lcssa = 0, $$269611633 = 0, $$27$lcssa = 0, $$271025 = 0, $$271089 = 0, $$27962$lcssa = 0;
 var $$28 = 0, $$281026$lcssa = 0, $$2810261610 = 0, $$281090$lcssa = 0, $$2810901609 = 0, $$28963 = 0, $$29$lcssa = 0, $$2906 = 0, $$2909 = 0, $$2910272419 = 0, $$2910912418 = 0, $$291708 = 0, $$2920 = 0, $$2926$lcssa = 0, $$29261858 = 0, $$2937$lcssa = 0, $$29371857 = 0, $$29964$lcssa = 0, $$299641707 = 0, $$3 = 0;
 var $$30$lcssa = 0, $$301028$lcssa = 0, $$3010281632 = 0, $$301092$lcssa = 0, $$3010921631 = 0, $$301656 = 0, $$30965$lcssa = 0, $$309651655 = 0, $$31$lcssa = 0, $$311029$lcssa = 0, $$311093$lcssa = 0, $$311684 = 0, $$31966$lcssa = 0, $$319661683 = 0, $$32$lcssa = 0, $$321030 = 0, $$321094 = 0, $$321673 = 0, $$32967$lcssa = 0, $$329671672 = 0;
 var $$33$lcssa = 0, $$331031$lcssa = 0, $$3310311706 = 0, $$331095$lcssa = 0, $$3310951705 = 0, $$331695 = 0, $$33968$lcssa = 0, $$339681694 = 0, $$34 = 0, $$341032$lcssa = 0, $$3410321654 = 0, $$341096$lcssa = 0, $$3410961653 = 0, $$34969 = 0, $$35 = 0, $$351033$lcssa = 0, $$3510331682 = 0, $$351097$lcssa = 0, $$3510971681 = 0, $$35970 = 0;
 var $$361034$lcssa = 0, $$3610341671 = 0, $$361098$lcssa = 0, $$3610981670 = 0, $$37 = 0, $$371035$lcssa = 0, $$3710351693 = 0, $$371099$lcssa = 0, $$3710991692 = 0, $$37972 = 0, $$38 = 0, $$381036 = 0, $$381100 = 0, $$38973 = 0, $$39$lcssa = 0, $$391037 = 0, $$391101 = 0, $$391728 = 0, $$39974$lcssa = 0, $$399741727 = 0;
 var $$4 = 0, $$40$lcssa = 0, $$401750 = 0, $$40975$lcssa = 0, $$409751749 = 0, $$41 = 0, $$41002$lcssa = 0, $$410021867 = 0, $$410021867$ph = 0, $$41066$lcssa = 0, $$410661866 = 0, $$410661866$ph = 0, $$411039 = 0, $$411103 = 0, $$41976 = 0, $$42 = 0, $$421040 = 0, $$421104 = 0, $$42977 = 0, $$43$lcssa = 0;
 var $$431041$lcssa = 0, $$4310411726 = 0, $$431105$lcssa = 0, $$4311051725 = 0, $$431763 = 0, $$43978$lcssa = 0, $$439781762 = 0, $$44 = 0, $$441042$lcssa = 0, $$4410421748 = 0, $$441106$lcssa = 0, $$4411061747 = 0, $$44979 = 0, $$45 = 0, $$451043 = 0, $$451107 = 0, $$45980 = 0, $$46$lcssa = 0, $$461044 = 0, $$461108 = 0;
 var $$461780 = 0, $$46981$lcssa = 0, $$469811779 = 0, $$47$lcssa = 0, $$471045$lcssa = 0, $$4710451761 = 0, $$471109$lcssa = 0, $$4711091760 = 0, $$471802 = 0, $$47982$lcssa = 0, $$479821801 = 0, $$48 = 0, $$481046 = 0, $$481110 = 0, $$48983 = 0, $$49 = 0, $$491047 = 0, $$4911 = 0, $$491111 = 0, $$4922 = 0;
 var $$49281869 = 0, $$49281869$ph = 0, $$4939$lcssa = 0, $$49391868 = 0, $$49391868$ph = 0, $$49984 = 0, $$5 = 0, $$50$lcssa = 0, $$501048$lcssa = 0, $$5010481778 = 0, $$501112$lcssa = 0, $$5011121777 = 0, $$501815 = 0, $$50985$lcssa = 0, $$509851814 = 0, $$51 = 0, $$511049$lcssa = 0, $$5110491800 = 0, $$511113$lcssa = 0, $$5111131799 = 0;
 var $$51986 = 0, $$52 = 0, $$521050 = 0, $$521114 = 0, $$52987 = 0, $$53$lcssa = 0, $$531051 = 0, $$531115 = 0, $$531594 = 0, $$53988$lcssa = 0, $$539881593 = 0, $$54 = 0, $$541052$lcssa = 0, $$5410521813 = 0, $$541116$lcssa = 0, $$5411161812 = 0, $$54989 = 0, $$55 = 0, $$551053 = 0, $$551117 = 0;
 var $$55990 = 0, $$56$lcssa = 0, $$561054 = 0, $$561118 = 0, $$561601 = 0, $$56991$lcssa = 0, $$569911600 = 0, $$57 = 0, $$571055$lcssa = 0, $$5710551592 = 0, $$571119$lcssa = 0, $$5711191591 = 0, $$57992 = 0, $$581056 = 0, $$581120 = 0, $$59 = 0, $$591057 = 0, $$591121 = 0, $$5912 = 0, $$5923 = 0;
 var $$59994 = 0, $$6 = 0, $$60 = 0, $$60$ph = 0, $$601058$lcssa = 0, $$6010581599 = 0, $$601122$lcssa = 0, $$6011221598 = 0, $$60995 = 0, $$60995$ph = 0, $$61 = 0, $$61004$lcssa = 0, $$610041877 = 0, $$610041877$ph = 0, $$61068$lcssa = 0, $$610681876 = 0, $$610681876$ph = 0, $$611123 = 0, $$63 = 0, $$631125 = 0;
 var $$64 = 0, $$64$ph = 0, $$641126 = 0, $$641126$ph = 0, $$69131703 = 0, $$69301879 = 0, $$69301879$ph = 0, $$6941$lcssa = 0, $$69411878 = 0, $$69411878$ph = 0, $$7 = 0, $$71005 = 0, $$71069 = 0, $$7914 = 0, $$7931 = 0, $$7942 = 0, $$8 = 0, $$81006$lcssa = 0, $$810061887 = 0, $$81070$lcssa = 0;
 var $$810701886 = 0, $$8915 = 0, $$89321889 = 0, $$8943$lcssa = 0, $$89431888 = 0, $$9 = 0, $$9$ph = 0, $$91007 = 0, $$91071 = 0, $$9933 = 0, $$9944 = 0, $$lcssa = 0, $$lcssa1188 = 0, $$lcssa1254 = 0, $$lcssa1266 = 0, $$lcssa1276 = 0, $$lcssa1288 = 0, $$pn2402 = 0, $$pn2404 = 0, $$pn2406 = 0;
 var $$pre = 0, $$pre$phi2401Z2D = 0, $$pre$phiZ2D = 0, $$pre2379 = 0, $$pre2381 = 0, $$pre2382 = 0, $$pre2385 = 0, $$pre2386 = 0, $$pre2387 = 0, $$pre2390 = 0, $$pre2392 = 0, $$pre2394 = 0, $$pre2396 = 0, $$pre2398 = 0, $$pre2399 = 0, $$pre2400 = 0, $$promoted = 0, $$sink = 0, $$sink3286 = 0, $$sink3287 = 0;
 var $$sroa$057$0 = 0, $$sroa$057$0$$sroa_idx = 0, $$sroa$057$0$$sroa_idx70 = 0, $$sroa$057$0$copyload = 0, $$sroa$057$0$copyload67$lcssa = 0, $$sroa$057$0$copyload67$lcssa$in = 0, $$sroa$057$0$copyload69$lcssa = 0, $$sroa$057$0$copyload69$lcssa$in = 0, $$sroa$057$0$copyload71 = 0, $$sroa$1874$0 = 0, $$sroa$1874$0$$sroa_idx = 0, $$sroa$1874$0$$sroa_idx1797 = 0, $$sroa$1874$0$$sroa_idx75 = 0, $$sroa$1874$0$$sroa_idx751773 = 0, $$sroa$1874$0$$sroa_idx77 = 0, $$sroa$1874$0$$sroa_idx771721 = 0, $$sroa$1874$0$$sroa_idx79 = 0, $$sroa$1874$0$$sroa_idx791745 = 0, $$sroa$1874$0$$sroa_idx81 = 0, $$sroa$1874$0$$sroa_idx811648 = 0;
 var $$sroa$1874$0$copyload = 0, $$sroa$1874$0$copyload$lcssa = 0, $$sroa$1874$0$copyload1798 = 0, $$sroa$1874$0$copyload76 = 0, $$sroa$1874$0$copyload76$lcssa = 0, $$sroa$1874$0$copyload761774 = 0, $$sroa$1874$0$copyload78 = 0, $$sroa$1874$0$copyload78$lcssa = 0, $$sroa$1874$0$copyload781722 = 0, $$sroa$1874$0$copyload80 = 0, $$sroa$1874$0$copyload80$lcssa = 0, $$sroa$1874$0$copyload801746 = 0, $$sroa$1874$0$copyload82 = 0, $$sroa$1874$0$copyload821649 = 0, $$sroa$1874$1 = 0, $$sroa$42$0 = 0, $$sroa$42$0$$sroa_idx104 = 0, $$sroa$42$0$$sroa_idx110 = 0, $$sroa$42$0$copyload = 0, $$sroa$42$0$copyload107$lcssa = 0;
 var $$sroa$42$0$copyload107$lcssa$in = 0, $$sroa$42$0$copyload109$lcssa = 0, $$sroa$42$0$copyload109$lcssa$in = 0, $$sroa$42$0$copyload111 = 0, $$sroa$42$0$copyload113$lcssa = 0, $$sroa$42$0$copyload113$lcssa$in = 0, $$sroa$42$1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0;
 var $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0;
 var $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0;
 var $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0;
 var $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0;
 var $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0;
 var $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0;
 var $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0;
 var $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0;
 var $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0;
 var $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0;
 var $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0;
 var $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0;
 var $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0;
 var $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0;
 var $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0;
 var $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0;
 var $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0;
 var $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0;
 var $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0;
 var $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0;
 var $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0;
 var $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0;
 var $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0;
 var $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0;
 var $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0;
 var $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0;
 var $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0;
 var $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0;
 var $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0;
 var $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0;
 var $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0;
 var $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $or$cond = 0, $or$cond10 = 0, $or$cond1128 = 0, $or$cond1129 = 0, $or$cond1132 = 0, $or$cond1138 = 0, $or$cond14 = 0, $or$cond16 = 0, $or$cond6 = 0, $or$cond8 = 0, $scevgep2378 = 0, $spec$select = 0, $spec$select$i = 0, $spec$select1130 = 0;
 var $spec$select1133 = 0, $spec$select1134 = 0, $spec$select1135 = 0, $spec$select1136 = 0, $spec$store$select$i = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $$01127 = -2;
  STACKTOP = sp;return ($$01127|0);
 }
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$01127 = -2;
  STACKTOP = sp;return ($$01127|0);
 }
 $7 = ((($0)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $$01127 = -2;
  STACKTOP = sp;return ($$01127|0);
 }
 $10 = HEAP32[$0>>2]|0;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(0);
  if (!($14)) {
   $$01127 = -2;
   STACKTOP = sp;return ($$01127|0);
  }
 }
 $15 = HEAP32[$5>>2]|0;
 $16 = ($15|0)==(11);
 if ($16) {
  HEAP32[$5>>2] = 12;
  $898 = 12;
 } else {
  $898 = $15;
 }
 $17 = ((($0)) + 16|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ((($0)) + 4|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($5)) + 56|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($5)) + 60|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($5)) + 8|0);
 $26 = ((($5)) + 16|0);
 $27 = ((($5)) + 12|0);
 $28 = (($1) + -5)|0;
 $29 = ($28>>>0)<(2);
 $30 = ((($5)) + 4|0);
 $31 = ((($5)) + 64|0);
 $32 = ((($5)) + 104|0);
 $33 = ((($5)) + 92|0);
 $34 = ((($5)) + 96|0);
 $35 = ((($5)) + 100|0);
 $36 = ((($5)) + 72|0);
 $37 = ((($5)) + 80|0);
 $38 = ((($5)) + 88|0);
 $39 = ((($5)) + 32|0);
 $40 = ((($5)) + 24|0);
 $41 = ((($0)) + 48|0);
 $42 = ((($5)) + 76|0);
 $43 = ((($5)) + 84|0);
 $44 = ((($5)) + 7108|0);
 $45 = ((($5)) + 7112|0);
 $46 = ((($5)) + 68|0);
 $47 = ((($0)) + 24|0);
 $48 = ($1|0)==(6);
 $49 = ((($5)) + 1328|0);
 $50 = ((($5)) + 108|0);
 $51 = ((($5)) + 112|0);
 $52 = ((($5)) + 752|0);
 $53 = ((($5)) + 624|0);
 $54 = ((($5)) + 44|0);
 $55 = ((($0)) + 20|0);
 $56 = ((($5)) + 28|0);
 $57 = ((($2)) + 1|0);
 $58 = ((($2)) + 2|0);
 $59 = ((($2)) + 3|0);
 $60 = ((($5)) + 7104|0);
 $61 = ((($5)) + 48|0);
 $62 = ((($5)) + 52|0);
 $63 = ((($5)) + 40|0);
 $64 = ((($5)) + 36|0);
 $65 = ((($5)) + 20|0);
 $$0 = 0;$$01059 = $8;$$01062 = $10;$$0918 = $18;$$0924 = $24;$$0935 = $22;$$0996 = $18;$$0998 = $20;$66 = $898;
 L17: while(1) {
  L19: do {
   switch ($66|0) {
   case 28:  {
    $$09962286$ph = $$0996;$$60$ph = $$0924;$$60995$ph = $$0935;$$64$ph = $$0998;$$641126$ph = $$01062;$$9$ph = 1;
    label = 308;
    break L17;
    break;
   }
   case 29:  {
    $$09962286 = $$0996;$$5923 = $$0918;$$60 = $$0924;$$60995 = $$0935;$$64 = $$0998;$$641126 = $$01062;$$9 = -3;
    break L17;
    break;
   }
   case 30:  {
    label = 330;
    break L17;
    break;
   }
   case 0:  {
    $67 = HEAP32[$25>>2]|0;
    $68 = ($67|0)==(0);
    if ($68) {
     HEAP32[$5>>2] = 12;
     $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $$0924;$$59994 = $$0935;$$63 = $$0998;$$631125 = $$01062;$$8 = $$0;
     break L19;
    }
    $69 = ($$0924>>>0)<(16);
    if ($69) {
     $$110631907 = $$01062;$$19251910 = $$0924;$$19361909 = $$0935;$$19991908 = $$0998;
     while(1) {
      $70 = ($$19991908|0)==(0);
      if ($70) {
       $$09962286 = $$0996;$$5923 = $$0918;$$60 = $$19251910;$$60995 = $$19361909;$$64 = 0;$$641126 = $$110631907;$$9 = $$0;
       break L17;
      }
      $71 = (($$19991908) + -1)|0;
      $72 = ((($$110631907)) + 1|0);
      $73 = HEAP8[$$110631907>>0]|0;
      $74 = $73&255;
      $75 = $74 << $$19251910;
      $76 = (($75) + ($$19361909))|0;
      $77 = (($$19251910) + 8)|0;
      $78 = ($77>>>0)<(16);
      if ($78) {
       $$110631907 = $72;$$19251910 = $77;$$19361909 = $76;$$19991908 = $71;
      } else {
       $$11063$lcssa = $72;$$1925$lcssa = $77;$$1936$lcssa = $76;$$1999$lcssa = $71;
       break;
      }
     }
    } else {
     $$11063$lcssa = $$01062;$$1925$lcssa = $$0924;$$1936$lcssa = $$0935;$$1999$lcssa = $$0998;
    }
    $79 = $67 & 2;
    $80 = ($79|0)!=(0);
    $81 = ($$1936$lcssa|0)==(35615);
    $or$cond = $80 & $81;
    if ($or$cond) {
     $82 = (_crc32(0,0,0)|0);
     HEAP32[$40>>2] = $82;
     HEAP8[$2>>0] = 31;
     HEAP8[$57>>0] = -117;
     $83 = (_crc32($82,$2,2)|0);
     HEAP32[$40>>2] = $83;
     HEAP32[$5>>2] = 1;
     $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = 0;$$59994 = 0;$$63 = $$1999$lcssa;$$631125 = $$11063$lcssa;$$8 = $$0;
     break L19;
    }
    HEAP32[$26>>2] = 0;
    $84 = HEAP32[$39>>2]|0;
    $85 = ($84|0)==(0|0);
    if (!($85)) {
     $86 = ((($84)) + 48|0);
     HEAP32[$86>>2] = -1;
    }
    $87 = $67 & 1;
    $88 = ($87|0)==(0);
    if (!($88)) {
     $89 = $$1936$lcssa << 8;
     $90 = $89 & 65280;
     $91 = $$1936$lcssa >>> 8;
     $92 = (($90) + ($91))|0;
     $93 = (($92>>>0) % 31)&-1;
     $94 = ($93|0)==(0);
     if ($94) {
      $95 = $$1936$lcssa & 15;
      $96 = ($95|0)==(8);
      if (!($96)) {
       HEAP32[$47>>2] = 27503;
       HEAP32[$5>>2] = 29;
       $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $$1925$lcssa;$$59994 = $$1936$lcssa;$$63 = $$1999$lcssa;$$631125 = $$11063$lcssa;$$8 = $$0;
       break L19;
      }
      $97 = $$1936$lcssa >>> 4;
      $98 = (($$1925$lcssa) + -4)|0;
      $99 = $97 & 15;
      $100 = (($99) + 8)|0;
      $101 = HEAP32[$64>>2]|0;
      $102 = ($101|0)==(0);
      if ($102) {
       HEAP32[$64>>2] = $100;
      } else {
       $103 = ($100>>>0)>($101>>>0);
       if ($103) {
        HEAP32[$47>>2] = 27530;
        HEAP32[$5>>2] = 29;
        $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $98;$$59994 = $97;$$63 = $$1999$lcssa;$$631125 = $$11063$lcssa;$$8 = $$0;
        break L19;
       }
      }
      $104 = 256 << $99;
      HEAP32[$65>>2] = $104;
      $105 = (_adler32(0,0,0)|0);
      HEAP32[$40>>2] = $105;
      HEAP32[$41>>2] = $105;
      $106 = $$1936$lcssa >>> 12;
      $107 = $106 & 2;
      $108 = $107 ^ 11;
      HEAP32[$5>>2] = $108;
      $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = 0;$$59994 = 0;$$63 = $$1999$lcssa;$$631125 = $$11063$lcssa;$$8 = $$0;
      break L19;
     }
    }
    HEAP32[$47>>2] = 27480;
    HEAP32[$5>>2] = 29;
    $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $$1925$lcssa;$$59994 = $$1936$lcssa;$$63 = $$1999$lcssa;$$631125 = $$11063$lcssa;$$8 = $$0;
    break;
   }
   case 1:  {
    $109 = ($$0924>>>0)<(16);
    if ($109) {
     $$210001856 = $$0998;$$210641855 = $$01062;$$29261858 = $$0924;$$29371857 = $$0935;
     while(1) {
      $110 = ($$210001856|0)==(0);
      if ($110) {
       $$09962286 = $$0996;$$5923 = $$0918;$$60 = $$29261858;$$60995 = $$29371857;$$64 = 0;$$641126 = $$210641855;$$9 = $$0;
       break L17;
      }
      $111 = (($$210001856) + -1)|0;
      $112 = ((($$210641855)) + 1|0);
      $113 = HEAP8[$$210641855>>0]|0;
      $114 = $113&255;
      $115 = $114 << $$29261858;
      $116 = (($115) + ($$29371857))|0;
      $117 = (($$29261858) + 8)|0;
      $118 = ($117>>>0)<(16);
      if ($118) {
       $$210001856 = $111;$$210641855 = $112;$$29261858 = $117;$$29371857 = $116;
      } else {
       $$21000$lcssa = $111;$$21064$lcssa = $112;$$2926$lcssa = $117;$$2937$lcssa = $116;
       break;
      }
     }
    } else {
     $$21000$lcssa = $$0998;$$21064$lcssa = $$01062;$$2926$lcssa = $$0924;$$2937$lcssa = $$0935;
    }
    HEAP32[$26>>2] = $$2937$lcssa;
    $119 = $$2937$lcssa & 255;
    $120 = ($119|0)==(8);
    if (!($120)) {
     HEAP32[$47>>2] = 27503;
     HEAP32[$5>>2] = 29;
     $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $$2926$lcssa;$$59994 = $$2937$lcssa;$$63 = $$21000$lcssa;$$631125 = $$21064$lcssa;$$8 = $$0;
     break L19;
    }
    $121 = $$2937$lcssa & 57344;
    $122 = ($121|0)==(0);
    if (!($122)) {
     HEAP32[$47>>2] = 27550;
     HEAP32[$5>>2] = 29;
     $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $$2926$lcssa;$$59994 = $$2937$lcssa;$$63 = $$21000$lcssa;$$631125 = $$21064$lcssa;$$8 = $$0;
     break L19;
    }
    $123 = HEAP32[$39>>2]|0;
    $124 = ($123|0)==(0|0);
    if (!($124)) {
     $125 = $$2937$lcssa >>> 8;
     $126 = $125 & 1;
     HEAP32[$123>>2] = $126;
    }
    $127 = $$2937$lcssa & 512;
    $128 = ($127|0)==(0);
    if (!($128)) {
     $129 = $$2937$lcssa&255;
     HEAP8[$2>>0] = $129;
     $130 = $$2937$lcssa >>> 8;
     $131 = $130&255;
     HEAP8[$57>>0] = $131;
     $132 = HEAP32[$40>>2]|0;
     $133 = (_crc32($132,$2,2)|0);
     HEAP32[$40>>2] = $133;
    }
    HEAP32[$5>>2] = 2;
    $$410021867$ph = $$21000$lcssa;$$410661866$ph = $$21064$lcssa;$$49281869$ph = 0;$$49391868$ph = 0;
    label = 47;
    break;
   }
   case 2:  {
    $134 = ($$0924>>>0)<(32);
    if ($134) {
     $$410021867$ph = $$0998;$$410661866$ph = $$01062;$$49281869$ph = $$0924;$$49391868$ph = $$0935;
     label = 47;
    } else {
     $$41002$lcssa = $$0998;$$41066$lcssa = $$01062;$$4939$lcssa = $$0935;
     label = 50;
    }
    break;
   }
   case 3:  {
    $159 = ($$0924>>>0)<(16);
    if ($159) {
     $$610041877$ph = $$0998;$$610681876$ph = $$01062;$$69301879$ph = $$0924;$$69411878$ph = $$0935;
     label = 56;
    } else {
     $$61004$lcssa = $$0998;$$61068$lcssa = $$01062;$$6941$lcssa = $$0935;
     label = 59;
    }
    break;
   }
   case 4:  {
    $$71005 = $$0998;$$71069 = $$01062;$$7931 = $$0924;$$7942 = $$0935;
    label = 64;
    break;
   }
   case 5:  {
    $$101008 = $$0998;$$101072 = $$01062;$$10934 = $$0924;$$10945 = $$0935;
    label = 76;
    break;
   }
   case 6:  {
    $$11 = $$0924;$$11946 = $$0935;$$131011 = $$0998;$$131075 = $$01062;
    label = 86;
    break;
   }
   case 7:  {
    $$12 = $$0924;$$12947 = $$0935;$$151013 = $$0998;$$151077 = $$01062;
    label = 100;
    break;
   }
   case 8:  {
    $$13 = $$0924;$$13948 = $$0935;$$171015 = $$0998;$$171079 = $$01062;
    label = 114;
    break;
   }
   case 9:  {
    $324 = ($$0924>>>0)<(32);
    if ($324) {
     $$161837 = $$0924;$$169511836 = $$0935;$$2010181835 = $$0998;$$2010821834 = $$01062;
     while(1) {
      $325 = ($$2010181835|0)==(0);
      if ($325) {
       $$09962286 = $$0996;$$5923 = $$0918;$$60 = $$161837;$$60995 = $$169511836;$$64 = 0;$$641126 = $$2010821834;$$9 = $$0;
       break L17;
      }
      $326 = (($$2010181835) + -1)|0;
      $327 = ((($$2010821834)) + 1|0);
      $328 = HEAP8[$$2010821834>>0]|0;
      $329 = $328&255;
      $330 = $329 << $$161837;
      $331 = (($330) + ($$169511836))|0;
      $332 = (($$161837) + 8)|0;
      $333 = ($332>>>0)<(32);
      if ($333) {
       $$161837 = $332;$$169511836 = $331;$$2010181835 = $326;$$2010821834 = $327;
      } else {
       $$16951$lcssa = $331;$$201018$lcssa = $326;$$201082$lcssa = $327;
       break;
      }
     }
    } else {
     $$16951$lcssa = $$0935;$$201018$lcssa = $$0998;$$201082$lcssa = $$01062;
    }
    $334 = (_llvm_bswap_i32(($$16951$lcssa|0))|0);
    HEAP32[$40>>2] = $334;
    HEAP32[$41>>2] = $334;
    HEAP32[$5>>2] = 10;
    $$17 = 0;$$17952 = 0;$$211019 = $$201018$lcssa;$$211083 = $$201082$lcssa;
    label = 129;
    break;
   }
   case 10:  {
    $$17 = $$0924;$$17952 = $$0935;$$211019 = $$0998;$$211083 = $$01062;
    label = 129;
    break;
   }
   case 11:  {
    $$18 = $$0924;$$18953 = $$0935;$$221020 = $$0998;$$221084 = $$01062;
    label = 132;
    break;
   }
   case 12:  {
    $$19 = $$0924;$$19954 = $$0935;$$231021 = $$0998;$$231085 = $$01062;
    label = 133;
    break;
   }
   case 13:  {
    $358 = $$0924 & 7;
    $359 = $$0935 >>> $358;
    $360 = (($$0924) - ($358))|0;
    $361 = ($360>>>0)<(32);
    if ($361) {
     $$211826 = $360;$$219561825 = $359;$$2510231824 = $$0998;$$2510871823 = $$01062;
     while(1) {
      $362 = ($$2510231824|0)==(0);
      if ($362) {
       $$09962286 = $$0996;$$5923 = $$0918;$$60 = $$211826;$$60995 = $$219561825;$$64 = 0;$$641126 = $$2510871823;$$9 = $$0;
       break L17;
      }
      $363 = (($$2510231824) + -1)|0;
      $364 = ((($$2510871823)) + 1|0);
      $365 = HEAP8[$$2510871823>>0]|0;
      $366 = $365&255;
      $367 = $366 << $$211826;
      $368 = (($367) + ($$219561825))|0;
      $369 = (($$211826) + 8)|0;
      $370 = ($369>>>0)<(32);
      if ($370) {
       $$211826 = $369;$$219561825 = $368;$$2510231824 = $363;$$2510871823 = $364;
      } else {
       $$21$lcssa = $369;$$21956$lcssa = $368;$$251023$lcssa = $363;$$251087$lcssa = $364;
       break;
      }
     }
    } else {
     $$21$lcssa = $360;$$21956$lcssa = $359;$$251023$lcssa = $$0998;$$251087$lcssa = $$01062;
    }
    $371 = $$21956$lcssa & 65535;
    $372 = $$21956$lcssa >>> 16;
    $373 = $372 ^ 65535;
    $374 = ($371|0)==($373|0);
    if ($374) {
     HEAP32[$31>>2] = $371;
     HEAP32[$5>>2] = 14;
     if ($48) {
      $$09962286$ph = $$0996;$$60$ph = 0;$$60995$ph = 0;$$64$ph = $$251023$lcssa;$$641126$ph = $$251087$lcssa;$$9$ph = $$0;
      label = 308;
      break L17;
     } else {
      $$22 = 0;$$22957 = 0;$$261024 = $$251023$lcssa;$$261088 = $$251087$lcssa;
      label = 153;
      break L19;
     }
    } else {
     HEAP32[$47>>2] = 27614;
     HEAP32[$5>>2] = 29;
     $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $$21$lcssa;$$59994 = $$21956$lcssa;$$63 = $$251023$lcssa;$$631125 = $$251087$lcssa;$$8 = $$0;
     break L19;
    }
    break;
   }
   case 14:  {
    $$22 = $$0924;$$22957 = $$0935;$$261024 = $$0998;$$261088 = $$01062;
    label = 153;
    break;
   }
   case 15:  {
    $$23 = $$0924;$$23958 = $$0935;$$271025 = $$0998;$$271089 = $$01062;
    label = 154;
    break;
   }
   case 16:  {
    $386 = ($$0924>>>0)<(14);
    if ($386) {
     $$241612 = $$0924;$$249591611 = $$0935;$$2810261610 = $$0998;$$2810901609 = $$01062;
     while(1) {
      $387 = ($$2810261610|0)==(0);
      if ($387) {
       $$09962286 = $$0996;$$5923 = $$0918;$$60 = $$241612;$$60995 = $$249591611;$$64 = 0;$$641126 = $$2810901609;$$9 = $$0;
       break L17;
      }
      $388 = (($$2810261610) + -1)|0;
      $389 = ((($$2810901609)) + 1|0);
      $390 = HEAP8[$$2810901609>>0]|0;
      $391 = $390&255;
      $392 = $391 << $$241612;
      $393 = (($392) + ($$249591611))|0;
      $394 = (($$241612) + 8)|0;
      $395 = ($394>>>0)<(14);
      if ($395) {
       $$241612 = $394;$$249591611 = $393;$$2810261610 = $388;$$2810901609 = $389;
      } else {
       $$24$lcssa = $394;$$24959$lcssa = $393;$$281026$lcssa = $388;$$281090$lcssa = $389;
       break;
      }
     }
    } else {
     $$24$lcssa = $$0924;$$24959$lcssa = $$0935;$$281026$lcssa = $$0998;$$281090$lcssa = $$01062;
    }
    $396 = $$24959$lcssa & 31;
    $397 = (($396) + 257)|0;
    HEAP32[$34>>2] = $397;
    $398 = $$24959$lcssa >>> 5;
    $399 = $398 & 31;
    $400 = (($399) + 1)|0;
    HEAP32[$35>>2] = $400;
    $401 = $$24959$lcssa >>> 10;
    $402 = $401 & 15;
    $403 = (($402) + 4)|0;
    HEAP32[$33>>2] = $403;
    $404 = $$24959$lcssa >>> 14;
    $405 = (($$24$lcssa) + -14)|0;
    $406 = ($397>>>0)>(286);
    $407 = ($399>>>0)>(29);
    $or$cond1138 = $406 | $407;
    if ($or$cond1138) {
     HEAP32[$47>>2] = 27643;
     HEAP32[$5>>2] = 29;
     $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $405;$$59994 = $404;$$63 = $$281026$lcssa;$$631125 = $$281090$lcssa;$$8 = $$0;
     break L19;
    } else {
     HEAP32[$32>>2] = 0;
     HEAP32[$5>>2] = 17;
     $$252421 = $405;$$259602420 = $404;$$2910272419 = $$281026$lcssa;$$2910912418 = $$281090$lcssa;$429 = $403;$899 = 0;
     label = 166;
     break L19;
    }
    break;
   }
   case 17:  {
    $$pre2381 = HEAP32[$32>>2]|0;
    $$pre2382 = HEAP32[$33>>2]|0;
    $408 = ($$pre2381>>>0)<($$pre2382>>>0);
    if ($408) {
     $$252421 = $$0924;$$259602420 = $$0935;$$2910272419 = $$0998;$$2910912418 = $$01062;$429 = $$pre2382;$899 = $$pre2381;
     label = 166;
    } else {
     $$26$lcssa = $$0924;$$26961$lcssa = $$0935;$$301028$lcssa = $$0998;$$301092$lcssa = $$01062;$$lcssa = $$pre2381;
     label = 171;
    }
    break;
   }
   case 18:  {
    $$pre2385 = HEAP32[$32>>2]|0;
    $$1 = $$0;$$28 = $$0924;$$28963 = $$0935;$$321030 = $$0998;$$321094 = $$01062;$442 = $$pre2385;
    label = 178;
    break;
   }
   case 19:  {
    $$2 = $$0;$$37 = $$0924;$$37972 = $$0935;$$411039 = $$0998;$$411103 = $$01062;
    label = 218;
    break;
   }
   case 20:  {
    $$3 = $$0;$$38 = $$0924;$$38973 = $$0935;$$421040 = $$0998;$$421104 = $$01062;
    label = 219;
    break;
   }
   case 21:  {
    $$pre2390 = HEAP32[$36>>2]|0;
    $$4 = $$0;$$42 = $$0924;$$42977 = $$0935;$$461044 = $$0998;$$461108 = $$01062;$612 = $$pre2390;
    label = 239;
    break;
   }
   case 22:  {
    $$45 = $$0924;$$45980 = $$0935;$$491047 = $$0998;$$491111 = $$01062;$$5 = $$0;
    label = 247;
    break;
   }
   case 23:  {
    $$pre2396 = HEAP32[$36>>2]|0;
    $$49 = $$0924;$$49984 = $$0935;$$531051 = $$0998;$$531115 = $$01062;$$6 = $$0;$692 = $$pre2396;
    label = 261;
    break;
   }
   case 24:  {
    $$52 = $$0924;$$52987 = $$0935;$$561054 = $$0998;$$561118 = $$01062;$$7 = $$0;
    label = 268;
    break;
   }
   case 25:  {
    $745 = ($$0996|0)==(0);
    if ($745) {
     $$09962286$ph = 0;$$60$ph = $$0924;$$60995$ph = $$0935;$$64$ph = $$0998;$$641126$ph = $$01062;$$9$ph = $$0;
     label = 308;
     break L17;
    }
    $746 = HEAP32[$31>>2]|0;
    $747 = $746&255;
    $748 = ((($$01059)) + 1|0);
    HEAP8[$$01059>>0] = $747;
    $749 = (($$0996) + -1)|0;
    HEAP32[$5>>2] = 20;
    $$1997 = $749;$$21061 = $748;$$4922 = $$0918;$$59 = $$0924;$$59994 = $$0935;$$63 = $$0998;$$631125 = $$01062;$$8 = $$0;
    break;
   }
   case 26:  {
    $750 = HEAP32[$25>>2]|0;
    $751 = ($750|0)==(0);
    if ($751) {
     $$1919 = $$0918;$$54 = $$0924;$$54989 = $$0935;$$581056 = $$0998;$$581120 = $$01062;
    } else {
     $752 = ($$0924>>>0)<(32);
     if ($752) {
      $$531594 = $$0924;$$539881593 = $$0935;$$5710551592 = $$0998;$$5711191591 = $$01062;
      while(1) {
       $753 = ($$5710551592|0)==(0);
       if ($753) {
        $$09962286 = $$0996;$$5923 = $$0918;$$60 = $$531594;$$60995 = $$539881593;$$64 = 0;$$641126 = $$5711191591;$$9 = $$0;
        break L17;
       }
       $754 = (($$5710551592) + -1)|0;
       $755 = ((($$5711191591)) + 1|0);
       $756 = HEAP8[$$5711191591>>0]|0;
       $757 = $756&255;
       $758 = $757 << $$531594;
       $759 = (($758) + ($$539881593))|0;
       $760 = (($$531594) + 8)|0;
       $761 = ($760>>>0)<(32);
       if ($761) {
        $$531594 = $760;$$539881593 = $759;$$5710551592 = $754;$$5711191591 = $755;
       } else {
        $$53$lcssa = $760;$$53988$lcssa = $759;$$571055$lcssa = $754;$$571119$lcssa = $755;
        break;
       }
      }
     } else {
      $$53$lcssa = $$0924;$$53988$lcssa = $$0935;$$571055$lcssa = $$0998;$$571119$lcssa = $$01062;
     }
     $762 = (($$0918) - ($$0996))|0;
     $763 = HEAP32[$55>>2]|0;
     $764 = (($763) + ($762))|0;
     HEAP32[$55>>2] = $764;
     $765 = HEAP32[$56>>2]|0;
     $766 = (($765) + ($762))|0;
     HEAP32[$56>>2] = $766;
     $767 = ($762|0)==(0);
     if ($767) {
      $$pre2379 = HEAP32[$40>>2]|0;
      $780 = $$pre2379;
     } else {
      $768 = HEAP32[$26>>2]|0;
      $769 = ($768|0)==(0);
      $770 = HEAP32[$40>>2]|0;
      $771 = (0 - ($762))|0;
      $772 = (($$01059) + ($771)|0);
      if ($769) {
       $774 = (_adler32($770,$772,$762)|0);
       $775 = $774;
      } else {
       $773 = (_crc32($770,$772,$762)|0);
       $775 = $773;
      }
      HEAP32[$40>>2] = $775;
      HEAP32[$41>>2] = $775;
      $780 = $775;
     }
     $776 = HEAP32[$26>>2]|0;
     $777 = ($776|0)==(0);
     $778 = (_llvm_bswap_i32(($$53988$lcssa|0))|0);
     $spec$select1135 = $777 ? $778 : $$53988$lcssa;
     $779 = ($spec$select1135|0)==($780|0);
     if ($779) {
      $$1919 = $$0996;$$54 = 0;$$54989 = 0;$$581056 = $$571055$lcssa;$$581120 = $$571119$lcssa;
     } else {
      HEAP32[$47>>2] = 27817;
      HEAP32[$5>>2] = 29;
      $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0996;$$59 = $$53$lcssa;$$59994 = $$53988$lcssa;$$63 = $$571055$lcssa;$$631125 = $$571119$lcssa;$$8 = $$0;
      break L19;
     }
    }
    HEAP32[$5>>2] = 27;
    $$2920 = $$1919;$$55 = $$54;$$55990 = $$54989;$$591057 = $$581056;$$591121 = $$581120;
    label = 298;
    break;
   }
   case 27:  {
    $$2920 = $$0918;$$55 = $$0924;$$55990 = $$0935;$$591057 = $$0998;$$591121 = $$01062;
    label = 298;
    break;
   }
   default: {
    $$01127 = -2;
    label = 331;
    break L17;
   }
   }
  } while(0);
  if ((label|0) == 47) {
   label = 0;
   $$410021867 = $$410021867$ph;$$410661866 = $$410661866$ph;$$49281869 = $$49281869$ph;$$49391868 = $$49391868$ph;
   while(1) {
    $135 = ($$410021867|0)==(0);
    if ($135) {
     $$09962286 = $$0996;$$5923 = $$0918;$$60 = $$49281869;$$60995 = $$49391868;$$64 = 0;$$641126 = $$410661866;$$9 = $$0;
     break L17;
    }
    $136 = (($$410021867) + -1)|0;
    $137 = ((($$410661866)) + 1|0);
    $138 = HEAP8[$$410661866>>0]|0;
    $139 = $138&255;
    $140 = $139 << $$49281869;
    $141 = (($140) + ($$49391868))|0;
    $142 = (($$49281869) + 8)|0;
    $143 = ($142>>>0)<(32);
    if ($143) {
     $$410021867 = $136;$$410661866 = $137;$$49281869 = $142;$$49391868 = $141;
    } else {
     $$41002$lcssa = $136;$$41066$lcssa = $137;$$4939$lcssa = $141;
     label = 50;
     break;
    }
   }
  }
  else if ((label|0) == 129) {
   label = 0;
   $335 = HEAP32[$27>>2]|0;
   $336 = ($335|0)==(0);
   if ($336) {
    label = 130;
    break;
   }
   $337 = (_adler32(0,0,0)|0);
   HEAP32[$40>>2] = $337;
   HEAP32[$41>>2] = $337;
   HEAP32[$5>>2] = 11;
   $$18 = $$17;$$18953 = $$17952;$$221020 = $$211019;$$221084 = $$211083;
   label = 132;
  }
  else if ((label|0) == 153) {
   label = 0;
   HEAP32[$5>>2] = 15;
   $$23 = $$22;$$23958 = $$22957;$$271025 = $$261024;$$271089 = $$261088;
   label = 154;
  }
  else if ((label|0) == 166) {
   label = 0;
   $$261634 = $$252421;$$269611633 = $$259602420;$$3010281632 = $$2910272419;$$3010921631 = $$2910912418;$421 = $899;
   while(1) {
    $409 = ($$261634>>>0)<(3);
    if ($409) {
     $410 = ($$3010281632|0)==(0);
     if ($410) {
      $$09962286 = $$0996;$$5923 = $$0918;$$60 = $$261634;$$60995 = $$269611633;$$64 = 0;$$641126 = $$3010921631;$$9 = $$0;
      break L17;
     }
     $411 = (($$261634) + 8)|0;
     $412 = HEAP8[$$3010921631>>0]|0;
     $413 = $412&255;
     $414 = $413 << $$261634;
     $415 = (($414) + ($$269611633))|0;
     $416 = ((($$3010921631)) + 1|0);
     $417 = (($$3010281632) + -1)|0;
     $$27$lcssa = $411;$$27962$lcssa = $415;$$311029$lcssa = $417;$$311093$lcssa = $416;
    } else {
     $$27$lcssa = $$261634;$$27962$lcssa = $$269611633;$$311029$lcssa = $$3010281632;$$311093$lcssa = $$3010921631;
    }
    $418 = $$27962$lcssa & 7;
    $419 = $418&65535;
    $420 = (($421) + 1)|0;
    HEAP32[$32>>2] = $420;
    $422 = (13004 + ($421<<1)|0);
    $423 = HEAP16[$422>>1]|0;
    $424 = $423&65535;
    $425 = (((($5)) + 112|0) + ($424<<1)|0);
    HEAP16[$425>>1] = $419;
    $426 = $$27962$lcssa >>> 3;
    $427 = (($$27$lcssa) + -3)|0;
    $428 = ($420>>>0)<($429>>>0);
    if ($428) {
     $$261634 = $427;$$269611633 = $426;$$3010281632 = $$311029$lcssa;$$3010921631 = $$311093$lcssa;$421 = $420;
    } else {
     $$26$lcssa = $427;$$26961$lcssa = $426;$$301028$lcssa = $$311029$lcssa;$$301092$lcssa = $$311093$lcssa;$$lcssa = $420;
     label = 171;
     break;
    }
   }
  }
  else if ((label|0) == 298) {
   label = 0;
   $781 = HEAP32[$25>>2]|0;
   $782 = ($781|0)==(0);
   if ($782) {
    $$57 = $$55;$$57992 = $$55990;$$61 = $$591057;$$611123 = $$591121;
    label = 306;
    break;
   }
   $783 = HEAP32[$26>>2]|0;
   $784 = ($783|0)==(0);
   if ($784) {
    $$57 = $$55;$$57992 = $$55990;$$61 = $$591057;$$611123 = $$591121;
    label = 306;
    break;
   }
   $785 = ($$55>>>0)<(32);
   if ($785) {
    $$561601 = $$55;$$569911600 = $$55990;$$6010581599 = $$591057;$$6011221598 = $$591121;
    while(1) {
     $786 = ($$6010581599|0)==(0);
     if ($786) {
      $$09962286 = $$0996;$$5923 = $$2920;$$60 = $$561601;$$60995 = $$569911600;$$64 = 0;$$641126 = $$6011221598;$$9 = $$0;
      break L17;
     }
     $787 = (($$6010581599) + -1)|0;
     $788 = ((($$6011221598)) + 1|0);
     $789 = HEAP8[$$6011221598>>0]|0;
     $790 = $789&255;
     $791 = $790 << $$561601;
     $792 = (($791) + ($$569911600))|0;
     $793 = (($$561601) + 8)|0;
     $794 = ($793>>>0)<(32);
     if ($794) {
      $$561601 = $793;$$569911600 = $792;$$6010581599 = $787;$$6011221598 = $788;
     } else {
      $$56$lcssa = $793;$$56991$lcssa = $792;$$601058$lcssa = $787;$$601122$lcssa = $788;
      break;
     }
    }
   } else {
    $$56$lcssa = $$55;$$56991$lcssa = $$55990;$$601058$lcssa = $$591057;$$601122$lcssa = $$591121;
   }
   $795 = HEAP32[$56>>2]|0;
   $796 = ($$56991$lcssa|0)==($795|0);
   if ($796) {
    $$57 = 0;$$57992 = 0;$$61 = $$601058$lcssa;$$611123 = $$601122$lcssa;
    label = 306;
    break;
   }
   HEAP32[$47>>2] = 27838;
   HEAP32[$5>>2] = 29;
   $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$2920;$$59 = $$56$lcssa;$$59994 = $$56991$lcssa;$$63 = $$601058$lcssa;$$631125 = $$601122$lcssa;$$8 = $$0;
  }
  do {
   if ((label|0) == 50) {
    label = 0;
    $144 = HEAP32[$39>>2]|0;
    $145 = ($144|0)==(0|0);
    if (!($145)) {
     $146 = ((($144)) + 4|0);
     HEAP32[$146>>2] = $$4939$lcssa;
    }
    $147 = HEAP32[$26>>2]|0;
    $148 = $147 & 512;
    $149 = ($148|0)==(0);
    if (!($149)) {
     $150 = $$4939$lcssa&255;
     HEAP8[$2>>0] = $150;
     $151 = $$4939$lcssa >>> 8;
     $152 = $151&255;
     HEAP8[$57>>0] = $152;
     $153 = $$4939$lcssa >>> 16;
     $154 = $153&255;
     HEAP8[$58>>0] = $154;
     $155 = $$4939$lcssa >>> 24;
     $156 = $155&255;
     HEAP8[$59>>0] = $156;
     $157 = HEAP32[$40>>2]|0;
     $158 = (_crc32($157,$2,4)|0);
     HEAP32[$40>>2] = $158;
    }
    HEAP32[$5>>2] = 3;
    $$610041877$ph = $$41002$lcssa;$$610681876$ph = $$41066$lcssa;$$69301879$ph = 0;$$69411878$ph = 0;
    label = 56;
   }
   else if ((label|0) == 132) {
    label = 0;
    if ($29) {
     $$09962286$ph = $$0996;$$60$ph = $$18;$$60995$ph = $$18953;$$64$ph = $$221020;$$641126$ph = $$221084;$$9$ph = $$0;
     label = 308;
     break L17;
    } else {
     $$19 = $$18;$$19954 = $$18953;$$231021 = $$221020;$$231085 = $$221084;
     label = 133;
    }
   }
   else if ((label|0) == 154) {
    label = 0;
    $375 = HEAP32[$31>>2]|0;
    $376 = ($375|0)==(0);
    if ($376) {
     HEAP32[$5>>2] = 11;
     $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $$23;$$59994 = $$23958;$$63 = $$271025;$$631125 = $$271089;$$8 = $$0;
     break;
    }
    $377 = ($375>>>0)>($$271025>>>0);
    $spec$select1130 = $377 ? $$271025 : $375;
    $378 = ($spec$select1130>>>0)>($$0996>>>0);
    $$4911 = $378 ? $$0996 : $spec$select1130;
    $379 = ($$4911|0)==(0);
    if ($379) {
     $$09962286$ph = $$0996;$$60$ph = $$23;$$60995$ph = $$23958;$$64$ph = $$271025;$$641126$ph = $$271089;$$9$ph = $$0;
     label = 308;
     break L17;
    }
    _memcpy(($$01059|0),($$271089|0),($$4911|0))|0;
    $380 = (($$271025) - ($$4911))|0;
    $381 = (($$271089) + ($$4911)|0);
    $382 = (($$0996) - ($$4911))|0;
    $383 = (($$01059) + ($$4911)|0);
    $384 = HEAP32[$31>>2]|0;
    $385 = (($384) - ($$4911))|0;
    HEAP32[$31>>2] = $385;
    $$1997 = $382;$$21061 = $383;$$4922 = $$0918;$$59 = $$23;$$59994 = $$23958;$$63 = $380;$$631125 = $381;$$8 = $$0;
   }
   else if ((label|0) == 171) {
    label = 0;
    $430 = ($$lcssa>>>0)<(19);
    if ($430) {
     $432 = $$lcssa;
     while(1) {
      $431 = (($432) + 1)|0;
      $433 = (13004 + ($432<<1)|0);
      $434 = HEAP16[$433>>1]|0;
      $435 = $434&65535;
      $436 = (((($5)) + 112|0) + ($435<<1)|0);
      HEAP16[$436>>1] = 0;
      $exitcond = ($431|0)==(19);
      if ($exitcond) {
       break;
      } else {
       $432 = $431;
      }
     }
     HEAP32[$32>>2] = 19;
    }
    HEAP32[$50>>2] = $49;
    HEAP32[$42>>2] = $49;
    HEAP32[$43>>2] = 7;
    $437 = (_inflate_table(0,$51,19,$50,$43,$52)|0);
    $438 = ($437|0)==(0);
    if ($438) {
     HEAP32[$32>>2] = 0;
     HEAP32[$5>>2] = 18;
     $$1 = 0;$$28 = $$26$lcssa;$$28963 = $$26961$lcssa;$$321030 = $$301028$lcssa;$$321094 = $$301092$lcssa;$442 = 0;
     label = 178;
     break;
    } else {
     HEAP32[$47>>2] = 27679;
     HEAP32[$5>>2] = 29;
     $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $$26$lcssa;$$59994 = $$26961$lcssa;$$63 = $$301028$lcssa;$$631125 = $$301092$lcssa;$$8 = $437;
     break;
    }
   }
  } while(0);
  L170: do {
   if ((label|0) == 56) {
    label = 0;
    $$610041877 = $$610041877$ph;$$610681876 = $$610681876$ph;$$69301879 = $$69301879$ph;$$69411878 = $$69411878$ph;
    while(1) {
     $160 = ($$610041877|0)==(0);
     if ($160) {
      $$09962286 = $$0996;$$5923 = $$0918;$$60 = $$69301879;$$60995 = $$69411878;$$64 = 0;$$641126 = $$610681876;$$9 = $$0;
      break L17;
     }
     $161 = (($$610041877) + -1)|0;
     $162 = ((($$610681876)) + 1|0);
     $163 = HEAP8[$$610681876>>0]|0;
     $164 = $163&255;
     $165 = $164 << $$69301879;
     $166 = (($165) + ($$69411878))|0;
     $167 = (($$69301879) + 8)|0;
     $168 = ($167>>>0)<(16);
     if ($168) {
      $$610041877 = $161;$$610681876 = $162;$$69301879 = $167;$$69411878 = $166;
     } else {
      $$61004$lcssa = $161;$$61068$lcssa = $162;$$6941$lcssa = $166;
      label = 59;
      break;
     }
    }
   }
   else if ((label|0) == 133) {
    label = 0;
    $338 = HEAP32[$30>>2]|0;
    $339 = ($338|0)==(0);
    if (!($339)) {
     $340 = $$19 & 7;
     $341 = $$19954 >>> $340;
     $342 = (($$19) - ($340))|0;
     HEAP32[$5>>2] = 26;
     $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $342;$$59994 = $341;$$63 = $$231021;$$631125 = $$231085;$$8 = $$0;
     break;
    }
    $343 = ($$19>>>0)<(3);
    if ($343) {
     $344 = ($$231021|0)==(0);
     if ($344) {
      $$09962286$ph = $$0996;$$60$ph = $$19;$$60995$ph = $$19954;$$64$ph = 0;$$641126$ph = $$231085;$$9$ph = $$0;
      label = 308;
      break L17;
     }
     $345 = (($$19) + 8)|0;
     $346 = HEAP8[$$231085>>0]|0;
     $347 = $346&255;
     $348 = $347 << $$19;
     $349 = (($348) + ($$19954))|0;
     $350 = ((($$231085)) + 1|0);
     $351 = (($$231021) + -1)|0;
     $$20$lcssa = $345;$$20955$lcssa = $349;$$241022$lcssa = $351;$$241086$lcssa = $350;
    } else {
     $$20$lcssa = $$19;$$20955$lcssa = $$19954;$$241022$lcssa = $$231021;$$241086$lcssa = $$231085;
    }
    $352 = $$20955$lcssa & 1;
    HEAP32[$30>>2] = $352;
    $353 = $$20955$lcssa >>> 1;
    $trunc = $353&255;
    $trunc$clear = $trunc & 3;
    switch ($trunc$clear<<24>>24) {
    case 0:  {
     $$sink = 13;
     label = 144;
     break;
    }
    case 1:  {
     HEAP32[$42>>2] = 10828;
     HEAP32[$43>>2] = 9;
     HEAP32[$37>>2] = 12876;
     HEAP32[$38>>2] = 5;
     HEAP32[$5>>2] = 19;
     if ($48) {
      label = 140;
      break L17;
     }
     break;
    }
    case 2:  {
     $$sink = 16;
     label = 144;
     break;
    }
    case 3:  {
     HEAP32[$47>>2] = 27595;
     $$sink = 29;
     label = 144;
     break;
    }
    default: {
     label = 143;
     break L17;
    }
    }
    if ((label|0) == 144) {
     label = 0;
     HEAP32[$5>>2] = $$sink;
    }
    $356 = $$20955$lcssa >>> 3;
    $357 = (($$20$lcssa) + -3)|0;
    $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $357;$$59994 = $356;$$63 = $$241022$lcssa;$$631125 = $$241086$lcssa;$$8 = $$0;
   }
   else if ((label|0) == 178) {
    label = 0;
    $439 = HEAP32[$34>>2]|0;
    $440 = HEAP32[$35>>2]|0;
    $441 = (($440) + ($439))|0;
    $443 = ($442>>>0)<($441>>>0);
    L191: do {
     if ($443) {
      $$pre2386 = HEAP32[$42>>2]|0;
      $$pre2387 = HEAP32[$43>>2]|0;
      $444 = 1 << $$pre2387;
      $445 = (($444) + -1)|0;
      $$291708 = $$28;$$299641707 = $$28963;$$3310311706 = $$321030;$$3310951705 = $$321094;$$promoted = $442;
      L193: while(1) {
       $446 = $445 & $$299641707;
       $$sroa$1874$0$$sroa_idx811648 = (((($$pre2386) + ($446<<2)|0)) + 1|0);
       $$sroa$1874$0$copyload821649 = HEAP8[$$sroa$1874$0$$sroa_idx811648>>0]|0;
       $447 = $$sroa$1874$0$copyload821649&255;
       $448 = ($$291708>>>0)<($447>>>0);
       if ($448) {
        $$301656 = $$291708;$$309651655 = $$299641707;$$3410321654 = $$3310311706;$$3410961653 = $$3310951705;
        while(1) {
         $449 = ($$3410321654|0)==(0);
         if ($449) {
          $$09962286 = $$0996;$$5923 = $$0918;$$60 = $$301656;$$60995 = $$309651655;$$64 = 0;$$641126 = $$3410961653;$$9 = $$1;
          break L17;
         }
         $450 = (($$3410321654) + -1)|0;
         $451 = ((($$3410961653)) + 1|0);
         $452 = HEAP8[$$3410961653>>0]|0;
         $453 = $452&255;
         $454 = $453 << $$301656;
         $455 = (($454) + ($$309651655))|0;
         $456 = (($$301656) + 8)|0;
         $457 = $445 & $455;
         $$sroa$1874$0$$sroa_idx81 = (((($$pre2386) + ($457<<2)|0)) + 1|0);
         $$sroa$1874$0$copyload82 = HEAP8[$$sroa$1874$0$$sroa_idx81>>0]|0;
         $458 = $$sroa$1874$0$copyload82&255;
         $459 = ($456>>>0)<($458>>>0);
         if ($459) {
          $$301656 = $456;$$309651655 = $455;$$3410321654 = $450;$$3410961653 = $451;
         } else {
          break;
         }
        }
        $460 = $$sroa$1874$0$copyload82&255;
        $$30$lcssa = $456;$$30965$lcssa = $455;$$341032$lcssa = $450;$$341096$lcssa = $451;$$lcssa1188 = $460;$$pn2406 = $457;
       } else {
        $$30$lcssa = $$291708;$$30965$lcssa = $$299641707;$$341032$lcssa = $$3310311706;$$341096$lcssa = $$3310951705;$$lcssa1188 = $447;$$pn2406 = $446;
       }
       $$sroa$42$0$copyload113$lcssa$in = (((($$pre2386) + ($$pn2406<<2)|0)) + 2|0);
       $$sroa$42$0$copyload113$lcssa = HEAP16[$$sroa$42$0$copyload113$lcssa$in>>1]|0;
       $461 = ($$sroa$42$0$copyload113$lcssa&65535)<(16);
       if ($461) {
        $462 = $$30965$lcssa >>> $$lcssa1188;
        $463 = (($$30$lcssa) - ($$lcssa1188))|0;
        $464 = (($$promoted) + 1)|0;
        HEAP32[$32>>2] = $464;
        $465 = (((($5)) + 112|0) + ($$promoted<<1)|0);
        HEAP16[$465>>1] = $$sroa$42$0$copyload113$lcssa;
        $$35 = $463;$$35970 = $462;$$391037 = $$341032$lcssa;$$391101 = $$341096$lcssa;$530 = $464;
       } else {
        switch ($$sroa$42$0$copyload113$lcssa<<16>>16) {
        case 16:  {
         $466 = (($$lcssa1188) + 2)|0;
         $467 = ($$30$lcssa>>>0)<($466>>>0);
         if ($467) {
          $$311684 = $$30$lcssa;$$319661683 = $$30965$lcssa;$$3510331682 = $$341032$lcssa;$$3510971681 = $$341096$lcssa;
          while(1) {
           $468 = ($$3510331682|0)==(0);
           if ($468) {
            $$09962286 = $$0996;$$5923 = $$0918;$$60 = $$311684;$$60995 = $$319661683;$$64 = 0;$$641126 = $$3510971681;$$9 = $$1;
            break L17;
           }
           $469 = (($$3510331682) + -1)|0;
           $470 = ((($$3510971681)) + 1|0);
           $471 = HEAP8[$$3510971681>>0]|0;
           $472 = $471&255;
           $473 = $472 << $$311684;
           $474 = (($473) + ($$319661683))|0;
           $475 = (($$311684) + 8)|0;
           $476 = ($475>>>0)<($466>>>0);
           if ($476) {
            $$311684 = $475;$$319661683 = $474;$$3510331682 = $469;$$3510971681 = $470;
           } else {
            $$31$lcssa = $475;$$31966$lcssa = $474;$$351033$lcssa = $469;$$351097$lcssa = $470;
            break;
           }
          }
         } else {
          $$31$lcssa = $$30$lcssa;$$31966$lcssa = $$30965$lcssa;$$351033$lcssa = $$341032$lcssa;$$351097$lcssa = $$341096$lcssa;
         }
         $477 = $$31966$lcssa >>> $$lcssa1188;
         $478 = (($$31$lcssa) - ($$lcssa1188))|0;
         $479 = ($$promoted|0)==(0);
         if ($479) {
          label = 193;
          break L193;
         }
         $480 = (($$promoted) + -1)|0;
         $481 = (((($5)) + 112|0) + ($480<<1)|0);
         $482 = HEAP16[$481>>1]|0;
         $483 = $482&65535;
         $484 = $477 & 3;
         $485 = (($484) + 3)|0;
         $486 = $477 >>> 2;
         $487 = (($478) + -2)|0;
         $$0903 = $483;$$34 = $487;$$34969 = $486;$$381036 = $$351033$lcssa;$$381100 = $$351097$lcssa;$$5912 = $485;
         break;
        }
        case 17:  {
         $488 = (($$lcssa1188) + 3)|0;
         $489 = ($$30$lcssa>>>0)<($488>>>0);
         if ($489) {
          $$321673 = $$30$lcssa;$$329671672 = $$30965$lcssa;$$3610341671 = $$341032$lcssa;$$3610981670 = $$341096$lcssa;
          while(1) {
           $490 = ($$3610341671|0)==(0);
           if ($490) {
            $$09962286 = $$0996;$$5923 = $$0918;$$60 = $$321673;$$60995 = $$329671672;$$64 = 0;$$641126 = $$3610981670;$$9 = $$1;
            break L17;
           }
           $491 = (($$3610341671) + -1)|0;
           $492 = ((($$3610981670)) + 1|0);
           $493 = HEAP8[$$3610981670>>0]|0;
           $494 = $493&255;
           $495 = $494 << $$321673;
           $496 = (($495) + ($$329671672))|0;
           $497 = (($$321673) + 8)|0;
           $498 = ($497>>>0)<($488>>>0);
           if ($498) {
            $$321673 = $497;$$329671672 = $496;$$3610341671 = $491;$$3610981670 = $492;
           } else {
            $$32$lcssa = $497;$$32967$lcssa = $496;$$361034$lcssa = $491;$$361098$lcssa = $492;
            break;
           }
          }
         } else {
          $$32$lcssa = $$30$lcssa;$$32967$lcssa = $$30965$lcssa;$$361034$lcssa = $$341032$lcssa;$$361098$lcssa = $$341096$lcssa;
         }
         $499 = $$32967$lcssa >>> $$lcssa1188;
         $500 = $499 & 7;
         $501 = (($500) + 3)|0;
         $502 = $499 >>> 3;
         $503 = (-3 - ($$lcssa1188))|0;
         $504 = (($503) + ($$32$lcssa))|0;
         $$0903 = 0;$$34 = $504;$$34969 = $502;$$381036 = $$361034$lcssa;$$381100 = $$361098$lcssa;$$5912 = $501;
         break;
        }
        default: {
         $505 = (($$lcssa1188) + 7)|0;
         $506 = ($$30$lcssa>>>0)<($505>>>0);
         if ($506) {
          $$331695 = $$30$lcssa;$$339681694 = $$30965$lcssa;$$3710351693 = $$341032$lcssa;$$3710991692 = $$341096$lcssa;
          while(1) {
           $507 = ($$3710351693|0)==(0);
           if ($507) {
            $$09962286 = $$0996;$$5923 = $$0918;$$60 = $$331695;$$60995 = $$339681694;$$64 = 0;$$641126 = $$3710991692;$$9 = $$1;
            break L17;
           }
           $508 = (($$3710351693) + -1)|0;
           $509 = ((($$3710991692)) + 1|0);
           $510 = HEAP8[$$3710991692>>0]|0;
           $511 = $510&255;
           $512 = $511 << $$331695;
           $513 = (($512) + ($$339681694))|0;
           $514 = (($$331695) + 8)|0;
           $515 = ($514>>>0)<($505>>>0);
           if ($515) {
            $$331695 = $514;$$339681694 = $513;$$3710351693 = $508;$$3710991692 = $509;
           } else {
            $$33$lcssa = $514;$$33968$lcssa = $513;$$371035$lcssa = $508;$$371099$lcssa = $509;
            break;
           }
          }
         } else {
          $$33$lcssa = $$30$lcssa;$$33968$lcssa = $$30965$lcssa;$$371035$lcssa = $$341032$lcssa;$$371099$lcssa = $$341096$lcssa;
         }
         $516 = $$33968$lcssa >>> $$lcssa1188;
         $517 = $516 & 127;
         $518 = (($517) + 11)|0;
         $519 = $516 >>> 7;
         $520 = (-7 - ($$lcssa1188))|0;
         $521 = (($520) + ($$33$lcssa))|0;
         $$0903 = 0;$$34 = $521;$$34969 = $519;$$381036 = $$371035$lcssa;$$381100 = $$371099$lcssa;$$5912 = $518;
        }
        }
        $522 = (($$5912) + ($$promoted))|0;
        $523 = ($522>>>0)>($441>>>0);
        if ($523) {
         label = 206;
         break;
        }
        $524 = $$0903&65535;
        $$69131703 = $$5912;$527 = $$promoted;
        while(1) {
         $525 = (($$69131703) + -1)|0;
         $526 = (($527) + 1)|0;
         $528 = (((($5)) + 112|0) + ($527<<1)|0);
         HEAP16[$528>>1] = $524;
         $529 = ($525|0)==(0);
         if ($529) {
          break;
         } else {
          $$69131703 = $525;$527 = $526;
         }
        }
        HEAP32[$32>>2] = $522;
        $$35 = $$34;$$35970 = $$34969;$$391037 = $$381036;$$391101 = $$381100;$530 = $522;
       }
       $531 = ($530>>>0)<($441>>>0);
       if ($531) {
        $$291708 = $$35;$$299641707 = $$35970;$$3310311706 = $$391037;$$3310951705 = $$391101;$$promoted = $530;
       } else {
        $$29$lcssa = $$35;$$29964$lcssa = $$35970;$$331031$lcssa = $$391037;$$331095$lcssa = $$391101;
        break L191;
       }
      }
      if ((label|0) == 193) {
       label = 0;
       HEAP32[$47>>2] = 27704;
       HEAP32[$5>>2] = 29;
       $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $478;$$59994 = $477;$$63 = $$351033$lcssa;$$631125 = $$351097$lcssa;$$8 = $$1;
       break L170;
      }
      else if ((label|0) == 206) {
       label = 0;
       HEAP32[$47>>2] = 27704;
       HEAP32[$5>>2] = 29;
       $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $$34;$$59994 = $$34969;$$63 = $$381036;$$631125 = $$381100;$$8 = $$1;
       break L170;
      }
     } else {
      $$29$lcssa = $$28;$$29964$lcssa = $$28963;$$331031$lcssa = $$321030;$$331095$lcssa = $$321094;
     }
    } while(0);
    $532 = HEAP16[$53>>1]|0;
    $533 = ($532<<16>>16)==(0);
    if ($533) {
     HEAP32[$47>>2] = 27730;
     HEAP32[$5>>2] = 29;
     $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $$29$lcssa;$$59994 = $$29964$lcssa;$$63 = $$331031$lcssa;$$631125 = $$331095$lcssa;$$8 = $$1;
     break;
    }
    HEAP32[$50>>2] = $49;
    HEAP32[$42>>2] = $49;
    HEAP32[$43>>2] = 9;
    $534 = (_inflate_table(1,$51,$439,$50,$43,$52)|0);
    $535 = ($534|0)==(0);
    if (!($535)) {
     HEAP32[$47>>2] = 27767;
     HEAP32[$5>>2] = 29;
     $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $$29$lcssa;$$59994 = $$29964$lcssa;$$63 = $$331031$lcssa;$$631125 = $$331095$lcssa;$$8 = $534;
     break;
    }
    $536 = HEAP32[$50>>2]|0;
    HEAP32[$37>>2] = $536;
    HEAP32[$38>>2] = 6;
    $537 = HEAP32[$34>>2]|0;
    $538 = (((($5)) + 112|0) + ($537<<1)|0);
    $539 = HEAP32[$35>>2]|0;
    $540 = (_inflate_table(2,$538,$539,$50,$38,$52)|0);
    $541 = ($540|0)==(0);
    if ($541) {
     HEAP32[$5>>2] = 19;
     if ($48) {
      $$09962286$ph = $$0996;$$60$ph = $$29$lcssa;$$60995$ph = $$29964$lcssa;$$64$ph = $$331031$lcssa;$$641126$ph = $$331095$lcssa;$$9$ph = 0;
      label = 308;
      break L17;
     } else {
      $$2 = 0;$$37 = $$29$lcssa;$$37972 = $$29964$lcssa;$$411039 = $$331031$lcssa;$$411103 = $$331095$lcssa;
      label = 218;
      break;
     }
    } else {
     HEAP32[$47>>2] = 27795;
     HEAP32[$5>>2] = 29;
     $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $$29$lcssa;$$59994 = $$29964$lcssa;$$63 = $$331031$lcssa;$$631125 = $$331095$lcssa;$$8 = $540;
     break;
    }
   }
  } while(0);
  if ((label|0) == 59) {
   label = 0;
   $169 = HEAP32[$39>>2]|0;
   $170 = ($169|0)==(0|0);
   if (!($170)) {
    $171 = ((($169)) + 12|0);
    $172 = $$6941$lcssa >>> 8;
    $173 = ((($169)) + 8|0);
    $174 = $$6941$lcssa & 255;
    HEAP32[$173>>2] = $174;
    HEAP32[$171>>2] = $172;
   }
   $175 = HEAP32[$26>>2]|0;
   $176 = $175 & 512;
   $177 = ($176|0)==(0);
   if (!($177)) {
    $178 = $$6941$lcssa&255;
    HEAP8[$2>>0] = $178;
    $179 = $$6941$lcssa >>> 8;
    $180 = $179&255;
    HEAP8[$57>>0] = $180;
    $181 = HEAP32[$40>>2]|0;
    $182 = (_crc32($181,$2,2)|0);
    HEAP32[$40>>2] = $182;
   }
   HEAP32[$5>>2] = 4;
   $$71005 = $$61004$lcssa;$$71069 = $$61068$lcssa;$$7931 = 0;$$7942 = 0;
   label = 64;
  }
  else if ((label|0) == 218) {
   label = 0;
   HEAP32[$5>>2] = 20;
   $$3 = $$2;$$38 = $$37;$$38973 = $$37972;$$421040 = $$411039;$$421104 = $$411103;
   label = 219;
  }
  do {
   if ((label|0) == 64) {
    label = 0;
    $183 = HEAP32[$26>>2]|0;
    $184 = $183 & 1024;
    $185 = ($184|0)==(0);
    if ($185) {
     $206 = HEAP32[$39>>2]|0;
     $207 = ($206|0)==(0|0);
     if ($207) {
      $$91007 = $$71005;$$91071 = $$71069;$$9933 = $$7931;$$9944 = $$7942;
     } else {
      $208 = ((($206)) + 16|0);
      HEAP32[$208>>2] = 0;
      $$91007 = $$71005;$$91071 = $$71069;$$9933 = $$7931;$$9944 = $$7942;
     }
    } else {
     $186 = ($$7931>>>0)<(16);
     if ($186) {
      $$810061887 = $$71005;$$810701886 = $$71069;$$89321889 = $$7931;$$89431888 = $$7942;
      while(1) {
       $187 = ($$810061887|0)==(0);
       if ($187) {
        $$09962286 = $$0996;$$5923 = $$0918;$$60 = $$89321889;$$60995 = $$89431888;$$64 = 0;$$641126 = $$810701886;$$9 = $$0;
        break L17;
       }
       $188 = (($$810061887) + -1)|0;
       $189 = ((($$810701886)) + 1|0);
       $190 = HEAP8[$$810701886>>0]|0;
       $191 = $190&255;
       $192 = $191 << $$89321889;
       $193 = (($192) + ($$89431888))|0;
       $194 = (($$89321889) + 8)|0;
       $195 = ($194>>>0)<(16);
       if ($195) {
        $$810061887 = $188;$$810701886 = $189;$$89321889 = $194;$$89431888 = $193;
       } else {
        $$81006$lcssa = $188;$$81070$lcssa = $189;$$8943$lcssa = $193;
        break;
       }
      }
     } else {
      $$81006$lcssa = $$71005;$$81070$lcssa = $$71069;$$8943$lcssa = $$7942;
     }
     HEAP32[$31>>2] = $$8943$lcssa;
     $196 = HEAP32[$39>>2]|0;
     $197 = ($196|0)==(0|0);
     if (!($197)) {
      $198 = ((($196)) + 20|0);
      HEAP32[$198>>2] = $$8943$lcssa;
     }
     $199 = $183 & 512;
     $200 = ($199|0)==(0);
     if ($200) {
      $$91007 = $$81006$lcssa;$$91071 = $$81070$lcssa;$$9933 = 0;$$9944 = 0;
     } else {
      $201 = $$8943$lcssa&255;
      HEAP8[$2>>0] = $201;
      $202 = $$8943$lcssa >>> 8;
      $203 = $202&255;
      HEAP8[$57>>0] = $203;
      $204 = HEAP32[$40>>2]|0;
      $205 = (_crc32($204,$2,2)|0);
      HEAP32[$40>>2] = $205;
      $$91007 = $$81006$lcssa;$$91071 = $$81070$lcssa;$$9933 = 0;$$9944 = 0;
     }
    }
    HEAP32[$5>>2] = 5;
    $$101008 = $$91007;$$101072 = $$91071;$$10934 = $$9933;$$10945 = $$9944;
    label = 76;
   }
   else if ((label|0) == 219) {
    label = 0;
    $542 = ($$421040>>>0)>(5);
    $543 = ($$0996>>>0)>(257);
    $or$cond6 = $543 & $542;
    if ($or$cond6) {
     HEAP32[$7>>2] = $$01059;
     HEAP32[$17>>2] = $$0996;
     HEAP32[$0>>2] = $$421104;
     HEAP32[$19>>2] = $$421040;
     HEAP32[$21>>2] = $$38973;
     HEAP32[$23>>2] = $$38;
     _inflate_fast($0,$$0918);
     $544 = HEAP32[$7>>2]|0;
     $545 = HEAP32[$17>>2]|0;
     $546 = HEAP32[$0>>2]|0;
     $547 = HEAP32[$19>>2]|0;
     $548 = HEAP32[$21>>2]|0;
     $549 = HEAP32[$23>>2]|0;
     $550 = HEAP32[$5>>2]|0;
     $551 = ($550|0)==(11);
     if (!($551)) {
      $$1997 = $545;$$21061 = $544;$$4922 = $$0918;$$59 = $549;$$59994 = $548;$$63 = $547;$$631125 = $546;$$8 = $$3;
      break;
     }
     HEAP32[$44>>2] = -1;
     $$1997 = $545;$$21061 = $544;$$4922 = $$0918;$$59 = $549;$$59994 = $548;$$63 = $547;$$631125 = $546;$$8 = $$3;
     break;
    }
    HEAP32[$44>>2] = 0;
    $552 = HEAP32[$42>>2]|0;
    $553 = HEAP32[$43>>2]|0;
    $554 = 1 << $553;
    $555 = (($554) + -1)|0;
    $556 = $555 & $$38973;
    $$sroa$1874$0$$sroa_idx771721 = (((($552) + ($556<<2)|0)) + 1|0);
    $$sroa$1874$0$copyload781722 = HEAP8[$$sroa$1874$0$$sroa_idx771721>>0]|0;
    $557 = $$sroa$1874$0$copyload781722&255;
    $558 = ($$38>>>0)<($557>>>0);
    if ($558) {
     $$391728 = $$38;$$399741727 = $$38973;$$4310411726 = $$421040;$$4311051725 = $$421104;
     while(1) {
      $559 = ($$4310411726|0)==(0);
      if ($559) {
       $$09962286 = $$0996;$$5923 = $$0918;$$60 = $$391728;$$60995 = $$399741727;$$64 = 0;$$641126 = $$4311051725;$$9 = $$3;
       break L17;
      }
      $560 = (($$4310411726) + -1)|0;
      $561 = ((($$4311051725)) + 1|0);
      $562 = HEAP8[$$4311051725>>0]|0;
      $563 = $562&255;
      $564 = $563 << $$391728;
      $565 = (($564) + ($$399741727))|0;
      $566 = (($$391728) + 8)|0;
      $567 = $555 & $565;
      $$sroa$1874$0$$sroa_idx77 = (((($552) + ($567<<2)|0)) + 1|0);
      $$sroa$1874$0$copyload78 = HEAP8[$$sroa$1874$0$$sroa_idx77>>0]|0;
      $568 = $$sroa$1874$0$copyload78&255;
      $569 = ($566>>>0)<($568>>>0);
      if ($569) {
       $$391728 = $566;$$399741727 = $565;$$4310411726 = $560;$$4311051725 = $561;
      } else {
       $$39$lcssa = $566;$$39974$lcssa = $565;$$431041$lcssa = $560;$$431105$lcssa = $561;$$lcssa1254 = $568;$$pn2404 = $567;$$sroa$1874$0$copyload78$lcssa = $$sroa$1874$0$copyload78;
       break;
      }
     }
    } else {
     $$39$lcssa = $$38;$$39974$lcssa = $$38973;$$431041$lcssa = $$421040;$$431105$lcssa = $$421104;$$lcssa1254 = $557;$$pn2404 = $556;$$sroa$1874$0$copyload78$lcssa = $$sroa$1874$0$copyload781722;
    }
    $$sroa$42$0$copyload109$lcssa$in = (((($552) + ($$pn2404<<2)|0)) + 2|0);
    $$sroa$057$0$copyload69$lcssa$in = (($552) + ($$pn2404<<2)|0);
    $$sroa$42$0$copyload109$lcssa = HEAP16[$$sroa$42$0$copyload109$lcssa$in>>1]|0;
    $$sroa$057$0$copyload69$lcssa = HEAP8[$$sroa$057$0$copyload69$lcssa$in>>0]|0;
    $570 = $$sroa$057$0$copyload69$lcssa&255;
    $571 = ($$sroa$057$0$copyload69$lcssa<<24>>24)!=(0);
    $572 = $570 & 240;
    $573 = ($572|0)==(0);
    $or$cond1132 = $571 & $573;
    if ($or$cond1132) {
     $574 = $$sroa$42$0$copyload109$lcssa&65535;
     $575 = (($$lcssa1254) + ($570))|0;
     $576 = 1 << $575;
     $577 = (($576) + -1)|0;
     $578 = $$39974$lcssa & $577;
     $579 = $578 >>> $$lcssa1254;
     $580 = (($579) + ($574))|0;
     $$sroa$1874$0$$sroa_idx791745 = (((($552) + ($580<<2)|0)) + 1|0);
     $$sroa$1874$0$copyload801746 = HEAP8[$$sroa$1874$0$$sroa_idx791745>>0]|0;
     $581 = $$sroa$1874$0$copyload801746&255;
     $582 = (($$lcssa1254) + ($581))|0;
     $583 = ($582>>>0)>($$39$lcssa>>>0);
     if ($583) {
      $$401750 = $$39$lcssa;$$409751749 = $$39974$lcssa;$$4410421748 = $$431041$lcssa;$$4411061747 = $$431105$lcssa;
      while(1) {
       $584 = ($$4410421748|0)==(0);
       if ($584) {
        $$09962286 = $$0996;$$5923 = $$0918;$$60 = $$401750;$$60995 = $$409751749;$$64 = 0;$$641126 = $$4411061747;$$9 = $$3;
        break L17;
       }
       $585 = (($$4410421748) + -1)|0;
       $586 = ((($$4411061747)) + 1|0);
       $587 = HEAP8[$$4411061747>>0]|0;
       $588 = $587&255;
       $589 = $588 << $$401750;
       $590 = (($589) + ($$409751749))|0;
       $591 = (($$401750) + 8)|0;
       $592 = $590 & $577;
       $593 = $592 >>> $$lcssa1254;
       $594 = (($593) + ($574))|0;
       $$sroa$1874$0$$sroa_idx79 = (((($552) + ($594<<2)|0)) + 1|0);
       $$sroa$1874$0$copyload80 = HEAP8[$$sroa$1874$0$$sroa_idx79>>0]|0;
       $595 = $$sroa$1874$0$copyload80&255;
       $596 = (($$lcssa1254) + ($595))|0;
       $597 = ($596>>>0)>($591>>>0);
       if ($597) {
        $$401750 = $591;$$409751749 = $590;$$4410421748 = $585;$$4411061747 = $586;
       } else {
        $$40$lcssa = $591;$$40975$lcssa = $590;$$441042$lcssa = $585;$$441106$lcssa = $586;$$lcssa1266 = $594;$$sroa$1874$0$copyload80$lcssa = $$sroa$1874$0$copyload80;
        break;
       }
      }
     } else {
      $$40$lcssa = $$39$lcssa;$$40975$lcssa = $$39974$lcssa;$$441042$lcssa = $$431041$lcssa;$$441106$lcssa = $$431105$lcssa;$$lcssa1266 = $580;$$sroa$1874$0$copyload80$lcssa = $$sroa$1874$0$copyload801746;
     }
     $$sroa$42$0$$sroa_idx110 = (((($552) + ($$lcssa1266<<2)|0)) + 2|0);
     $$sroa$42$0$copyload111 = HEAP16[$$sroa$42$0$$sroa_idx110>>1]|0;
     $$sroa$057$0$$sroa_idx70 = (($552) + ($$lcssa1266<<2)|0);
     $$sroa$057$0$copyload71 = HEAP8[$$sroa$057$0$$sroa_idx70>>0]|0;
     $598 = $$40975$lcssa >>> $$lcssa1254;
     $599 = (($$40$lcssa) - ($$lcssa1254))|0;
     HEAP32[$44>>2] = $$lcssa1254;
     $$pre2399 = $$sroa$057$0$copyload71&255;
     $$41 = $599;$$41976 = $598;$$451043 = $$441042$lcssa;$$451107 = $$441106$lcssa;$$pre$phiZ2D = $$pre2399;$$sroa$057$0 = $$sroa$057$0$copyload71;$$sroa$1874$0 = $$sroa$1874$0$copyload80$lcssa;$$sroa$42$0 = $$sroa$42$0$copyload111;$604 = $$lcssa1254;
    } else {
     $$41 = $$39$lcssa;$$41976 = $$39974$lcssa;$$451043 = $$431041$lcssa;$$451107 = $$431105$lcssa;$$pre$phiZ2D = $570;$$sroa$057$0 = $$sroa$057$0$copyload69$lcssa;$$sroa$1874$0 = $$sroa$1874$0$copyload78$lcssa;$$sroa$42$0 = $$sroa$42$0$copyload109$lcssa;$604 = 0;
    }
    $600 = $$sroa$1874$0&255;
    $601 = $$41976 >>> $600;
    $602 = (($$41) - ($600))|0;
    $603 = (($604) + ($600))|0;
    HEAP32[$44>>2] = $603;
    $605 = $$sroa$42$0&65535;
    HEAP32[$31>>2] = $605;
    $606 = ($$sroa$057$0<<24>>24)==(0);
    if ($606) {
     HEAP32[$5>>2] = 25;
     $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $602;$$59994 = $601;$$63 = $$451043;$$631125 = $$451107;$$8 = $$3;
     break;
    }
    $607 = $$pre$phiZ2D & 32;
    $608 = ($607|0)==(0);
    if (!($608)) {
     HEAP32[$44>>2] = -1;
     HEAP32[$5>>2] = 11;
     $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $602;$$59994 = $601;$$63 = $$451043;$$631125 = $$451107;$$8 = $$3;
     break;
    }
    $609 = $$pre$phiZ2D & 64;
    $610 = ($609|0)==(0);
    if ($610) {
     $611 = $$pre$phiZ2D & 15;
     HEAP32[$36>>2] = $611;
     HEAP32[$5>>2] = 21;
     $$4 = $$3;$$42 = $602;$$42977 = $601;$$461044 = $$451043;$$461108 = $$451107;$612 = $611;
     label = 239;
     break;
    } else {
     HEAP32[$47>>2] = 28764;
     HEAP32[$5>>2] = 29;
     $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $602;$$59994 = $601;$$63 = $$451043;$$631125 = $$451107;$$8 = $$3;
     break;
    }
   }
  } while(0);
  if ((label|0) == 76) {
   label = 0;
   $209 = HEAP32[$26>>2]|0;
   $210 = $209 & 1024;
   $211 = ($210|0)==(0);
   if ($211) {
    $$121010 = $$101008;$$121074 = $$101072;
   } else {
    $212 = HEAP32[$31>>2]|0;
    $213 = ($212>>>0)>($$101008>>>0);
    $spec$select = $213 ? $$101008 : $212;
    $214 = ($spec$select|0)==(0);
    if ($214) {
     $$111009 = $$101008;$$111073 = $$101072;$239 = $212;
    } else {
     $215 = HEAP32[$39>>2]|0;
     $216 = ($215|0)==(0|0);
     if ($216) {
      $231 = $209;
     } else {
      $217 = ((($215)) + 16|0);
      $218 = HEAP32[$217>>2]|0;
      $219 = ($218|0)==(0|0);
      if ($219) {
       $231 = $209;
      } else {
       $220 = ((($215)) + 20|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = (($221) - ($212))|0;
       $223 = (($218) + ($222)|0);
       $224 = (($222) + ($spec$select))|0;
       $225 = ((($215)) + 24|0);
       $226 = HEAP32[$225>>2]|0;
       $227 = ($224>>>0)>($226>>>0);
       $228 = (($226) - ($222))|0;
       $229 = $227 ? $228 : $spec$select;
       _memcpy(($223|0),($$101072|0),($229|0))|0;
       $$pre2398 = HEAP32[$26>>2]|0;
       $231 = $$pre2398;
      }
     }
     $230 = $231 & 512;
     $232 = ($230|0)==(0);
     if (!($232)) {
      $233 = HEAP32[$40>>2]|0;
      $234 = (_crc32($233,$$101072,$spec$select)|0);
      HEAP32[$40>>2] = $234;
     }
     $235 = (($$101008) - ($spec$select))|0;
     $236 = (($$101072) + ($spec$select)|0);
     $237 = HEAP32[$31>>2]|0;
     $238 = (($237) - ($spec$select))|0;
     HEAP32[$31>>2] = $238;
     $$111009 = $235;$$111073 = $236;$239 = $238;
    }
    $240 = ($239|0)==(0);
    if ($240) {
     $$121010 = $$111009;$$121074 = $$111073;
    } else {
     $$09962286$ph = $$0996;$$60$ph = $$10934;$$60995$ph = $$10945;$$64$ph = $$111009;$$641126$ph = $$111073;$$9$ph = $$0;
     label = 308;
     break;
    }
   }
   HEAP32[$31>>2] = 0;
   HEAP32[$5>>2] = 6;
   $$11 = $$10934;$$11946 = $$10945;$$131011 = $$121010;$$131075 = $$121074;
   label = 86;
  }
  else if ((label|0) == 239) {
   label = 0;
   $613 = ($612|0)==(0);
   if ($613) {
    $$pre2392 = HEAP32[$31>>2]|0;
    $$44 = $$42;$$44979 = $$42977;$$481046 = $$461044;$$481110 = $$461108;$633 = $$pre2392;
   } else {
    $614 = ($$42>>>0)<($612>>>0);
    if ($614) {
     $$431763 = $$42;$$439781762 = $$42977;$$4710451761 = $$461044;$$4711091760 = $$461108;
     while(1) {
      $615 = ($$4710451761|0)==(0);
      if ($615) {
       $$09962286 = $$0996;$$5923 = $$0918;$$60 = $$431763;$$60995 = $$439781762;$$64 = 0;$$641126 = $$4711091760;$$9 = $$4;
       break L17;
      }
      $616 = (($$4710451761) + -1)|0;
      $617 = ((($$4711091760)) + 1|0);
      $618 = HEAP8[$$4711091760>>0]|0;
      $619 = $618&255;
      $620 = $619 << $$431763;
      $621 = (($620) + ($$439781762))|0;
      $622 = (($$431763) + 8)|0;
      $623 = ($622>>>0)<($612>>>0);
      if ($623) {
       $$431763 = $622;$$439781762 = $621;$$4710451761 = $616;$$4711091760 = $617;
      } else {
       $$43$lcssa = $622;$$43978$lcssa = $621;$$471045$lcssa = $616;$$471109$lcssa = $617;
       break;
      }
     }
    } else {
     $$43$lcssa = $$42;$$43978$lcssa = $$42977;$$471045$lcssa = $$461044;$$471109$lcssa = $$461108;
    }
    $624 = 1 << $612;
    $625 = (($624) + -1)|0;
    $626 = $$43978$lcssa & $625;
    $627 = HEAP32[$31>>2]|0;
    $628 = (($627) + ($626))|0;
    HEAP32[$31>>2] = $628;
    $629 = $$43978$lcssa >>> $612;
    $630 = (($$43$lcssa) - ($612))|0;
    $631 = HEAP32[$44>>2]|0;
    $632 = (($631) + ($612))|0;
    HEAP32[$44>>2] = $632;
    $$44 = $630;$$44979 = $629;$$481046 = $$471045$lcssa;$$481110 = $$471109$lcssa;$633 = $628;
   }
   HEAP32[$45>>2] = $633;
   HEAP32[$5>>2] = 22;
   $$45 = $$44;$$45980 = $$44979;$$491047 = $$481046;$$491111 = $$481110;$$5 = $$4;
   label = 247;
  }
  do {
   if ((label|0) == 86) {
    label = 0;
    $241 = HEAP32[$26>>2]|0;
    $242 = $241 & 2048;
    $243 = ($242|0)==(0);
    if ($243) {
     $268 = HEAP32[$39>>2]|0;
     $269 = ($268|0)==(0|0);
     if ($269) {
      $$141012 = $$131011;$$141076 = $$131075;
     } else {
      $270 = ((($268)) + 28|0);
      HEAP32[$270>>2] = 0;
      $$141012 = $$131011;$$141076 = $$131075;
     }
    } else {
     $244 = ($$131011|0)==(0);
     if ($244) {
      $$09962286$ph = $$0996;$$60$ph = $$11;$$60995$ph = $$11946;$$64$ph = 0;$$641126$ph = $$131075;$$9$ph = $$0;
      label = 308;
      break L17;
     }
     $$1908 = 0;
     while(1) {
      $245 = (($$1908) + 1)|0;
      $246 = (($$131075) + ($$1908)|0);
      $247 = HEAP8[$246>>0]|0;
      $248 = HEAP32[$39>>2]|0;
      $249 = ($248|0)==(0|0);
      if (!($249)) {
       $250 = ((($248)) + 28|0);
       $251 = HEAP32[$250>>2]|0;
       $252 = ($251|0)==(0|0);
       if (!($252)) {
        $253 = HEAP32[$31>>2]|0;
        $254 = ((($248)) + 32|0);
        $255 = HEAP32[$254>>2]|0;
        $256 = ($253>>>0)<($255>>>0);
        if ($256) {
         $257 = (($251) + ($253)|0);
         $258 = (($253) + 1)|0;
         HEAP32[$31>>2] = $258;
         HEAP8[$257>>0] = $247;
        }
       }
      }
      $259 = ($247<<24>>24)!=(0);
      $260 = ($$131011>>>0)>($245>>>0);
      $or$cond1128 = $259 & $260;
      if ($or$cond1128) {
       $$1908 = $245;
      } else {
       break;
      }
     }
     $261 = HEAP32[$26>>2]|0;
     $262 = $261 & 512;
     $263 = ($262|0)==(0);
     if (!($263)) {
      $264 = HEAP32[$40>>2]|0;
      $265 = (_crc32($264,$$131075,$245)|0);
      HEAP32[$40>>2] = $265;
     }
     $266 = (($$131011) - ($245))|0;
     $267 = (($$131075) + ($245)|0);
     if ($259) {
      $$09962286$ph = $$0996;$$60$ph = $$11;$$60995$ph = $$11946;$$64$ph = $266;$$641126$ph = $267;$$9$ph = $$0;
      label = 308;
      break L17;
     } else {
      $$141012 = $266;$$141076 = $267;
     }
    }
    HEAP32[$31>>2] = 0;
    HEAP32[$5>>2] = 7;
    $$12 = $$11;$$12947 = $$11946;$$151013 = $$141012;$$151077 = $$141076;
    label = 100;
   }
   else if ((label|0) == 247) {
    label = 0;
    $634 = HEAP32[$37>>2]|0;
    $635 = HEAP32[$38>>2]|0;
    $636 = 1 << $635;
    $637 = (($636) + -1)|0;
    $638 = $637 & $$45980;
    $$sroa$1874$0$$sroa_idx751773 = (((($634) + ($638<<2)|0)) + 1|0);
    $$sroa$1874$0$copyload761774 = HEAP8[$$sroa$1874$0$$sroa_idx751773>>0]|0;
    $639 = $$sroa$1874$0$copyload761774&255;
    $640 = ($$45>>>0)<($639>>>0);
    if ($640) {
     $$461780 = $$45;$$469811779 = $$45980;$$5010481778 = $$491047;$$5011121777 = $$491111;
     while(1) {
      $641 = ($$5010481778|0)==(0);
      if ($641) {
       $$09962286 = $$0996;$$5923 = $$0918;$$60 = $$461780;$$60995 = $$469811779;$$64 = 0;$$641126 = $$5011121777;$$9 = $$5;
       break L17;
      }
      $642 = (($$5010481778) + -1)|0;
      $643 = ((($$5011121777)) + 1|0);
      $644 = HEAP8[$$5011121777>>0]|0;
      $645 = $644&255;
      $646 = $645 << $$461780;
      $647 = (($646) + ($$469811779))|0;
      $648 = (($$461780) + 8)|0;
      $649 = $637 & $647;
      $$sroa$1874$0$$sroa_idx75 = (((($634) + ($649<<2)|0)) + 1|0);
      $$sroa$1874$0$copyload76 = HEAP8[$$sroa$1874$0$$sroa_idx75>>0]|0;
      $650 = $$sroa$1874$0$copyload76&255;
      $651 = ($648>>>0)<($650>>>0);
      if ($651) {
       $$461780 = $648;$$469811779 = $647;$$5010481778 = $642;$$5011121777 = $643;
      } else {
       $$46$lcssa = $648;$$46981$lcssa = $647;$$501048$lcssa = $642;$$501112$lcssa = $643;$$lcssa1276 = $650;$$pn2402 = $649;$$sroa$1874$0$copyload76$lcssa = $$sroa$1874$0$copyload76;
       break;
      }
     }
    } else {
     $$46$lcssa = $$45;$$46981$lcssa = $$45980;$$501048$lcssa = $$491047;$$501112$lcssa = $$491111;$$lcssa1276 = $639;$$pn2402 = $638;$$sroa$1874$0$copyload76$lcssa = $$sroa$1874$0$copyload761774;
    }
    $$sroa$42$0$copyload107$lcssa$in = (((($634) + ($$pn2402<<2)|0)) + 2|0);
    $$sroa$057$0$copyload67$lcssa$in = (($634) + ($$pn2402<<2)|0);
    $$sroa$42$0$copyload107$lcssa = HEAP16[$$sroa$42$0$copyload107$lcssa$in>>1]|0;
    $$sroa$057$0$copyload67$lcssa = HEAP8[$$sroa$057$0$copyload67$lcssa$in>>0]|0;
    $652 = $$sroa$057$0$copyload67$lcssa&255;
    $653 = $652 & 240;
    $654 = ($653|0)==(0);
    if ($654) {
     $655 = $$sroa$42$0$copyload107$lcssa&65535;
     $656 = (($$lcssa1276) + ($652))|0;
     $657 = 1 << $656;
     $658 = (($657) + -1)|0;
     $659 = $$46981$lcssa & $658;
     $660 = $659 >>> $$lcssa1276;
     $661 = (($660) + ($655))|0;
     $$sroa$1874$0$$sroa_idx1797 = (((($634) + ($661<<2)|0)) + 1|0);
     $$sroa$1874$0$copyload1798 = HEAP8[$$sroa$1874$0$$sroa_idx1797>>0]|0;
     $662 = $$sroa$1874$0$copyload1798&255;
     $663 = (($$lcssa1276) + ($662))|0;
     $664 = ($663>>>0)>($$46$lcssa>>>0);
     if ($664) {
      $$471802 = $$46$lcssa;$$479821801 = $$46981$lcssa;$$5110491800 = $$501048$lcssa;$$5111131799 = $$501112$lcssa;
      while(1) {
       $665 = ($$5110491800|0)==(0);
       if ($665) {
        $$09962286 = $$0996;$$5923 = $$0918;$$60 = $$471802;$$60995 = $$479821801;$$64 = 0;$$641126 = $$5111131799;$$9 = $$5;
        break L17;
       }
       $666 = (($$5110491800) + -1)|0;
       $667 = ((($$5111131799)) + 1|0);
       $668 = HEAP8[$$5111131799>>0]|0;
       $669 = $668&255;
       $670 = $669 << $$471802;
       $671 = (($670) + ($$479821801))|0;
       $672 = (($$471802) + 8)|0;
       $673 = $671 & $658;
       $674 = $673 >>> $$lcssa1276;
       $675 = (($674) + ($655))|0;
       $$sroa$1874$0$$sroa_idx = (((($634) + ($675<<2)|0)) + 1|0);
       $$sroa$1874$0$copyload = HEAP8[$$sroa$1874$0$$sroa_idx>>0]|0;
       $676 = $$sroa$1874$0$copyload&255;
       $677 = (($$lcssa1276) + ($676))|0;
       $678 = ($677>>>0)>($672>>>0);
       if ($678) {
        $$471802 = $672;$$479821801 = $671;$$5110491800 = $666;$$5111131799 = $667;
       } else {
        $$47$lcssa = $672;$$47982$lcssa = $671;$$511049$lcssa = $666;$$511113$lcssa = $667;$$lcssa1288 = $675;$$sroa$1874$0$copyload$lcssa = $$sroa$1874$0$copyload;
        break;
       }
      }
     } else {
      $$47$lcssa = $$46$lcssa;$$47982$lcssa = $$46981$lcssa;$$511049$lcssa = $$501048$lcssa;$$511113$lcssa = $$501112$lcssa;$$lcssa1288 = $661;$$sroa$1874$0$copyload$lcssa = $$sroa$1874$0$copyload1798;
     }
     $$sroa$42$0$$sroa_idx104 = (((($634) + ($$lcssa1288<<2)|0)) + 2|0);
     $$sroa$42$0$copyload = HEAP16[$$sroa$42$0$$sroa_idx104>>1]|0;
     $$sroa$057$0$$sroa_idx = (($634) + ($$lcssa1288<<2)|0);
     $$sroa$057$0$copyload = HEAP8[$$sroa$057$0$$sroa_idx>>0]|0;
     $679 = $$47982$lcssa >>> $$lcssa1276;
     $680 = (($$47$lcssa) - ($$lcssa1276))|0;
     $681 = HEAP32[$44>>2]|0;
     $682 = (($681) + ($$lcssa1276))|0;
     HEAP32[$44>>2] = $682;
     $$pre2400 = $$sroa$057$0$copyload&255;
     $$48 = $680;$$48983 = $679;$$521050 = $$511049$lcssa;$$521114 = $$511113$lcssa;$$pre$phi2401Z2D = $$pre2400;$$sroa$1874$1 = $$sroa$1874$0$copyload$lcssa;$$sroa$42$1 = $$sroa$42$0$copyload;$687 = $682;
    } else {
     $$pre2394 = HEAP32[$44>>2]|0;
     $$48 = $$46$lcssa;$$48983 = $$46981$lcssa;$$521050 = $$501048$lcssa;$$521114 = $$501112$lcssa;$$pre$phi2401Z2D = $652;$$sroa$1874$1 = $$sroa$1874$0$copyload76$lcssa;$$sroa$42$1 = $$sroa$42$0$copyload107$lcssa;$687 = $$pre2394;
    }
    $683 = $$sroa$1874$1&255;
    $684 = $$48983 >>> $683;
    $685 = (($$48) - ($683))|0;
    $686 = (($687) + ($683))|0;
    HEAP32[$44>>2] = $686;
    $688 = $$pre$phi2401Z2D & 64;
    $689 = ($688|0)==(0);
    if ($689) {
     $690 = $$sroa$42$1&65535;
     HEAP32[$46>>2] = $690;
     $691 = $$pre$phi2401Z2D & 15;
     HEAP32[$36>>2] = $691;
     HEAP32[$5>>2] = 23;
     $$49 = $685;$$49984 = $684;$$531051 = $$521050;$$531115 = $$521114;$$6 = $$5;$692 = $691;
     label = 261;
     break;
    } else {
     HEAP32[$47>>2] = 28792;
     HEAP32[$5>>2] = 29;
     $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $685;$$59994 = $684;$$63 = $$521050;$$631125 = $$521114;$$8 = $$5;
     break;
    }
   }
  } while(0);
  if ((label|0) == 100) {
   label = 0;
   $271 = HEAP32[$26>>2]|0;
   $272 = $271 & 4096;
   $273 = ($272|0)==(0);
   if ($273) {
    $298 = HEAP32[$39>>2]|0;
    $299 = ($298|0)==(0|0);
    if ($299) {
     $$161014 = $$151013;$$161078 = $$151077;
    } else {
     $300 = ((($298)) + 36|0);
     HEAP32[$300>>2] = 0;
     $$161014 = $$151013;$$161078 = $$151077;
    }
   } else {
    $274 = ($$151013|0)==(0);
    if ($274) {
     $$09962286$ph = $$0996;$$60$ph = $$12;$$60995$ph = $$12947;$$64$ph = 0;$$641126$ph = $$151077;$$9$ph = $$0;
     label = 308;
     break;
    }
    $$2909 = 0;
    while(1) {
     $275 = (($$2909) + 1)|0;
     $276 = (($$151077) + ($$2909)|0);
     $277 = HEAP8[$276>>0]|0;
     $278 = HEAP32[$39>>2]|0;
     $279 = ($278|0)==(0|0);
     if (!($279)) {
      $280 = ((($278)) + 36|0);
      $281 = HEAP32[$280>>2]|0;
      $282 = ($281|0)==(0|0);
      if (!($282)) {
       $283 = HEAP32[$31>>2]|0;
       $284 = ((($278)) + 40|0);
       $285 = HEAP32[$284>>2]|0;
       $286 = ($283>>>0)<($285>>>0);
       if ($286) {
        $287 = (($281) + ($283)|0);
        $288 = (($283) + 1)|0;
        HEAP32[$31>>2] = $288;
        HEAP8[$287>>0] = $277;
       }
      }
     }
     $289 = ($277<<24>>24)!=(0);
     $290 = ($$151013>>>0)>($275>>>0);
     $or$cond1129 = $289 & $290;
     if ($or$cond1129) {
      $$2909 = $275;
     } else {
      break;
     }
    }
    $291 = HEAP32[$26>>2]|0;
    $292 = $291 & 512;
    $293 = ($292|0)==(0);
    if (!($293)) {
     $294 = HEAP32[$40>>2]|0;
     $295 = (_crc32($294,$$151077,$275)|0);
     HEAP32[$40>>2] = $295;
    }
    $296 = (($$151013) - ($275))|0;
    $297 = (($$151077) + ($275)|0);
    if ($289) {
     $$09962286$ph = $$0996;$$60$ph = $$12;$$60995$ph = $$12947;$$64$ph = $296;$$641126$ph = $297;$$9$ph = $$0;
     label = 308;
     break;
    } else {
     $$161014 = $296;$$161078 = $297;
    }
   }
   HEAP32[$5>>2] = 8;
   $$13 = $$12;$$13948 = $$12947;$$171015 = $$161014;$$171079 = $$161078;
   label = 114;
  }
  else if ((label|0) == 261) {
   label = 0;
   $693 = ($692|0)==(0);
   if ($693) {
    $$51 = $$49;$$51986 = $$49984;$$551053 = $$531051;$$551117 = $$531115;
   } else {
    $694 = ($$49>>>0)<($692>>>0);
    if ($694) {
     $$501815 = $$49;$$509851814 = $$49984;$$5410521813 = $$531051;$$5411161812 = $$531115;
     while(1) {
      $695 = ($$5410521813|0)==(0);
      if ($695) {
       $$09962286 = $$0996;$$5923 = $$0918;$$60 = $$501815;$$60995 = $$509851814;$$64 = 0;$$641126 = $$5411161812;$$9 = $$6;
       break L17;
      }
      $696 = (($$5410521813) + -1)|0;
      $697 = ((($$5411161812)) + 1|0);
      $698 = HEAP8[$$5411161812>>0]|0;
      $699 = $698&255;
      $700 = $699 << $$501815;
      $701 = (($700) + ($$509851814))|0;
      $702 = (($$501815) + 8)|0;
      $703 = ($702>>>0)<($692>>>0);
      if ($703) {
       $$501815 = $702;$$509851814 = $701;$$5410521813 = $696;$$5411161812 = $697;
      } else {
       $$50$lcssa = $702;$$50985$lcssa = $701;$$541052$lcssa = $696;$$541116$lcssa = $697;
       break;
      }
     }
    } else {
     $$50$lcssa = $$49;$$50985$lcssa = $$49984;$$541052$lcssa = $$531051;$$541116$lcssa = $$531115;
    }
    $704 = 1 << $692;
    $705 = (($704) + -1)|0;
    $706 = $$50985$lcssa & $705;
    $707 = HEAP32[$46>>2]|0;
    $708 = (($707) + ($706))|0;
    HEAP32[$46>>2] = $708;
    $709 = $$50985$lcssa >>> $692;
    $710 = (($$50$lcssa) - ($692))|0;
    $711 = HEAP32[$44>>2]|0;
    $712 = (($711) + ($692))|0;
    HEAP32[$44>>2] = $712;
    $$51 = $710;$$51986 = $709;$$551053 = $$541052$lcssa;$$551117 = $$541116$lcssa;
   }
   HEAP32[$5>>2] = 24;
   $$52 = $$51;$$52987 = $$51986;$$561054 = $$551053;$$561118 = $$551117;$$7 = $$6;
   label = 268;
  }
  do {
   if ((label|0) == 114) {
    label = 0;
    $301 = HEAP32[$26>>2]|0;
    $302 = $301 & 512;
    $303 = ($302|0)==(0);
    if ($303) {
     $$15 = $$13;$$15950 = $$13948;$$191017 = $$171015;$$191081 = $$171079;
    } else {
     $304 = ($$13>>>0)<(16);
     if ($304) {
      $$141899 = $$13;$$149491898 = $$13948;$$1810161897 = $$171015;$$1810801896 = $$171079;
      while(1) {
       $305 = ($$1810161897|0)==(0);
       if ($305) {
        $$09962286 = $$0996;$$5923 = $$0918;$$60 = $$141899;$$60995 = $$149491898;$$64 = 0;$$641126 = $$1810801896;$$9 = $$0;
        break L17;
       }
       $306 = (($$1810161897) + -1)|0;
       $307 = ((($$1810801896)) + 1|0);
       $308 = HEAP8[$$1810801896>>0]|0;
       $309 = $308&255;
       $310 = $309 << $$141899;
       $311 = (($310) + ($$149491898))|0;
       $312 = (($$141899) + 8)|0;
       $313 = ($312>>>0)<(16);
       if ($313) {
        $$141899 = $312;$$149491898 = $311;$$1810161897 = $306;$$1810801896 = $307;
       } else {
        $$14$lcssa = $312;$$14949$lcssa = $311;$$181016$lcssa = $306;$$181080$lcssa = $307;
        break;
       }
      }
     } else {
      $$14$lcssa = $$13;$$14949$lcssa = $$13948;$$181016$lcssa = $$171015;$$181080$lcssa = $$171079;
     }
     $314 = HEAP32[$40>>2]|0;
     $315 = $314 & 65535;
     $316 = ($$14949$lcssa|0)==($315|0);
     if ($316) {
      $$15 = 0;$$15950 = 0;$$191017 = $$181016$lcssa;$$191081 = $$181080$lcssa;
     } else {
      HEAP32[$47>>2] = 27575;
      HEAP32[$5>>2] = 29;
      $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $$14$lcssa;$$59994 = $$14949$lcssa;$$63 = $$181016$lcssa;$$631125 = $$181080$lcssa;$$8 = $$0;
      break;
     }
    }
    $317 = HEAP32[$39>>2]|0;
    $318 = ($317|0)==(0|0);
    if (!($318)) {
     $319 = ((($317)) + 48|0);
     $320 = ((($317)) + 44|0);
     $321 = $301 >>> 9;
     $322 = $321 & 1;
     HEAP32[$320>>2] = $322;
     HEAP32[$319>>2] = 1;
    }
    $323 = (_crc32(0,0,0)|0);
    HEAP32[$40>>2] = $323;
    HEAP32[$41>>2] = $323;
    HEAP32[$5>>2] = 11;
    $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $$15;$$59994 = $$15950;$$63 = $$191017;$$631125 = $$191081;$$8 = $$0;
   }
   else if ((label|0) == 268) {
    label = 0;
    $713 = ($$0996|0)==(0);
    if ($713) {
     $$09962286$ph = 0;$$60$ph = $$52;$$60995$ph = $$52987;$$64$ph = $$561054;$$641126$ph = $$561118;$$9$ph = $$7;
     label = 308;
     break L17;
    }
    $714 = (($$0918) - ($$0996))|0;
    $715 = HEAP32[$46>>2]|0;
    $716 = ($715>>>0)>($714>>>0);
    if ($716) {
     $717 = (($715) - ($714))|0;
     $718 = HEAP32[$54>>2]|0;
     $719 = ($717>>>0)>($718>>>0);
     if ($719) {
      $720 = HEAP32[$60>>2]|0;
      $721 = ($720|0)==(0);
      if (!($721)) {
       HEAP32[$47>>2] = 28814;
       HEAP32[$5>>2] = 29;
       $$1997 = $$0996;$$21061 = $$01059;$$4922 = $$0918;$$59 = $$52;$$59994 = $$52987;$$63 = $$561054;$$631125 = $$561118;$$8 = $$7;
       break;
      }
     }
     $722 = HEAP32[$61>>2]|0;
     $723 = ($717>>>0)>($722>>>0);
     if ($723) {
      $724 = (($717) - ($722))|0;
      $725 = HEAP32[$63>>2]|0;
      $726 = (($725) - ($724))|0;
      $$7914 = $724;$$sink3287 = $726;
     } else {
      $727 = (($722) - ($717))|0;
      $$7914 = $717;$$sink3287 = $727;
     }
     $$sink3286 = HEAP32[$62>>2]|0;
     $728 = (($$sink3286) + ($$sink3287)|0);
     $729 = HEAP32[$31>>2]|0;
     $730 = ($$7914>>>0)>($729>>>0);
     $spec$select1133 = $730 ? $729 : $$7914;
     $$1905 = $728;$$8915 = $spec$select1133;$736 = $729;
    } else {
     $731 = (0 - ($715))|0;
     $732 = (($$01059) + ($731)|0);
     $733 = HEAP32[$31>>2]|0;
     $$1905 = $732;$$8915 = $733;$736 = $733;
    }
    $734 = ($$8915>>>0)>($$0996>>>0);
    $spec$select1134 = $734 ? $$0996 : $$8915;
    $735 = (($736) - ($spec$select1134))|0;
    HEAP32[$31>>2] = $735;
    $$10917 = $spec$select1134;$$11060 = $$01059;$$2906 = $$1905;
    while(1) {
     $737 = ((($$2906)) + 1|0);
     $738 = HEAP8[$$2906>>0]|0;
     $739 = ((($$11060)) + 1|0);
     HEAP8[$$11060>>0] = $738;
     $740 = (($$10917) + -1)|0;
     $741 = ($740|0)==(0);
     if ($741) {
      break;
     } else {
      $$10917 = $740;$$11060 = $739;$$2906 = $737;
     }
    }
    $742 = (($$0996) - ($spec$select1134))|0;
    $scevgep2378 = (($$01059) + ($spec$select1134)|0);
    $743 = HEAP32[$31>>2]|0;
    $744 = ($743|0)==(0);
    if ($744) {
     HEAP32[$5>>2] = 20;
     $$1997 = $742;$$21061 = $scevgep2378;$$4922 = $$0918;$$59 = $$52;$$59994 = $$52987;$$63 = $$561054;$$631125 = $$561118;$$8 = $$7;
    } else {
     $$1997 = $742;$$21061 = $scevgep2378;$$4922 = $$0918;$$59 = $$52;$$59994 = $$52987;$$63 = $$561054;$$631125 = $$561118;$$8 = $$7;
    }
   }
  } while(0);
  $$pre = HEAP32[$5>>2]|0;
  $$0 = $$8;$$01059 = $$21061;$$01062 = $$631125;$$0918 = $$4922;$$0924 = $$59;$$0935 = $$59994;$$0996 = $$1997;$$0998 = $$63;$66 = $$pre;
 }
 if ((label|0) == 130) {
  HEAP32[$7>>2] = $$01059;
  HEAP32[$17>>2] = $$0996;
  HEAP32[$0>>2] = $$211083;
  HEAP32[$19>>2] = $$211019;
  HEAP32[$21>>2] = $$17952;
  HEAP32[$23>>2] = $$17;
  $$01127 = 2;
  STACKTOP = sp;return ($$01127|0);
 }
 else if ((label|0) == 140) {
  $354 = $$20955$lcssa >>> 3;
  $355 = (($$20$lcssa) + -3)|0;
  $$09962286 = $$0996;$$5923 = $$0918;$$60 = $355;$$60995 = $354;$$64 = $$241022$lcssa;$$641126 = $$241086$lcssa;$$9 = $$0;
 }
 else if ((label|0) == 143) {
  // unreachable;
 }
 else if ((label|0) == 306) {
  HEAP32[$5>>2] = 28;
  $$09962286 = $$0996;$$5923 = $$2920;$$60 = $$57;$$60995 = $$57992;$$64 = $$61;$$641126 = $$611123;$$9 = 1;
 }
 else if ((label|0) == 308) {
  $$09962286 = $$09962286$ph;$$5923 = $$0918;$$60 = $$60$ph;$$60995 = $$60995$ph;$$64 = $$64$ph;$$641126 = $$641126$ph;$$9 = $$9$ph;
 }
 else if ((label|0) == 330) {
  $$01127 = -4;
  STACKTOP = sp;return ($$01127|0);
 }
 else if ((label|0) == 331) {
  STACKTOP = sp;return ($$01127|0);
 }
 HEAP32[$7>>2] = $$01059;
 HEAP32[$17>>2] = $$09962286;
 HEAP32[$0>>2] = $$641126;
 HEAP32[$19>>2] = $$64;
 HEAP32[$21>>2] = $$60995;
 HEAP32[$23>>2] = $$60;
 $797 = HEAP32[$63>>2]|0;
 $798 = ($797|0)==(0);
 if ($798) {
  $799 = ($$5923|0)==($$09962286|0);
  if (!($799)) {
   $800 = HEAP32[$5>>2]|0;
   $801 = ($800>>>0)<(29);
   if ($801) {
    $802 = ($800>>>0)<(26);
    $803 = ($1|0)!=(4);
    $or$cond8 = $803 | $802;
    if ($or$cond8) {
     label = 313;
    }
   }
  }
 } else {
  label = 313;
 }
 do {
  if ((label|0) == 313) {
   $804 = (($$5923) - ($$09962286))|0;
   $805 = HEAP32[$4>>2]|0;
   $806 = ((($805)) + 52|0);
   $807 = HEAP32[$806>>2]|0;
   $808 = ($807|0)==(0|0);
   if ($808) {
    $809 = ((($0)) + 32|0);
    $810 = HEAP32[$809>>2]|0;
    $811 = ((($0)) + 40|0);
    $812 = HEAP32[$811>>2]|0;
    $813 = ((($805)) + 36|0);
    $814 = HEAP32[$813>>2]|0;
    $815 = 1 << $814;
    $816 = (FUNCTION_TABLE_iiii[$810 & 127]($812,$815,1)|0);
    HEAP32[$806>>2] = $816;
    $817 = ($816|0)==(0|0);
    if ($817) {
     HEAP32[$5>>2] = 30;
     $$01127 = -4;
     STACKTOP = sp;return ($$01127|0);
    } else {
     $830 = $816;
    }
   } else {
    $830 = $807;
   }
   $818 = ((($805)) + 40|0);
   $819 = HEAP32[$818>>2]|0;
   $820 = ($819|0)==(0);
   if ($820) {
    $821 = ((($805)) + 36|0);
    $822 = HEAP32[$821>>2]|0;
    $823 = 1 << $822;
    HEAP32[$818>>2] = $823;
    $824 = ((($805)) + 48|0);
    HEAP32[$824>>2] = 0;
    $825 = ((($805)) + 44|0);
    HEAP32[$825>>2] = 0;
    $826 = $823;
   } else {
    $826 = $819;
   }
   $827 = ($826>>>0)>($804>>>0);
   if (!($827)) {
    $828 = (0 - ($826))|0;
    $829 = (($$01059) + ($828)|0);
    _memcpy(($830|0),($829|0),($826|0))|0;
    $831 = ((($805)) + 48|0);
    HEAP32[$831>>2] = 0;
    $832 = HEAP32[$818>>2]|0;
    $833 = ((($805)) + 44|0);
    HEAP32[$833>>2] = $832;
    break;
   }
   $834 = ((($805)) + 48|0);
   $835 = HEAP32[$834>>2]|0;
   $836 = (($826) - ($835))|0;
   $837 = ($836>>>0)>($804>>>0);
   $spec$select$i = $837 ? $804 : $836;
   $838 = (($830) + ($835)|0);
   $839 = (0 - ($804))|0;
   $840 = (($$01059) + ($839)|0);
   _memcpy(($838|0),($840|0),($spec$select$i|0))|0;
   $841 = (($804) - ($spec$select$i))|0;
   $842 = ($841|0)==(0);
   if (!($842)) {
    $843 = HEAP32[$806>>2]|0;
    $844 = (0 - ($841))|0;
    $845 = (($$01059) + ($844)|0);
    _memcpy(($843|0),($845|0),($841|0))|0;
    HEAP32[$834>>2] = $841;
    $846 = HEAP32[$818>>2]|0;
    $847 = ((($805)) + 44|0);
    HEAP32[$847>>2] = $846;
    break;
   }
   $848 = HEAP32[$834>>2]|0;
   $849 = (($848) + ($spec$select$i))|0;
   $850 = HEAP32[$818>>2]|0;
   $851 = ($849|0)==($850|0);
   $spec$store$select$i = $851 ? 0 : $849;
   HEAP32[$834>>2] = $spec$store$select$i;
   $852 = ((($805)) + 44|0);
   $853 = HEAP32[$852>>2]|0;
   $854 = ($853>>>0)<($850>>>0);
   if ($854) {
    $855 = (($853) + ($spec$select$i))|0;
    HEAP32[$852>>2] = $855;
   }
  }
 } while(0);
 $856 = HEAP32[$19>>2]|0;
 $857 = (($20) - ($856))|0;
 $858 = HEAP32[$17>>2]|0;
 $859 = (($$5923) - ($858))|0;
 $860 = ((($0)) + 8|0);
 $861 = HEAP32[$860>>2]|0;
 $862 = (($861) + ($857))|0;
 HEAP32[$860>>2] = $862;
 $863 = HEAP32[$55>>2]|0;
 $864 = (($863) + ($859))|0;
 HEAP32[$55>>2] = $864;
 $865 = HEAP32[$56>>2]|0;
 $866 = (($865) + ($859))|0;
 HEAP32[$56>>2] = $866;
 $867 = HEAP32[$25>>2]|0;
 $868 = ($867|0)!=(0);
 $869 = ($859|0)!=(0);
 $or$cond10 = $869 & $868;
 if ($or$cond10) {
  $870 = HEAP32[$26>>2]|0;
  $871 = ($870|0)==(0);
  $872 = HEAP32[$40>>2]|0;
  $873 = HEAP32[$7>>2]|0;
  $874 = (0 - ($859))|0;
  $875 = (($873) + ($874)|0);
  if ($871) {
   $877 = (_adler32($872,$875,$859)|0);
   $878 = $877;
  } else {
   $876 = (_crc32($872,$875,$859)|0);
   $878 = $876;
  }
  HEAP32[$40>>2] = $878;
  HEAP32[$41>>2] = $878;
 }
 $879 = HEAP32[$23>>2]|0;
 $880 = HEAP32[$30>>2]|0;
 $881 = ($880|0)==(0);
 $882 = $881 ? 0 : 64;
 $883 = (($882) + ($879))|0;
 $884 = HEAP32[$5>>2]|0;
 $885 = ($884|0)==(11);
 $886 = $885 ? 128 : 0;
 $887 = (($883) + ($886))|0;
 $888 = ($884|0)==(19);
 $889 = ($884|0)==(14);
 $890 = $888 | $889;
 $891 = $890 ? 256 : 0;
 $892 = (($887) + ($891))|0;
 $893 = ((($0)) + 44|0);
 HEAP32[$893>>2] = $892;
 $894 = $859 | $857;
 $895 = ($894|0)==(0);
 $896 = ($1|0)==(4);
 $or$cond14 = $896 | $895;
 $897 = ($$9|0)==(0);
 $or$cond16 = $897 & $or$cond14;
 $spec$select1136 = $or$cond16 ? -5 : $$9;
 $$01127 = $spec$select1136;
 STACKTOP = sp;return ($$01127|0);
}
function _inflateEnd($0) {
 $0 = $0|0;
 var $$0 = 0, $$pre = 0, $$pre13 = 0, $$pre14 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = -2;
  return ($$0|0);
 }
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = -2;
  return ($$0|0);
 }
 $5 = ((($0)) + 36|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $$0 = -2;
  return ($$0|0);
 }
 $8 = ((($3)) + 52|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)==(0|0);
 $$pre14 = ((($0)) + 40|0);
 if ($10) {
  $13 = $6;$14 = $3;
 } else {
  $11 = HEAP32[$$pre14>>2]|0;
  FUNCTION_TABLE_vii[$6 & 127]($11,$9);
  $$pre = HEAP32[$5>>2]|0;
  $$pre13 = HEAP32[$2>>2]|0;
  $13 = $$pre;$14 = $$pre13;
 }
 $12 = HEAP32[$$pre14>>2]|0;
 FUNCTION_TABLE_vii[$13 & 127]($12,$14);
 HEAP32[$2>>2] = 0;
 $$0 = 0;
 return ($$0|0);
}
function _inflate_table($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0215250255 = 0, $$0216249256 = 0, $$0217$ph = 0, $$0218 = 0, $$0219$ph = 0, $$0221 = 0, $$0222 = 0, $$0223 = 0, $$0223$ph = 0, $$0225$ph = 0, $$0229$ph = 0, $$0231$ph = 0, $$0236283$lcssa$ph = 0, $$0236283$lcssa303 = 0, $$0237$lcssa = 0, $$0237276 = 0, $$0238284 = 0, $$0251254 = 0, $$1228266 = 0, $$1232$lcssa = 0;
 var $$1232265 = 0, $$1239269 = 0, $$2240 = 0, $$2240$ph = 0, $$3 = 0, $$3$ph = 0, $$4 = 0, $$ph = 0, $$ph301 = 0, $$phi$trans$insert = 0, $$pre = 0, $$sroa$0$0 = 0, $$sroa$0$0$$sroa_idx = 0, $$sroa$0$0$$sroa_idx25 = 0, $$sroa$11$0$$sroa_idx = 0, $$sroa$11$0$$sroa_idx31 = 0, $$sroa$11$0$$sroa_idx33 = 0, $$sroa$11$0$$sroa_idx35 = 0, $$sroa$14$0 = 0, $$sroa$14$0$$sroa_idx37 = 0;
 var $$sroa$14$0$$sroa_idx38 = 0, $$sroa$14$0$$sroa_idx40 = 0, $$sroa$14$0$$sroa_idx42 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond298 = 0, $or$cond = 0;
 var $or$cond246 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $spec$select = 0, $spec$select244 = 0, $spec$select245 = 0, $spec$select257 = 0, $spec$select302 = 0, $spec$select305 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $6 = sp + 32|0;
 $7 = sp;
 dest=$6; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $8 = ($2|0)==(0);
 if ($8) {
  $9 = HEAP32[$4>>2]|0;
  $22 = $9;
  label = 6;
 } else {
  $$0238284 = 0;
  while(1) {
   $10 = (($1) + ($$0238284<<1)|0);
   $11 = HEAP16[$10>>1]|0;
   $12 = $11&65535;
   $13 = (($6) + ($12<<1)|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = (($14) + 1)<<16>>16;
   HEAP16[$13>>1] = $15;
   $16 = (($$0238284) + 1)|0;
   $exitcond298 = ($16|0)==($2|0);
   if ($exitcond298) {
    break;
   } else {
    $$0238284 = $16;
   }
  }
  $$phi$trans$insert = ((($6)) + 30|0);
  $$pre = HEAP16[$$phi$trans$insert>>1]|0;
  $17 = HEAP32[$4>>2]|0;
  $18 = ($$pre<<16>>16)==(0);
  if ($18) {
   $22 = $17;
   label = 6;
  } else {
   $$0236283$lcssa$ph = 15;$$ph = $17;$$ph301 = $$pre;
   label = 8;
  }
 }
 do {
  if ((label|0) == 6) {
   $19 = ((($6)) + 28|0);
   $20 = HEAP16[$19>>1]|0;
   $21 = ($20<<16>>16)==(0);
   if ($21) {
    $257 = ((($6)) + 26|0);
    $258 = HEAP16[$257>>1]|0;
    $259 = ($258<<16>>16)==(0);
    if ($259) {
     $260 = ((($6)) + 24|0);
     $261 = HEAP16[$260>>1]|0;
     $262 = ($261<<16>>16)==(0);
     if ($262) {
      $263 = ((($6)) + 22|0);
      $264 = HEAP16[$263>>1]|0;
      $265 = ($264<<16>>16)==(0);
      if ($265) {
       $266 = ((($6)) + 20|0);
       $267 = HEAP16[$266>>1]|0;
       $268 = ($267<<16>>16)==(0);
       if ($268) {
        $269 = ((($6)) + 18|0);
        $270 = HEAP16[$269>>1]|0;
        $271 = ($270<<16>>16)==(0);
        if ($271) {
         $272 = ((($6)) + 16|0);
         $273 = HEAP16[$272>>1]|0;
         $274 = ($273<<16>>16)==(0);
         if ($274) {
          $275 = ((($6)) + 14|0);
          $276 = HEAP16[$275>>1]|0;
          $277 = ($276<<16>>16)==(0);
          if ($277) {
           $278 = ((($6)) + 12|0);
           $279 = HEAP16[$278>>1]|0;
           $280 = ($279<<16>>16)==(0);
           if ($280) {
            $281 = ((($6)) + 10|0);
            $282 = HEAP16[$281>>1]|0;
            $283 = ($282<<16>>16)==(0);
            if ($283) {
             $284 = ((($6)) + 8|0);
             $285 = HEAP16[$284>>1]|0;
             $286 = ($285<<16>>16)==(0);
             if ($286) {
              $287 = ((($6)) + 6|0);
              $288 = HEAP16[$287>>1]|0;
              $289 = ($288<<16>>16)==(0);
              if ($289) {
               $290 = ((($6)) + 4|0);
               $291 = HEAP16[$290>>1]|0;
               $292 = ($291<<16>>16)==(0);
               if ($292) {
                $293 = ((($6)) + 2|0);
                $294 = HEAP16[$293>>1]|0;
                $295 = ($294<<16>>16)==(0);
                if (!($295)) {
                 $23 = ($22|0)!=(0);
                 $spec$select = $23&1;
                 $$0236283$lcssa303 = 1;$$0237$lcssa = 1;$253 = 0;$spec$select305 = $spec$select;
                 break;
                }
                $296 = HEAP32[$3>>2]|0;
                $297 = ((($296)) + 4|0);
                HEAP32[$3>>2] = $297;
                HEAP8[$296>>0] = 64;
                $$sroa$11$0$$sroa_idx35 = ((($296)) + 1|0);
                HEAP8[$$sroa$11$0$$sroa_idx35>>0] = 1;
                $$sroa$14$0$$sroa_idx42 = ((($296)) + 2|0);
                HEAP16[$$sroa$14$0$$sroa_idx42>>1] = 0;
                $298 = HEAP32[$3>>2]|0;
                $299 = ((($298)) + 4|0);
                HEAP32[$3>>2] = $299;
                HEAP8[$298>>0] = 64;
                $$sroa$11$0$$sroa_idx33 = ((($298)) + 1|0);
                HEAP8[$$sroa$11$0$$sroa_idx33>>0] = 1;
                $$sroa$14$0$$sroa_idx40 = ((($298)) + 2|0);
                HEAP16[$$sroa$14$0$$sroa_idx40>>1] = 0;
                HEAP32[$4>>2] = 1;
                $$0218 = 0;
                STACKTOP = sp;return ($$0218|0);
               } else {
                $$0236283$lcssa$ph = 2;$$ph = $22;$$ph301 = 0;
                label = 8;
               }
              } else {
               $$0236283$lcssa$ph = 3;$$ph = $22;$$ph301 = 0;
               label = 8;
              }
             } else {
              $$0236283$lcssa$ph = 4;$$ph = $22;$$ph301 = 0;
              label = 8;
             }
            } else {
             $$0236283$lcssa$ph = 5;$$ph = $22;$$ph301 = 0;
             label = 8;
            }
           } else {
            $$0236283$lcssa$ph = 6;$$ph = $22;$$ph301 = 0;
            label = 8;
           }
          } else {
           $$0236283$lcssa$ph = 7;$$ph = $22;$$ph301 = 0;
           label = 8;
          }
         } else {
          $$0236283$lcssa$ph = 8;$$ph = $22;$$ph301 = 0;
          label = 8;
         }
        } else {
         $$0236283$lcssa$ph = 9;$$ph = $22;$$ph301 = 0;
         label = 8;
        }
       } else {
        $$0236283$lcssa$ph = 10;$$ph = $22;$$ph301 = 0;
        label = 8;
       }
      } else {
       $$0236283$lcssa$ph = 11;$$ph = $22;$$ph301 = 0;
       label = 8;
      }
     } else {
      $$0236283$lcssa$ph = 12;$$ph = $22;$$ph301 = 0;
      label = 8;
     }
    } else {
     $$0236283$lcssa$ph = 13;$$ph = $22;$$ph301 = 0;
     label = 8;
    }
   } else {
    $$0236283$lcssa$ph = 14;$$ph = $22;$$ph301 = 0;
    label = 8;
   }
  }
 } while(0);
 L26: do {
  if ((label|0) == 8) {
   $24 = ($$ph>>>0)>($$0236283$lcssa$ph>>>0);
   $spec$select302 = $24 ? $$0236283$lcssa$ph : $$ph;
   $$0237276 = 1;
   while(1) {
    $25 = (($6) + ($$0237276<<1)|0);
    $26 = HEAP16[$25>>1]|0;
    $27 = ($26<<16>>16)==(0);
    if (!($27)) {
     $$0236283$lcssa303 = $$0236283$lcssa$ph;$$0237$lcssa = $$0237276;$253 = $$ph301;$spec$select305 = $spec$select302;
     break L26;
    }
    $28 = (($$0237276) + 1)|0;
    $29 = ($28>>>0)<($$0236283$lcssa$ph>>>0);
    if ($29) {
     $$0237276 = $28;
    } else {
     $$0236283$lcssa303 = $$0236283$lcssa$ph;$$0237$lcssa = $28;$253 = $$ph301;$spec$select305 = $spec$select302;
     break;
    }
   }
  }
 } while(0);
 $30 = ($spec$select305>>>0)<($$0237$lcssa>>>0);
 $spec$select244 = $30 ? $$0237$lcssa : $spec$select305;
 $31 = ((($6)) + 2|0);
 $32 = HEAP16[$31>>1]|0;
 $33 = $32&65535;
 $34 = (2 - ($33))|0;
 $35 = ($34|0)<(0);
 if ($35) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $36 = $34 << 1;
 $37 = ((($6)) + 4|0);
 $38 = HEAP16[$37>>1]|0;
 $39 = $38&65535;
 $40 = (($36) - ($39))|0;
 $41 = ($40|0)<(0);
 if ($41) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $191 = $40 << 1;
 $192 = ((($6)) + 6|0);
 $193 = HEAP16[$192>>1]|0;
 $50 = $193&65535;
 $194 = (($191) - ($50))|0;
 $195 = ($194|0)<(0);
 if ($195) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $196 = $194 << 1;
 $197 = ((($6)) + 8|0);
 $198 = HEAP16[$197>>1]|0;
 $54 = $198&65535;
 $199 = (($196) - ($54))|0;
 $200 = ($199|0)<(0);
 if ($200) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $201 = $199 << 1;
 $202 = ((($6)) + 10|0);
 $203 = HEAP16[$202>>1]|0;
 $58 = $203&65535;
 $204 = (($201) - ($58))|0;
 $205 = ($204|0)<(0);
 if ($205) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $206 = $204 << 1;
 $207 = ((($6)) + 12|0);
 $208 = HEAP16[$207>>1]|0;
 $62 = $208&65535;
 $209 = (($206) - ($62))|0;
 $210 = ($209|0)<(0);
 if ($210) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $211 = $209 << 1;
 $212 = ((($6)) + 14|0);
 $213 = HEAP16[$212>>1]|0;
 $66 = $213&65535;
 $214 = (($211) - ($66))|0;
 $215 = ($214|0)<(0);
 if ($215) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $216 = $214 << 1;
 $217 = ((($6)) + 16|0);
 $218 = HEAP16[$217>>1]|0;
 $70 = $218&65535;
 $219 = (($216) - ($70))|0;
 $220 = ($219|0)<(0);
 if ($220) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $221 = $219 << 1;
 $222 = ((($6)) + 18|0);
 $223 = HEAP16[$222>>1]|0;
 $74 = $223&65535;
 $224 = (($221) - ($74))|0;
 $225 = ($224|0)<(0);
 if ($225) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $226 = $224 << 1;
 $227 = ((($6)) + 20|0);
 $228 = HEAP16[$227>>1]|0;
 $78 = $228&65535;
 $229 = (($226) - ($78))|0;
 $230 = ($229|0)<(0);
 if ($230) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $231 = $229 << 1;
 $232 = ((($6)) + 22|0);
 $233 = HEAP16[$232>>1]|0;
 $82 = $233&65535;
 $234 = (($231) - ($82))|0;
 $235 = ($234|0)<(0);
 if ($235) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $236 = $234 << 1;
 $237 = ((($6)) + 24|0);
 $238 = HEAP16[$237>>1]|0;
 $86 = $238&65535;
 $239 = (($236) - ($86))|0;
 $240 = ($239|0)<(0);
 if ($240) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $241 = $239 << 1;
 $242 = ((($6)) + 26|0);
 $243 = HEAP16[$242>>1]|0;
 $90 = $243&65535;
 $244 = (($241) - ($90))|0;
 $245 = ($244|0)<(0);
 if ($245) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $246 = $244 << 1;
 $247 = ((($6)) + 28|0);
 $248 = HEAP16[$247>>1]|0;
 $94 = $248&65535;
 $249 = (($246) - ($94))|0;
 $250 = ($249|0)<(0);
 if ($250) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $251 = $249 << 1;
 $252 = $253&65535;
 $254 = (($251) - ($252))|0;
 $255 = ($254|0)<(0);
 if ($255) {
  $$0218 = -1;
  STACKTOP = sp;return ($$0218|0);
 }
 $256 = ($254|0)==(0);
 if (!($256)) {
  $42 = ($0|0)==(0);
  $43 = ($$0236283$lcssa303|0)!=(1);
  $or$cond = $42 | $43;
  if ($or$cond) {
   $$0218 = -1;
   STACKTOP = sp;return ($$0218|0);
  }
 }
 $44 = ((($7)) + 2|0);
 HEAP16[$44>>1] = 0;
 $45 = ((($7)) + 4|0);
 HEAP16[$45>>1] = $32;
 $46 = (($39) + ($33))|0;
 $47 = $46&65535;
 $48 = ((($7)) + 6|0);
 HEAP16[$48>>1] = $47;
 $49 = (($46) + ($50))|0;
 $51 = $49&65535;
 $52 = ((($7)) + 8|0);
 HEAP16[$52>>1] = $51;
 $53 = (($49) + ($54))|0;
 $55 = $53&65535;
 $56 = ((($7)) + 10|0);
 HEAP16[$56>>1] = $55;
 $57 = (($53) + ($58))|0;
 $59 = $57&65535;
 $60 = ((($7)) + 12|0);
 HEAP16[$60>>1] = $59;
 $61 = (($57) + ($62))|0;
 $63 = $61&65535;
 $64 = ((($7)) + 14|0);
 HEAP16[$64>>1] = $63;
 $65 = (($61) + ($66))|0;
 $67 = $65&65535;
 $68 = ((($7)) + 16|0);
 HEAP16[$68>>1] = $67;
 $69 = (($65) + ($70))|0;
 $71 = $69&65535;
 $72 = ((($7)) + 18|0);
 HEAP16[$72>>1] = $71;
 $73 = (($69) + ($74))|0;
 $75 = $73&65535;
 $76 = ((($7)) + 20|0);
 HEAP16[$76>>1] = $75;
 $77 = (($73) + ($78))|0;
 $79 = $77&65535;
 $80 = ((($7)) + 22|0);
 HEAP16[$80>>1] = $79;
 $81 = (($77) + ($82))|0;
 $83 = $81&65535;
 $84 = ((($7)) + 24|0);
 HEAP16[$84>>1] = $83;
 $85 = (($81) + ($86))|0;
 $87 = $85&65535;
 $88 = ((($7)) + 26|0);
 HEAP16[$88>>1] = $87;
 $89 = (($85) + ($90))|0;
 $91 = $89&65535;
 $92 = ((($7)) + 28|0);
 HEAP16[$92>>1] = $91;
 $93 = (($89) + ($94))|0;
 $95 = $93&65535;
 $96 = ((($7)) + 30|0);
 HEAP16[$96>>1] = $95;
 if (!($8)) {
  $$1239269 = 0;
  while(1) {
   $97 = (($1) + ($$1239269<<1)|0);
   $98 = HEAP16[$97>>1]|0;
   $99 = ($98<<16>>16)==(0);
   if (!($99)) {
    $100 = $98&65535;
    $101 = $$1239269&65535;
    $102 = (($7) + ($100<<1)|0);
    $103 = HEAP16[$102>>1]|0;
    $104 = (($103) + 1)<<16>>16;
    HEAP16[$102>>1] = $104;
    $105 = $103&65535;
    $106 = (($5) + ($105<<1)|0);
    HEAP16[$106>>1] = $101;
   }
   $107 = (($$1239269) + 1)|0;
   $exitcond = ($107|0)==($2|0);
   if ($exitcond) {
    break;
   } else {
    $$1239269 = $107;
   }
  }
 }
 switch ($0|0) {
 case 0:  {
  $$0215250255 = $5;$$0216249256 = $5;$$0251254 = 19;$175 = 0;$177 = 0;
  break;
 }
 case 1:  {
  $108 = ($spec$select244>>>0)>(9);
  if ($108) {
   $$0218 = 1;
   STACKTOP = sp;return ($$0218|0);
  } else {
   $$0215250255 = (12718);$$0216249256 = (12592);$$0251254 = 256;$175 = 1;$177 = 0;
  }
  break;
 }
 default: {
  $109 = ($spec$select244>>>0)>(9);
  $110 = ($0|0)==(2);
  $or$cond5 = $110 & $109;
  if ($or$cond5) {
   $$0218 = 1;
   STACKTOP = sp;return ($$0218|0);
  } else {
   $$0215250255 = 13168;$$0216249256 = 13042;$$0251254 = -1;$175 = 0;$177 = $110;
  }
 }
 }
 $111 = 1 << $spec$select244;
 $112 = (($111) + -1)|0;
 $113 = HEAP32[$3>>2]|0;
 $114 = $spec$select244&255;
 $$0217$ph = $113;$$0219$ph = -1;$$0223$ph = 0;$$0225$ph = $111;$$0229$ph = 0;$$0231$ph = $spec$select244;$$2240$ph = 0;$$3$ph = $$0237$lcssa;
 L95: while(1) {
  $115 = 1 << $$0231$ph;
  $$0223 = $$0223$ph;$$2240 = $$2240$ph;$$3 = $$3$ph;
  while(1) {
   $116 = (($$3) - ($$0229$ph))|0;
   $117 = $116&255;
   $118 = (($5) + ($$2240<<1)|0);
   $119 = HEAP16[$118>>1]|0;
   $120 = $119&65535;
   $121 = ($$0251254|0)>($120|0);
   do {
    if ($121) {
     $$sroa$0$0 = 0;$$sroa$14$0 = $119;
    } else {
     $122 = ($$0251254|0)<($120|0);
     if (!($122)) {
      $$sroa$0$0 = 96;$$sroa$14$0 = 0;
      break;
     }
     $123 = (($$0216249256) + ($120<<1)|0);
     $124 = (($$0215250255) + ($120<<1)|0);
     $125 = HEAP16[$124>>1]|0;
     $126 = $125&255;
     $127 = HEAP16[$123>>1]|0;
     $$sroa$0$0 = $126;$$sroa$14$0 = $127;
    }
   } while(0);
   $128 = 1 << $116;
   $129 = $$0223 >>> $$0229$ph;
   $$0221 = $115;
   while(1) {
    $130 = (($$0221) - ($128))|0;
    $131 = (($130) + ($129))|0;
    $$sroa$0$0$$sroa_idx25 = (($$0217$ph) + ($131<<2)|0);
    HEAP8[$$sroa$0$0$$sroa_idx25>>0] = $$sroa$0$0;
    $$sroa$11$0$$sroa_idx31 = (((($$0217$ph) + ($131<<2)|0)) + 1|0);
    HEAP8[$$sroa$11$0$$sroa_idx31>>0] = $117;
    $$sroa$14$0$$sroa_idx38 = (((($$0217$ph) + ($131<<2)|0)) + 2|0);
    HEAP16[$$sroa$14$0$$sroa_idx38>>1] = $$sroa$14$0;
    $132 = ($130|0)==(0);
    if ($132) {
     break;
    } else {
     $$0221 = $130;
    }
   }
   $133 = (($$3) + -1)|0;
   $134 = 1 << $133;
   $$0222 = $134;
   while(1) {
    $135 = $$0222 & $$0223;
    $136 = ($135|0)==(0);
    $137 = $$0222 >>> 1;
    if ($136) {
     break;
    } else {
     $$0222 = $137;
    }
   }
   $138 = ($$0222|0)==(0);
   $139 = (($$0222) + -1)|0;
   $140 = $139 & $$0223;
   $141 = (($140) + ($$0222))|0;
   $spec$select257 = $138 ? 0 : $141;
   $142 = (($$2240) + 1)|0;
   $143 = (($6) + ($$3<<1)|0);
   $144 = HEAP16[$143>>1]|0;
   $145 = (($144) + -1)<<16>>16;
   HEAP16[$143>>1] = $145;
   $146 = ($145<<16>>16)==(0);
   if ($146) {
    $147 = ($$3|0)==($$0236283$lcssa303|0);
    if ($147) {
     break L95;
    }
    $148 = (($5) + ($142<<1)|0);
    $149 = HEAP16[$148>>1]|0;
    $150 = $149&65535;
    $151 = (($1) + ($150<<1)|0);
    $152 = HEAP16[$151>>1]|0;
    $153 = $152&65535;
    $$4 = $153;
   } else {
    $$4 = $$3;
   }
   $154 = ($$4>>>0)>($spec$select244>>>0);
   if ($154) {
    $155 = $spec$select257 & $112;
    $156 = ($155|0)==($$0219$ph|0);
    if (!($156)) {
     break;
    }
   }
   $$0223 = $spec$select257;$$2240 = $142;$$3 = $$4;
  }
  $157 = ($$0229$ph|0)==(0);
  $spec$select245 = $157 ? $spec$select244 : $$0229$ph;
  $158 = (($$0217$ph) + ($115<<2)|0);
  $159 = (($$4) - ($spec$select245))|0;
  $160 = ($$4>>>0)<($$0236283$lcssa303>>>0);
  L117: do {
   if ($160) {
    $161 = 1 << $159;
    $$1228266 = $161;$$1232265 = $159;$163 = $$4;
    while(1) {
     $162 = (($6) + ($163<<1)|0);
     $164 = HEAP16[$162>>1]|0;
     $165 = $164&65535;
     $166 = (($$1228266) - ($165))|0;
     $167 = ($166|0)<(1);
     if ($167) {
      $$1232$lcssa = $$1232265;
      break L117;
     }
     $168 = (($$1232265) + 1)|0;
     $169 = $166 << 1;
     $170 = (($168) + ($spec$select245))|0;
     $171 = ($170>>>0)<($$0236283$lcssa303>>>0);
     if ($171) {
      $$1228266 = $169;$$1232265 = $168;$163 = $170;
     } else {
      $$1232$lcssa = $168;
      break;
     }
    }
   } else {
    $$1232$lcssa = $159;
   }
  } while(0);
  $172 = 1 << $$1232$lcssa;
  $173 = (($172) + ($$0225$ph))|0;
  $174 = ($173>>>0)>(852);
  $or$cond7 = $175 & $174;
  $176 = ($173>>>0)>(592);
  $or$cond9 = $177 & $176;
  $or$cond246 = $or$cond7 | $or$cond9;
  if ($or$cond246) {
   $$0218 = 1;
   label = 46;
   break;
  }
  $178 = $$1232$lcssa&255;
  $179 = HEAP32[$3>>2]|0;
  $180 = (($179) + ($155<<2)|0);
  HEAP8[$180>>0] = $178;
  $181 = (((($179) + ($155<<2)|0)) + 1|0);
  HEAP8[$181>>0] = $114;
  $182 = $158;
  $183 = $179;
  $184 = (($182) - ($183))|0;
  $185 = $184 >>> 2;
  $186 = $185&65535;
  $187 = (((($179) + ($155<<2)|0)) + 2|0);
  HEAP16[$187>>1] = $186;
  $$0217$ph = $158;$$0219$ph = $155;$$0223$ph = $spec$select257;$$0225$ph = $173;$$0229$ph = $spec$select245;$$0231$ph = $$1232$lcssa;$$2240$ph = $142;$$3$ph = $$4;
 }
 if ((label|0) == 46) {
  STACKTOP = sp;return ($$0218|0);
 }
 $188 = ($spec$select257|0)==(0);
 if (!($188)) {
  $$sroa$14$0$$sroa_idx37 = (((($$0217$ph) + ($spec$select257<<2)|0)) + 2|0);
  $$sroa$11$0$$sroa_idx = (((($$0217$ph) + ($spec$select257<<2)|0)) + 1|0);
  $$sroa$0$0$$sroa_idx = (($$0217$ph) + ($spec$select257<<2)|0);
  HEAP8[$$sroa$0$0$$sroa_idx>>0] = 64;
  HEAP8[$$sroa$11$0$$sroa_idx>>0] = $117;
  HEAP16[$$sroa$14$0$$sroa_idx37>>1] = 0;
 }
 $189 = HEAP32[$3>>2]|0;
 $190 = (($189) + ($$0225$ph<<2)|0);
 HEAP32[$3>>2] = $190;
 HEAP32[$4>>2] = $spec$select244;
 $$0218 = 0;
 STACKTOP = sp;return ($$0218|0);
}
function __tr_init($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 148|0);
 $2 = ((($0)) + 2840|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 2848|0);
 HEAP32[$3>>2] = 9176;
 $4 = ((($0)) + 2440|0);
 $5 = ((($0)) + 2852|0);
 HEAP32[$5>>2] = $4;
 $6 = ((($0)) + 2860|0);
 HEAP32[$6>>2] = 9196;
 $7 = ((($0)) + 2684|0);
 $8 = ((($0)) + 2864|0);
 HEAP32[$8>>2] = $7;
 $9 = ((($0)) + 2872|0);
 HEAP32[$9>>2] = 9216;
 $10 = ((($0)) + 5816|0);
 HEAP16[$10>>1] = 0;
 $11 = ((($0)) + 5820|0);
 HEAP32[$11>>2] = 0;
 _init_block($0);
 return;
}
function _init_block($0) {
 $0 = $0|0;
 var $$018 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$018 = 0;
 while(1) {
  $1 = (((($0)) + 148|0) + ($$018<<2)|0);
  HEAP16[$1>>1] = 0;
  $2 = (($$018) + 1)|0;
  $exitcond = ($2|0)==(286);
  if ($exitcond) {
   break;
  } else {
   $$018 = $2;
  }
 }
 $3 = ((($0)) + 2440|0);
 HEAP16[$3>>1] = 0;
 $4 = ((($0)) + 2444|0);
 HEAP16[$4>>1] = 0;
 $5 = ((($0)) + 2448|0);
 HEAP16[$5>>1] = 0;
 $6 = ((($0)) + 2452|0);
 HEAP16[$6>>1] = 0;
 $7 = ((($0)) + 2456|0);
 HEAP16[$7>>1] = 0;
 $8 = ((($0)) + 2460|0);
 HEAP16[$8>>1] = 0;
 $9 = ((($0)) + 2464|0);
 HEAP16[$9>>1] = 0;
 $10 = ((($0)) + 2468|0);
 HEAP16[$10>>1] = 0;
 $11 = ((($0)) + 2472|0);
 HEAP16[$11>>1] = 0;
 $12 = ((($0)) + 2476|0);
 HEAP16[$12>>1] = 0;
 $13 = ((($0)) + 2480|0);
 HEAP16[$13>>1] = 0;
 $14 = ((($0)) + 2484|0);
 HEAP16[$14>>1] = 0;
 $15 = ((($0)) + 2488|0);
 HEAP16[$15>>1] = 0;
 $16 = ((($0)) + 2492|0);
 HEAP16[$16>>1] = 0;
 $17 = ((($0)) + 2496|0);
 HEAP16[$17>>1] = 0;
 $18 = ((($0)) + 2500|0);
 HEAP16[$18>>1] = 0;
 $19 = ((($0)) + 2504|0);
 HEAP16[$19>>1] = 0;
 $20 = ((($0)) + 2508|0);
 HEAP16[$20>>1] = 0;
 $21 = ((($0)) + 2512|0);
 HEAP16[$21>>1] = 0;
 $22 = ((($0)) + 2516|0);
 HEAP16[$22>>1] = 0;
 $23 = ((($0)) + 2520|0);
 HEAP16[$23>>1] = 0;
 $24 = ((($0)) + 2524|0);
 HEAP16[$24>>1] = 0;
 $25 = ((($0)) + 2528|0);
 HEAP16[$25>>1] = 0;
 $26 = ((($0)) + 2532|0);
 HEAP16[$26>>1] = 0;
 $27 = ((($0)) + 2536|0);
 HEAP16[$27>>1] = 0;
 $28 = ((($0)) + 2540|0);
 HEAP16[$28>>1] = 0;
 $29 = ((($0)) + 2544|0);
 HEAP16[$29>>1] = 0;
 $30 = ((($0)) + 2548|0);
 HEAP16[$30>>1] = 0;
 $31 = ((($0)) + 2552|0);
 HEAP16[$31>>1] = 0;
 $32 = ((($0)) + 2556|0);
 HEAP16[$32>>1] = 0;
 $33 = ((($0)) + 2684|0);
 HEAP16[$33>>1] = 0;
 $34 = ((($0)) + 2688|0);
 HEAP16[$34>>1] = 0;
 $35 = ((($0)) + 2692|0);
 HEAP16[$35>>1] = 0;
 $36 = ((($0)) + 2696|0);
 HEAP16[$36>>1] = 0;
 $37 = ((($0)) + 2700|0);
 HEAP16[$37>>1] = 0;
 $38 = ((($0)) + 2704|0);
 HEAP16[$38>>1] = 0;
 $39 = ((($0)) + 2708|0);
 HEAP16[$39>>1] = 0;
 $40 = ((($0)) + 2712|0);
 HEAP16[$40>>1] = 0;
 $41 = ((($0)) + 2716|0);
 HEAP16[$41>>1] = 0;
 $42 = ((($0)) + 2720|0);
 HEAP16[$42>>1] = 0;
 $43 = ((($0)) + 2724|0);
 HEAP16[$43>>1] = 0;
 $44 = ((($0)) + 2728|0);
 HEAP16[$44>>1] = 0;
 $45 = ((($0)) + 2732|0);
 HEAP16[$45>>1] = 0;
 $46 = ((($0)) + 2736|0);
 HEAP16[$46>>1] = 0;
 $47 = ((($0)) + 2740|0);
 HEAP16[$47>>1] = 0;
 $48 = ((($0)) + 2744|0);
 HEAP16[$48>>1] = 0;
 $49 = ((($0)) + 2748|0);
 HEAP16[$49>>1] = 0;
 $50 = ((($0)) + 2752|0);
 HEAP16[$50>>1] = 0;
 $51 = ((($0)) + 2756|0);
 HEAP16[$51>>1] = 0;
 $52 = ((($0)) + 1172|0);
 HEAP16[$52>>1] = 1;
 $53 = ((($0)) + 5804|0);
 HEAP32[$53>>2] = 0;
 $54 = ((($0)) + 5800|0);
 HEAP32[$54>>2] = 0;
 $55 = ((($0)) + 5808|0);
 HEAP32[$55>>2] = 0;
 $56 = ((($0)) + 5792|0);
 HEAP32[$56>>2] = 0;
 return;
}
function __tr_stored_block($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0171$i = 0, $$02$i = 0, $$off0 = 0, $$off0$in = 0, $$pre$phi$iZ2D = 0, $$pre$phi4$iZ2D = 0, $$pre3$i = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $storemerge = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 5820|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(13);
 $7 = $3 & 65535;
 $8 = $7 << $5;
 $9 = ((($0)) + 5816|0);
 $10 = HEAP16[$9>>1]|0;
 $11 = $10&65535;
 $12 = $8 | $11;
 $13 = $12&65535;
 HEAP16[$9>>1] = $13;
 if ($6) {
  $14 = $12&255;
  $15 = ((($0)) + 8|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = ((($0)) + 20|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = (($18) + 1)|0;
  HEAP32[$17>>2] = $19;
  $20 = (($16) + ($18)|0);
  HEAP8[$20>>0] = $14;
  $21 = HEAP16[$9>>1]|0;
  $22 = ($21&65535) >>> 8;
  $23 = $22&255;
  $24 = HEAP32[$15>>2]|0;
  $25 = HEAP32[$17>>2]|0;
  $26 = (($25) + 1)|0;
  HEAP32[$17>>2] = $26;
  $27 = (($24) + ($25)|0);
  HEAP8[$27>>0] = $23;
  $28 = HEAP32[$4>>2]|0;
  $29 = (16 - ($28))|0;
  $30 = $7 >>> $29;
  $31 = $30&65535;
  HEAP16[$9>>1] = $31;
  $32 = (($28) + -13)|0;
  $$off0$in = $30;$storemerge = $32;
 } else {
  $33 = (($5) + 3)|0;
  $$off0$in = $12;$storemerge = $33;
 }
 $$off0 = $$off0$in&255;
 HEAP32[$4>>2] = $storemerge;
 $34 = ($storemerge|0)>(8);
 do {
  if ($34) {
   $35 = ((($0)) + 8|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = ((($0)) + 20|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = (($38) + 1)|0;
   HEAP32[$37>>2] = $39;
   $40 = (($36) + ($38)|0);
   HEAP8[$40>>0] = $$off0;
   $41 = HEAP16[$9>>1]|0;
   $42 = ($41&65535) >>> 8;
   $43 = $42&255;
   $44 = HEAP32[$35>>2]|0;
   $45 = HEAP32[$37>>2]|0;
   $46 = (($45) + 1)|0;
   HEAP32[$37>>2] = $46;
   $47 = (($44) + ($45)|0);
   HEAP8[$47>>0] = $43;
   $$pre$phi$iZ2D = $35;$$pre$phi4$iZ2D = $37;
  } else {
   $48 = ($storemerge|0)>(0);
   $49 = ((($0)) + 8|0);
   if ($48) {
    $50 = HEAP32[$49>>2]|0;
    $51 = ((($0)) + 20|0);
    $52 = HEAP32[$51>>2]|0;
    $53 = (($52) + 1)|0;
    HEAP32[$51>>2] = $53;
    $54 = (($50) + ($52)|0);
    HEAP8[$54>>0] = $$off0;
    $$pre$phi$iZ2D = $49;$$pre$phi4$iZ2D = $51;
    break;
   } else {
    $$pre3$i = ((($0)) + 20|0);
    $$pre$phi$iZ2D = $49;$$pre$phi4$iZ2D = $$pre3$i;
    break;
   }
  }
 } while(0);
 HEAP16[$9>>1] = 0;
 HEAP32[$4>>2] = 0;
 $55 = $2&255;
 $56 = HEAP32[$$pre$phi$iZ2D>>2]|0;
 $57 = HEAP32[$$pre$phi4$iZ2D>>2]|0;
 $58 = (($57) + 1)|0;
 HEAP32[$$pre$phi4$iZ2D>>2] = $58;
 $59 = (($56) + ($57)|0);
 HEAP8[$59>>0] = $55;
 $60 = $2 >>> 8;
 $61 = $60&255;
 $62 = HEAP32[$$pre$phi$iZ2D>>2]|0;
 $63 = HEAP32[$$pre$phi4$iZ2D>>2]|0;
 $64 = (($63) + 1)|0;
 HEAP32[$$pre$phi4$iZ2D>>2] = $64;
 $65 = (($62) + ($63)|0);
 HEAP8[$65>>0] = $61;
 $66 = $2 & 65535;
 $67 = $66 ^ 65535;
 $68 = $67&255;
 $69 = HEAP32[$$pre$phi$iZ2D>>2]|0;
 $70 = HEAP32[$$pre$phi4$iZ2D>>2]|0;
 $71 = (($70) + 1)|0;
 HEAP32[$$pre$phi4$iZ2D>>2] = $71;
 $72 = (($69) + ($70)|0);
 HEAP8[$72>>0] = $68;
 $73 = $67 >>> 8;
 $74 = $73&255;
 $75 = HEAP32[$$pre$phi$iZ2D>>2]|0;
 $76 = HEAP32[$$pre$phi4$iZ2D>>2]|0;
 $77 = (($76) + 1)|0;
 HEAP32[$$pre$phi4$iZ2D>>2] = $77;
 $78 = (($75) + ($76)|0);
 HEAP8[$78>>0] = $74;
 $79 = ($2|0)==(0);
 if ($79) {
  return;
 }
 $$0171$i = $2;$$02$i = $1;
 while(1) {
  $80 = (($$0171$i) + -1)|0;
  $81 = ((($$02$i)) + 1|0);
  $82 = HEAP8[$$02$i>>0]|0;
  $83 = HEAP32[$$pre$phi$iZ2D>>2]|0;
  $84 = HEAP32[$$pre$phi4$iZ2D>>2]|0;
  $85 = (($84) + 1)|0;
  HEAP32[$$pre$phi4$iZ2D>>2] = $85;
  $86 = (($83) + ($84)|0);
  HEAP8[$86>>0] = $82;
  $87 = ($80|0)==(0);
  if ($87) {
   break;
  } else {
   $$0171$i = $80;$$02$i = $81;
  }
 }
 return;
}
function __tr_flush_bits($0) {
 $0 = $0|0;
 var $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 5820|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(16);
 do {
  if ($3) {
   $4 = ((($0)) + 5816|0);
   $5 = HEAP16[$4>>1]|0;
   $6 = $5&255;
   $7 = ((($0)) + 8|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($10) + 1)|0;
   HEAP32[$9>>2] = $11;
   $12 = (($8) + ($10)|0);
   HEAP8[$12>>0] = $6;
   $13 = HEAP16[$4>>1]|0;
   $14 = ($13&65535) >>> 8;
   $15 = $14&255;
   $16 = HEAP32[$7>>2]|0;
   $17 = HEAP32[$9>>2]|0;
   $18 = (($17) + 1)|0;
   HEAP32[$9>>2] = $18;
   $19 = (($16) + ($17)|0);
   HEAP8[$19>>0] = $15;
   HEAP16[$4>>1] = 0;
   $$sink = 0;
  } else {
   $20 = ($2|0)>(7);
   if ($20) {
    $21 = ((($0)) + 5816|0);
    $22 = HEAP16[$21>>1]|0;
    $23 = $22&255;
    $24 = ((($0)) + 8|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($0)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (($27) + 1)|0;
    HEAP32[$26>>2] = $28;
    $29 = (($25) + ($27)|0);
    HEAP8[$29>>0] = $23;
    $30 = HEAP16[$21>>1]|0;
    $31 = ($30&65535) >>> 8;
    HEAP16[$21>>1] = $31;
    $32 = HEAP32[$1>>2]|0;
    $33 = (($32) + -8)|0;
    $$sink = $33;
    break;
   } else {
    return;
   }
  }
 } while(0);
 HEAP32[$1>>2] = $$sink;
 return;
}
function __tr_align($0) {
 $0 = $0|0;
 var $$off0 = 0, $$off0$in = 0, $$off049 = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $storemerge = 0, $storemerge47 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 5820|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(13);
 $4 = 2 << $2;
 $5 = ((($0)) + 5816|0);
 $6 = HEAP16[$5>>1]|0;
 $7 = $6&65535;
 $8 = $4 | $7;
 $9 = $8&65535;
 HEAP16[$5>>1] = $9;
 if ($3) {
  $10 = $8&255;
  $11 = ((($0)) + 8|0);
  $12 = HEAP32[$11>>2]|0;
  $13 = ((($0)) + 20|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = (($14) + 1)|0;
  HEAP32[$13>>2] = $15;
  $16 = (($12) + ($14)|0);
  HEAP8[$16>>0] = $10;
  $17 = HEAP16[$5>>1]|0;
  $18 = ($17&65535) >>> 8;
  $19 = $18&255;
  $20 = HEAP32[$11>>2]|0;
  $21 = HEAP32[$13>>2]|0;
  $22 = (($21) + 1)|0;
  HEAP32[$13>>2] = $22;
  $23 = (($20) + ($21)|0);
  HEAP8[$23>>0] = $19;
  $24 = HEAP32[$1>>2]|0;
  $25 = (16 - ($24))|0;
  $26 = 2 >>> $25;
  $27 = $26&65535;
  HEAP16[$5>>1] = $27;
  $28 = (($24) + -13)|0;
  $$off0$in = $26;$storemerge = $28;
 } else {
  $29 = (($2) + 3)|0;
  $$off0$in = $8;$storemerge = $29;
 }
 $$off0 = $$off0$in&255;
 HEAP32[$1>>2] = $storemerge;
 $30 = ($storemerge|0)>(9);
 if ($30) {
  $31 = ((($0)) + 8|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = ((($0)) + 20|0);
  $34 = HEAP32[$33>>2]|0;
  $35 = (($34) + 1)|0;
  HEAP32[$33>>2] = $35;
  $36 = (($32) + ($34)|0);
  HEAP8[$36>>0] = $$off0;
  $37 = HEAP16[$5>>1]|0;
  $38 = ($37&65535) >>> 8;
  $39 = $38&255;
  $40 = HEAP32[$31>>2]|0;
  $41 = HEAP32[$33>>2]|0;
  $42 = (($41) + 1)|0;
  HEAP32[$33>>2] = $42;
  $43 = (($40) + ($41)|0);
  HEAP8[$43>>0] = $39;
  HEAP16[$5>>1] = 0;
  $44 = HEAP32[$1>>2]|0;
  $45 = (($44) + -9)|0;
  $$off049 = 0;$storemerge47 = $45;
 } else {
  $46 = (($storemerge) + 7)|0;
  $$off049 = $$off0;$storemerge47 = $46;
 }
 HEAP32[$1>>2] = $storemerge47;
 $47 = ($storemerge47|0)==(16);
 do {
  if ($47) {
   $48 = ((($0)) + 8|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($0)) + 20|0);
   $51 = HEAP32[$50>>2]|0;
   $52 = (($51) + 1)|0;
   HEAP32[$50>>2] = $52;
   $53 = (($49) + ($51)|0);
   HEAP8[$53>>0] = $$off049;
   $54 = HEAP16[$5>>1]|0;
   $55 = ($54&65535) >>> 8;
   $56 = $55&255;
   $57 = HEAP32[$48>>2]|0;
   $58 = HEAP32[$50>>2]|0;
   $59 = (($58) + 1)|0;
   HEAP32[$50>>2] = $59;
   $60 = (($57) + ($58)|0);
   HEAP8[$60>>0] = $56;
   HEAP16[$5>>1] = 0;
   $$sink = 0;
  } else {
   $61 = ($storemerge47|0)>(7);
   if ($61) {
    $62 = ((($0)) + 8|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ((($0)) + 20|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = (($65) + 1)|0;
    HEAP32[$64>>2] = $66;
    $67 = (($63) + ($65)|0);
    HEAP8[$67>>0] = $$off049;
    $68 = HEAP16[$5>>1]|0;
    $69 = ($68&65535) >>> 8;
    HEAP16[$5>>1] = $69;
    $70 = HEAP32[$1>>2]|0;
    $71 = (($70) + -8)|0;
    $$sink = $71;
    break;
   } else {
    return;
   }
  }
 } while(0);
 HEAP32[$1>>2] = $$sink;
 return;
}
function __tr_flush_block($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$i$i = 0, $$$i25$i = 0, $$0 = 0, $$0$lcssa$i = 0, $$0118$i = 0, $$017$i = 0, $$04659$i$i = 0, $$04659$i20$i = 0, $$04858$i$i = 0, $$04858$i21$i = 0, $$04957$i$i = 0, $$04957$i22$i = 0, $$05056$i$i = 0, $$05056$i23$i = 0, $$092 = 0, $$093 = 0, $$119$i = 0, $$14460$i$i = 0, $$14460$i19$i = 0, $$147$i$i = 0;
 var $$147$i29$i = 0, $$151$i$i = 0, $$151$i28$i = 0, $$161$i$i = 0, $$161$i18$i = 0, $$2$i$i = 0, $$2$i31$i = 0, $$245$i$i = 0, $$245$i30$i = 0, $$pre = 0, $$pre$phi$i$phZ2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi97Z2D = 0, $$pre$phiZ2D = 0, $$pre96 = 0, $$sink = 0, $$sink98 = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0;
 var $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0;
 var $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond$i = 0, $exitcond$i$i = 0, $exitcond$i32$i = 0, $or$cond = 0, $or$cond$i$i = 0, $or$cond$i24$i = 0, $or$cond95 = 0, $spec$select = 0, $spec$select$i = 0, $spec$select$i$i = 0, $spec$select$i16$i = 0, $spec$select52$i$i = 0;
 var $spec$select52$i15$i = 0, $spec$select54$i$i = 0, $spec$select54$i26$i = 0, $spec$select55$i$i = 0, $spec$select55$i27$i = 0, $storemerge = 0, $storemerge$i = 0, $storemerge115$i = 0, $storemerge116$i = 0, $storemerge117$i = 0, $storemerge94 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ((($0)) + 132|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)>(0);
 if ($6) {
  $7 = HEAP32[$0>>2]|0;
  $8 = ((($7)) + 44|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ($9|0)==(2);
  if ($10) {
   $11 = ((($0)) + 148|0);
   $12 = HEAP16[$11>>1]|0;
   $13 = ($12<<16>>16)==(0);
   L5: do {
    if ($13) {
     $25 = ((($0)) + 152|0);
     $26 = HEAP16[$25>>1]|0;
     $27 = ($26<<16>>16)==(0);
     if ($27) {
      $28 = ((($0)) + 156|0);
      $29 = HEAP16[$28>>1]|0;
      $30 = ($29<<16>>16)==(0);
      if ($30) {
       $31 = ((($0)) + 160|0);
       $32 = HEAP16[$31>>1]|0;
       $33 = ($32<<16>>16)==(0);
       if ($33) {
        $34 = ((($0)) + 164|0);
        $35 = HEAP16[$34>>1]|0;
        $36 = ($35<<16>>16)==(0);
        if ($36) {
         $37 = ((($0)) + 168|0);
         $38 = HEAP16[$37>>1]|0;
         $39 = ($38<<16>>16)==(0);
         if ($39) {
          $40 = ((($0)) + 172|0);
          $41 = HEAP16[$40>>1]|0;
          $42 = ($41<<16>>16)==(0);
          if ($42) {
           $43 = ((($0)) + 204|0);
           $44 = HEAP16[$43>>1]|0;
           $45 = ($44<<16>>16)==(0);
           if ($45) {
            $46 = ((($0)) + 208|0);
            $47 = HEAP16[$46>>1]|0;
            $48 = ($47<<16>>16)==(0);
            if ($48) {
             $49 = ((($0)) + 212|0);
             $50 = HEAP16[$49>>1]|0;
             $51 = ($50<<16>>16)==(0);
             if ($51) {
              $52 = ((($0)) + 216|0);
              $53 = HEAP16[$52>>1]|0;
              $54 = ($53<<16>>16)==(0);
              if ($54) {
               $55 = ((($0)) + 220|0);
               $56 = HEAP16[$55>>1]|0;
               $57 = ($56<<16>>16)==(0);
               if ($57) {
                $58 = ((($0)) + 224|0);
                $59 = HEAP16[$58>>1]|0;
                $60 = ($59<<16>>16)==(0);
                if ($60) {
                 $61 = ((($0)) + 228|0);
                 $62 = HEAP16[$61>>1]|0;
                 $63 = ($62<<16>>16)==(0);
                 if ($63) {
                  $64 = ((($0)) + 232|0);
                  $65 = HEAP16[$64>>1]|0;
                  $66 = ($65<<16>>16)==(0);
                  if ($66) {
                   $67 = ((($0)) + 236|0);
                   $68 = HEAP16[$67>>1]|0;
                   $69 = ($68<<16>>16)==(0);
                   if (!($69)) {
                    $$017$i = 0;
                    break;
                   }
                   $70 = ((($0)) + 240|0);
                   $71 = HEAP16[$70>>1]|0;
                   $72 = ($71<<16>>16)==(0);
                   if (!($72)) {
                    $$017$i = 0;
                    break;
                   }
                   $73 = ((($0)) + 244|0);
                   $74 = HEAP16[$73>>1]|0;
                   $75 = ($74<<16>>16)==(0);
                   if (!($75)) {
                    $$017$i = 0;
                    break;
                   }
                   $76 = ((($0)) + 248|0);
                   $77 = HEAP16[$76>>1]|0;
                   $78 = ($77<<16>>16)==(0);
                   if (!($78)) {
                    $$017$i = 0;
                    break;
                   }
                   $79 = ((($0)) + 260|0);
                   $80 = HEAP16[$79>>1]|0;
                   $81 = ($80<<16>>16)==(0);
                   if (!($81)) {
                    $$017$i = 0;
                    break;
                   }
                   $82 = ((($0)) + 264|0);
                   $83 = HEAP16[$82>>1]|0;
                   $84 = ($83<<16>>16)==(0);
                   if (!($84)) {
                    $$017$i = 0;
                    break;
                   }
                   $85 = ((($0)) + 268|0);
                   $86 = HEAP16[$85>>1]|0;
                   $87 = ($86<<16>>16)==(0);
                   if (!($87)) {
                    $$017$i = 0;
                    break;
                   }
                   $88 = ((($0)) + 272|0);
                   $89 = HEAP16[$88>>1]|0;
                   $90 = ($89<<16>>16)==(0);
                   if (!($90)) {
                    $$017$i = 0;
                    break;
                   }
                   $91 = ((($0)) + 184|0);
                   $92 = HEAP16[$91>>1]|0;
                   $93 = ($92<<16>>16)==(0);
                   if (!($93)) {
                    $$017$i = 1;
                    break;
                   }
                   $14 = ((($0)) + 188|0);
                   $15 = HEAP16[$14>>1]|0;
                   $16 = ($15<<16>>16)==(0);
                   if (!($16)) {
                    $$017$i = 1;
                    break;
                   }
                   $17 = ((($0)) + 200|0);
                   $18 = HEAP16[$17>>1]|0;
                   $19 = ($18<<16>>16)==(0);
                   if (!($19)) {
                    $$017$i = 1;
                    break;
                   }
                   $$119$i = 32;
                   while(1) {
                    $22 = (((($0)) + 148|0) + ($$119$i<<2)|0);
                    $23 = HEAP16[$22>>1]|0;
                    $24 = ($23<<16>>16)==(0);
                    $20 = (($$119$i) + 1)|0;
                    if (!($24)) {
                     $$017$i = 1;
                     break L5;
                    }
                    $21 = ($20>>>0)<(256);
                    if ($21) {
                     $$119$i = $20;
                    } else {
                     $$017$i = 0;
                     break;
                    }
                   }
                  } else {
                   $$017$i = 0;
                  }
                 } else {
                  $$017$i = 0;
                 }
                } else {
                 $$017$i = 0;
                }
               } else {
                $$017$i = 0;
               }
              } else {
               $$017$i = 0;
              }
             } else {
              $$017$i = 0;
             }
            } else {
             $$017$i = 0;
            }
           } else {
            $$017$i = 0;
           }
          } else {
           $$017$i = 0;
          }
         } else {
          $$017$i = 0;
         }
        } else {
         $$017$i = 0;
        }
       } else {
        $$017$i = 0;
       }
      } else {
       $$017$i = 0;
      }
     } else {
      $$017$i = 0;
     }
    } else {
     $$017$i = 0;
    }
   } while(0);
   HEAP32[$8>>2] = $$017$i;
  }
  $94 = ((($0)) + 2840|0);
  _build_tree($0,$94);
  $95 = ((($0)) + 2852|0);
  _build_tree($0,$95);
  $96 = ((($0)) + 2844|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ((($0)) + 150|0);
  $99 = HEAP16[$98>>1]|0;
  $100 = ($99<<16>>16)==(0);
  $101 = (($97) + 1)|0;
  $102 = (((((($0)) + 148|0) + ($101<<2)|0)) + 2|0);
  HEAP16[$102>>1] = -1;
  $103 = ($97|0)<(0);
  if (!($103)) {
   $spec$select52$i$i = $100 ? 3 : 4;
   $spec$select$i$i = $100 ? 138 : 7;
   $104 = $99&65535;
   $105 = ((($0)) + 2752|0);
   $106 = ((($0)) + 2756|0);
   $107 = ((($0)) + 2748|0);
   $$04659$i$i = 0;$$04858$i$i = $104;$$04957$i$i = 0;$$05056$i$i = -1;$$14460$i$i = $spec$select$i$i;$$161$i$i = $spec$select52$i$i;
   while(1) {
    $108 = (($$04957$i$i) + 1)|0;
    $109 = (((((($0)) + 148|0) + ($108<<2)|0)) + 2|0);
    $110 = HEAP16[$109>>1]|0;
    $111 = $110&65535;
    $112 = (($$04659$i$i) + 1)|0;
    $113 = ($112|0)<($$14460$i$i|0);
    $114 = ($$04858$i$i|0)==($111|0);
    $or$cond$i$i = $113 & $114;
    if ($or$cond$i$i) {
     $$147$i$i = $112;$$151$i$i = $$05056$i$i;$$2$i$i = $$161$i$i;$$245$i$i = $$14460$i$i;
    } else {
     $115 = ($112|0)<($$161$i$i|0);
     do {
      if ($115) {
       $116 = (((($0)) + 2684|0) + ($$04858$i$i<<2)|0);
       $117 = HEAP16[$116>>1]|0;
       $118 = $117&65535;
       $119 = (($112) + ($118))|0;
       $120 = $119&65535;
       HEAP16[$116>>1] = $120;
      } else {
       $121 = ($$04858$i$i|0)==(0);
       if ($121) {
        $128 = ($$04659$i$i|0)<(10);
        if ($128) {
         $129 = HEAP16[$105>>1]|0;
         $130 = (($129) + 1)<<16>>16;
         HEAP16[$105>>1] = $130;
         break;
        } else {
         $131 = HEAP16[$106>>1]|0;
         $132 = (($131) + 1)<<16>>16;
         HEAP16[$106>>1] = $132;
         break;
        }
       } else {
        $122 = ($$04858$i$i|0)==($$05056$i$i|0);
        $123 = (((($0)) + 2684|0) + ($$04858$i$i<<2)|0);
        if (!($122)) {
         $124 = HEAP16[$123>>1]|0;
         $125 = (($124) + 1)<<16>>16;
         HEAP16[$123>>1] = $125;
        }
        $126 = HEAP16[$107>>1]|0;
        $127 = (($126) + 1)<<16>>16;
        HEAP16[$107>>1] = $127;
        break;
       }
      }
     } while(0);
     $133 = ($110<<16>>16)==(0);
     $$$i$i = $114 ? 6 : 7;
     $spec$select54$i$i = $133 ? 138 : $$$i$i;
     $134 = $133 | $114;
     $spec$select55$i$i = $134 ? 3 : 4;
     $$147$i$i = 0;$$151$i$i = $$04858$i$i;$$2$i$i = $spec$select55$i$i;$$245$i$i = $spec$select54$i$i;
    }
    $exitcond$i$i = ($108|0)==($101|0);
    if ($exitcond$i$i) {
     break;
    } else {
     $$04659$i$i = $$147$i$i;$$04858$i$i = $111;$$04957$i$i = $108;$$05056$i$i = $$151$i$i;$$14460$i$i = $$245$i$i;$$161$i$i = $$2$i$i;
    }
   }
  }
  $135 = ((($0)) + 2856|0);
  $136 = HEAP32[$135>>2]|0;
  $137 = ((($0)) + 2442|0);
  $138 = HEAP16[$137>>1]|0;
  $139 = ($138<<16>>16)==(0);
  $140 = (($136) + 1)|0;
  $141 = (((((($0)) + 2440|0) + ($140<<2)|0)) + 2|0);
  HEAP16[$141>>1] = -1;
  $142 = ($136|0)<(0);
  if (!($142)) {
   $spec$select52$i15$i = $139 ? 3 : 4;
   $spec$select$i16$i = $139 ? 138 : 7;
   $143 = $138&65535;
   $144 = ((($0)) + 2752|0);
   $145 = ((($0)) + 2756|0);
   $146 = ((($0)) + 2748|0);
   $$04659$i20$i = 0;$$04858$i21$i = $143;$$04957$i22$i = 0;$$05056$i23$i = -1;$$14460$i19$i = $spec$select$i16$i;$$161$i18$i = $spec$select52$i15$i;
   while(1) {
    $147 = (($$04957$i22$i) + 1)|0;
    $148 = (((((($0)) + 2440|0) + ($147<<2)|0)) + 2|0);
    $149 = HEAP16[$148>>1]|0;
    $150 = $149&65535;
    $151 = (($$04659$i20$i) + 1)|0;
    $152 = ($151|0)<($$14460$i19$i|0);
    $153 = ($$04858$i21$i|0)==($150|0);
    $or$cond$i24$i = $152 & $153;
    if ($or$cond$i24$i) {
     $$147$i29$i = $151;$$151$i28$i = $$05056$i23$i;$$2$i31$i = $$161$i18$i;$$245$i30$i = $$14460$i19$i;
    } else {
     $154 = ($151|0)<($$161$i18$i|0);
     do {
      if ($154) {
       $155 = (((($0)) + 2684|0) + ($$04858$i21$i<<2)|0);
       $156 = HEAP16[$155>>1]|0;
       $157 = $156&65535;
       $158 = (($151) + ($157))|0;
       $159 = $158&65535;
       HEAP16[$155>>1] = $159;
      } else {
       $160 = ($$04858$i21$i|0)==(0);
       if ($160) {
        $167 = ($$04659$i20$i|0)<(10);
        if ($167) {
         $168 = HEAP16[$144>>1]|0;
         $169 = (($168) + 1)<<16>>16;
         HEAP16[$144>>1] = $169;
         break;
        } else {
         $170 = HEAP16[$145>>1]|0;
         $171 = (($170) + 1)<<16>>16;
         HEAP16[$145>>1] = $171;
         break;
        }
       } else {
        $161 = ($$04858$i21$i|0)==($$05056$i23$i|0);
        $162 = (((($0)) + 2684|0) + ($$04858$i21$i<<2)|0);
        if (!($161)) {
         $163 = HEAP16[$162>>1]|0;
         $164 = (($163) + 1)<<16>>16;
         HEAP16[$162>>1] = $164;
        }
        $165 = HEAP16[$146>>1]|0;
        $166 = (($165) + 1)<<16>>16;
        HEAP16[$146>>1] = $166;
        break;
       }
      }
     } while(0);
     $172 = ($149<<16>>16)==(0);
     $$$i25$i = $153 ? 6 : 7;
     $spec$select54$i26$i = $172 ? 138 : $$$i25$i;
     $173 = $172 | $153;
     $spec$select55$i27$i = $173 ? 3 : 4;
     $$147$i29$i = 0;$$151$i28$i = $$04858$i21$i;$$2$i31$i = $spec$select55$i27$i;$$245$i30$i = $spec$select54$i26$i;
    }
    $exitcond$i32$i = ($147|0)==($140|0);
    if ($exitcond$i32$i) {
     break;
    } else {
     $$04659$i20$i = $$147$i29$i;$$04858$i21$i = $150;$$04957$i22$i = $147;$$05056$i23$i = $$151$i28$i;$$14460$i19$i = $$245$i30$i;$$161$i18$i = $$2$i31$i;
    }
   }
  }
  $174 = ((($0)) + 2864|0);
  _build_tree($0,$174);
  $175 = ((($0)) + 2746|0);
  $176 = HEAP16[$175>>1]|0;
  $177 = ($176<<16>>16)==(0);
  do {
   if ($177) {
    $178 = ((($0)) + 2690|0);
    $179 = HEAP16[$178>>1]|0;
    $180 = ($179<<16>>16)==(0);
    if ($180) {
     $181 = ((($0)) + 2742|0);
     $182 = HEAP16[$181>>1]|0;
     $183 = ($182<<16>>16)==(0);
     if ($183) {
      $184 = ((($0)) + 2694|0);
      $185 = HEAP16[$184>>1]|0;
      $186 = ($185<<16>>16)==(0);
      if ($186) {
       $187 = ((($0)) + 2738|0);
       $188 = HEAP16[$187>>1]|0;
       $189 = ($188<<16>>16)==(0);
       if ($189) {
        $190 = ((($0)) + 2698|0);
        $191 = HEAP16[$190>>1]|0;
        $192 = ($191<<16>>16)==(0);
        if ($192) {
         $193 = ((($0)) + 2734|0);
         $194 = HEAP16[$193>>1]|0;
         $195 = ($194<<16>>16)==(0);
         if ($195) {
          $196 = ((($0)) + 2702|0);
          $197 = HEAP16[$196>>1]|0;
          $198 = ($197<<16>>16)==(0);
          if ($198) {
           $199 = ((($0)) + 2730|0);
           $200 = HEAP16[$199>>1]|0;
           $201 = ($200<<16>>16)==(0);
           if ($201) {
            $202 = ((($0)) + 2706|0);
            $203 = HEAP16[$202>>1]|0;
            $204 = ($203<<16>>16)==(0);
            if ($204) {
             $205 = ((($0)) + 2726|0);
             $206 = HEAP16[$205>>1]|0;
             $207 = ($206<<16>>16)==(0);
             if ($207) {
              $208 = ((($0)) + 2710|0);
              $209 = HEAP16[$208>>1]|0;
              $210 = ($209<<16>>16)==(0);
              if ($210) {
               $211 = ((($0)) + 2722|0);
               $212 = HEAP16[$211>>1]|0;
               $213 = ($212<<16>>16)==(0);
               if ($213) {
                $214 = ((($0)) + 2714|0);
                $215 = HEAP16[$214>>1]|0;
                $216 = ($215<<16>>16)==(0);
                if ($216) {
                 $217 = ((($0)) + 2718|0);
                 $218 = HEAP16[$217>>1]|0;
                 $219 = ($218<<16>>16)==(0);
                 if (!($219)) {
                  $$0$lcssa$i = 4;
                  break;
                 }
                 $220 = ((($0)) + 2686|0);
                 $221 = HEAP16[$220>>1]|0;
                 $222 = ($221<<16>>16)==(0);
                 $spec$select$i = $222 ? 2 : 3;
                 $$0$lcssa$i = $spec$select$i;
                } else {
                 $$0$lcssa$i = 5;
                }
               } else {
                $$0$lcssa$i = 6;
               }
              } else {
               $$0$lcssa$i = 7;
              }
             } else {
              $$0$lcssa$i = 8;
             }
            } else {
             $$0$lcssa$i = 9;
            }
           } else {
            $$0$lcssa$i = 10;
           }
          } else {
           $$0$lcssa$i = 11;
          }
         } else {
          $$0$lcssa$i = 12;
         }
        } else {
         $$0$lcssa$i = 13;
        }
       } else {
        $$0$lcssa$i = 14;
       }
      } else {
       $$0$lcssa$i = 15;
      }
     } else {
      $$0$lcssa$i = 16;
     }
    } else {
     $$0$lcssa$i = 17;
    }
   } else {
    $$0$lcssa$i = 18;
   }
  } while(0);
  $223 = ($$0$lcssa$i*3)|0;
  $224 = (($223) + 17)|0;
  $225 = ((($0)) + 5800|0);
  $226 = HEAP32[$225>>2]|0;
  $227 = (($224) + ($226))|0;
  HEAP32[$225>>2] = $227;
  $228 = (($227) + 10)|0;
  $229 = $228 >>> 3;
  $230 = ((($0)) + 5804|0);
  $231 = HEAP32[$230>>2]|0;
  $232 = (($231) + 10)|0;
  $233 = $232 >>> 3;
  $234 = ($233>>>0)>($229>>>0);
  $spec$select = $234 ? $229 : $233;
  $$0 = $spec$select;$$092 = $233;$$093 = $$0$lcssa$i;
 } else {
  $235 = (($2) + 5)|0;
  $$0 = $235;$$092 = $235;$$093 = 0;
 }
 $236 = (($2) + 4)|0;
 $237 = ($236>>>0)<=($$0>>>0);
 $238 = ($1|0)!=(0|0);
 $or$cond = $238 & $237;
 do {
  if ($or$cond) {
   __tr_stored_block($0,$1,$2,$3);
  } else {
   $239 = ((($0)) + 136|0);
   $240 = HEAP32[$239>>2]|0;
   $241 = ($240|0)==(4);
   $242 = ($$092|0)==($$0|0);
   $or$cond95 = $242 | $241;
   $243 = ((($0)) + 5820|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = ($244|0)>(13);
   if ($or$cond95) {
    $246 = (($3) + 2)|0;
    $247 = $246 & 65535;
    $248 = $247 << $244;
    $249 = ((($0)) + 5816|0);
    $250 = HEAP16[$249>>1]|0;
    $251 = $250&65535;
    $252 = $248 | $251;
    $253 = $252&65535;
    HEAP16[$249>>1] = $253;
    if ($245) {
     $254 = $252&255;
     $255 = ((($0)) + 8|0);
     $256 = HEAP32[$255>>2]|0;
     $257 = ((($0)) + 20|0);
     $258 = HEAP32[$257>>2]|0;
     $259 = (($258) + 1)|0;
     HEAP32[$257>>2] = $259;
     $260 = (($256) + ($258)|0);
     HEAP8[$260>>0] = $254;
     $261 = HEAP16[$249>>1]|0;
     $262 = ($261&65535) >>> 8;
     $263 = $262&255;
     $264 = HEAP32[$255>>2]|0;
     $265 = HEAP32[$257>>2]|0;
     $266 = (($265) + 1)|0;
     HEAP32[$257>>2] = $266;
     $267 = (($264) + ($265)|0);
     HEAP8[$267>>0] = $263;
     $268 = HEAP32[$243>>2]|0;
     $269 = (16 - ($268))|0;
     $270 = $247 >>> $269;
     $271 = $270&65535;
     HEAP16[$249>>1] = $271;
     $272 = (($268) + -13)|0;
     $storemerge94 = $272;
    } else {
     $273 = (($244) + 3)|0;
     $storemerge94 = $273;
    }
    HEAP32[$243>>2] = $storemerge94;
    _compress_block($0,13414,13294);
    break;
   }
   $274 = (($3) + 4)|0;
   $275 = $274 & 65535;
   $276 = $275 << $244;
   $277 = ((($0)) + 5816|0);
   $278 = HEAP16[$277>>1]|0;
   $279 = $278&65535;
   $280 = $276 | $279;
   $281 = $280&65535;
   HEAP16[$277>>1] = $281;
   if ($245) {
    $282 = $280&255;
    $283 = ((($0)) + 8|0);
    $284 = HEAP32[$283>>2]|0;
    $285 = ((($0)) + 20|0);
    $286 = HEAP32[$285>>2]|0;
    $287 = (($286) + 1)|0;
    HEAP32[$285>>2] = $287;
    $288 = (($284) + ($286)|0);
    HEAP8[$288>>0] = $282;
    $289 = HEAP16[$277>>1]|0;
    $290 = ($289&65535) >>> 8;
    $291 = $290&255;
    $292 = HEAP32[$283>>2]|0;
    $293 = HEAP32[$285>>2]|0;
    $294 = (($293) + 1)|0;
    HEAP32[$285>>2] = $294;
    $295 = (($292) + ($293)|0);
    HEAP8[$295>>0] = $291;
    $296 = HEAP32[$243>>2]|0;
    $297 = (16 - ($296))|0;
    $298 = $275 >>> $297;
    $299 = $298&65535;
    HEAP16[$277>>1] = $299;
    $300 = (($296) + -13)|0;
    $311 = $298;$storemerge = $300;
   } else {
    $301 = (($244) + 3)|0;
    $311 = $280;$storemerge = $301;
   }
   HEAP32[$243>>2] = $storemerge;
   $302 = ((($0)) + 2844|0);
   $303 = HEAP32[$302>>2]|0;
   $304 = ((($0)) + 2856|0);
   $305 = HEAP32[$304>>2]|0;
   $306 = ($storemerge|0)>(11);
   $307 = (($303) + 65280)|0;
   $308 = $307 & 65535;
   $309 = $308 << $storemerge;
   $310 = $311 & 65535;
   $312 = $309 | $310;
   $313 = $312&65535;
   HEAP16[$277>>1] = $313;
   if ($306) {
    $314 = $312&255;
    $315 = ((($0)) + 8|0);
    $316 = HEAP32[$315>>2]|0;
    $317 = ((($0)) + 20|0);
    $318 = HEAP32[$317>>2]|0;
    $319 = (($318) + 1)|0;
    HEAP32[$317>>2] = $319;
    $320 = (($316) + ($318)|0);
    HEAP8[$320>>0] = $314;
    $321 = HEAP16[$277>>1]|0;
    $322 = ($321&65535) >>> 8;
    $323 = $322&255;
    $324 = HEAP32[$315>>2]|0;
    $325 = HEAP32[$317>>2]|0;
    $326 = (($325) + 1)|0;
    HEAP32[$317>>2] = $326;
    $327 = (($324) + ($325)|0);
    HEAP8[$327>>0] = $323;
    $328 = HEAP32[$243>>2]|0;
    $329 = (16 - ($328))|0;
    $330 = $308 >>> $329;
    $331 = $330&65535;
    HEAP16[$277>>1] = $331;
    $332 = (($328) + -11)|0;
    $338 = $330;$storemerge$i = $332;
   } else {
    $333 = (($storemerge) + 5)|0;
    $338 = $312;$storemerge$i = $333;
   }
   HEAP32[$243>>2] = $storemerge$i;
   $334 = ($storemerge$i|0)>(11);
   $335 = $305 & 65535;
   $336 = $335 << $storemerge$i;
   $337 = $338 & 65535;
   $339 = $336 | $337;
   $340 = $339&65535;
   HEAP16[$277>>1] = $340;
   if ($334) {
    $341 = $339&255;
    $342 = ((($0)) + 8|0);
    $343 = HEAP32[$342>>2]|0;
    $344 = ((($0)) + 20|0);
    $345 = HEAP32[$344>>2]|0;
    $346 = (($345) + 1)|0;
    HEAP32[$344>>2] = $346;
    $347 = (($343) + ($345)|0);
    HEAP8[$347>>0] = $341;
    $348 = HEAP16[$277>>1]|0;
    $349 = ($348&65535) >>> 8;
    $350 = $349&255;
    $351 = HEAP32[$342>>2]|0;
    $352 = HEAP32[$344>>2]|0;
    $353 = (($352) + 1)|0;
    HEAP32[$344>>2] = $353;
    $354 = (($351) + ($352)|0);
    HEAP8[$354>>0] = $350;
    $355 = HEAP32[$243>>2]|0;
    $356 = (16 - ($355))|0;
    $357 = $335 >>> $356;
    $358 = $357&65535;
    HEAP16[$277>>1] = $358;
    $359 = (($355) + -11)|0;
    $366 = $357;$storemerge115$i = $359;
   } else {
    $360 = (($storemerge$i) + 5)|0;
    $366 = $339;$storemerge115$i = $360;
   }
   HEAP32[$243>>2] = $storemerge115$i;
   $361 = ($storemerge115$i|0)>(12);
   $362 = (($$093) + 65533)|0;
   $363 = $362 & 65535;
   $364 = $363 << $storemerge115$i;
   $365 = $366 & 65535;
   $367 = $364 | $365;
   $368 = $367&65535;
   HEAP16[$277>>1] = $368;
   if ($361) {
    $369 = $367&255;
    $370 = ((($0)) + 8|0);
    $371 = HEAP32[$370>>2]|0;
    $372 = ((($0)) + 20|0);
    $373 = HEAP32[$372>>2]|0;
    $374 = (($373) + 1)|0;
    HEAP32[$372>>2] = $374;
    $375 = (($371) + ($373)|0);
    HEAP8[$375>>0] = $369;
    $376 = HEAP16[$277>>1]|0;
    $377 = ($376&65535) >>> 8;
    $378 = $377&255;
    $379 = HEAP32[$370>>2]|0;
    $380 = HEAP32[$372>>2]|0;
    $381 = (($380) + 1)|0;
    HEAP32[$372>>2] = $381;
    $382 = (($379) + ($380)|0);
    HEAP8[$382>>0] = $378;
    $383 = HEAP32[$243>>2]|0;
    $384 = (16 - ($383))|0;
    $385 = $363 >>> $384;
    $386 = $385&65535;
    HEAP16[$277>>1] = $386;
    $387 = (($383) + -12)|0;
    $$pre$phi97Z2D = $372;$$pre$phiZ2D = $370;$453 = $385;$storemerge116$i = $387;
   } else {
    $388 = (($storemerge115$i) + 4)|0;
    $$pre = ((($0)) + 8|0);
    $$pre96 = ((($0)) + 20|0);
    $$pre$phi97Z2D = $$pre96;$$pre$phiZ2D = $$pre;$453 = $367;$storemerge116$i = $388;
   }
   HEAP32[$243>>2] = $storemerge116$i;
   $$0118$i = 0;$389 = $storemerge116$i;$399 = $453;
   while(1) {
    $390 = ($389|0)>(13);
    $391 = (28629 + ($$0118$i)|0);
    $392 = HEAP8[$391>>0]|0;
    $393 = $392&255;
    $394 = (((((($0)) + 2684|0) + ($393<<2)|0)) + 2|0);
    $395 = HEAP16[$394>>1]|0;
    $396 = $395&65535;
    $397 = $396 << $389;
    $398 = $399 & 65535;
    $400 = $397 | $398;
    $401 = $400&65535;
    HEAP16[$277>>1] = $401;
    if ($390) {
     $402 = $400&255;
     $403 = HEAP32[$$pre$phiZ2D>>2]|0;
     $404 = HEAP32[$$pre$phi97Z2D>>2]|0;
     $405 = (($404) + 1)|0;
     HEAP32[$$pre$phi97Z2D>>2] = $405;
     $406 = (($403) + ($404)|0);
     HEAP8[$406>>0] = $402;
     $407 = HEAP16[$277>>1]|0;
     $408 = ($407&65535) >>> 8;
     $409 = $408&255;
     $410 = HEAP32[$$pre$phiZ2D>>2]|0;
     $411 = HEAP32[$$pre$phi97Z2D>>2]|0;
     $412 = (($411) + 1)|0;
     HEAP32[$$pre$phi97Z2D>>2] = $412;
     $413 = (($410) + ($411)|0);
     HEAP8[$413>>0] = $409;
     $414 = HEAP32[$243>>2]|0;
     $415 = (16 - ($414))|0;
     $416 = $396 >>> $415;
     $417 = $416&65535;
     HEAP16[$277>>1] = $417;
     $418 = (($414) + -13)|0;
     $454 = $416;$storemerge117$i = $418;
    } else {
     $419 = (($389) + 3)|0;
     $454 = $400;$storemerge117$i = $419;
    }
    HEAP32[$243>>2] = $storemerge117$i;
    $420 = (($$0118$i) + 1)|0;
    $exitcond$i = ($$0118$i|0)==($$093|0);
    if ($exitcond$i) {
     break;
    } else {
     $$0118$i = $420;$389 = $storemerge117$i;$399 = $454;
    }
   }
   $421 = ((($0)) + 148|0);
   _send_tree($0,$421,$303);
   $422 = ((($0)) + 2440|0);
   _send_tree($0,$422,$305);
   _compress_block($0,$421,$422);
  }
 } while(0);
 _init_block($0);
 $423 = ($3|0)==(0);
 if ($423) {
  return;
 }
 $424 = ((($0)) + 5820|0);
 $425 = HEAP32[$424>>2]|0;
 $426 = ($425|0)>(8);
 if ($426) {
  $427 = ((($0)) + 5816|0);
  $428 = HEAP16[$427>>1]|0;
  $429 = $428&255;
  $430 = ((($0)) + 8|0);
  $431 = HEAP32[$430>>2]|0;
  $432 = ((($0)) + 20|0);
  $433 = HEAP32[$432>>2]|0;
  $434 = (($433) + 1)|0;
  HEAP32[$432>>2] = $434;
  $435 = (($431) + ($433)|0);
  HEAP8[$435>>0] = $429;
  $436 = HEAP16[$427>>1]|0;
  $437 = ($436&65535) >>> 8;
  $438 = $437&255;
  $439 = HEAP32[$430>>2]|0;
  $440 = HEAP32[$432>>2]|0;
  $441 = (($440) + 1)|0;
  HEAP32[$432>>2] = $441;
  $442 = (($439) + ($440)|0);
  $$pre$phi$i$phZ2D = $427;$$sink = $438;$$sink98 = $442;
  label = 109;
 } else {
  $443 = ($425|0)>(0);
  $444 = ((($0)) + 5816|0);
  if ($443) {
   $445 = HEAP16[$444>>1]|0;
   $446 = $445&255;
   $447 = ((($0)) + 8|0);
   $448 = HEAP32[$447>>2]|0;
   $449 = ((($0)) + 20|0);
   $450 = HEAP32[$449>>2]|0;
   $451 = (($450) + 1)|0;
   HEAP32[$449>>2] = $451;
   $452 = (($448) + ($450)|0);
   $$pre$phi$i$phZ2D = $444;$$sink = $446;$$sink98 = $452;
   label = 109;
  } else {
   $$pre$phi$iZ2D = $444;
  }
 }
 if ((label|0) == 109) {
  HEAP8[$$sink98>>0] = $$sink;
  $$pre$phi$iZ2D = $$pre$phi$i$phZ2D;
 }
 HEAP16[$$pre$phi$iZ2D>>1] = 0;
 HEAP32[$424>>2] = 0;
 return;
}
function _build_tree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i112 = 0, $$0$i125 = 0, $$0$lcssa$i = 0, $$0109$i = 0, $$0109$us$i = 0, $$010917$i = 0, $$010919$i = 0, $$010919$us$i = 0, $$0112$i = 0, $$0112$us$i = 0, $$0116$ph7$i = 0, $$018$i = 0, $$018$us$i = 0, $$02426$i = 0, $$052$lcssa$ph$i = 0, $$052$lcssa$ph$i113 = 0, $$052$lcssa$ph$i126 = 0;
 var $$05254$i = 0, $$05254$i107 = 0, $$05254$i120 = 0, $$053$i = 0, $$055$i = 0, $$055$i106 = 0, $$055$i119 = 0, $$07$i$i = 0, $$08$i$i = 0, $$097$lcssa163 = 0, $$097146 = 0, $$098145 = 0, $$1 = 0, $$1$i = 0, $$1$i111 = 0, $$1$i124 = 0, $$111014$i = 0, $$199139 = 0, $$2$i = 0, $$2$lcssa = 0;
 var $$2111$lcssa$i = 0, $$2111$ph8$i = 0, $$21115$i = 0, $$2115$i = 0, $$2115$in$i = 0, $$2140 = 0, $$2140$us = 0, $$310$i = 0, $$idx$val = 0, $$idx101$val = 0, $$idx102$val = 0, $$lcssa138 = 0, $$phi$trans$insert$i = 0, $$phi$trans$insert33$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i104 = 0, $$pre$i114 = 0, $$pre$i127 = 0, $$pre$phi$i116Z2D = 0;
 var $$pre$phi$i129Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi62$i110Z2D = 0, $$pre$phi62$i123Z2D = 0, $$pre$phi62$iZ2D = 0, $$pre160 = 0, $$pre161 = 0, $$pre161$pre = 0, $$pre34$i = 0, $$pre61$i = 0, $$pre61$i108 = 0, $$pre61$i121 = 0, $$v = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0;
 var $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $exitcond$i = 0, $not$$i = 0, $not$$us$i = 0, $scevgep$i = 0, $spec$select = 0, $spec$select$i = 0, $spec$select$us = 0, $spec$select$us$i = 0, $spec$select100 = 0, $spec$select100$us = 0, $spec$select117$i = 0, $spec$select117$us$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($5)) + 12|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 5200|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($0)) + 5204|0);
 HEAP32[$10>>2] = 573;
 $11 = ($8|0)>(0);
 if ($11) {
  $$097146 = -1;$$098145 = 0;
  while(1) {
   $12 = (($3) + ($$098145<<2)|0);
   $13 = HEAP16[$12>>1]|0;
   $14 = ($13<<16>>16)==(0);
   if ($14) {
    $19 = (((($3) + ($$098145<<2)|0)) + 2|0);
    HEAP16[$19>>1] = 0;
    $$1 = $$097146;
   } else {
    $15 = HEAP32[$9>>2]|0;
    $16 = (($15) + 1)|0;
    HEAP32[$9>>2] = $16;
    $17 = (((($0)) + 2908|0) + ($16<<2)|0);
    HEAP32[$17>>2] = $$098145;
    $18 = (((($0)) + 5208|0) + ($$098145)|0);
    HEAP8[$18>>0] = 0;
    $$1 = $$098145;
   }
   $20 = (($$098145) + 1)|0;
   $exitcond = ($20|0)==($8|0);
   if ($exitcond) {
    break;
   } else {
    $$097146 = $$1;$$098145 = $20;
   }
  }
  $$pre = HEAP32[$9>>2]|0;
  $21 = ($$pre|0)<(2);
  if ($21) {
   $$097$lcssa163 = $$1;$453 = $$pre;
   label = 8;
  } else {
   $$2$lcssa = $$1;$$lcssa138 = $$pre;
  }
 } else {
  $$097$lcssa163 = -1;$453 = 0;
  label = 8;
 }
 if ((label|0) == 8) {
  $22 = ((($0)) + 5800|0);
  $23 = ($6|0)==(0|0);
  $24 = ((($0)) + 5804|0);
  if ($23) {
   $$2140$us = $$097$lcssa163;$28 = $453;
   while(1) {
    $25 = ($$2140$us|0)<(2);
    $26 = (($$2140$us) + 1)|0;
    $spec$select$us = $25 ? $26 : $$2140$us;
    $spec$select100$us = $25 ? $26 : 0;
    $27 = (($28) + 1)|0;
    HEAP32[$9>>2] = $27;
    $29 = (((($0)) + 2908|0) + ($27<<2)|0);
    HEAP32[$29>>2] = $spec$select100$us;
    $30 = (($3) + ($spec$select100$us<<2)|0);
    HEAP16[$30>>1] = 1;
    $31 = (((($0)) + 5208|0) + ($spec$select100$us)|0);
    HEAP8[$31>>0] = 0;
    $32 = HEAP32[$22>>2]|0;
    $33 = (($32) + -1)|0;
    HEAP32[$22>>2] = $33;
    $34 = HEAP32[$9>>2]|0;
    $35 = ($34|0)<(2);
    if ($35) {
     $$2140$us = $spec$select$us;$28 = $34;
    } else {
     $$2$lcssa = $spec$select$us;$$lcssa138 = $34;
     break;
    }
   }
  } else {
   $$2140 = $$097$lcssa163;$39 = $453;
   while(1) {
    $36 = ($$2140|0)<(2);
    $37 = (($$2140) + 1)|0;
    $spec$select = $36 ? $37 : $$2140;
    $spec$select100 = $36 ? $37 : 0;
    $38 = (($39) + 1)|0;
    HEAP32[$9>>2] = $38;
    $40 = (((($0)) + 2908|0) + ($38<<2)|0);
    HEAP32[$40>>2] = $spec$select100;
    $41 = (($3) + ($spec$select100<<2)|0);
    HEAP16[$41>>1] = 1;
    $42 = (((($0)) + 5208|0) + ($spec$select100)|0);
    HEAP8[$42>>0] = 0;
    $43 = HEAP32[$22>>2]|0;
    $44 = (($43) + -1)|0;
    HEAP32[$22>>2] = $44;
    $45 = (((($6) + ($spec$select100<<2)|0)) + 2|0);
    $46 = HEAP16[$45>>1]|0;
    $47 = $46&65535;
    $48 = HEAP32[$24>>2]|0;
    $49 = (($48) - ($47))|0;
    HEAP32[$24>>2] = $49;
    $50 = HEAP32[$9>>2]|0;
    $51 = ($50|0)<(2);
    if ($51) {
     $$2140 = $spec$select;$39 = $50;
    } else {
     $$2$lcssa = $spec$select;$$lcssa138 = $50;
     break;
    }
   }
  }
 }
 $52 = ((($1)) + 4|0);
 HEAP32[$52>>2] = $$2$lcssa;
 $53 = $$lcssa138 >>> 1;
 $54 = ($53|0)==(0);
 if ($54) {
  $$pre161 = $$lcssa138;
 } else {
  $$199139 = $53;$59 = $$lcssa138;
  while(1) {
   $55 = (((($0)) + 2908|0) + ($$199139<<2)|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = (((($0)) + 5208|0) + ($56)|0);
   $$053$i = $$199139 << 1;
   $58 = ($$053$i|0)>($59|0);
   if ($58) {
    $$pre$phi$iZ2D = $55;
   } else {
    $60 = (($3) + ($56<<2)|0);
    $$05254$i = $$199139;$$055$i = $$053$i;$62 = $59;
    while(1) {
     $61 = ($$055$i|0)<($62|0);
     do {
      if ($61) {
       $63 = $$055$i | 1;
       $64 = (((($0)) + 2908|0) + ($63<<2)|0);
       $65 = HEAP32[$64>>2]|0;
       $66 = (($3) + ($65<<2)|0);
       $67 = HEAP16[$66>>1]|0;
       $68 = (((($0)) + 2908|0) + ($$055$i<<2)|0);
       $69 = HEAP32[$68>>2]|0;
       $70 = (($3) + ($69<<2)|0);
       $71 = HEAP16[$70>>1]|0;
       $72 = ($67&65535)<($71&65535);
       if (!($72)) {
        $73 = ($67<<16>>16)==($71<<16>>16);
        if (!($73)) {
         $$1$i = $$055$i;$$pre$phi62$iZ2D = $68;
         break;
        }
        $74 = (((($0)) + 5208|0) + ($65)|0);
        $75 = HEAP8[$74>>0]|0;
        $76 = (((($0)) + 5208|0) + ($69)|0);
        $77 = HEAP8[$76>>0]|0;
        $78 = ($75&255)>($77&255);
        if ($78) {
         $$1$i = $$055$i;$$pre$phi62$iZ2D = $68;
         break;
        }
       }
       $$1$i = $63;$$pre$phi62$iZ2D = $64;
      } else {
       $$pre61$i = (((($0)) + 2908|0) + ($$055$i<<2)|0);
       $$1$i = $$055$i;$$pre$phi62$iZ2D = $$pre61$i;
      }
     } while(0);
     $79 = HEAP16[$60>>1]|0;
     $80 = HEAP32[$$pre$phi62$iZ2D>>2]|0;
     $81 = (($3) + ($80<<2)|0);
     $82 = HEAP16[$81>>1]|0;
     $83 = ($79&65535)<($82&65535);
     if ($83) {
      $$052$lcssa$ph$i = $$05254$i;
      break;
     }
     $84 = ($79<<16>>16)==($82<<16>>16);
     if ($84) {
      $85 = HEAP8[$57>>0]|0;
      $86 = (((($0)) + 5208|0) + ($80)|0);
      $87 = HEAP8[$86>>0]|0;
      $88 = ($85&255)>($87&255);
      if (!($88)) {
       $$052$lcssa$ph$i = $$05254$i;
       break;
      }
     }
     $89 = (((($0)) + 2908|0) + ($$05254$i<<2)|0);
     HEAP32[$89>>2] = $80;
     $$0$i = $$1$i << 1;
     $90 = HEAP32[$9>>2]|0;
     $91 = ($$0$i|0)>($90|0);
     if ($91) {
      $$052$lcssa$ph$i = $$1$i;
      break;
     } else {
      $$05254$i = $$1$i;$$055$i = $$0$i;$62 = $90;
     }
    }
    $$pre$i = (((($0)) + 2908|0) + ($$052$lcssa$ph$i<<2)|0);
    $$pre$phi$iZ2D = $$pre$i;
   }
   HEAP32[$$pre$phi$iZ2D>>2] = $56;
   $92 = ($$199139|0)>(1);
   if (!($92)) {
    break;
   }
   $93 = (($$199139) + -1)|0;
   $$pre160 = HEAP32[$9>>2]|0;
   $$199139 = $93;$59 = $$pre160;
  }
  $$pre161$pre = HEAP32[$9>>2]|0;
  $$pre161 = $$pre161$pre;
 }
 $94 = ((($0)) + 2912|0);
 $$0 = $8;$97 = $$pre161;
 while(1) {
  $95 = HEAP32[$94>>2]|0;
  $96 = (($97) + -1)|0;
  HEAP32[$9>>2] = $96;
  $98 = (((($0)) + 2908|0) + ($97<<2)|0);
  $99 = HEAP32[$98>>2]|0;
  HEAP32[$94>>2] = $99;
  $100 = (((($0)) + 5208|0) + ($99)|0);
  $101 = ($97|0)<(3);
  if ($101) {
   $$pre$phi$i129Z2D = $94;
  } else {
   $102 = (($3) + ($99<<2)|0);
   $$05254$i120 = 1;$$055$i119 = 2;$104 = $96;
   while(1) {
    $103 = ($$055$i119|0)<($104|0);
    do {
     if ($103) {
      $105 = $$055$i119 | 1;
      $106 = (((($0)) + 2908|0) + ($105<<2)|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = (($3) + ($107<<2)|0);
      $109 = HEAP16[$108>>1]|0;
      $110 = (((($0)) + 2908|0) + ($$055$i119<<2)|0);
      $111 = HEAP32[$110>>2]|0;
      $112 = (($3) + ($111<<2)|0);
      $113 = HEAP16[$112>>1]|0;
      $114 = ($109&65535)<($113&65535);
      if (!($114)) {
       $115 = ($109<<16>>16)==($113<<16>>16);
       if (!($115)) {
        $$1$i124 = $$055$i119;$$pre$phi62$i123Z2D = $110;
        break;
       }
       $116 = (((($0)) + 5208|0) + ($107)|0);
       $117 = HEAP8[$116>>0]|0;
       $118 = (((($0)) + 5208|0) + ($111)|0);
       $119 = HEAP8[$118>>0]|0;
       $120 = ($117&255)>($119&255);
       if ($120) {
        $$1$i124 = $$055$i119;$$pre$phi62$i123Z2D = $110;
        break;
       }
      }
      $$1$i124 = $105;$$pre$phi62$i123Z2D = $106;
     } else {
      $$pre61$i121 = (((($0)) + 2908|0) + ($$055$i119<<2)|0);
      $$1$i124 = $$055$i119;$$pre$phi62$i123Z2D = $$pre61$i121;
     }
    } while(0);
    $121 = HEAP16[$102>>1]|0;
    $122 = HEAP32[$$pre$phi62$i123Z2D>>2]|0;
    $123 = (($3) + ($122<<2)|0);
    $124 = HEAP16[$123>>1]|0;
    $125 = ($121&65535)<($124&65535);
    if ($125) {
     $$052$lcssa$ph$i126 = $$05254$i120;
     break;
    }
    $126 = ($121<<16>>16)==($124<<16>>16);
    if ($126) {
     $127 = HEAP8[$100>>0]|0;
     $128 = (((($0)) + 5208|0) + ($122)|0);
     $129 = HEAP8[$128>>0]|0;
     $130 = ($127&255)>($129&255);
     if (!($130)) {
      $$052$lcssa$ph$i126 = $$05254$i120;
      break;
     }
    }
    $131 = (((($0)) + 2908|0) + ($$05254$i120<<2)|0);
    HEAP32[$131>>2] = $122;
    $$0$i125 = $$1$i124 << 1;
    $132 = HEAP32[$9>>2]|0;
    $133 = ($$0$i125|0)>($132|0);
    if ($133) {
     $$052$lcssa$ph$i126 = $$1$i124;
     break;
    } else {
     $$05254$i120 = $$1$i124;$$055$i119 = $$0$i125;$104 = $132;
    }
   }
   $$pre$i127 = (((($0)) + 2908|0) + ($$052$lcssa$ph$i126<<2)|0);
   $$pre$phi$i129Z2D = $$pre$i127;
  }
  HEAP32[$$pre$phi$i129Z2D>>2] = $99;
  $134 = HEAP32[$94>>2]|0;
  $135 = HEAP32[$10>>2]|0;
  $136 = (($135) + -1)|0;
  HEAP32[$10>>2] = $136;
  $137 = (((($0)) + 2908|0) + ($136<<2)|0);
  HEAP32[$137>>2] = $95;
  $138 = HEAP32[$10>>2]|0;
  $139 = (($138) + -1)|0;
  HEAP32[$10>>2] = $139;
  $140 = (((($0)) + 2908|0) + ($139<<2)|0);
  HEAP32[$140>>2] = $134;
  $141 = (($3) + ($95<<2)|0);
  $142 = HEAP16[$141>>1]|0;
  $143 = $142&65535;
  $144 = (($3) + ($134<<2)|0);
  $145 = HEAP16[$144>>1]|0;
  $146 = $145&65535;
  $147 = (($146) + ($143))|0;
  $148 = $147&65535;
  $149 = (($3) + ($$0<<2)|0);
  HEAP16[$149>>1] = $148;
  $150 = (((($0)) + 5208|0) + ($95)|0);
  $151 = HEAP8[$150>>0]|0;
  $152 = (((($0)) + 5208|0) + ($134)|0);
  $153 = HEAP8[$152>>0]|0;
  $154 = ($151&255)<($153&255);
  $$v = $154 ? $153 : $151;
  $155 = $$v&255;
  $156 = (($155) + 1)|0;
  $157 = $156&255;
  $158 = (((($0)) + 5208|0) + ($$0)|0);
  HEAP8[$158>>0] = $157;
  $159 = $$0&65535;
  $160 = (((($3) + ($134<<2)|0)) + 2|0);
  HEAP16[$160>>1] = $159;
  $161 = (((($3) + ($95<<2)|0)) + 2|0);
  HEAP16[$161>>1] = $159;
  $162 = (($$0) + 1)|0;
  HEAP32[$94>>2] = $$0;
  $163 = HEAP32[$9>>2]|0;
  $164 = ($163|0)<(2);
  if ($164) {
   $$pre$phi$i116Z2D = $94;
  } else {
   $$05254$i107 = 1;$$055$i106 = 2;$166 = $163;
   while(1) {
    $165 = ($$055$i106|0)<($166|0);
    do {
     if ($165) {
      $167 = $$055$i106 | 1;
      $168 = (((($0)) + 2908|0) + ($167<<2)|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = (($3) + ($169<<2)|0);
      $171 = HEAP16[$170>>1]|0;
      $172 = (((($0)) + 2908|0) + ($$055$i106<<2)|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = (($3) + ($173<<2)|0);
      $175 = HEAP16[$174>>1]|0;
      $176 = ($171&65535)<($175&65535);
      if (!($176)) {
       $177 = ($171<<16>>16)==($175<<16>>16);
       if (!($177)) {
        $$1$i111 = $$055$i106;$$pre$phi62$i110Z2D = $172;
        break;
       }
       $178 = (((($0)) + 5208|0) + ($169)|0);
       $179 = HEAP8[$178>>0]|0;
       $180 = (((($0)) + 5208|0) + ($173)|0);
       $181 = HEAP8[$180>>0]|0;
       $182 = ($179&255)>($181&255);
       if ($182) {
        $$1$i111 = $$055$i106;$$pre$phi62$i110Z2D = $172;
        break;
       }
      }
      $$1$i111 = $167;$$pre$phi62$i110Z2D = $168;
     } else {
      $$pre61$i108 = (((($0)) + 2908|0) + ($$055$i106<<2)|0);
      $$1$i111 = $$055$i106;$$pre$phi62$i110Z2D = $$pre61$i108;
     }
    } while(0);
    $183 = HEAP16[$149>>1]|0;
    $184 = HEAP32[$$pre$phi62$i110Z2D>>2]|0;
    $185 = (($3) + ($184<<2)|0);
    $186 = HEAP16[$185>>1]|0;
    $187 = ($183&65535)<($186&65535);
    if ($187) {
     $$052$lcssa$ph$i113 = $$05254$i107;
     break;
    }
    $188 = ($183<<16>>16)==($186<<16>>16);
    if ($188) {
     $189 = HEAP8[$158>>0]|0;
     $190 = (((($0)) + 5208|0) + ($184)|0);
     $191 = HEAP8[$190>>0]|0;
     $192 = ($189&255)>($191&255);
     if (!($192)) {
      $$052$lcssa$ph$i113 = $$05254$i107;
      break;
     }
    }
    $193 = (((($0)) + 2908|0) + ($$05254$i107<<2)|0);
    HEAP32[$193>>2] = $184;
    $$0$i112 = $$1$i111 << 1;
    $194 = HEAP32[$9>>2]|0;
    $195 = ($$0$i112|0)>($194|0);
    if ($195) {
     $$052$lcssa$ph$i113 = $$1$i111;
     break;
    } else {
     $$05254$i107 = $$1$i111;$$055$i106 = $$0$i112;$166 = $194;
    }
   }
   $$pre$i114 = (((($0)) + 2908|0) + ($$052$lcssa$ph$i113<<2)|0);
   $$pre$phi$i116Z2D = $$pre$i114;
  }
  HEAP32[$$pre$phi$i116Z2D>>2] = $$0;
  $196 = HEAP32[$9>>2]|0;
  $197 = ($196|0)>(1);
  if ($197) {
   $$0 = $162;$97 = $196;
  } else {
   break;
  }
 }
 $198 = HEAP32[$94>>2]|0;
 $199 = HEAP32[$10>>2]|0;
 $200 = (($199) + -1)|0;
 HEAP32[$10>>2] = $200;
 $201 = (((($0)) + 2908|0) + ($200<<2)|0);
 HEAP32[$201>>2] = $198;
 $$idx$val = HEAP32[$1>>2]|0;
 $$idx101$val = HEAP32[$52>>2]|0;
 $$idx102$val = HEAP32[$4>>2]|0;
 $202 = HEAP32[$$idx102$val>>2]|0;
 $203 = ((($$idx102$val)) + 4|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = ((($$idx102$val)) + 8|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = ((($$idx102$val)) + 16|0);
 $208 = HEAP32[$207>>2]|0;
 $scevgep$i = ((($0)) + 2876|0);
 dest=$scevgep$i; stop=dest+32|0; do { HEAP16[dest>>1]=0|0; dest=dest+2|0; } while ((dest|0) < (stop|0));
 $209 = HEAP32[$10>>2]|0;
 $210 = (((($0)) + 2908|0) + ($209<<2)|0);
 $211 = HEAP32[$210>>2]|0;
 $212 = (((($$idx$val) + ($211<<2)|0)) + 2|0);
 HEAP16[$212>>1] = 0;
 $213 = HEAP32[$10>>2]|0;
 $$010917$i = (($213) + 1)|0;
 $214 = ($213|0)<(572);
 L84: do {
  if ($214) {
   $215 = ((($0)) + 5800|0);
   $216 = ($202|0)==(0|0);
   $217 = ((($0)) + 5804|0);
   if ($216) {
    $$010919$us$i = $$010917$i;$$018$us$i = 0;
    while(1) {
     $218 = (((($0)) + 2908|0) + ($$010919$us$i<<2)|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = (((($$idx$val) + ($219<<2)|0)) + 2|0);
     $221 = HEAP16[$220>>1]|0;
     $222 = $221&65535;
     $223 = (((($$idx$val) + ($222<<2)|0)) + 2|0);
     $224 = HEAP16[$223>>1]|0;
     $225 = $224&65535;
     $226 = (($225) + 1)|0;
     $227 = ($208|0)>($225|0);
     $spec$select$us$i = $227 ? $226 : $208;
     $not$$us$i = $227 ^ 1;
     $228 = $not$$us$i&1;
     $spec$select117$us$i = (($$018$us$i) + ($228))|0;
     $229 = $spec$select$us$i&65535;
     HEAP16[$220>>1] = $229;
     $230 = ($219|0)>($$idx101$val|0);
     if (!($230)) {
      $231 = (((($0)) + 2876|0) + ($spec$select$us$i<<1)|0);
      $232 = HEAP16[$231>>1]|0;
      $233 = (($232) + 1)<<16>>16;
      HEAP16[$231>>1] = $233;
      $234 = ($219|0)<($206|0);
      if ($234) {
       $$0112$us$i = 0;
      } else {
       $235 = (($219) - ($206))|0;
       $236 = (($204) + ($235<<2)|0);
       $237 = HEAP32[$236>>2]|0;
       $$0112$us$i = $237;
      }
      $238 = (($$idx$val) + ($219<<2)|0);
      $239 = HEAP16[$238>>1]|0;
      $240 = $239&65535;
      $241 = (($$0112$us$i) + ($spec$select$us$i))|0;
      $242 = Math_imul($241, $240)|0;
      $243 = HEAP32[$215>>2]|0;
      $244 = (($242) + ($243))|0;
      HEAP32[$215>>2] = $244;
     }
     $$0109$us$i = (($$010919$us$i) + 1)|0;
     $245 = ($$010919$us$i|0)<(572);
     if ($245) {
      $$010919$us$i = $$0109$us$i;$$018$us$i = $spec$select117$us$i;
     } else {
      $$0$lcssa$i = $spec$select117$us$i;
      break;
     }
    }
   } else {
    $$010919$i = $$010917$i;$$018$i = 0;
    while(1) {
     $246 = (((($0)) + 2908|0) + ($$010919$i<<2)|0);
     $247 = HEAP32[$246>>2]|0;
     $248 = (((($$idx$val) + ($247<<2)|0)) + 2|0);
     $249 = HEAP16[$248>>1]|0;
     $250 = $249&65535;
     $251 = (((($$idx$val) + ($250<<2)|0)) + 2|0);
     $252 = HEAP16[$251>>1]|0;
     $253 = $252&65535;
     $254 = (($253) + 1)|0;
     $255 = ($208|0)>($253|0);
     $spec$select$i = $255 ? $254 : $208;
     $not$$i = $255 ^ 1;
     $256 = $not$$i&1;
     $spec$select117$i = (($$018$i) + ($256))|0;
     $257 = $spec$select$i&65535;
     HEAP16[$248>>1] = $257;
     $258 = ($247|0)>($$idx101$val|0);
     if (!($258)) {
      $259 = (((($0)) + 2876|0) + ($spec$select$i<<1)|0);
      $260 = HEAP16[$259>>1]|0;
      $261 = (($260) + 1)<<16>>16;
      HEAP16[$259>>1] = $261;
      $262 = ($247|0)<($206|0);
      if ($262) {
       $$0112$i = 0;
      } else {
       $263 = (($247) - ($206))|0;
       $264 = (($204) + ($263<<2)|0);
       $265 = HEAP32[$264>>2]|0;
       $$0112$i = $265;
      }
      $266 = (($$idx$val) + ($247<<2)|0);
      $267 = HEAP16[$266>>1]|0;
      $268 = $267&65535;
      $269 = (($$0112$i) + ($spec$select$i))|0;
      $270 = Math_imul($269, $268)|0;
      $271 = HEAP32[$215>>2]|0;
      $272 = (($270) + ($271))|0;
      HEAP32[$215>>2] = $272;
      $273 = (((($202) + ($247<<2)|0)) + 2|0);
      $274 = HEAP16[$273>>1]|0;
      $275 = $274&65535;
      $276 = (($$0112$i) + ($275))|0;
      $277 = Math_imul($276, $268)|0;
      $278 = HEAP32[$217>>2]|0;
      $279 = (($277) + ($278))|0;
      HEAP32[$217>>2] = $279;
     }
     $$0109$i = (($$010919$i) + 1)|0;
     $280 = ($$010919$i|0)<(572);
     if ($280) {
      $$010919$i = $$0109$i;$$018$i = $spec$select117$i;
     } else {
      $$0$lcssa$i = $spec$select117$i;
      break;
     }
    }
   }
   $281 = ($$0$lcssa$i|0)==(0);
   if (!($281)) {
    $282 = (((($0)) + 2876|0) + ($208<<1)|0);
    $$2$i = $$0$lcssa$i;
    while(1) {
     $$2115$in$i = $208;
     while(1) {
      $$2115$i = (($$2115$in$i) + -1)|0;
      $283 = (((($0)) + 2876|0) + ($$2115$i<<1)|0);
      $284 = HEAP16[$283>>1]|0;
      $285 = ($284<<16>>16)==(0);
      if ($285) {
       $$2115$in$i = $$2115$i;
      } else {
       break;
      }
     }
     $286 = (($284) + -1)<<16>>16;
     HEAP16[$283>>1] = $286;
     $287 = (((($0)) + 2876|0) + ($$2115$in$i<<1)|0);
     $288 = HEAP16[$287>>1]|0;
     $289 = $288&65535;
     $290 = (($289) + 2)|0;
     $291 = $290&65535;
     HEAP16[$287>>1] = $291;
     $292 = HEAP16[$282>>1]|0;
     $293 = (($292) + -1)<<16>>16;
     HEAP16[$282>>1] = $293;
     $294 = (($$2$i) + -2)|0;
     $295 = ($$2$i|0)>(2);
     if ($295) {
      $$2$i = $294;
     } else {
      break;
     }
    }
    $296 = ($208|0)==(0);
    if (!($296)) {
     $$111014$i = 573;$$310$i = $208;$297 = $293;
     while(1) {
      $298 = ($297<<16>>16)==(0);
      if ($298) {
       $$2111$lcssa$i = $$111014$i;
      } else {
       $299 = $297&65535;
       $300 = $$310$i&65535;
       $$0116$ph7$i = $299;$$2111$ph8$i = $$111014$i;
       while(1) {
        $$21115$i = $$2111$ph8$i;
        while(1) {
         $301 = (($$21115$i) + -1)|0;
         $302 = (((($0)) + 2908|0) + ($301<<2)|0);
         $303 = HEAP32[$302>>2]|0;
         $304 = ($303|0)>($$idx101$val|0);
         if ($304) {
          $$21115$i = $301;
         } else {
          break;
         }
        }
        $$phi$trans$insert33$i = (((($$idx$val) + ($303<<2)|0)) + 2|0);
        $$pre34$i = HEAP16[$$phi$trans$insert33$i>>1]|0;
        $305 = $$pre34$i&65535;
        $306 = ($$310$i|0)==($305|0);
        if (!($306)) {
         $307 = (($$310$i) - ($305))|0;
         $308 = (($$idx$val) + ($303<<2)|0);
         $309 = HEAP16[$308>>1]|0;
         $310 = $309&65535;
         $311 = Math_imul($307, $310)|0;
         $312 = HEAP32[$215>>2]|0;
         $313 = (($311) + ($312))|0;
         HEAP32[$215>>2] = $313;
         HEAP16[$$phi$trans$insert33$i>>1] = $300;
        }
        $314 = (($$0116$ph7$i) + -1)|0;
        $315 = ($314|0)==(0);
        if ($315) {
         $$2111$lcssa$i = $301;
         break;
        } else {
         $$0116$ph7$i = $314;$$2111$ph8$i = $301;
        }
       }
      }
      $316 = (($$310$i) + -1)|0;
      $317 = ($316|0)==(0);
      if ($317) {
       break L84;
      }
      $$phi$trans$insert$i = (((($0)) + 2876|0) + ($316<<1)|0);
      $$pre$i104 = HEAP16[$$phi$trans$insert$i>>1]|0;
      $$111014$i = $$2111$lcssa$i;$$310$i = $316;$297 = $$pre$i104;
     }
    }
   }
  }
 } while(0);
 $318 = HEAP16[$scevgep$i>>1]|0;
 $319 = $318&65535;
 $320 = $319 << 1;
 $321 = $320&65535;
 $322 = ((($2)) + 2|0);
 HEAP16[$322>>1] = $321;
 $323 = $320 & 65534;
 $324 = ((($0)) + 2878|0);
 $325 = HEAP16[$324>>1]|0;
 $326 = $325&65535;
 $327 = (($323) + ($326))|0;
 $328 = $327 << 1;
 $329 = $328&65535;
 $330 = ((($2)) + 4|0);
 HEAP16[$330>>1] = $329;
 $331 = $328 & 65534;
 $332 = ((($0)) + 2880|0);
 $333 = HEAP16[$332>>1]|0;
 $334 = $333&65535;
 $335 = (($331) + ($334))|0;
 $336 = $335 << 1;
 $337 = $336&65535;
 $338 = ((($2)) + 6|0);
 HEAP16[$338>>1] = $337;
 $339 = $336 & 65534;
 $340 = ((($0)) + 2882|0);
 $341 = HEAP16[$340>>1]|0;
 $342 = $341&65535;
 $343 = (($339) + ($342))|0;
 $344 = $343 << 1;
 $345 = $344&65535;
 $346 = ((($2)) + 8|0);
 HEAP16[$346>>1] = $345;
 $347 = $344 & 65534;
 $348 = ((($0)) + 2884|0);
 $349 = HEAP16[$348>>1]|0;
 $350 = $349&65535;
 $351 = (($347) + ($350))|0;
 $352 = $351 << 1;
 $353 = $352&65535;
 $354 = ((($2)) + 10|0);
 HEAP16[$354>>1] = $353;
 $355 = $352 & 65534;
 $356 = ((($0)) + 2886|0);
 $357 = HEAP16[$356>>1]|0;
 $358 = $357&65535;
 $359 = (($355) + ($358))|0;
 $360 = $359 << 1;
 $361 = $360&65535;
 $362 = ((($2)) + 12|0);
 HEAP16[$362>>1] = $361;
 $363 = $360 & 65534;
 $364 = ((($0)) + 2888|0);
 $365 = HEAP16[$364>>1]|0;
 $366 = $365&65535;
 $367 = (($363) + ($366))|0;
 $368 = $367 << 1;
 $369 = $368&65535;
 $370 = ((($2)) + 14|0);
 HEAP16[$370>>1] = $369;
 $371 = $368 & 65534;
 $372 = ((($0)) + 2890|0);
 $373 = HEAP16[$372>>1]|0;
 $374 = $373&65535;
 $375 = (($371) + ($374))|0;
 $376 = $375 << 1;
 $377 = $376&65535;
 $378 = ((($2)) + 16|0);
 HEAP16[$378>>1] = $377;
 $379 = $376 & 65534;
 $380 = ((($0)) + 2892|0);
 $381 = HEAP16[$380>>1]|0;
 $382 = $381&65535;
 $383 = (($379) + ($382))|0;
 $384 = $383 << 1;
 $385 = $384&65535;
 $386 = ((($2)) + 18|0);
 HEAP16[$386>>1] = $385;
 $387 = $384 & 65534;
 $388 = ((($0)) + 2894|0);
 $389 = HEAP16[$388>>1]|0;
 $390 = $389&65535;
 $391 = (($387) + ($390))|0;
 $392 = $391 << 1;
 $393 = $392&65535;
 $394 = ((($2)) + 20|0);
 HEAP16[$394>>1] = $393;
 $395 = $392 & 65534;
 $396 = ((($0)) + 2896|0);
 $397 = HEAP16[$396>>1]|0;
 $398 = $397&65535;
 $399 = (($395) + ($398))|0;
 $400 = $399 << 1;
 $401 = $400&65535;
 $402 = ((($2)) + 22|0);
 HEAP16[$402>>1] = $401;
 $403 = $400 & 65534;
 $404 = ((($0)) + 2898|0);
 $405 = HEAP16[$404>>1]|0;
 $406 = $405&65535;
 $407 = (($403) + ($406))|0;
 $408 = $407 << 1;
 $409 = $408&65535;
 $410 = ((($2)) + 24|0);
 HEAP16[$410>>1] = $409;
 $411 = $408 & 65534;
 $412 = ((($0)) + 2900|0);
 $413 = HEAP16[$412>>1]|0;
 $414 = $413&65535;
 $415 = (($411) + ($414))|0;
 $416 = $415 << 1;
 $417 = $416&65535;
 $418 = ((($2)) + 26|0);
 HEAP16[$418>>1] = $417;
 $419 = $416 & 65534;
 $420 = ((($0)) + 2902|0);
 $421 = HEAP16[$420>>1]|0;
 $422 = $421&65535;
 $423 = (($419) + ($422))|0;
 $424 = $423 << 1;
 $425 = $424&65535;
 $426 = ((($2)) + 28|0);
 HEAP16[$426>>1] = $425;
 $427 = $424 & 65534;
 $428 = ((($0)) + 2904|0);
 $429 = HEAP16[$428>>1]|0;
 $430 = $429&65535;
 $431 = (($427) + ($430))|0;
 $432 = $431 << 1;
 $433 = $432&65535;
 $434 = ((($2)) + 30|0);
 HEAP16[$434>>1] = $433;
 $435 = ($$2$lcssa|0)<(0);
 if ($435) {
  STACKTOP = sp;return;
 }
 $$02426$i = 0;
 while(1) {
  $436 = (((($3) + ($$02426$i<<2)|0)) + 2|0);
  $437 = HEAP16[$436>>1]|0;
  $438 = $437&65535;
  $439 = ($437<<16>>16)==(0);
  if (!($439)) {
   $440 = (($2) + ($438<<1)|0);
   $441 = HEAP16[$440>>1]|0;
   $442 = (($441) + 1)<<16>>16;
   HEAP16[$440>>1] = $442;
   $443 = $441&65535;
   $$0$i$i = 0;$$07$i$i = $438;$$08$i$i = $443;
   while(1) {
    $444 = $$08$i$i & 1;
    $445 = $$0$i$i | $444;
    $446 = $$08$i$i >>> 1;
    $447 = $445 << 1;
    $448 = (($$07$i$i) + -1)|0;
    $449 = ($$07$i$i|0)>(1);
    if ($449) {
     $$0$i$i = $447;$$07$i$i = $448;$$08$i$i = $446;
    } else {
     break;
    }
   }
   $450 = $445&65535;
   $451 = (($3) + ($$02426$i<<2)|0);
   HEAP16[$451>>1] = $450;
  }
  $452 = (($$02426$i) + 1)|0;
  $exitcond$i = ($$02426$i|0)==($$2$lcssa|0);
  if ($exitcond$i) {
   break;
  } else {
   $$02426$i = $452;
  }
 }
 STACKTOP = sp;return;
}
function _compress_block($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$ph = 0, $$phi$trans$insert = 0, $$phi$trans$insert204 = 0, $$pre = 0, $$pre$phi206Z2D = 0, $$pre$phiZ2D = 0, $$pre205 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0;
 var $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0;
 var $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $storemerge = 0, $storemerge199 = 0, $storemerge200 = 0, $storemerge202 = 0, $storemerge203$sink = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 5792|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0);
 if ($5) {
  $$phi$trans$insert = ((($0)) + 5820|0);
  $$pre = HEAP32[$$phi$trans$insert>>2]|0;
  $$phi$trans$insert204 = ((($0)) + 5816|0);
  $$pre205 = HEAP16[$$phi$trans$insert204>>1]|0;
  $$pre$phi206Z2D = $$phi$trans$insert204;$$pre$phiZ2D = $$phi$trans$insert;$207 = $$pre;$214 = $$pre205;
 } else {
  $6 = ((($0)) + 5796|0);
  $7 = ((($0)) + 5784|0);
  $8 = ((($0)) + 5820|0);
  $9 = ((($0)) + 5816|0);
  $10 = ((($0)) + 8|0);
  $11 = ((($0)) + 20|0);
  $$0 = 0;
  while(1) {
   $12 = HEAP32[$6>>2]|0;
   $13 = (($12) + ($$0<<1)|0);
   $14 = HEAP16[$13>>1]|0;
   $15 = $14&65535;
   $16 = HEAP32[$7>>2]|0;
   $17 = (($$0) + 1)|0;
   $18 = (($16) + ($$0)|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = $19&255;
   $21 = ($14<<16>>16)==(0);
   do {
    if ($21) {
     $22 = (((($1) + ($20<<2)|0)) + 2|0);
     $23 = HEAP16[$22>>1]|0;
     $24 = $23&65535;
     $25 = HEAP32[$8>>2]|0;
     $26 = (16 - ($24))|0;
     $27 = ($25|0)>($26|0);
     $28 = (($1) + ($20<<2)|0);
     $29 = HEAP16[$28>>1]|0;
     $30 = $29&65535;
     $31 = $30 << $25;
     $32 = HEAP16[$9>>1]|0;
     $33 = $32&65535;
     $34 = $31 | $33;
     $35 = $34&65535;
     HEAP16[$9>>1] = $35;
     if ($27) {
      $36 = $34&255;
      $37 = HEAP32[$10>>2]|0;
      $38 = HEAP32[$11>>2]|0;
      $39 = (($38) + 1)|0;
      HEAP32[$11>>2] = $39;
      $40 = (($37) + ($38)|0);
      HEAP8[$40>>0] = $36;
      $41 = HEAP16[$9>>1]|0;
      $42 = ($41&65535) >>> 8;
      $43 = $42&255;
      $44 = HEAP32[$10>>2]|0;
      $45 = HEAP32[$11>>2]|0;
      $46 = (($45) + 1)|0;
      HEAP32[$11>>2] = $46;
      $47 = (($44) + ($45)|0);
      HEAP8[$47>>0] = $43;
      $48 = HEAP32[$8>>2]|0;
      $49 = (16 - ($48))|0;
      $50 = $30 >>> $49;
      $51 = $50&65535;
      HEAP16[$9>>1] = $51;
      $52 = (($24) + -16)|0;
      $53 = (($52) + ($48))|0;
      $$ph = $51;$storemerge203$sink = $53;
      label = 23;
      break;
     } else {
      $54 = (($25) + ($24))|0;
      $$ph = $35;$storemerge203$sink = $54;
      label = 23;
      break;
     }
    } else {
     $55 = (28373 + ($20)|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56&255;
     $58 = $57 | 256;
     $59 = (($58) + 1)|0;
     $60 = (((($1) + ($59<<2)|0)) + 2|0);
     $61 = HEAP16[$60>>1]|0;
     $62 = $61&65535;
     $63 = HEAP32[$8>>2]|0;
     $64 = (16 - ($62))|0;
     $65 = ($63|0)>($64|0);
     $66 = (($1) + ($59<<2)|0);
     $67 = HEAP16[$66>>1]|0;
     $68 = $67&65535;
     $69 = $68 << $63;
     $70 = HEAP16[$9>>1]|0;
     $71 = $70&65535;
     $72 = $69 | $71;
     $73 = $72&65535;
     HEAP16[$9>>1] = $73;
     if ($65) {
      $74 = $72&255;
      $75 = HEAP32[$10>>2]|0;
      $76 = HEAP32[$11>>2]|0;
      $77 = (($76) + 1)|0;
      HEAP32[$11>>2] = $77;
      $78 = (($75) + ($76)|0);
      HEAP8[$78>>0] = $74;
      $79 = HEAP16[$9>>1]|0;
      $80 = ($79&65535) >>> 8;
      $81 = $80&255;
      $82 = HEAP32[$10>>2]|0;
      $83 = HEAP32[$11>>2]|0;
      $84 = (($83) + 1)|0;
      HEAP32[$11>>2] = $84;
      $85 = (($82) + ($83)|0);
      HEAP8[$85>>0] = $81;
      $86 = HEAP32[$8>>2]|0;
      $87 = (16 - ($86))|0;
      $88 = $68 >>> $87;
      $89 = $88&65535;
      HEAP16[$9>>1] = $89;
      $90 = (($62) + -16)|0;
      $91 = (($90) + ($86))|0;
      $105 = $89;$storemerge199 = $91;
     } else {
      $92 = (($63) + ($62))|0;
      $105 = $73;$storemerge199 = $92;
     }
     HEAP32[$8>>2] = $storemerge199;
     $93 = (9432 + ($57<<2)|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = (($57) + -8)|0;
     $96 = ($95>>>0)<(20);
     if ($96) {
      $97 = (9548 + ($57<<2)|0);
      $98 = HEAP32[$97>>2]|0;
      $99 = (($20) - ($98))|0;
      $100 = (16 - ($94))|0;
      $101 = ($storemerge199|0)>($100|0);
      $102 = $99 & 65535;
      $103 = $102 << $storemerge199;
      $104 = $105&65535;
      $106 = $103 | $104;
      $107 = $106&65535;
      HEAP16[$9>>1] = $107;
      if ($101) {
       $108 = $106&255;
       $109 = HEAP32[$10>>2]|0;
       $110 = HEAP32[$11>>2]|0;
       $111 = (($110) + 1)|0;
       HEAP32[$11>>2] = $111;
       $112 = (($109) + ($110)|0);
       HEAP8[$112>>0] = $108;
       $113 = HEAP16[$9>>1]|0;
       $114 = ($113&65535) >>> 8;
       $115 = $114&255;
       $116 = HEAP32[$10>>2]|0;
       $117 = HEAP32[$11>>2]|0;
       $118 = (($117) + 1)|0;
       HEAP32[$11>>2] = $118;
       $119 = (($116) + ($117)|0);
       HEAP8[$119>>0] = $115;
       $120 = HEAP32[$8>>2]|0;
       $121 = (16 - ($120))|0;
       $122 = $102 >>> $121;
       $123 = $122&65535;
       HEAP16[$9>>1] = $123;
       $124 = (($94) + -16)|0;
       $125 = (($124) + ($120))|0;
       $238 = $123;$storemerge202 = $125;
      } else {
       $126 = (($94) + ($storemerge199))|0;
       $238 = $107;$storemerge202 = $126;
      }
      HEAP32[$8>>2] = $storemerge202;
      $138 = $storemerge202;$145 = $238;
     } else {
      $138 = $storemerge199;$145 = $105;
     }
     $127 = (($15) + -1)|0;
     $128 = ($127>>>0)<(256);
     $129 = $127 >>> 7;
     $130 = (($129) + 256)|0;
     $$sink = $128 ? $127 : $130;
     $131 = (27861 + ($$sink)|0);
     $132 = HEAP8[$131>>0]|0;
     $133 = $132&255;
     $134 = (((($2) + ($133<<2)|0)) + 2|0);
     $135 = HEAP16[$134>>1]|0;
     $136 = $135&65535;
     $137 = (16 - ($136))|0;
     $139 = ($138|0)>($137|0);
     $140 = (($2) + ($133<<2)|0);
     $141 = HEAP16[$140>>1]|0;
     $142 = $141&65535;
     $143 = $142 << $138;
     $144 = $145&65535;
     $146 = $143 | $144;
     $147 = $146&65535;
     HEAP16[$9>>1] = $147;
     if ($139) {
      $148 = $146&255;
      $149 = HEAP32[$10>>2]|0;
      $150 = HEAP32[$11>>2]|0;
      $151 = (($150) + 1)|0;
      HEAP32[$11>>2] = $151;
      $152 = (($149) + ($150)|0);
      HEAP8[$152>>0] = $148;
      $153 = HEAP16[$9>>1]|0;
      $154 = ($153&65535) >>> 8;
      $155 = $154&255;
      $156 = HEAP32[$10>>2]|0;
      $157 = HEAP32[$11>>2]|0;
      $158 = (($157) + 1)|0;
      HEAP32[$11>>2] = $158;
      $159 = (($156) + ($157)|0);
      HEAP8[$159>>0] = $155;
      $160 = HEAP32[$8>>2]|0;
      $161 = (16 - ($160))|0;
      $162 = $142 >>> $161;
      $163 = $162&65535;
      HEAP16[$9>>1] = $163;
      $164 = (($136) + -16)|0;
      $165 = (($164) + ($160))|0;
      $179 = $163;$storemerge200 = $165;
     } else {
      $166 = (($138) + ($136))|0;
      $179 = $147;$storemerge200 = $166;
     }
     HEAP32[$8>>2] = $storemerge200;
     $167 = (9312 + ($133<<2)|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = (($133) + -4)|0;
     $170 = ($169>>>0)<(26);
     if ($170) {
      $171 = (9664 + ($133<<2)|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = (($127) - ($172))|0;
      $174 = (16 - ($168))|0;
      $175 = ($storemerge200|0)>($174|0);
      $176 = $173 & 65535;
      $177 = $176 << $storemerge200;
      $178 = $179&65535;
      $180 = $177 | $178;
      $181 = $180&65535;
      HEAP16[$9>>1] = $181;
      if ($175) {
       $182 = $180&255;
       $183 = HEAP32[$10>>2]|0;
       $184 = HEAP32[$11>>2]|0;
       $185 = (($184) + 1)|0;
       HEAP32[$11>>2] = $185;
       $186 = (($183) + ($184)|0);
       HEAP8[$186>>0] = $182;
       $187 = HEAP16[$9>>1]|0;
       $188 = ($187&65535) >>> 8;
       $189 = $188&255;
       $190 = HEAP32[$10>>2]|0;
       $191 = HEAP32[$11>>2]|0;
       $192 = (($191) + 1)|0;
       HEAP32[$11>>2] = $192;
       $193 = (($190) + ($191)|0);
       HEAP8[$193>>0] = $189;
       $194 = HEAP32[$8>>2]|0;
       $195 = (16 - ($194))|0;
       $196 = $176 >>> $195;
       $197 = $196&65535;
       HEAP16[$9>>1] = $197;
       $198 = (($168) + -16)|0;
       $199 = (($198) + ($194))|0;
       $$ph = $197;$storemerge203$sink = $199;
       label = 23;
       break;
      } else {
       $200 = (($168) + ($storemerge200))|0;
       $$ph = $181;$storemerge203$sink = $200;
       label = 23;
       break;
      }
     } else {
      $239 = $179;$240 = $storemerge200;
     }
    }
   } while(0);
   if ((label|0) == 23) {
    label = 0;
    HEAP32[$8>>2] = $storemerge203$sink;
    $239 = $$ph;$240 = $storemerge203$sink;
   }
   $201 = HEAP32[$3>>2]|0;
   $202 = ($17>>>0)<($201>>>0);
   if ($202) {
    $$0 = $17;
   } else {
    $$pre$phi206Z2D = $9;$$pre$phiZ2D = $8;$207 = $240;$214 = $239;
    break;
   }
  }
 }
 $203 = ((($1)) + 1026|0);
 $204 = HEAP16[$203>>1]|0;
 $205 = $204&65535;
 $206 = (16 - ($205))|0;
 $208 = ($207|0)>($206|0);
 $209 = ((($1)) + 1024|0);
 $210 = HEAP16[$209>>1]|0;
 $211 = $210&65535;
 $212 = $211 << $207;
 $213 = $214&65535;
 $215 = $212 | $213;
 $216 = $215&65535;
 HEAP16[$$pre$phi206Z2D>>1] = $216;
 if ($208) {
  $217 = $215&255;
  $218 = ((($0)) + 8|0);
  $219 = HEAP32[$218>>2]|0;
  $220 = ((($0)) + 20|0);
  $221 = HEAP32[$220>>2]|0;
  $222 = (($221) + 1)|0;
  HEAP32[$220>>2] = $222;
  $223 = (($219) + ($221)|0);
  HEAP8[$223>>0] = $217;
  $224 = HEAP16[$$pre$phi206Z2D>>1]|0;
  $225 = ($224&65535) >>> 8;
  $226 = $225&255;
  $227 = HEAP32[$218>>2]|0;
  $228 = HEAP32[$220>>2]|0;
  $229 = (($228) + 1)|0;
  HEAP32[$220>>2] = $229;
  $230 = (($227) + ($228)|0);
  HEAP8[$230>>0] = $226;
  $231 = HEAP32[$$pre$phiZ2D>>2]|0;
  $232 = (16 - ($231))|0;
  $233 = $211 >>> $232;
  $234 = $233&65535;
  HEAP16[$$pre$phi206Z2D>>1] = $234;
  $235 = (($205) + -16)|0;
  $236 = (($235) + ($231))|0;
  $storemerge = $236;
  HEAP32[$$pre$phiZ2D>>2] = $storemerge;
  return;
 } else {
  $237 = (($207) + ($205))|0;
  $storemerge = $237;
  HEAP32[$$pre$phiZ2D>>2] = $storemerge;
  return;
 }
}
function _send_tree($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0255280 = 0, $$0256279 = 0, $$0257278 = 0, $$0281 = 0, $$1 = 0, $$1258 = 0, $$1260277 = 0, $$1263276 = 0, $$2 = 0, $$2261 = 0, $$2264 = 0, $$273 = 0, $$3 = 0, $$pre = 0, $$pre283 = 0, $$pre284 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $exitcond = 0, $or$cond = 0, $spec$select = 0, $spec$select272 = 0, $spec$select274 = 0, $spec$select275 = 0, $storemerge = 0, $storemerge266 = 0, $storemerge267$sink = 0, $storemerge268 = 0, $storemerge270 = 0, $storemerge271 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($1)) + 2|0);
 $4 = HEAP16[$3>>1]|0;
 $5 = ($4<<16>>16)==(0);
 $6 = ($2|0)<(0);
 if ($6) {
  return;
 }
 $spec$select272 = $5 ? 138 : 7;
 $spec$select = $5 ? 3 : 4;
 $7 = $4&65535;
 $8 = ((($0)) + 5820|0);
 $9 = ((($0)) + 5816|0);
 $10 = ((($0)) + 8|0);
 $11 = ((($0)) + 20|0);
 $12 = ((($0)) + 2754|0);
 $13 = ((($0)) + 2752|0);
 $14 = ((($0)) + 2758|0);
 $15 = ((($0)) + 2756|0);
 $16 = ((($0)) + 2750|0);
 $17 = ((($0)) + 2748|0);
 $$0255280 = -1;$$0256279 = $7;$$0257278 = 0;$$0281 = 0;$$1260277 = $spec$select272;$$1263276 = $spec$select;
 while(1) {
  $18 = (($$0281) + 1)|0;
  $19 = (((($1) + ($18<<2)|0)) + 2|0);
  $20 = HEAP16[$19>>1]|0;
  $21 = $20&65535;
  $22 = (($$0257278) + 1)|0;
  $23 = ($22|0)<($$1260277|0);
  $24 = ($$0256279|0)==($21|0);
  $or$cond = $23 & $24;
  if ($or$cond) {
   $$1 = $$0255280;$$2261 = $$1260277;$$2264 = $$1263276;$$3 = $22;
  } else {
   $25 = ($22|0)<($$1263276|0);
   if ($25) {
    $26 = (((((($0)) + 2684|0) + ($$0256279<<2)|0)) + 2|0);
    $27 = (((($0)) + 2684|0) + ($$0256279<<2)|0);
    $$pre283 = HEAP32[$8>>2]|0;
    $$pre284 = HEAP16[$9>>1]|0;
    $$1258 = $22;$31 = $$pre283;$37 = $$pre284;
    while(1) {
     $28 = HEAP16[$26>>1]|0;
     $29 = $28&65535;
     $30 = (16 - ($29))|0;
     $32 = ($31|0)>($30|0);
     $33 = HEAP16[$27>>1]|0;
     $34 = $33&65535;
     $35 = $34 << $31;
     $36 = $37&65535;
     $38 = $35 | $36;
     $39 = $38&65535;
     HEAP16[$9>>1] = $39;
     if ($32) {
      $40 = $38&255;
      $41 = HEAP32[$10>>2]|0;
      $42 = HEAP32[$11>>2]|0;
      $43 = (($42) + 1)|0;
      HEAP32[$11>>2] = $43;
      $44 = (($41) + ($42)|0);
      HEAP8[$44>>0] = $40;
      $45 = HEAP16[$9>>1]|0;
      $46 = ($45&65535) >>> 8;
      $47 = $46&255;
      $48 = HEAP32[$10>>2]|0;
      $49 = HEAP32[$11>>2]|0;
      $50 = (($49) + 1)|0;
      HEAP32[$11>>2] = $50;
      $51 = (($48) + ($49)|0);
      HEAP8[$51>>0] = $47;
      $52 = HEAP32[$8>>2]|0;
      $53 = (16 - ($52))|0;
      $54 = $34 >>> $53;
      $55 = $54&65535;
      HEAP16[$9>>1] = $55;
      $56 = (($29) + -16)|0;
      $57 = (($56) + ($52))|0;
      $270 = $55;$storemerge271 = $57;
     } else {
      $58 = (($31) + ($29))|0;
      $270 = $39;$storemerge271 = $58;
     }
     HEAP32[$8>>2] = $storemerge271;
     $59 = (($$1258) + -1)|0;
     $60 = ($59|0)==(0);
     if ($60) {
      break;
     } else {
      $$1258 = $59;$31 = $storemerge271;$37 = $270;
     }
    }
   } else {
    $61 = ($$0256279|0)==(0);
    do {
     if ($61) {
      $153 = ($$0257278|0)<(10);
      if ($153) {
       $154 = HEAP16[$12>>1]|0;
       $155 = $154&65535;
       $156 = HEAP32[$8>>2]|0;
       $157 = (16 - ($155))|0;
       $158 = ($156|0)>($157|0);
       $159 = HEAP16[$13>>1]|0;
       $160 = $159&65535;
       $161 = $160 << $156;
       $162 = HEAP16[$9>>1]|0;
       $163 = $162&65535;
       $164 = $161 | $163;
       $165 = $164&65535;
       HEAP16[$9>>1] = $165;
       if ($158) {
        $166 = $164&255;
        $167 = HEAP32[$10>>2]|0;
        $168 = HEAP32[$11>>2]|0;
        $169 = (($168) + 1)|0;
        HEAP32[$11>>2] = $169;
        $170 = (($167) + ($168)|0);
        HEAP8[$170>>0] = $166;
        $171 = HEAP16[$9>>1]|0;
        $172 = ($171&65535) >>> 8;
        $173 = $172&255;
        $174 = HEAP32[$10>>2]|0;
        $175 = HEAP32[$11>>2]|0;
        $176 = (($175) + 1)|0;
        HEAP32[$11>>2] = $176;
        $177 = (($174) + ($175)|0);
        HEAP8[$177>>0] = $173;
        $178 = HEAP32[$8>>2]|0;
        $179 = (16 - ($178))|0;
        $180 = $160 >>> $179;
        $181 = $180&65535;
        HEAP16[$9>>1] = $181;
        $182 = (($155) + -16)|0;
        $183 = (($182) + ($178))|0;
        $190 = $180;$storemerge266 = $183;
       } else {
        $184 = (($156) + ($155))|0;
        $190 = $164;$storemerge266 = $184;
       }
       HEAP32[$8>>2] = $storemerge266;
       $185 = ($storemerge266|0)>(13);
       $186 = (($$0257278) + 65534)|0;
       $187 = $186 & 65535;
       $188 = $187 << $storemerge266;
       $189 = $190 & 65535;
       $191 = $188 | $189;
       $192 = $191&65535;
       HEAP16[$9>>1] = $192;
       if ($185) {
        $193 = $191&255;
        $194 = HEAP32[$10>>2]|0;
        $195 = HEAP32[$11>>2]|0;
        $196 = (($195) + 1)|0;
        HEAP32[$11>>2] = $196;
        $197 = (($194) + ($195)|0);
        HEAP8[$197>>0] = $193;
        $198 = HEAP16[$9>>1]|0;
        $199 = ($198&65535) >>> 8;
        $200 = $199&255;
        $201 = HEAP32[$10>>2]|0;
        $202 = HEAP32[$11>>2]|0;
        $203 = (($202) + 1)|0;
        HEAP32[$11>>2] = $203;
        $204 = (($201) + ($202)|0);
        HEAP8[$204>>0] = $200;
        $205 = HEAP32[$8>>2]|0;
        $206 = (16 - ($205))|0;
        $207 = $187 >>> $206;
        $208 = $207&65535;
        HEAP16[$9>>1] = $208;
        $209 = (($205) + -13)|0;
        $storemerge267$sink = $209;
        break;
       } else {
        $210 = (($storemerge266) + 3)|0;
        $storemerge267$sink = $210;
        break;
       }
      } else {
       $211 = HEAP16[$14>>1]|0;
       $212 = $211&65535;
       $213 = HEAP32[$8>>2]|0;
       $214 = (16 - ($212))|0;
       $215 = ($213|0)>($214|0);
       $216 = HEAP16[$15>>1]|0;
       $217 = $216&65535;
       $218 = $217 << $213;
       $219 = HEAP16[$9>>1]|0;
       $220 = $219&65535;
       $221 = $218 | $220;
       $222 = $221&65535;
       HEAP16[$9>>1] = $222;
       if ($215) {
        $223 = $221&255;
        $224 = HEAP32[$10>>2]|0;
        $225 = HEAP32[$11>>2]|0;
        $226 = (($225) + 1)|0;
        HEAP32[$11>>2] = $226;
        $227 = (($224) + ($225)|0);
        HEAP8[$227>>0] = $223;
        $228 = HEAP16[$9>>1]|0;
        $229 = ($228&65535) >>> 8;
        $230 = $229&255;
        $231 = HEAP32[$10>>2]|0;
        $232 = HEAP32[$11>>2]|0;
        $233 = (($232) + 1)|0;
        HEAP32[$11>>2] = $233;
        $234 = (($231) + ($232)|0);
        HEAP8[$234>>0] = $230;
        $235 = HEAP32[$8>>2]|0;
        $236 = (16 - ($235))|0;
        $237 = $217 >>> $236;
        $238 = $237&65535;
        HEAP16[$9>>1] = $238;
        $239 = (($212) + -16)|0;
        $240 = (($239) + ($235))|0;
        $247 = $237;$storemerge = $240;
       } else {
        $241 = (($213) + ($212))|0;
        $247 = $221;$storemerge = $241;
       }
       HEAP32[$8>>2] = $storemerge;
       $242 = ($storemerge|0)>(9);
       $243 = (($$0257278) + 65526)|0;
       $244 = $243 & 65535;
       $245 = $244 << $storemerge;
       $246 = $247 & 65535;
       $248 = $245 | $246;
       $249 = $248&65535;
       HEAP16[$9>>1] = $249;
       if ($242) {
        $250 = $248&255;
        $251 = HEAP32[$10>>2]|0;
        $252 = HEAP32[$11>>2]|0;
        $253 = (($252) + 1)|0;
        HEAP32[$11>>2] = $253;
        $254 = (($251) + ($252)|0);
        HEAP8[$254>>0] = $250;
        $255 = HEAP16[$9>>1]|0;
        $256 = ($255&65535) >>> 8;
        $257 = $256&255;
        $258 = HEAP32[$10>>2]|0;
        $259 = HEAP32[$11>>2]|0;
        $260 = (($259) + 1)|0;
        HEAP32[$11>>2] = $260;
        $261 = (($258) + ($259)|0);
        HEAP8[$261>>0] = $257;
        $262 = HEAP32[$8>>2]|0;
        $263 = (16 - ($262))|0;
        $264 = $244 >>> $263;
        $265 = $264&65535;
        HEAP16[$9>>1] = $265;
        $266 = (($262) + -9)|0;
        $storemerge267$sink = $266;
        break;
       } else {
        $267 = (($storemerge) + 7)|0;
        $storemerge267$sink = $267;
        break;
       }
      }
     } else {
      $62 = ($$0256279|0)==($$0255280|0);
      if ($62) {
       $$pre = HEAP32[$8>>2]|0;
       $$2 = $22;$99 = $$pre;
      } else {
       $63 = (((((($0)) + 2684|0) + ($$0256279<<2)|0)) + 2|0);
       $64 = HEAP16[$63>>1]|0;
       $65 = $64&65535;
       $66 = HEAP32[$8>>2]|0;
       $67 = (16 - ($65))|0;
       $68 = ($66|0)>($67|0);
       $69 = (((($0)) + 2684|0) + ($$0256279<<2)|0);
       $70 = HEAP16[$69>>1]|0;
       $71 = $70&65535;
       $72 = $71 << $66;
       $73 = HEAP16[$9>>1]|0;
       $74 = $73&65535;
       $75 = $72 | $74;
       $76 = $75&65535;
       HEAP16[$9>>1] = $76;
       if ($68) {
        $77 = $75&255;
        $78 = HEAP32[$10>>2]|0;
        $79 = HEAP32[$11>>2]|0;
        $80 = (($79) + 1)|0;
        HEAP32[$11>>2] = $80;
        $81 = (($78) + ($79)|0);
        HEAP8[$81>>0] = $77;
        $82 = HEAP16[$9>>1]|0;
        $83 = ($82&65535) >>> 8;
        $84 = $83&255;
        $85 = HEAP32[$10>>2]|0;
        $86 = HEAP32[$11>>2]|0;
        $87 = (($86) + 1)|0;
        HEAP32[$11>>2] = $87;
        $88 = (($85) + ($86)|0);
        HEAP8[$88>>0] = $84;
        $89 = HEAP32[$8>>2]|0;
        $90 = (16 - ($89))|0;
        $91 = $71 >>> $90;
        $92 = $91&65535;
        HEAP16[$9>>1] = $92;
        $93 = (($65) + -16)|0;
        $94 = (($93) + ($89))|0;
        $storemerge270 = $94;
       } else {
        $95 = (($66) + ($65))|0;
        $storemerge270 = $95;
       }
       HEAP32[$8>>2] = $storemerge270;
       $$2 = $$0257278;$99 = $storemerge270;
      }
      $96 = HEAP16[$16>>1]|0;
      $97 = $96&65535;
      $98 = (16 - ($97))|0;
      $100 = ($99|0)>($98|0);
      $101 = HEAP16[$17>>1]|0;
      $102 = $101&65535;
      $103 = $102 << $99;
      $104 = HEAP16[$9>>1]|0;
      $105 = $104&65535;
      $106 = $103 | $105;
      $107 = $106&65535;
      HEAP16[$9>>1] = $107;
      if ($100) {
       $108 = $106&255;
       $109 = HEAP32[$10>>2]|0;
       $110 = HEAP32[$11>>2]|0;
       $111 = (($110) + 1)|0;
       HEAP32[$11>>2] = $111;
       $112 = (($109) + ($110)|0);
       HEAP8[$112>>0] = $108;
       $113 = HEAP16[$9>>1]|0;
       $114 = ($113&65535) >>> 8;
       $115 = $114&255;
       $116 = HEAP32[$10>>2]|0;
       $117 = HEAP32[$11>>2]|0;
       $118 = (($117) + 1)|0;
       HEAP32[$11>>2] = $118;
       $119 = (($116) + ($117)|0);
       HEAP8[$119>>0] = $115;
       $120 = HEAP32[$8>>2]|0;
       $121 = (16 - ($120))|0;
       $122 = $102 >>> $121;
       $123 = $122&65535;
       HEAP16[$9>>1] = $123;
       $124 = (($97) + -16)|0;
       $125 = (($124) + ($120))|0;
       $132 = $122;$storemerge268 = $125;
      } else {
       $126 = (($99) + ($97))|0;
       $132 = $106;$storemerge268 = $126;
      }
      HEAP32[$8>>2] = $storemerge268;
      $127 = ($storemerge268|0)>(14);
      $128 = (($$2) + 65533)|0;
      $129 = $128 & 65535;
      $130 = $129 << $storemerge268;
      $131 = $132 & 65535;
      $133 = $130 | $131;
      $134 = $133&65535;
      HEAP16[$9>>1] = $134;
      if ($127) {
       $135 = $133&255;
       $136 = HEAP32[$10>>2]|0;
       $137 = HEAP32[$11>>2]|0;
       $138 = (($137) + 1)|0;
       HEAP32[$11>>2] = $138;
       $139 = (($136) + ($137)|0);
       HEAP8[$139>>0] = $135;
       $140 = HEAP16[$9>>1]|0;
       $141 = ($140&65535) >>> 8;
       $142 = $141&255;
       $143 = HEAP32[$10>>2]|0;
       $144 = HEAP32[$11>>2]|0;
       $145 = (($144) + 1)|0;
       HEAP32[$11>>2] = $145;
       $146 = (($143) + ($144)|0);
       HEAP8[$146>>0] = $142;
       $147 = HEAP32[$8>>2]|0;
       $148 = (16 - ($147))|0;
       $149 = $129 >>> $148;
       $150 = $149&65535;
       HEAP16[$9>>1] = $150;
       $151 = (($147) + -14)|0;
       $storemerge267$sink = $151;
       break;
      } else {
       $152 = (($storemerge268) + 2)|0;
       $storemerge267$sink = $152;
       break;
      }
     }
    } while(0);
    HEAP32[$8>>2] = $storemerge267$sink;
   }
   $268 = ($20<<16>>16)==(0);
   $$273 = $24 ? 6 : 7;
   $269 = $268 | $24;
   $spec$select274 = $269 ? 3 : 4;
   $spec$select275 = $268 ? 138 : $$273;
   $$1 = $$0256279;$$2261 = $spec$select275;$$2264 = $spec$select274;$$3 = 0;
  }
  $exitcond = ($$0281|0)==($2|0);
  if ($exitcond) {
   break;
  } else {
   $$0255280 = $$1;$$0256279 = $21;$$0257278 = $$3;$$0281 = $18;$$1260277 = $$2261;$$1263276 = $$2264;
  }
 }
 return;
}
function _zcalloc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = Math_imul($2, $1)|0;
 $4 = (_malloc($3)|0);
 return ($4|0);
}
function _zcfree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _free($1);
 return;
}
function _inflate_fast($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0295 = 0, $$0299 = 0, $$0303 = 0, $$0310 = 0, $$0318 = 0, $$0328 = 0, $$1 = 0, $$1296 = 0, $$1300 = 0, $$1304 = 0, $$1311 = 0, $$1319 = 0, $$1329 = 0, $$2 = 0, $$2297$lcssa = 0, $$2297401 = 0, $$2301 = 0, $$2305 = 0, $$2312 = 0;
 var $$3 = 0, $$3298 = 0, $$3302 = 0, $$3306 = 0, $$3313 = 0, $$3321 = 0, $$3331 = 0, $$4 = 0, $$4307 = 0, $$4314 = 0, $$4322 = 0, $$4332 = 0, $$5$lcssa = 0, $$5308 = 0, $$5315 = 0, $$5323 = 0, $$5333 = 0, $$5402 = 0, $$6 = 0, $$6309 = 0;
 var $$6316$lcssa = 0, $$6316400 = 0, $$7 = 0, $$7$ph = 0, $$7$ph$ph = 0, $$7317 = 0, $$7325 = 0, $$7335 = 0, $$8 = 0, $$8326 = 0, $$8336 = 0, $$9 = 0, $$9327 = 0, $$9327$ph = 0, $$9327$ph$ph = 0, $$9337 = 0, $$9337$ph = 0, $$9337$ph$ph = 0, $$lcssa = 0, $$lcssa348 = 0;
 var $$lcssa351 = 0, $$lcssa357 = 0, $$lcssa359 = 0, $$sink = 0, $$sink537 = 0, $$sroa$0$0 = 0, $$sroa$0$0$in = 0, $$sroa$0$0$in377 = 0, $$sroa$0$0380 = 0, $$sroa$0$1 = 0, $$sroa$0$1$in = 0, $$sroa$0$1$in386 = 0, $$sroa$0$1389 = 0, $$sroa$10$0 = 0, $$sroa$10$0$in = 0, $$sroa$10$0$in379 = 0, $$sroa$10$0$lcssa$off0 = 0, $$sroa$10$0382 = 0, $$sroa$10$0383 = 0, $$sroa$10$1 = 0;
 var $$sroa$10$1$in = 0, $$sroa$10$1$in388 = 0, $$sroa$10$1$lcssa = 0, $$sroa$10$1391 = 0, $$sroa$10$1392 = 0, $$sroa$8$0 = 0, $$sroa$8$0$in = 0, $$sroa$8$0$in378 = 0, $$sroa$8$0381 = 0, $$sroa$8$1 = 0, $$sroa$8$1$in = 0, $$sroa$8$1$in387 = 0, $$sroa$8$1390 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $extract$t = 0, $extract$t409 = 0, $or$cond = 0, $scevgep = 0, $scevgep451 = 0, $scevgep453 = 0, $scevgep454 = 0, $scevgep456 = 0, $scevgep457 = 0, $scevgep460 = 0, $scevgep461 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 28|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ((($4)) + -1|0);
 $6 = ((($0)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = (($7) + -5)|0;
 $9 = (($5) + ($8)|0);
 $10 = ((($0)) + 12|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($11)) + -1|0);
 $13 = ((($0)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = (($14) - ($1))|0;
 $16 = (($12) + ($15)|0);
 $17 = (($14) + -257)|0;
 $18 = (($12) + ($17)|0);
 $19 = ((($3)) + 40|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ((($3)) + 44|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ((($3)) + 48|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ((($3)) + 52|0);
 $26 = HEAP32[$25>>2]|0;
 $27 = ((($3)) + 56|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ((($3)) + 60|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = ((($3)) + 76|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ((($3)) + 80|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = ((($3)) + 84|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = 1 << $36;
 $38 = (($37) + -1)|0;
 $39 = ((($3)) + 88|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = 1 << $40;
 $42 = (($41) + -1)|0;
 $43 = $16;
 $44 = ((($3)) + 7104|0);
 $45 = ((($26)) + -1|0);
 $46 = ($24|0)==(0);
 $47 = (($24) + ($20))|0;
 $48 = (($43) - ($24))|0;
 $$0303 = $5;$$0310 = $12;$$0318 = $28;$$0328 = $30;
 L1: while(1) {
  $49 = ($$0328>>>0)<(15);
  if ($49) {
   $50 = ((($$0303)) + 1|0);
   $51 = HEAP8[$50>>0]|0;
   $52 = $51&255;
   $53 = $52 << $$0328;
   $54 = (($53) + ($$0318))|0;
   $55 = (($$0328) + 8)|0;
   $56 = ((($$0303)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57&255;
   $59 = $58 << $55;
   $60 = (($54) + ($59))|0;
   $61 = (($$0328) + 16)|0;
   $$1304 = $56;$$1319 = $60;$$1329 = $61;
  } else {
   $$1304 = $$0303;$$1319 = $$0318;$$1329 = $$0328;
  }
  $62 = $$1319 & $38;
  $$sroa$0$0$in377 = (($32) + ($62<<2)|0);
  $$sroa$8$0$in378 = (((($32) + ($62<<2)|0)) + 1|0);
  $$sroa$10$0$in379 = (((($32) + ($62<<2)|0)) + 2|0);
  $$sroa$0$0380 = HEAP8[$$sroa$0$0$in377>>0]|0;
  $$sroa$8$0381 = HEAP8[$$sroa$8$0$in378>>0]|0;
  $$sroa$10$0382 = HEAP16[$$sroa$10$0$in379>>1]|0;
  $63 = $$sroa$8$0381&255;
  $64 = $$1319 >>> $63;
  $65 = (($$1329) - ($63))|0;
  $66 = ($$sroa$0$0380<<24>>24)==(0);
  $extract$t = $$sroa$10$0382&255;
  do {
   if ($66) {
    $$lcssa348 = $65;$$lcssa351 = $64;$$sroa$10$0$lcssa$off0 = $extract$t;
    label = 7;
   } else {
    $67 = $$sroa$0$0380&255;
    $$sroa$10$0383 = $$sroa$10$0382;$70 = $67;$75 = $65;$83 = $64;
    while(1) {
     $69 = $70 & 16;
     $71 = ($69|0)==(0);
     if (!($71)) {
      break;
     }
     $242 = $70 & 64;
     $243 = ($242|0)==(0);
     if (!($243)) {
      label = 56;
      break L1;
     }
     $244 = $$sroa$10$0383&65535;
     $245 = 1 << $70;
     $246 = (($245) + -1)|0;
     $247 = $83 & $246;
     $248 = (($247) + ($244))|0;
     $$sroa$0$0$in = (($32) + ($248<<2)|0);
     $$sroa$8$0$in = (((($32) + ($248<<2)|0)) + 1|0);
     $$sroa$10$0$in = (((($32) + ($248<<2)|0)) + 2|0);
     $$sroa$0$0 = HEAP8[$$sroa$0$0$in>>0]|0;
     $$sroa$8$0 = HEAP8[$$sroa$8$0$in>>0]|0;
     $$sroa$10$0 = HEAP16[$$sroa$10$0$in>>1]|0;
     $249 = $$sroa$8$0&255;
     $250 = $83 >>> $249;
     $251 = (($75) - ($249))|0;
     $252 = $$sroa$0$0&255;
     $253 = ($$sroa$0$0<<24>>24)==(0);
     if ($253) {
      label = 6;
      break;
     } else {
      $$sroa$10$0383 = $$sroa$10$0;$70 = $252;$75 = $251;$83 = $250;
     }
    }
    if ((label|0) == 6) {
     label = 0;
     $extract$t409 = $$sroa$10$0&255;
     $$lcssa348 = $251;$$lcssa351 = $250;$$sroa$10$0$lcssa$off0 = $extract$t409;
     label = 7;
     break;
    }
    $72 = $$sroa$10$0383&65535;
    $73 = $70 & 15;
    $74 = ($73|0)==(0);
    if ($74) {
     $$0295 = $72;$$3306 = $$1304;$$4322 = $83;$$4332 = $75;
    } else {
     $76 = ($75>>>0)<($73>>>0);
     $77 = ((($$1304)) + 1|0);
     if ($76) {
      $78 = (($75) + 8)|0;
      $79 = HEAP8[$77>>0]|0;
      $80 = $79&255;
      $81 = $80 << $75;
      $82 = (($81) + ($83))|0;
      $$2305 = $77;$$3321 = $82;$$3331 = $78;
     } else {
      $$2305 = $$1304;$$3321 = $83;$$3331 = $75;
     }
     $84 = 1 << $73;
     $85 = (($84) + -1)|0;
     $86 = $$3321 & $85;
     $87 = (($86) + ($72))|0;
     $88 = $$3321 >>> $73;
     $89 = (($$3331) - ($73))|0;
     $$0295 = $87;$$3306 = $$2305;$$4322 = $88;$$4332 = $89;
    }
    $90 = ($$4332>>>0)<(15);
    if ($90) {
     $91 = ((($$3306)) + 1|0);
     $92 = HEAP8[$91>>0]|0;
     $93 = $92&255;
     $94 = $93 << $$4332;
     $95 = (($94) + ($$4322))|0;
     $96 = (($$4332) + 8)|0;
     $97 = ((($$3306)) + 2|0);
     $98 = HEAP8[$97>>0]|0;
     $99 = $98&255;
     $100 = $99 << $96;
     $101 = (($95) + ($100))|0;
     $102 = (($$4332) + 16)|0;
     $$4307 = $97;$$5323 = $101;$$5333 = $102;
    } else {
     $$4307 = $$3306;$$5323 = $$4322;$$5333 = $$4332;
    }
    $103 = $$5323 & $42;
    $$sroa$0$1$in386 = (($34) + ($103<<2)|0);
    $$sroa$8$1$in387 = (((($34) + ($103<<2)|0)) + 1|0);
    $$sroa$10$1$in388 = (((($34) + ($103<<2)|0)) + 2|0);
    $$sroa$0$1389 = HEAP8[$$sroa$0$1$in386>>0]|0;
    $$sroa$8$1390 = HEAP8[$$sroa$8$1$in387>>0]|0;
    $$sroa$10$1391 = HEAP16[$$sroa$10$1$in388>>1]|0;
    $104 = $$sroa$8$1390&255;
    $105 = $$5323 >>> $104;
    $106 = (($$5333) - ($104))|0;
    $107 = $$sroa$0$1389&255;
    $108 = $107 & 16;
    $109 = ($108|0)==(0);
    if ($109) {
     $$sroa$10$1392 = $$sroa$10$1391;$227 = $107;$233 = $105;$238 = $106;
     while(1) {
      $226 = $227 & 64;
      $228 = ($226|0)==(0);
      if (!($228)) {
       $$7$ph$ph = $$4307;$$9327$ph$ph = $233;$$9337$ph$ph = $238;$$sink537 = 28792;
       label = 58;
       break L1;
      }
      $229 = $$sroa$10$1392&65535;
      $230 = 1 << $227;
      $231 = (($230) + -1)|0;
      $232 = $233 & $231;
      $234 = (($232) + ($229))|0;
      $$sroa$0$1$in = (($34) + ($234<<2)|0);
      $$sroa$8$1$in = (((($34) + ($234<<2)|0)) + 1|0);
      $$sroa$10$1$in = (((($34) + ($234<<2)|0)) + 2|0);
      $$sroa$0$1 = HEAP8[$$sroa$0$1$in>>0]|0;
      $$sroa$8$1 = HEAP8[$$sroa$8$1$in>>0]|0;
      $$sroa$10$1 = HEAP16[$$sroa$10$1$in>>1]|0;
      $235 = $$sroa$8$1&255;
      $236 = $233 >>> $235;
      $237 = (($238) - ($235))|0;
      $239 = $$sroa$0$1&255;
      $240 = $239 & 16;
      $241 = ($240|0)==(0);
      if ($241) {
       $$sroa$10$1392 = $$sroa$10$1;$227 = $239;$233 = $236;$238 = $237;
      } else {
       break;
      }
     }
     $110 = $$sroa$0$1&255;
     $$lcssa = $110;$$lcssa357 = $237;$$lcssa359 = $236;$$sroa$10$1$lcssa = $$sroa$10$1;
    } else {
     $$lcssa = $107;$$lcssa357 = $106;$$lcssa359 = $105;$$sroa$10$1$lcssa = $$sroa$10$1391;
    }
    $111 = $$sroa$10$1$lcssa&65535;
    $112 = $$lcssa & 15;
    $113 = ($$lcssa357>>>0)<($112>>>0);
    if ($113) {
     $114 = ((($$4307)) + 1|0);
     $115 = HEAP8[$114>>0]|0;
     $116 = $115&255;
     $117 = $116 << $$lcssa357;
     $118 = (($117) + ($$lcssa359))|0;
     $119 = (($$lcssa357) + 8)|0;
     $120 = ($119>>>0)<($112>>>0);
     $121 = ((($$4307)) + 2|0);
     if ($120) {
      $122 = (($$lcssa357) + 16)|0;
      $123 = HEAP8[$121>>0]|0;
      $124 = $123&255;
      $125 = $124 << $119;
      $126 = (($125) + ($118))|0;
      $$5308 = $121;$$7325 = $126;$$7335 = $122;
     } else {
      $$5308 = $114;$$7325 = $118;$$7335 = $119;
     }
    } else {
     $$5308 = $$4307;$$7325 = $$lcssa359;$$7335 = $$lcssa357;
    }
    $127 = 1 << $112;
    $128 = (($127) + -1)|0;
    $129 = $$7325 & $128;
    $130 = (($129) + ($111))|0;
    $131 = $$7325 >>> $112;
    $132 = (($$7335) - ($112))|0;
    $133 = $$0310;
    $134 = (($133) - ($43))|0;
    $135 = ($130>>>0)>($134>>>0);
    if (!($135)) {
     $205 = (0 - ($130))|0;
     $206 = (($$0310) + ($205)|0);
     $$3298 = $$0295;$$6 = $206;$$7317 = $$0310;
     while(1) {
      $207 = ((($$6)) + 1|0);
      $208 = HEAP8[$207>>0]|0;
      $209 = ((($$7317)) + 1|0);
      HEAP8[$209>>0] = $208;
      $210 = ((($$6)) + 2|0);
      $211 = HEAP8[$210>>0]|0;
      $212 = ((($$7317)) + 2|0);
      HEAP8[$212>>0] = $211;
      $213 = ((($$6)) + 3|0);
      $214 = HEAP8[$213>>0]|0;
      $215 = ((($$7317)) + 3|0);
      HEAP8[$215>>0] = $214;
      $216 = (($$3298) + -3)|0;
      $217 = ($216>>>0)>(2);
      if ($217) {
       $$3298 = $216;$$6 = $213;$$7317 = $215;
      } else {
       break;
      }
     }
     $218 = ($216|0)==(0);
     if ($218) {
      $$6309 = $$5308;$$8 = $215;$$8326 = $131;$$8336 = $132;
      break;
     }
     $219 = ((($$6)) + 4|0);
     $220 = HEAP8[$219>>0]|0;
     $221 = ((($$7317)) + 4|0);
     HEAP8[$221>>0] = $220;
     $222 = ($216|0)==(1);
     if ($222) {
      $$6309 = $$5308;$$8 = $221;$$8326 = $131;$$8336 = $132;
      break;
     }
     $223 = ((($$6)) + 5|0);
     $224 = HEAP8[$223>>0]|0;
     $225 = ((($$7317)) + 5|0);
     HEAP8[$225>>0] = $224;
     $$6309 = $$5308;$$8 = $225;$$8326 = $131;$$8336 = $132;
     break;
    }
    $136 = (($130) - ($134))|0;
    $137 = ($136>>>0)>($22>>>0);
    if ($137) {
     $138 = HEAP32[$44>>2]|0;
     $139 = ($138|0)==(0);
     if (!($139)) {
      $$7$ph$ph = $$5308;$$9327$ph$ph = $131;$$9337$ph$ph = $132;$$sink537 = 28814;
      label = 58;
      break L1;
     }
    }
    do {
     if ($46) {
      $140 = (($20) - ($136))|0;
      $141 = (($45) + ($140)|0);
      $142 = ($$0295>>>0)>($136>>>0);
      if ($142) {
       $143 = (($$0295) - ($136))|0;
       $144 = (($130) - ($133))|0;
       $$0 = $141;$$0299 = $136;$$1311 = $$0310;
       while(1) {
        $145 = ((($$0)) + 1|0);
        $146 = HEAP8[$145>>0]|0;
        $147 = ((($$1311)) + 1|0);
        HEAP8[$147>>0] = $146;
        $148 = (($$0299) + -1)|0;
        $149 = ($148|0)==(0);
        if ($149) {
         break;
        } else {
         $$0 = $145;$$0299 = $148;$$1311 = $147;
        }
       }
       $scevgep460 = (($$0310) + ($43)|0);
       $scevgep461 = (($scevgep460) + ($144)|0);
       $150 = (0 - ($130))|0;
       $151 = (($scevgep461) + ($150)|0);
       $$1296 = $143;$$4 = $151;$$5315 = $scevgep461;
      } else {
       $$1296 = $$0295;$$4 = $141;$$5315 = $$0310;
      }
     } else {
      $152 = ($24>>>0)<($136>>>0);
      if (!($152)) {
       $173 = (($24) - ($136))|0;
       $174 = (($45) + ($173)|0);
       $175 = ($$0295>>>0)>($136>>>0);
       if (!($175)) {
        $$1296 = $$0295;$$4 = $174;$$5315 = $$0310;
        break;
       }
       $176 = (($$0295) - ($136))|0;
       $177 = (($130) - ($133))|0;
       $$3 = $174;$$3302 = $136;$$4314 = $$0310;
       while(1) {
        $178 = ((($$3)) + 1|0);
        $179 = HEAP8[$178>>0]|0;
        $180 = ((($$4314)) + 1|0);
        HEAP8[$180>>0] = $179;
        $181 = (($$3302) + -1)|0;
        $182 = ($181|0)==(0);
        if ($182) {
         break;
        } else {
         $$3 = $178;$$3302 = $181;$$4314 = $180;
        }
       }
       $scevgep = (($$0310) + ($43)|0);
       $scevgep451 = (($scevgep) + ($177)|0);
       $183 = (0 - ($130))|0;
       $184 = (($scevgep451) + ($183)|0);
       $$1296 = $176;$$4 = $184;$$5315 = $scevgep451;
       break;
      }
      $153 = (($47) - ($136))|0;
      $154 = (($45) + ($153)|0);
      $155 = (($136) - ($24))|0;
      $156 = ($$0295>>>0)>($155>>>0);
      if ($156) {
       $157 = (($$0295) - ($155))|0;
       $158 = (($130) - ($133))|0;
       $$1 = $154;$$1300 = $155;$$2312 = $$0310;
       while(1) {
        $159 = ((($$1)) + 1|0);
        $160 = HEAP8[$159>>0]|0;
        $161 = ((($$2312)) + 1|0);
        HEAP8[$161>>0] = $160;
        $162 = (($$1300) + -1)|0;
        $163 = ($162|0)==(0);
        if ($163) {
         break;
        } else {
         $$1 = $159;$$1300 = $162;$$2312 = $161;
        }
       }
       $scevgep453 = (($$0310) + ($48)|0);
       $scevgep454 = (($scevgep453) + ($158)|0);
       $164 = ($157>>>0)>($24>>>0);
       if ($164) {
        $scevgep456 = (($$0310) + ($43)|0);
        $$2 = $45;$$2301 = $24;$$3313 = $scevgep454;
        while(1) {
         $165 = ((($$2)) + 1|0);
         $166 = HEAP8[$165>>0]|0;
         $167 = ((($$3313)) + 1|0);
         HEAP8[$167>>0] = $166;
         $168 = (($$2301) + -1)|0;
         $169 = ($168|0)==(0);
         if ($169) {
          break;
         } else {
          $$2 = $165;$$2301 = $168;$$3313 = $167;
         }
        }
        $170 = (($157) - ($24))|0;
        $scevgep457 = (($scevgep456) + ($158)|0);
        $171 = (0 - ($130))|0;
        $172 = (($scevgep457) + ($171)|0);
        $$1296 = $170;$$4 = $172;$$5315 = $scevgep457;
       } else {
        $$1296 = $157;$$4 = $45;$$5315 = $scevgep454;
       }
      } else {
       $$1296 = $$0295;$$4 = $154;$$5315 = $$0310;
      }
     }
    } while(0);
    $185 = ($$1296>>>0)>(2);
    if ($185) {
     $$2297401 = $$1296;$$5402 = $$4;$$6316400 = $$5315;
     while(1) {
      $186 = ((($$5402)) + 1|0);
      $187 = HEAP8[$186>>0]|0;
      $188 = ((($$6316400)) + 1|0);
      HEAP8[$188>>0] = $187;
      $189 = ((($$5402)) + 2|0);
      $190 = HEAP8[$189>>0]|0;
      $191 = ((($$6316400)) + 2|0);
      HEAP8[$191>>0] = $190;
      $192 = ((($$5402)) + 3|0);
      $193 = HEAP8[$192>>0]|0;
      $194 = ((($$6316400)) + 3|0);
      HEAP8[$194>>0] = $193;
      $195 = (($$2297401) + -3)|0;
      $196 = ($195>>>0)>(2);
      if ($196) {
       $$2297401 = $195;$$5402 = $192;$$6316400 = $194;
      } else {
       $$2297$lcssa = $195;$$5$lcssa = $192;$$6316$lcssa = $194;
       break;
      }
     }
    } else {
     $$2297$lcssa = $$1296;$$5$lcssa = $$4;$$6316$lcssa = $$5315;
    }
    $197 = ($$2297$lcssa|0)==(0);
    if ($197) {
     $$6309 = $$5308;$$8 = $$6316$lcssa;$$8326 = $131;$$8336 = $132;
    } else {
     $198 = ((($$5$lcssa)) + 1|0);
     $199 = HEAP8[$198>>0]|0;
     $200 = ((($$6316$lcssa)) + 1|0);
     HEAP8[$200>>0] = $199;
     $201 = ($$2297$lcssa|0)==(1);
     if ($201) {
      $$6309 = $$5308;$$8 = $200;$$8326 = $131;$$8336 = $132;
     } else {
      $202 = ((($$5$lcssa)) + 2|0);
      $203 = HEAP8[$202>>0]|0;
      $204 = ((($$6316$lcssa)) + 2|0);
      HEAP8[$204>>0] = $203;
      $$6309 = $$5308;$$8 = $204;$$8326 = $131;$$8336 = $132;
     }
    }
   }
  } while(0);
  if ((label|0) == 7) {
   label = 0;
   $68 = ((($$0310)) + 1|0);
   HEAP8[$68>>0] = $$sroa$10$0$lcssa$off0;
   $$6309 = $$1304;$$8 = $68;$$8326 = $$lcssa351;$$8336 = $$lcssa348;
  }
  $256 = ($$6309>>>0)<($9>>>0);
  $257 = ($$8>>>0)<($18>>>0);
  $or$cond = $257 & $256;
  if ($or$cond) {
   $$0303 = $$6309;$$0310 = $$8;$$0318 = $$8326;$$0328 = $$8336;
  } else {
   $$7 = $$6309;$$9 = $$8;$$9327 = $$8326;$$9337 = $$8336;
   label = 60;
   break;
  }
 }
 if ((label|0) == 56) {
  $254 = $70 & 32;
  $255 = ($254|0)==(0);
  if ($255) {
   $$7$ph$ph = $$1304;$$9327$ph$ph = $83;$$9337$ph$ph = $75;$$sink537 = 28764;
   label = 58;
  } else {
   $$7$ph = $$1304;$$9327$ph = $83;$$9337$ph = $75;$$sink = 11;
  }
 }
 else if ((label|0) == 60) {
  $259 = $$9337 >>> 3;
  $260 = (0 - ($259))|0;
  $261 = (($$7) + ($260)|0);
  $262 = $$9337 & 7;
  $263 = 1 << $262;
  $264 = (($263) + -1)|0;
  $265 = $264 & $$9327;
  $266 = ((($261)) + 1|0);
  HEAP32[$0>>2] = $266;
  $267 = ((($$9)) + 1|0);
  HEAP32[$10>>2] = $267;
  $268 = $9;
  $269 = $261;
  $270 = (($268) + 5)|0;
  $271 = (($270) - ($269))|0;
  HEAP32[$6>>2] = $271;
  $272 = $18;
  $273 = $$9;
  $274 = (($272) + 257)|0;
  $275 = (($274) - ($273))|0;
  HEAP32[$13>>2] = $275;
  HEAP32[$27>>2] = $265;
  HEAP32[$29>>2] = $262;
  return;
 }
 if ((label|0) == 58) {
  $258 = ((($0)) + 24|0);
  HEAP32[$258>>2] = $$sink537;
  $$7$ph = $$7$ph$ph;$$9327$ph = $$9327$ph$ph;$$9337$ph = $$9337$ph$ph;$$sink = 29;
 }
 HEAP32[$3>>2] = $$sink;
 $$7 = $$7$ph;$$9 = $$0310;$$9327 = $$9327$ph;$$9337 = $$9337$ph;
 $259 = $$9337 >>> 3;
 $260 = (0 - ($259))|0;
 $261 = (($$7) + ($260)|0);
 $262 = $$9337 & 7;
 $263 = 1 << $262;
 $264 = (($263) + -1)|0;
 $265 = $264 & $$9327;
 $266 = ((($261)) + 1|0);
 HEAP32[$0>>2] = $266;
 $267 = ((($$9)) + 1|0);
 HEAP32[$10>>2] = $267;
 $268 = $9;
 $269 = $261;
 $270 = (($268) + 5)|0;
 $271 = (($270) - ($269))|0;
 HEAP32[$6>>2] = $271;
 $272 = $18;
 $273 = $$9;
 $274 = (($272) + 257)|0;
 $275 = (($274) - ($273))|0;
 HEAP32[$13>>2] = $275;
 HEAP32[$27>>2] = $265;
 HEAP32[$29>>2] = $262;
 return;
}
function _malloc($0) {
 $0 = $0|0;
 var $$0 = 0, $$0$i = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i20$i = 0, $$0169$i = 0, $$0170$i = 0, $$0171$i = 0, $$0192 = 0, $$0194 = 0, $$02014$i$i = 0, $$0202$lcssa$i$i = 0, $$02023$i$i = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$024372$i = 0, $$0259$i$i = 0, $$02604$i$i = 0, $$0261$lcssa$i$i = 0, $$02613$i$i = 0;
 var $$0267$i$i = 0, $$0268$i$i = 0, $$0318$i = 0, $$032012$i = 0, $$0321$lcssa$i = 0, $$032111$i = 0, $$0323$i = 0, $$0329$i = 0, $$0335$i = 0, $$0336$i = 0, $$0338$i = 0, $$0339$i = 0, $$0344$i = 0, $$1174$i = 0, $$1174$i$be = 0, $$1174$i$ph = 0, $$1176$i = 0, $$1176$i$be = 0, $$1176$i$ph = 0, $$124471$i = 0;
 var $$1263$i$i = 0, $$1263$i$i$be = 0, $$1263$i$i$ph = 0, $$1265$i$i = 0, $$1265$i$i$be = 0, $$1265$i$i$ph = 0, $$1319$i = 0, $$1324$i = 0, $$1340$i = 0, $$1346$i = 0, $$1346$i$be = 0, $$1346$i$ph = 0, $$1350$i = 0, $$1350$i$be = 0, $$1350$i$ph = 0, $$2234243136$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2331$i = 0, $$3$i = 0;
 var $$3$i$i = 0, $$3$i198 = 0, $$3$i198211 = 0, $$3326$i = 0, $$3348$i = 0, $$4$lcssa$i = 0, $$415$i = 0, $$415$i$ph = 0, $$4236$i = 0, $$4327$lcssa$i = 0, $$432714$i = 0, $$432714$i$ph = 0, $$4333$i = 0, $$533413$i = 0, $$533413$i$ph = 0, $$723947$i = 0, $$748$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0;
 var $$pre$i16$i = 0, $$pre$i195 = 0, $$pre$i204 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i17$iZ2D = 0, $$pre$phi$i205Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink320 = 0, $$sink321 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0;
 var $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0;
 var $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0;
 var $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0;
 var $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0;
 var $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0;
 var $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0;
 var $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0;
 var $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0;
 var $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0;
 var $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0;
 var $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0;
 var $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0;
 var $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $99 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i203 = 0, $not$$i = 0, $or$cond$i = 0, $or$cond$i199 = 0, $or$cond1$i = 0, $or$cond1$i197 = 0, $or$cond11$i = 0, $or$cond2$i = 0;
 var $or$cond5$i = 0, $or$cond50$i = 0, $or$cond51$i = 0, $or$cond6$i = 0, $or$cond7$i = 0, $or$cond8$i = 0, $or$cond8$not$i = 0, $spec$select$i = 0, $spec$select$i201 = 0, $spec$select1$i = 0, $spec$select2$i = 0, $spec$select4$i = 0, $spec$select49$i = 0, $spec$select9$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[7917]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (31708 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($16|0);
    if ($21) {
     $22 = 1 << $14;
     $23 = $22 ^ -1;
     $24 = $8 & $23;
     HEAP32[7917] = $24;
    } else {
     $25 = ((($20)) + 12|0);
     HEAP32[$25>>2] = $16;
     HEAP32[$17>>2] = $20;
    }
    $26 = $14 << 3;
    $27 = $26 | 3;
    $28 = ((($18)) + 4|0);
    HEAP32[$28>>2] = $27;
    $29 = (($18) + ($26)|0);
    $30 = ((($29)) + 4|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $31 | 1;
    HEAP32[$30>>2] = $32;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $33 = HEAP32[(31676)>>2]|0;
   $34 = ($6>>>0)>($33>>>0);
   if ($34) {
    $35 = ($9|0)==(0);
    if (!($35)) {
     $36 = $9 << $7;
     $37 = 2 << $7;
     $38 = (0 - ($37))|0;
     $39 = $37 | $38;
     $40 = $36 & $39;
     $41 = (0 - ($40))|0;
     $42 = $40 & $41;
     $43 = (($42) + -1)|0;
     $44 = $43 >>> 12;
     $45 = $44 & 16;
     $46 = $43 >>> $45;
     $47 = $46 >>> 5;
     $48 = $47 & 8;
     $49 = $48 | $45;
     $50 = $46 >>> $48;
     $51 = $50 >>> 2;
     $52 = $51 & 4;
     $53 = $49 | $52;
     $54 = $50 >>> $52;
     $55 = $54 >>> 1;
     $56 = $55 & 2;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 1;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = (($61) + ($62))|0;
     $64 = $63 << 1;
     $65 = (31708 + ($64<<2)|0);
     $66 = ((($65)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ((($67)) + 8|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==($65|0);
     if ($70) {
      $71 = 1 << $63;
      $72 = $71 ^ -1;
      $73 = $8 & $72;
      HEAP32[7917] = $73;
      $90 = $73;
     } else {
      $74 = ((($69)) + 12|0);
      HEAP32[$74>>2] = $65;
      HEAP32[$66>>2] = $69;
      $90 = $8;
     }
     $75 = $63 << 3;
     $76 = (($75) - ($6))|0;
     $77 = $6 | 3;
     $78 = ((($67)) + 4|0);
     HEAP32[$78>>2] = $77;
     $79 = (($67) + ($6)|0);
     $80 = $76 | 1;
     $81 = ((($79)) + 4|0);
     HEAP32[$81>>2] = $80;
     $82 = (($67) + ($75)|0);
     HEAP32[$82>>2] = $76;
     $83 = ($33|0)==(0);
     if (!($83)) {
      $84 = HEAP32[(31688)>>2]|0;
      $85 = $33 >>> 3;
      $86 = $85 << 1;
      $87 = (31708 + ($86<<2)|0);
      $88 = 1 << $85;
      $89 = $90 & $88;
      $91 = ($89|0)==(0);
      if ($91) {
       $92 = $90 | $88;
       HEAP32[7917] = $92;
       $$pre = ((($87)) + 8|0);
       $$0194 = $87;$$pre$phiZ2D = $$pre;
      } else {
       $93 = ((($87)) + 8|0);
       $94 = HEAP32[$93>>2]|0;
       $$0194 = $94;$$pre$phiZ2D = $93;
      }
      HEAP32[$$pre$phiZ2D>>2] = $84;
      $95 = ((($$0194)) + 12|0);
      HEAP32[$95>>2] = $84;
      $96 = ((($84)) + 8|0);
      HEAP32[$96>>2] = $$0194;
      $97 = ((($84)) + 12|0);
      HEAP32[$97>>2] = $87;
     }
     HEAP32[(31676)>>2] = $76;
     HEAP32[(31688)>>2] = $79;
     $$0 = $68;
     STACKTOP = sp;return ($$0|0);
    }
    $98 = HEAP32[(31672)>>2]|0;
    $99 = ($98|0)==(0);
    if ($99) {
     $$0192 = $6;
    } else {
     $100 = (0 - ($98))|0;
     $101 = $98 & $100;
     $102 = (($101) + -1)|0;
     $103 = $102 >>> 12;
     $104 = $103 & 16;
     $105 = $102 >>> $104;
     $106 = $105 >>> 5;
     $107 = $106 & 8;
     $108 = $107 | $104;
     $109 = $105 >>> $107;
     $110 = $109 >>> 2;
     $111 = $110 & 4;
     $112 = $108 | $111;
     $113 = $109 >>> $111;
     $114 = $113 >>> 1;
     $115 = $114 & 2;
     $116 = $112 | $115;
     $117 = $113 >>> $115;
     $118 = $117 >>> 1;
     $119 = $118 & 1;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = (($120) + ($121))|0;
     $123 = (31972 + ($122<<2)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ((($124)) + 4|0);
     $126 = HEAP32[$125>>2]|0;
     $127 = $126 & -8;
     $128 = (($127) - ($6))|0;
     $$0169$i = $124;$$0170$i = $124;$$0171$i = $128;
     while(1) {
      $129 = ((($$0169$i)) + 16|0);
      $130 = HEAP32[$129>>2]|0;
      $131 = ($130|0)==(0|0);
      if ($131) {
       $132 = ((($$0169$i)) + 20|0);
       $133 = HEAP32[$132>>2]|0;
       $134 = ($133|0)==(0|0);
       if ($134) {
        break;
       } else {
        $136 = $133;
       }
      } else {
       $136 = $130;
      }
      $135 = ((($136)) + 4|0);
      $137 = HEAP32[$135>>2]|0;
      $138 = $137 & -8;
      $139 = (($138) - ($6))|0;
      $140 = ($139>>>0)<($$0171$i>>>0);
      $spec$select$i = $140 ? $139 : $$0171$i;
      $spec$select1$i = $140 ? $136 : $$0170$i;
      $$0169$i = $136;$$0170$i = $spec$select1$i;$$0171$i = $spec$select$i;
     }
     $141 = (($$0170$i) + ($6)|0);
     $142 = ($141>>>0)>($$0170$i>>>0);
     if ($142) {
      $143 = ((($$0170$i)) + 24|0);
      $144 = HEAP32[$143>>2]|0;
      $145 = ((($$0170$i)) + 12|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = ($146|0)==($$0170$i|0);
      do {
       if ($147) {
        $152 = ((($$0170$i)) + 20|0);
        $153 = HEAP32[$152>>2]|0;
        $154 = ($153|0)==(0|0);
        if ($154) {
         $155 = ((($$0170$i)) + 16|0);
         $156 = HEAP32[$155>>2]|0;
         $157 = ($156|0)==(0|0);
         if ($157) {
          $$3$i = 0;
          break;
         } else {
          $$1174$i$ph = $156;$$1176$i$ph = $155;
         }
        } else {
         $$1174$i$ph = $153;$$1176$i$ph = $152;
        }
        $$1174$i = $$1174$i$ph;$$1176$i = $$1176$i$ph;
        while(1) {
         $158 = ((($$1174$i)) + 20|0);
         $159 = HEAP32[$158>>2]|0;
         $160 = ($159|0)==(0|0);
         if ($160) {
          $161 = ((($$1174$i)) + 16|0);
          $162 = HEAP32[$161>>2]|0;
          $163 = ($162|0)==(0|0);
          if ($163) {
           break;
          } else {
           $$1174$i$be = $162;$$1176$i$be = $161;
          }
         } else {
          $$1174$i$be = $159;$$1176$i$be = $158;
         }
         $$1174$i = $$1174$i$be;$$1176$i = $$1176$i$be;
        }
        HEAP32[$$1176$i>>2] = 0;
        $$3$i = $$1174$i;
       } else {
        $148 = ((($$0170$i)) + 8|0);
        $149 = HEAP32[$148>>2]|0;
        $150 = ((($149)) + 12|0);
        HEAP32[$150>>2] = $146;
        $151 = ((($146)) + 8|0);
        HEAP32[$151>>2] = $149;
        $$3$i = $146;
       }
      } while(0);
      $164 = ($144|0)==(0|0);
      do {
       if (!($164)) {
        $165 = ((($$0170$i)) + 28|0);
        $166 = HEAP32[$165>>2]|0;
        $167 = (31972 + ($166<<2)|0);
        $168 = HEAP32[$167>>2]|0;
        $169 = ($$0170$i|0)==($168|0);
        if ($169) {
         HEAP32[$167>>2] = $$3$i;
         $cond$i = ($$3$i|0)==(0|0);
         if ($cond$i) {
          $170 = 1 << $166;
          $171 = $170 ^ -1;
          $172 = $98 & $171;
          HEAP32[(31672)>>2] = $172;
          break;
         }
        } else {
         $173 = ((($144)) + 16|0);
         $174 = HEAP32[$173>>2]|0;
         $175 = ($174|0)==($$0170$i|0);
         $176 = ((($144)) + 20|0);
         $$sink = $175 ? $173 : $176;
         HEAP32[$$sink>>2] = $$3$i;
         $177 = ($$3$i|0)==(0|0);
         if ($177) {
          break;
         }
        }
        $178 = ((($$3$i)) + 24|0);
        HEAP32[$178>>2] = $144;
        $179 = ((($$0170$i)) + 16|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(0|0);
        if (!($181)) {
         $182 = ((($$3$i)) + 16|0);
         HEAP32[$182>>2] = $180;
         $183 = ((($180)) + 24|0);
         HEAP32[$183>>2] = $$3$i;
        }
        $184 = ((($$0170$i)) + 20|0);
        $185 = HEAP32[$184>>2]|0;
        $186 = ($185|0)==(0|0);
        if (!($186)) {
         $187 = ((($$3$i)) + 20|0);
         HEAP32[$187>>2] = $185;
         $188 = ((($185)) + 24|0);
         HEAP32[$188>>2] = $$3$i;
        }
       }
      } while(0);
      $189 = ($$0171$i>>>0)<(16);
      if ($189) {
       $190 = (($$0171$i) + ($6))|0;
       $191 = $190 | 3;
       $192 = ((($$0170$i)) + 4|0);
       HEAP32[$192>>2] = $191;
       $193 = (($$0170$i) + ($190)|0);
       $194 = ((($193)) + 4|0);
       $195 = HEAP32[$194>>2]|0;
       $196 = $195 | 1;
       HEAP32[$194>>2] = $196;
      } else {
       $197 = $6 | 3;
       $198 = ((($$0170$i)) + 4|0);
       HEAP32[$198>>2] = $197;
       $199 = $$0171$i | 1;
       $200 = ((($141)) + 4|0);
       HEAP32[$200>>2] = $199;
       $201 = (($141) + ($$0171$i)|0);
       HEAP32[$201>>2] = $$0171$i;
       $202 = ($33|0)==(0);
       if (!($202)) {
        $203 = HEAP32[(31688)>>2]|0;
        $204 = $33 >>> 3;
        $205 = $204 << 1;
        $206 = (31708 + ($205<<2)|0);
        $207 = 1 << $204;
        $208 = $207 & $8;
        $209 = ($208|0)==(0);
        if ($209) {
         $210 = $207 | $8;
         HEAP32[7917] = $210;
         $$pre$i = ((($206)) + 8|0);
         $$0$i = $206;$$pre$phi$iZ2D = $$pre$i;
        } else {
         $211 = ((($206)) + 8|0);
         $212 = HEAP32[$211>>2]|0;
         $$0$i = $212;$$pre$phi$iZ2D = $211;
        }
        HEAP32[$$pre$phi$iZ2D>>2] = $203;
        $213 = ((($$0$i)) + 12|0);
        HEAP32[$213>>2] = $203;
        $214 = ((($203)) + 8|0);
        HEAP32[$214>>2] = $$0$i;
        $215 = ((($203)) + 12|0);
        HEAP32[$215>>2] = $206;
       }
       HEAP32[(31676)>>2] = $$0171$i;
       HEAP32[(31688)>>2] = $141;
      }
      $216 = ((($$0170$i)) + 8|0);
      $$0 = $216;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0192 = $6;
     }
    }
   } else {
    $$0192 = $6;
   }
  } else {
   $217 = ($0>>>0)>(4294967231);
   if ($217) {
    $$0192 = -1;
   } else {
    $218 = (($0) + 11)|0;
    $219 = $218 & -8;
    $220 = HEAP32[(31672)>>2]|0;
    $221 = ($220|0)==(0);
    if ($221) {
     $$0192 = $219;
    } else {
     $222 = (0 - ($219))|0;
     $223 = $218 >>> 8;
     $224 = ($223|0)==(0);
     if ($224) {
      $$0335$i = 0;
     } else {
      $225 = ($219>>>0)>(16777215);
      if ($225) {
       $$0335$i = 31;
      } else {
       $226 = (($223) + 1048320)|0;
       $227 = $226 >>> 16;
       $228 = $227 & 8;
       $229 = $223 << $228;
       $230 = (($229) + 520192)|0;
       $231 = $230 >>> 16;
       $232 = $231 & 4;
       $233 = $232 | $228;
       $234 = $229 << $232;
       $235 = (($234) + 245760)|0;
       $236 = $235 >>> 16;
       $237 = $236 & 2;
       $238 = $233 | $237;
       $239 = (14 - ($238))|0;
       $240 = $234 << $237;
       $241 = $240 >>> 15;
       $242 = (($239) + ($241))|0;
       $243 = $242 << 1;
       $244 = (($242) + 7)|0;
       $245 = $219 >>> $244;
       $246 = $245 & 1;
       $247 = $246 | $243;
       $$0335$i = $247;
      }
     }
     $248 = (31972 + ($$0335$i<<2)|0);
     $249 = HEAP32[$248>>2]|0;
     $250 = ($249|0)==(0|0);
     L79: do {
      if ($250) {
       $$2331$i = 0;$$3$i198 = 0;$$3326$i = $222;
       label = 61;
      } else {
       $251 = ($$0335$i|0)==(31);
       $252 = $$0335$i >>> 1;
       $253 = (25 - ($252))|0;
       $254 = $251 ? 0 : $253;
       $255 = $219 << $254;
       $$0318$i = 0;$$0323$i = $222;$$0329$i = $249;$$0336$i = $255;$$0339$i = 0;
       while(1) {
        $256 = ((($$0329$i)) + 4|0);
        $257 = HEAP32[$256>>2]|0;
        $258 = $257 & -8;
        $259 = (($258) - ($219))|0;
        $260 = ($259>>>0)<($$0323$i>>>0);
        if ($260) {
         $261 = ($259|0)==(0);
         if ($261) {
          $$415$i$ph = $$0329$i;$$432714$i$ph = 0;$$533413$i$ph = $$0329$i;
          label = 65;
          break L79;
         } else {
          $$1319$i = $$0329$i;$$1324$i = $259;
         }
        } else {
         $$1319$i = $$0318$i;$$1324$i = $$0323$i;
        }
        $262 = ((($$0329$i)) + 20|0);
        $263 = HEAP32[$262>>2]|0;
        $264 = $$0336$i >>> 31;
        $265 = (((($$0329$i)) + 16|0) + ($264<<2)|0);
        $266 = HEAP32[$265>>2]|0;
        $267 = ($263|0)==(0|0);
        $268 = ($263|0)==($266|0);
        $or$cond1$i197 = $267 | $268;
        $$1340$i = $or$cond1$i197 ? $$0339$i : $263;
        $269 = ($266|0)==(0|0);
        $spec$select4$i = $$0336$i << 1;
        if ($269) {
         $$2331$i = $$1340$i;$$3$i198 = $$1319$i;$$3326$i = $$1324$i;
         label = 61;
         break;
        } else {
         $$0318$i = $$1319$i;$$0323$i = $$1324$i;$$0329$i = $266;$$0336$i = $spec$select4$i;$$0339$i = $$1340$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 61) {
      $270 = ($$2331$i|0)==(0|0);
      $271 = ($$3$i198|0)==(0|0);
      $or$cond$i199 = $270 & $271;
      if ($or$cond$i199) {
       $272 = 2 << $$0335$i;
       $273 = (0 - ($272))|0;
       $274 = $272 | $273;
       $275 = $274 & $220;
       $276 = ($275|0)==(0);
       if ($276) {
        $$0192 = $219;
        break;
       }
       $277 = (0 - ($275))|0;
       $278 = $275 & $277;
       $279 = (($278) + -1)|0;
       $280 = $279 >>> 12;
       $281 = $280 & 16;
       $282 = $279 >>> $281;
       $283 = $282 >>> 5;
       $284 = $283 & 8;
       $285 = $284 | $281;
       $286 = $282 >>> $284;
       $287 = $286 >>> 2;
       $288 = $287 & 4;
       $289 = $285 | $288;
       $290 = $286 >>> $288;
       $291 = $290 >>> 1;
       $292 = $291 & 2;
       $293 = $289 | $292;
       $294 = $290 >>> $292;
       $295 = $294 >>> 1;
       $296 = $295 & 1;
       $297 = $293 | $296;
       $298 = $294 >>> $296;
       $299 = (($297) + ($298))|0;
       $300 = (31972 + ($299<<2)|0);
       $301 = HEAP32[$300>>2]|0;
       $$3$i198211 = 0;$$4333$i = $301;
      } else {
       $$3$i198211 = $$3$i198;$$4333$i = $$2331$i;
      }
      $302 = ($$4333$i|0)==(0|0);
      if ($302) {
       $$4$lcssa$i = $$3$i198211;$$4327$lcssa$i = $$3326$i;
      } else {
       $$415$i$ph = $$3$i198211;$$432714$i$ph = $$3326$i;$$533413$i$ph = $$4333$i;
       label = 65;
      }
     }
     if ((label|0) == 65) {
      $$415$i = $$415$i$ph;$$432714$i = $$432714$i$ph;$$533413$i = $$533413$i$ph;
      while(1) {
       $303 = ((($$533413$i)) + 4|0);
       $304 = HEAP32[$303>>2]|0;
       $305 = $304 & -8;
       $306 = (($305) - ($219))|0;
       $307 = ($306>>>0)<($$432714$i>>>0);
       $spec$select$i201 = $307 ? $306 : $$432714$i;
       $spec$select2$i = $307 ? $$533413$i : $$415$i;
       $308 = ((($$533413$i)) + 16|0);
       $309 = HEAP32[$308>>2]|0;
       $310 = ($309|0)==(0|0);
       if ($310) {
        $311 = ((($$533413$i)) + 20|0);
        $312 = HEAP32[$311>>2]|0;
        $313 = $312;
       } else {
        $313 = $309;
       }
       $314 = ($313|0)==(0|0);
       if ($314) {
        $$4$lcssa$i = $spec$select2$i;$$4327$lcssa$i = $spec$select$i201;
        break;
       } else {
        $$415$i = $spec$select2$i;$$432714$i = $spec$select$i201;$$533413$i = $313;
       }
      }
     }
     $315 = ($$4$lcssa$i|0)==(0|0);
     if ($315) {
      $$0192 = $219;
     } else {
      $316 = HEAP32[(31676)>>2]|0;
      $317 = (($316) - ($219))|0;
      $318 = ($$4327$lcssa$i>>>0)<($317>>>0);
      if ($318) {
       $319 = (($$4$lcssa$i) + ($219)|0);
       $320 = ($319>>>0)>($$4$lcssa$i>>>0);
       if ($320) {
        $321 = ((($$4$lcssa$i)) + 24|0);
        $322 = HEAP32[$321>>2]|0;
        $323 = ((($$4$lcssa$i)) + 12|0);
        $324 = HEAP32[$323>>2]|0;
        $325 = ($324|0)==($$4$lcssa$i|0);
        do {
         if ($325) {
          $330 = ((($$4$lcssa$i)) + 20|0);
          $331 = HEAP32[$330>>2]|0;
          $332 = ($331|0)==(0|0);
          if ($332) {
           $333 = ((($$4$lcssa$i)) + 16|0);
           $334 = HEAP32[$333>>2]|0;
           $335 = ($334|0)==(0|0);
           if ($335) {
            $$3348$i = 0;
            break;
           } else {
            $$1346$i$ph = $334;$$1350$i$ph = $333;
           }
          } else {
           $$1346$i$ph = $331;$$1350$i$ph = $330;
          }
          $$1346$i = $$1346$i$ph;$$1350$i = $$1350$i$ph;
          while(1) {
           $336 = ((($$1346$i)) + 20|0);
           $337 = HEAP32[$336>>2]|0;
           $338 = ($337|0)==(0|0);
           if ($338) {
            $339 = ((($$1346$i)) + 16|0);
            $340 = HEAP32[$339>>2]|0;
            $341 = ($340|0)==(0|0);
            if ($341) {
             break;
            } else {
             $$1346$i$be = $340;$$1350$i$be = $339;
            }
           } else {
            $$1346$i$be = $337;$$1350$i$be = $336;
           }
           $$1346$i = $$1346$i$be;$$1350$i = $$1350$i$be;
          }
          HEAP32[$$1350$i>>2] = 0;
          $$3348$i = $$1346$i;
         } else {
          $326 = ((($$4$lcssa$i)) + 8|0);
          $327 = HEAP32[$326>>2]|0;
          $328 = ((($327)) + 12|0);
          HEAP32[$328>>2] = $324;
          $329 = ((($324)) + 8|0);
          HEAP32[$329>>2] = $327;
          $$3348$i = $324;
         }
        } while(0);
        $342 = ($322|0)==(0|0);
        do {
         if ($342) {
          $425 = $220;
         } else {
          $343 = ((($$4$lcssa$i)) + 28|0);
          $344 = HEAP32[$343>>2]|0;
          $345 = (31972 + ($344<<2)|0);
          $346 = HEAP32[$345>>2]|0;
          $347 = ($$4$lcssa$i|0)==($346|0);
          if ($347) {
           HEAP32[$345>>2] = $$3348$i;
           $cond$i203 = ($$3348$i|0)==(0|0);
           if ($cond$i203) {
            $348 = 1 << $344;
            $349 = $348 ^ -1;
            $350 = $220 & $349;
            HEAP32[(31672)>>2] = $350;
            $425 = $350;
            break;
           }
          } else {
           $351 = ((($322)) + 16|0);
           $352 = HEAP32[$351>>2]|0;
           $353 = ($352|0)==($$4$lcssa$i|0);
           $354 = ((($322)) + 20|0);
           $$sink320 = $353 ? $351 : $354;
           HEAP32[$$sink320>>2] = $$3348$i;
           $355 = ($$3348$i|0)==(0|0);
           if ($355) {
            $425 = $220;
            break;
           }
          }
          $356 = ((($$3348$i)) + 24|0);
          HEAP32[$356>>2] = $322;
          $357 = ((($$4$lcssa$i)) + 16|0);
          $358 = HEAP32[$357>>2]|0;
          $359 = ($358|0)==(0|0);
          if (!($359)) {
           $360 = ((($$3348$i)) + 16|0);
           HEAP32[$360>>2] = $358;
           $361 = ((($358)) + 24|0);
           HEAP32[$361>>2] = $$3348$i;
          }
          $362 = ((($$4$lcssa$i)) + 20|0);
          $363 = HEAP32[$362>>2]|0;
          $364 = ($363|0)==(0|0);
          if ($364) {
           $425 = $220;
          } else {
           $365 = ((($$3348$i)) + 20|0);
           HEAP32[$365>>2] = $363;
           $366 = ((($363)) + 24|0);
           HEAP32[$366>>2] = $$3348$i;
           $425 = $220;
          }
         }
        } while(0);
        $367 = ($$4327$lcssa$i>>>0)<(16);
        L128: do {
         if ($367) {
          $368 = (($$4327$lcssa$i) + ($219))|0;
          $369 = $368 | 3;
          $370 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$370>>2] = $369;
          $371 = (($$4$lcssa$i) + ($368)|0);
          $372 = ((($371)) + 4|0);
          $373 = HEAP32[$372>>2]|0;
          $374 = $373 | 1;
          HEAP32[$372>>2] = $374;
         } else {
          $375 = $219 | 3;
          $376 = ((($$4$lcssa$i)) + 4|0);
          HEAP32[$376>>2] = $375;
          $377 = $$4327$lcssa$i | 1;
          $378 = ((($319)) + 4|0);
          HEAP32[$378>>2] = $377;
          $379 = (($319) + ($$4327$lcssa$i)|0);
          HEAP32[$379>>2] = $$4327$lcssa$i;
          $380 = $$4327$lcssa$i >>> 3;
          $381 = ($$4327$lcssa$i>>>0)<(256);
          if ($381) {
           $382 = $380 << 1;
           $383 = (31708 + ($382<<2)|0);
           $384 = HEAP32[7917]|0;
           $385 = 1 << $380;
           $386 = $384 & $385;
           $387 = ($386|0)==(0);
           if ($387) {
            $388 = $384 | $385;
            HEAP32[7917] = $388;
            $$pre$i204 = ((($383)) + 8|0);
            $$0344$i = $383;$$pre$phi$i205Z2D = $$pre$i204;
           } else {
            $389 = ((($383)) + 8|0);
            $390 = HEAP32[$389>>2]|0;
            $$0344$i = $390;$$pre$phi$i205Z2D = $389;
           }
           HEAP32[$$pre$phi$i205Z2D>>2] = $319;
           $391 = ((($$0344$i)) + 12|0);
           HEAP32[$391>>2] = $319;
           $392 = ((($319)) + 8|0);
           HEAP32[$392>>2] = $$0344$i;
           $393 = ((($319)) + 12|0);
           HEAP32[$393>>2] = $383;
           break;
          }
          $394 = $$4327$lcssa$i >>> 8;
          $395 = ($394|0)==(0);
          if ($395) {
           $$0338$i = 0;
          } else {
           $396 = ($$4327$lcssa$i>>>0)>(16777215);
           if ($396) {
            $$0338$i = 31;
           } else {
            $397 = (($394) + 1048320)|0;
            $398 = $397 >>> 16;
            $399 = $398 & 8;
            $400 = $394 << $399;
            $401 = (($400) + 520192)|0;
            $402 = $401 >>> 16;
            $403 = $402 & 4;
            $404 = $403 | $399;
            $405 = $400 << $403;
            $406 = (($405) + 245760)|0;
            $407 = $406 >>> 16;
            $408 = $407 & 2;
            $409 = $404 | $408;
            $410 = (14 - ($409))|0;
            $411 = $405 << $408;
            $412 = $411 >>> 15;
            $413 = (($410) + ($412))|0;
            $414 = $413 << 1;
            $415 = (($413) + 7)|0;
            $416 = $$4327$lcssa$i >>> $415;
            $417 = $416 & 1;
            $418 = $417 | $414;
            $$0338$i = $418;
           }
          }
          $419 = (31972 + ($$0338$i<<2)|0);
          $420 = ((($319)) + 28|0);
          HEAP32[$420>>2] = $$0338$i;
          $421 = ((($319)) + 16|0);
          $422 = ((($421)) + 4|0);
          HEAP32[$422>>2] = 0;
          HEAP32[$421>>2] = 0;
          $423 = 1 << $$0338$i;
          $424 = $425 & $423;
          $426 = ($424|0)==(0);
          if ($426) {
           $427 = $425 | $423;
           HEAP32[(31672)>>2] = $427;
           HEAP32[$419>>2] = $319;
           $428 = ((($319)) + 24|0);
           HEAP32[$428>>2] = $419;
           $429 = ((($319)) + 12|0);
           HEAP32[$429>>2] = $319;
           $430 = ((($319)) + 8|0);
           HEAP32[$430>>2] = $319;
           break;
          }
          $431 = HEAP32[$419>>2]|0;
          $432 = ((($431)) + 4|0);
          $433 = HEAP32[$432>>2]|0;
          $434 = $433 & -8;
          $435 = ($434|0)==($$4327$lcssa$i|0);
          L145: do {
           if ($435) {
            $$0321$lcssa$i = $431;
           } else {
            $436 = ($$0338$i|0)==(31);
            $437 = $$0338$i >>> 1;
            $438 = (25 - ($437))|0;
            $439 = $436 ? 0 : $438;
            $440 = $$4327$lcssa$i << $439;
            $$032012$i = $440;$$032111$i = $431;
            while(1) {
             $447 = $$032012$i >>> 31;
             $448 = (((($$032111$i)) + 16|0) + ($447<<2)|0);
             $443 = HEAP32[$448>>2]|0;
             $449 = ($443|0)==(0|0);
             if ($449) {
              break;
             }
             $441 = $$032012$i << 1;
             $442 = ((($443)) + 4|0);
             $444 = HEAP32[$442>>2]|0;
             $445 = $444 & -8;
             $446 = ($445|0)==($$4327$lcssa$i|0);
             if ($446) {
              $$0321$lcssa$i = $443;
              break L145;
             } else {
              $$032012$i = $441;$$032111$i = $443;
             }
            }
            HEAP32[$448>>2] = $319;
            $450 = ((($319)) + 24|0);
            HEAP32[$450>>2] = $$032111$i;
            $451 = ((($319)) + 12|0);
            HEAP32[$451>>2] = $319;
            $452 = ((($319)) + 8|0);
            HEAP32[$452>>2] = $319;
            break L128;
           }
          } while(0);
          $453 = ((($$0321$lcssa$i)) + 8|0);
          $454 = HEAP32[$453>>2]|0;
          $455 = ((($454)) + 12|0);
          HEAP32[$455>>2] = $319;
          HEAP32[$453>>2] = $319;
          $456 = ((($319)) + 8|0);
          HEAP32[$456>>2] = $454;
          $457 = ((($319)) + 12|0);
          HEAP32[$457>>2] = $$0321$lcssa$i;
          $458 = ((($319)) + 24|0);
          HEAP32[$458>>2] = 0;
         }
        } while(0);
        $459 = ((($$4$lcssa$i)) + 8|0);
        $$0 = $459;
        STACKTOP = sp;return ($$0|0);
       } else {
        $$0192 = $219;
       }
      } else {
       $$0192 = $219;
      }
     }
    }
   }
  }
 } while(0);
 $460 = HEAP32[(31676)>>2]|0;
 $461 = ($460>>>0)<($$0192>>>0);
 if (!($461)) {
  $462 = (($460) - ($$0192))|0;
  $463 = HEAP32[(31688)>>2]|0;
  $464 = ($462>>>0)>(15);
  if ($464) {
   $465 = (($463) + ($$0192)|0);
   HEAP32[(31688)>>2] = $465;
   HEAP32[(31676)>>2] = $462;
   $466 = $462 | 1;
   $467 = ((($465)) + 4|0);
   HEAP32[$467>>2] = $466;
   $468 = (($463) + ($460)|0);
   HEAP32[$468>>2] = $462;
   $469 = $$0192 | 3;
   $470 = ((($463)) + 4|0);
   HEAP32[$470>>2] = $469;
  } else {
   HEAP32[(31676)>>2] = 0;
   HEAP32[(31688)>>2] = 0;
   $471 = $460 | 3;
   $472 = ((($463)) + 4|0);
   HEAP32[$472>>2] = $471;
   $473 = (($463) + ($460)|0);
   $474 = ((($473)) + 4|0);
   $475 = HEAP32[$474>>2]|0;
   $476 = $475 | 1;
   HEAP32[$474>>2] = $476;
  }
  $477 = ((($463)) + 8|0);
  $$0 = $477;
  STACKTOP = sp;return ($$0|0);
 }
 $478 = HEAP32[(31680)>>2]|0;
 $479 = ($478>>>0)>($$0192>>>0);
 if ($479) {
  $480 = (($478) - ($$0192))|0;
  HEAP32[(31680)>>2] = $480;
  $481 = HEAP32[(31692)>>2]|0;
  $482 = (($481) + ($$0192)|0);
  HEAP32[(31692)>>2] = $482;
  $483 = $480 | 1;
  $484 = ((($482)) + 4|0);
  HEAP32[$484>>2] = $483;
  $485 = $$0192 | 3;
  $486 = ((($481)) + 4|0);
  HEAP32[$486>>2] = $485;
  $487 = ((($481)) + 8|0);
  $$0 = $487;
  STACKTOP = sp;return ($$0|0);
 }
 $488 = HEAP32[8035]|0;
 $489 = ($488|0)==(0);
 if ($489) {
  HEAP32[(32148)>>2] = 4096;
  HEAP32[(32144)>>2] = 4096;
  HEAP32[(32152)>>2] = -1;
  HEAP32[(32156)>>2] = -1;
  HEAP32[(32160)>>2] = 0;
  HEAP32[(32112)>>2] = 0;
  $490 = $1;
  $491 = $490 & -16;
  $492 = $491 ^ 1431655768;
  HEAP32[8035] = $492;
  $496 = 4096;
 } else {
  $$pre$i195 = HEAP32[(32148)>>2]|0;
  $496 = $$pre$i195;
 }
 $493 = (($$0192) + 48)|0;
 $494 = (($$0192) + 47)|0;
 $495 = (($496) + ($494))|0;
 $497 = (0 - ($496))|0;
 $498 = $495 & $497;
 $499 = ($498>>>0)>($$0192>>>0);
 if (!($499)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $500 = HEAP32[(32108)>>2]|0;
 $501 = ($500|0)==(0);
 if (!($501)) {
  $502 = HEAP32[(32100)>>2]|0;
  $503 = (($502) + ($498))|0;
  $504 = ($503>>>0)<=($502>>>0);
  $505 = ($503>>>0)>($500>>>0);
  $or$cond1$i = $504 | $505;
  if ($or$cond1$i) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $506 = HEAP32[(32112)>>2]|0;
 $507 = $506 & 4;
 $508 = ($507|0)==(0);
 L178: do {
  if ($508) {
   $509 = HEAP32[(31692)>>2]|0;
   $510 = ($509|0)==(0|0);
   L180: do {
    if ($510) {
     label = 128;
    } else {
     $$0$i20$i = (32116);
     while(1) {
      $511 = HEAP32[$$0$i20$i>>2]|0;
      $512 = ($511>>>0)>($509>>>0);
      if (!($512)) {
       $513 = ((($$0$i20$i)) + 4|0);
       $514 = HEAP32[$513>>2]|0;
       $515 = (($511) + ($514)|0);
       $516 = ($515>>>0)>($509>>>0);
       if ($516) {
        break;
       }
      }
      $517 = ((($$0$i20$i)) + 8|0);
      $518 = HEAP32[$517>>2]|0;
      $519 = ($518|0)==(0|0);
      if ($519) {
       label = 128;
       break L180;
      } else {
       $$0$i20$i = $518;
      }
     }
     $542 = (($495) - ($478))|0;
     $543 = $542 & $497;
     $544 = ($543>>>0)<(2147483647);
     if ($544) {
      $545 = ((($$0$i20$i)) + 4|0);
      $546 = (_sbrk(($543|0))|0);
      $547 = HEAP32[$$0$i20$i>>2]|0;
      $548 = HEAP32[$545>>2]|0;
      $549 = (($547) + ($548)|0);
      $550 = ($546|0)==($549|0);
      if ($550) {
       $551 = ($546|0)==((-1)|0);
       if ($551) {
        $$2234243136$i = $543;
       } else {
        $$723947$i = $543;$$748$i = $546;
        label = 145;
        break L178;
       }
      } else {
       $$2247$ph$i = $546;$$2253$ph$i = $543;
       label = 136;
      }
     } else {
      $$2234243136$i = 0;
     }
    }
   } while(0);
   do {
    if ((label|0) == 128) {
     $520 = (_sbrk(0)|0);
     $521 = ($520|0)==((-1)|0);
     if ($521) {
      $$2234243136$i = 0;
     } else {
      $522 = $520;
      $523 = HEAP32[(32144)>>2]|0;
      $524 = (($523) + -1)|0;
      $525 = $524 & $522;
      $526 = ($525|0)==(0);
      $527 = (($524) + ($522))|0;
      $528 = (0 - ($523))|0;
      $529 = $527 & $528;
      $530 = (($529) - ($522))|0;
      $531 = $526 ? 0 : $530;
      $spec$select49$i = (($531) + ($498))|0;
      $532 = HEAP32[(32100)>>2]|0;
      $533 = (($spec$select49$i) + ($532))|0;
      $534 = ($spec$select49$i>>>0)>($$0192>>>0);
      $535 = ($spec$select49$i>>>0)<(2147483647);
      $or$cond$i = $534 & $535;
      if ($or$cond$i) {
       $536 = HEAP32[(32108)>>2]|0;
       $537 = ($536|0)==(0);
       if (!($537)) {
        $538 = ($533>>>0)<=($532>>>0);
        $539 = ($533>>>0)>($536>>>0);
        $or$cond2$i = $538 | $539;
        if ($or$cond2$i) {
         $$2234243136$i = 0;
         break;
        }
       }
       $540 = (_sbrk(($spec$select49$i|0))|0);
       $541 = ($540|0)==($520|0);
       if ($541) {
        $$723947$i = $spec$select49$i;$$748$i = $520;
        label = 145;
        break L178;
       } else {
        $$2247$ph$i = $540;$$2253$ph$i = $spec$select49$i;
        label = 136;
       }
      } else {
       $$2234243136$i = 0;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 136) {
     $552 = (0 - ($$2253$ph$i))|0;
     $553 = ($$2247$ph$i|0)!=((-1)|0);
     $554 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $554 & $553;
     $555 = ($493>>>0)>($$2253$ph$i>>>0);
     $or$cond6$i = $555 & $or$cond7$i;
     if (!($or$cond6$i)) {
      $565 = ($$2247$ph$i|0)==((-1)|0);
      if ($565) {
       $$2234243136$i = 0;
       break;
      } else {
       $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
       label = 145;
       break L178;
      }
     }
     $556 = HEAP32[(32148)>>2]|0;
     $557 = (($494) - ($$2253$ph$i))|0;
     $558 = (($557) + ($556))|0;
     $559 = (0 - ($556))|0;
     $560 = $558 & $559;
     $561 = ($560>>>0)<(2147483647);
     if (!($561)) {
      $$723947$i = $$2253$ph$i;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
     $562 = (_sbrk(($560|0))|0);
     $563 = ($562|0)==((-1)|0);
     if ($563) {
      (_sbrk(($552|0))|0);
      $$2234243136$i = 0;
      break;
     } else {
      $564 = (($560) + ($$2253$ph$i))|0;
      $$723947$i = $564;$$748$i = $$2247$ph$i;
      label = 145;
      break L178;
     }
    }
   } while(0);
   $566 = HEAP32[(32112)>>2]|0;
   $567 = $566 | 4;
   HEAP32[(32112)>>2] = $567;
   $$4236$i = $$2234243136$i;
   label = 143;
  } else {
   $$4236$i = 0;
   label = 143;
  }
 } while(0);
 if ((label|0) == 143) {
  $568 = ($498>>>0)<(2147483647);
  if ($568) {
   $569 = (_sbrk(($498|0))|0);
   $570 = (_sbrk(0)|0);
   $571 = ($569|0)!=((-1)|0);
   $572 = ($570|0)!=((-1)|0);
   $or$cond5$i = $571 & $572;
   $573 = ($569>>>0)<($570>>>0);
   $or$cond8$i = $573 & $or$cond5$i;
   $574 = $570;
   $575 = $569;
   $576 = (($574) - ($575))|0;
   $577 = (($$0192) + 40)|0;
   $578 = ($576>>>0)>($577>>>0);
   $spec$select9$i = $578 ? $576 : $$4236$i;
   $or$cond8$not$i = $or$cond8$i ^ 1;
   $579 = ($569|0)==((-1)|0);
   $not$$i = $578 ^ 1;
   $580 = $579 | $not$$i;
   $or$cond50$i = $580 | $or$cond8$not$i;
   if (!($or$cond50$i)) {
    $$723947$i = $spec$select9$i;$$748$i = $569;
    label = 145;
   }
  }
 }
 if ((label|0) == 145) {
  $581 = HEAP32[(32100)>>2]|0;
  $582 = (($581) + ($$723947$i))|0;
  HEAP32[(32100)>>2] = $582;
  $583 = HEAP32[(32104)>>2]|0;
  $584 = ($582>>>0)>($583>>>0);
  if ($584) {
   HEAP32[(32104)>>2] = $582;
  }
  $585 = HEAP32[(31692)>>2]|0;
  $586 = ($585|0)==(0|0);
  L215: do {
   if ($586) {
    $587 = HEAP32[(31684)>>2]|0;
    $588 = ($587|0)==(0|0);
    $589 = ($$748$i>>>0)<($587>>>0);
    $or$cond11$i = $588 | $589;
    if ($or$cond11$i) {
     HEAP32[(31684)>>2] = $$748$i;
    }
    HEAP32[(32116)>>2] = $$748$i;
    HEAP32[(32120)>>2] = $$723947$i;
    HEAP32[(32128)>>2] = 0;
    $590 = HEAP32[8035]|0;
    HEAP32[(31704)>>2] = $590;
    HEAP32[(31700)>>2] = -1;
    HEAP32[(31720)>>2] = (31708);
    HEAP32[(31716)>>2] = (31708);
    HEAP32[(31728)>>2] = (31716);
    HEAP32[(31724)>>2] = (31716);
    HEAP32[(31736)>>2] = (31724);
    HEAP32[(31732)>>2] = (31724);
    HEAP32[(31744)>>2] = (31732);
    HEAP32[(31740)>>2] = (31732);
    HEAP32[(31752)>>2] = (31740);
    HEAP32[(31748)>>2] = (31740);
    HEAP32[(31760)>>2] = (31748);
    HEAP32[(31756)>>2] = (31748);
    HEAP32[(31768)>>2] = (31756);
    HEAP32[(31764)>>2] = (31756);
    HEAP32[(31776)>>2] = (31764);
    HEAP32[(31772)>>2] = (31764);
    HEAP32[(31784)>>2] = (31772);
    HEAP32[(31780)>>2] = (31772);
    HEAP32[(31792)>>2] = (31780);
    HEAP32[(31788)>>2] = (31780);
    HEAP32[(31800)>>2] = (31788);
    HEAP32[(31796)>>2] = (31788);
    HEAP32[(31808)>>2] = (31796);
    HEAP32[(31804)>>2] = (31796);
    HEAP32[(31816)>>2] = (31804);
    HEAP32[(31812)>>2] = (31804);
    HEAP32[(31824)>>2] = (31812);
    HEAP32[(31820)>>2] = (31812);
    HEAP32[(31832)>>2] = (31820);
    HEAP32[(31828)>>2] = (31820);
    HEAP32[(31840)>>2] = (31828);
    HEAP32[(31836)>>2] = (31828);
    HEAP32[(31848)>>2] = (31836);
    HEAP32[(31844)>>2] = (31836);
    HEAP32[(31856)>>2] = (31844);
    HEAP32[(31852)>>2] = (31844);
    HEAP32[(31864)>>2] = (31852);
    HEAP32[(31860)>>2] = (31852);
    HEAP32[(31872)>>2] = (31860);
    HEAP32[(31868)>>2] = (31860);
    HEAP32[(31880)>>2] = (31868);
    HEAP32[(31876)>>2] = (31868);
    HEAP32[(31888)>>2] = (31876);
    HEAP32[(31884)>>2] = (31876);
    HEAP32[(31896)>>2] = (31884);
    HEAP32[(31892)>>2] = (31884);
    HEAP32[(31904)>>2] = (31892);
    HEAP32[(31900)>>2] = (31892);
    HEAP32[(31912)>>2] = (31900);
    HEAP32[(31908)>>2] = (31900);
    HEAP32[(31920)>>2] = (31908);
    HEAP32[(31916)>>2] = (31908);
    HEAP32[(31928)>>2] = (31916);
    HEAP32[(31924)>>2] = (31916);
    HEAP32[(31936)>>2] = (31924);
    HEAP32[(31932)>>2] = (31924);
    HEAP32[(31944)>>2] = (31932);
    HEAP32[(31940)>>2] = (31932);
    HEAP32[(31952)>>2] = (31940);
    HEAP32[(31948)>>2] = (31940);
    HEAP32[(31960)>>2] = (31948);
    HEAP32[(31956)>>2] = (31948);
    HEAP32[(31968)>>2] = (31956);
    HEAP32[(31964)>>2] = (31956);
    $591 = (($$723947$i) + -40)|0;
    $592 = ((($$748$i)) + 8|0);
    $593 = $592;
    $594 = $593 & 7;
    $595 = ($594|0)==(0);
    $596 = (0 - ($593))|0;
    $597 = $596 & 7;
    $598 = $595 ? 0 : $597;
    $599 = (($$748$i) + ($598)|0);
    $600 = (($591) - ($598))|0;
    HEAP32[(31692)>>2] = $599;
    HEAP32[(31680)>>2] = $600;
    $601 = $600 | 1;
    $602 = ((($599)) + 4|0);
    HEAP32[$602>>2] = $601;
    $603 = (($$748$i) + ($591)|0);
    $604 = ((($603)) + 4|0);
    HEAP32[$604>>2] = 40;
    $605 = HEAP32[(32156)>>2]|0;
    HEAP32[(31696)>>2] = $605;
   } else {
    $$024372$i = (32116);
    while(1) {
     $606 = HEAP32[$$024372$i>>2]|0;
     $607 = ((($$024372$i)) + 4|0);
     $608 = HEAP32[$607>>2]|0;
     $609 = (($606) + ($608)|0);
     $610 = ($$748$i|0)==($609|0);
     if ($610) {
      label = 154;
      break;
     }
     $611 = ((($$024372$i)) + 8|0);
     $612 = HEAP32[$611>>2]|0;
     $613 = ($612|0)==(0|0);
     if ($613) {
      break;
     } else {
      $$024372$i = $612;
     }
    }
    if ((label|0) == 154) {
     $614 = ((($$024372$i)) + 4|0);
     $615 = ((($$024372$i)) + 12|0);
     $616 = HEAP32[$615>>2]|0;
     $617 = $616 & 8;
     $618 = ($617|0)==(0);
     if ($618) {
      $619 = ($606>>>0)<=($585>>>0);
      $620 = ($$748$i>>>0)>($585>>>0);
      $or$cond51$i = $620 & $619;
      if ($or$cond51$i) {
       $621 = (($608) + ($$723947$i))|0;
       HEAP32[$614>>2] = $621;
       $622 = HEAP32[(31680)>>2]|0;
       $623 = (($622) + ($$723947$i))|0;
       $624 = ((($585)) + 8|0);
       $625 = $624;
       $626 = $625 & 7;
       $627 = ($626|0)==(0);
       $628 = (0 - ($625))|0;
       $629 = $628 & 7;
       $630 = $627 ? 0 : $629;
       $631 = (($585) + ($630)|0);
       $632 = (($623) - ($630))|0;
       HEAP32[(31692)>>2] = $631;
       HEAP32[(31680)>>2] = $632;
       $633 = $632 | 1;
       $634 = ((($631)) + 4|0);
       HEAP32[$634>>2] = $633;
       $635 = (($585) + ($623)|0);
       $636 = ((($635)) + 4|0);
       HEAP32[$636>>2] = 40;
       $637 = HEAP32[(32156)>>2]|0;
       HEAP32[(31696)>>2] = $637;
       break;
      }
     }
    }
    $638 = HEAP32[(31684)>>2]|0;
    $639 = ($$748$i>>>0)<($638>>>0);
    if ($639) {
     HEAP32[(31684)>>2] = $$748$i;
    }
    $640 = (($$748$i) + ($$723947$i)|0);
    $$124471$i = (32116);
    while(1) {
     $641 = HEAP32[$$124471$i>>2]|0;
     $642 = ($641|0)==($640|0);
     if ($642) {
      label = 162;
      break;
     }
     $643 = ((($$124471$i)) + 8|0);
     $644 = HEAP32[$643>>2]|0;
     $645 = ($644|0)==(0|0);
     if ($645) {
      break;
     } else {
      $$124471$i = $644;
     }
    }
    if ((label|0) == 162) {
     $646 = ((($$124471$i)) + 12|0);
     $647 = HEAP32[$646>>2]|0;
     $648 = $647 & 8;
     $649 = ($648|0)==(0);
     if ($649) {
      HEAP32[$$124471$i>>2] = $$748$i;
      $650 = ((($$124471$i)) + 4|0);
      $651 = HEAP32[$650>>2]|0;
      $652 = (($651) + ($$723947$i))|0;
      HEAP32[$650>>2] = $652;
      $653 = ((($$748$i)) + 8|0);
      $654 = $653;
      $655 = $654 & 7;
      $656 = ($655|0)==(0);
      $657 = (0 - ($654))|0;
      $658 = $657 & 7;
      $659 = $656 ? 0 : $658;
      $660 = (($$748$i) + ($659)|0);
      $661 = ((($640)) + 8|0);
      $662 = $661;
      $663 = $662 & 7;
      $664 = ($663|0)==(0);
      $665 = (0 - ($662))|0;
      $666 = $665 & 7;
      $667 = $664 ? 0 : $666;
      $668 = (($640) + ($667)|0);
      $669 = $668;
      $670 = $660;
      $671 = (($669) - ($670))|0;
      $672 = (($660) + ($$0192)|0);
      $673 = (($671) - ($$0192))|0;
      $674 = $$0192 | 3;
      $675 = ((($660)) + 4|0);
      HEAP32[$675>>2] = $674;
      $676 = ($585|0)==($668|0);
      L238: do {
       if ($676) {
        $677 = HEAP32[(31680)>>2]|0;
        $678 = (($677) + ($673))|0;
        HEAP32[(31680)>>2] = $678;
        HEAP32[(31692)>>2] = $672;
        $679 = $678 | 1;
        $680 = ((($672)) + 4|0);
        HEAP32[$680>>2] = $679;
       } else {
        $681 = HEAP32[(31688)>>2]|0;
        $682 = ($681|0)==($668|0);
        if ($682) {
         $683 = HEAP32[(31676)>>2]|0;
         $684 = (($683) + ($673))|0;
         HEAP32[(31676)>>2] = $684;
         HEAP32[(31688)>>2] = $672;
         $685 = $684 | 1;
         $686 = ((($672)) + 4|0);
         HEAP32[$686>>2] = $685;
         $687 = (($672) + ($684)|0);
         HEAP32[$687>>2] = $684;
         break;
        }
        $688 = ((($668)) + 4|0);
        $689 = HEAP32[$688>>2]|0;
        $690 = $689 & 3;
        $691 = ($690|0)==(1);
        if ($691) {
         $692 = $689 & -8;
         $693 = $689 >>> 3;
         $694 = ($689>>>0)<(256);
         L246: do {
          if ($694) {
           $695 = ((($668)) + 8|0);
           $696 = HEAP32[$695>>2]|0;
           $697 = ((($668)) + 12|0);
           $698 = HEAP32[$697>>2]|0;
           $699 = ($698|0)==($696|0);
           if ($699) {
            $700 = 1 << $693;
            $701 = $700 ^ -1;
            $702 = HEAP32[7917]|0;
            $703 = $702 & $701;
            HEAP32[7917] = $703;
            break;
           } else {
            $704 = ((($696)) + 12|0);
            HEAP32[$704>>2] = $698;
            $705 = ((($698)) + 8|0);
            HEAP32[$705>>2] = $696;
            break;
           }
          } else {
           $706 = ((($668)) + 24|0);
           $707 = HEAP32[$706>>2]|0;
           $708 = ((($668)) + 12|0);
           $709 = HEAP32[$708>>2]|0;
           $710 = ($709|0)==($668|0);
           do {
            if ($710) {
             $715 = ((($668)) + 16|0);
             $716 = ((($715)) + 4|0);
             $717 = HEAP32[$716>>2]|0;
             $718 = ($717|0)==(0|0);
             if ($718) {
              $719 = HEAP32[$715>>2]|0;
              $720 = ($719|0)==(0|0);
              if ($720) {
               $$3$i$i = 0;
               break;
              } else {
               $$1263$i$i$ph = $719;$$1265$i$i$ph = $715;
              }
             } else {
              $$1263$i$i$ph = $717;$$1265$i$i$ph = $716;
             }
             $$1263$i$i = $$1263$i$i$ph;$$1265$i$i = $$1265$i$i$ph;
             while(1) {
              $721 = ((($$1263$i$i)) + 20|0);
              $722 = HEAP32[$721>>2]|0;
              $723 = ($722|0)==(0|0);
              if ($723) {
               $724 = ((($$1263$i$i)) + 16|0);
               $725 = HEAP32[$724>>2]|0;
               $726 = ($725|0)==(0|0);
               if ($726) {
                break;
               } else {
                $$1263$i$i$be = $725;$$1265$i$i$be = $724;
               }
              } else {
               $$1263$i$i$be = $722;$$1265$i$i$be = $721;
              }
              $$1263$i$i = $$1263$i$i$be;$$1265$i$i = $$1265$i$i$be;
             }
             HEAP32[$$1265$i$i>>2] = 0;
             $$3$i$i = $$1263$i$i;
            } else {
             $711 = ((($668)) + 8|0);
             $712 = HEAP32[$711>>2]|0;
             $713 = ((($712)) + 12|0);
             HEAP32[$713>>2] = $709;
             $714 = ((($709)) + 8|0);
             HEAP32[$714>>2] = $712;
             $$3$i$i = $709;
            }
           } while(0);
           $727 = ($707|0)==(0|0);
           if ($727) {
            break;
           }
           $728 = ((($668)) + 28|0);
           $729 = HEAP32[$728>>2]|0;
           $730 = (31972 + ($729<<2)|0);
           $731 = HEAP32[$730>>2]|0;
           $732 = ($731|0)==($668|0);
           do {
            if ($732) {
             HEAP32[$730>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $733 = 1 << $729;
             $734 = $733 ^ -1;
             $735 = HEAP32[(31672)>>2]|0;
             $736 = $735 & $734;
             HEAP32[(31672)>>2] = $736;
             break L246;
            } else {
             $737 = ((($707)) + 16|0);
             $738 = HEAP32[$737>>2]|0;
             $739 = ($738|0)==($668|0);
             $740 = ((($707)) + 20|0);
             $$sink321 = $739 ? $737 : $740;
             HEAP32[$$sink321>>2] = $$3$i$i;
             $741 = ($$3$i$i|0)==(0|0);
             if ($741) {
              break L246;
             }
            }
           } while(0);
           $742 = ((($$3$i$i)) + 24|0);
           HEAP32[$742>>2] = $707;
           $743 = ((($668)) + 16|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = ($744|0)==(0|0);
           if (!($745)) {
            $746 = ((($$3$i$i)) + 16|0);
            HEAP32[$746>>2] = $744;
            $747 = ((($744)) + 24|0);
            HEAP32[$747>>2] = $$3$i$i;
           }
           $748 = ((($743)) + 4|0);
           $749 = HEAP32[$748>>2]|0;
           $750 = ($749|0)==(0|0);
           if ($750) {
            break;
           }
           $751 = ((($$3$i$i)) + 20|0);
           HEAP32[$751>>2] = $749;
           $752 = ((($749)) + 24|0);
           HEAP32[$752>>2] = $$3$i$i;
          }
         } while(0);
         $753 = (($668) + ($692)|0);
         $754 = (($692) + ($673))|0;
         $$0$i$i = $753;$$0259$i$i = $754;
        } else {
         $$0$i$i = $668;$$0259$i$i = $673;
        }
        $755 = ((($$0$i$i)) + 4|0);
        $756 = HEAP32[$755>>2]|0;
        $757 = $756 & -2;
        HEAP32[$755>>2] = $757;
        $758 = $$0259$i$i | 1;
        $759 = ((($672)) + 4|0);
        HEAP32[$759>>2] = $758;
        $760 = (($672) + ($$0259$i$i)|0);
        HEAP32[$760>>2] = $$0259$i$i;
        $761 = $$0259$i$i >>> 3;
        $762 = ($$0259$i$i>>>0)<(256);
        if ($762) {
         $763 = $761 << 1;
         $764 = (31708 + ($763<<2)|0);
         $765 = HEAP32[7917]|0;
         $766 = 1 << $761;
         $767 = $765 & $766;
         $768 = ($767|0)==(0);
         if ($768) {
          $769 = $765 | $766;
          HEAP32[7917] = $769;
          $$pre$i16$i = ((($764)) + 8|0);
          $$0267$i$i = $764;$$pre$phi$i17$iZ2D = $$pre$i16$i;
         } else {
          $770 = ((($764)) + 8|0);
          $771 = HEAP32[$770>>2]|0;
          $$0267$i$i = $771;$$pre$phi$i17$iZ2D = $770;
         }
         HEAP32[$$pre$phi$i17$iZ2D>>2] = $672;
         $772 = ((($$0267$i$i)) + 12|0);
         HEAP32[$772>>2] = $672;
         $773 = ((($672)) + 8|0);
         HEAP32[$773>>2] = $$0267$i$i;
         $774 = ((($672)) + 12|0);
         HEAP32[$774>>2] = $764;
         break;
        }
        $775 = $$0259$i$i >>> 8;
        $776 = ($775|0)==(0);
        do {
         if ($776) {
          $$0268$i$i = 0;
         } else {
          $777 = ($$0259$i$i>>>0)>(16777215);
          if ($777) {
           $$0268$i$i = 31;
           break;
          }
          $778 = (($775) + 1048320)|0;
          $779 = $778 >>> 16;
          $780 = $779 & 8;
          $781 = $775 << $780;
          $782 = (($781) + 520192)|0;
          $783 = $782 >>> 16;
          $784 = $783 & 4;
          $785 = $784 | $780;
          $786 = $781 << $784;
          $787 = (($786) + 245760)|0;
          $788 = $787 >>> 16;
          $789 = $788 & 2;
          $790 = $785 | $789;
          $791 = (14 - ($790))|0;
          $792 = $786 << $789;
          $793 = $792 >>> 15;
          $794 = (($791) + ($793))|0;
          $795 = $794 << 1;
          $796 = (($794) + 7)|0;
          $797 = $$0259$i$i >>> $796;
          $798 = $797 & 1;
          $799 = $798 | $795;
          $$0268$i$i = $799;
         }
        } while(0);
        $800 = (31972 + ($$0268$i$i<<2)|0);
        $801 = ((($672)) + 28|0);
        HEAP32[$801>>2] = $$0268$i$i;
        $802 = ((($672)) + 16|0);
        $803 = ((($802)) + 4|0);
        HEAP32[$803>>2] = 0;
        HEAP32[$802>>2] = 0;
        $804 = HEAP32[(31672)>>2]|0;
        $805 = 1 << $$0268$i$i;
        $806 = $804 & $805;
        $807 = ($806|0)==(0);
        if ($807) {
         $808 = $804 | $805;
         HEAP32[(31672)>>2] = $808;
         HEAP32[$800>>2] = $672;
         $809 = ((($672)) + 24|0);
         HEAP32[$809>>2] = $800;
         $810 = ((($672)) + 12|0);
         HEAP32[$810>>2] = $672;
         $811 = ((($672)) + 8|0);
         HEAP32[$811>>2] = $672;
         break;
        }
        $812 = HEAP32[$800>>2]|0;
        $813 = ((($812)) + 4|0);
        $814 = HEAP32[$813>>2]|0;
        $815 = $814 & -8;
        $816 = ($815|0)==($$0259$i$i|0);
        L291: do {
         if ($816) {
          $$0261$lcssa$i$i = $812;
         } else {
          $817 = ($$0268$i$i|0)==(31);
          $818 = $$0268$i$i >>> 1;
          $819 = (25 - ($818))|0;
          $820 = $817 ? 0 : $819;
          $821 = $$0259$i$i << $820;
          $$02604$i$i = $821;$$02613$i$i = $812;
          while(1) {
           $828 = $$02604$i$i >>> 31;
           $829 = (((($$02613$i$i)) + 16|0) + ($828<<2)|0);
           $824 = HEAP32[$829>>2]|0;
           $830 = ($824|0)==(0|0);
           if ($830) {
            break;
           }
           $822 = $$02604$i$i << 1;
           $823 = ((($824)) + 4|0);
           $825 = HEAP32[$823>>2]|0;
           $826 = $825 & -8;
           $827 = ($826|0)==($$0259$i$i|0);
           if ($827) {
            $$0261$lcssa$i$i = $824;
            break L291;
           } else {
            $$02604$i$i = $822;$$02613$i$i = $824;
           }
          }
          HEAP32[$829>>2] = $672;
          $831 = ((($672)) + 24|0);
          HEAP32[$831>>2] = $$02613$i$i;
          $832 = ((($672)) + 12|0);
          HEAP32[$832>>2] = $672;
          $833 = ((($672)) + 8|0);
          HEAP32[$833>>2] = $672;
          break L238;
         }
        } while(0);
        $834 = ((($$0261$lcssa$i$i)) + 8|0);
        $835 = HEAP32[$834>>2]|0;
        $836 = ((($835)) + 12|0);
        HEAP32[$836>>2] = $672;
        HEAP32[$834>>2] = $672;
        $837 = ((($672)) + 8|0);
        HEAP32[$837>>2] = $835;
        $838 = ((($672)) + 12|0);
        HEAP32[$838>>2] = $$0261$lcssa$i$i;
        $839 = ((($672)) + 24|0);
        HEAP32[$839>>2] = 0;
       }
      } while(0);
      $968 = ((($660)) + 8|0);
      $$0 = $968;
      STACKTOP = sp;return ($$0|0);
     }
    }
    $$0$i$i$i = (32116);
    while(1) {
     $840 = HEAP32[$$0$i$i$i>>2]|0;
     $841 = ($840>>>0)>($585>>>0);
     if (!($841)) {
      $842 = ((($$0$i$i$i)) + 4|0);
      $843 = HEAP32[$842>>2]|0;
      $844 = (($840) + ($843)|0);
      $845 = ($844>>>0)>($585>>>0);
      if ($845) {
       break;
      }
     }
     $846 = ((($$0$i$i$i)) + 8|0);
     $847 = HEAP32[$846>>2]|0;
     $$0$i$i$i = $847;
    }
    $848 = ((($844)) + -47|0);
    $849 = ((($848)) + 8|0);
    $850 = $849;
    $851 = $850 & 7;
    $852 = ($851|0)==(0);
    $853 = (0 - ($850))|0;
    $854 = $853 & 7;
    $855 = $852 ? 0 : $854;
    $856 = (($848) + ($855)|0);
    $857 = ((($585)) + 16|0);
    $858 = ($856>>>0)<($857>>>0);
    $859 = $858 ? $585 : $856;
    $860 = ((($859)) + 8|0);
    $861 = ((($859)) + 24|0);
    $862 = (($$723947$i) + -40)|0;
    $863 = ((($$748$i)) + 8|0);
    $864 = $863;
    $865 = $864 & 7;
    $866 = ($865|0)==(0);
    $867 = (0 - ($864))|0;
    $868 = $867 & 7;
    $869 = $866 ? 0 : $868;
    $870 = (($$748$i) + ($869)|0);
    $871 = (($862) - ($869))|0;
    HEAP32[(31692)>>2] = $870;
    HEAP32[(31680)>>2] = $871;
    $872 = $871 | 1;
    $873 = ((($870)) + 4|0);
    HEAP32[$873>>2] = $872;
    $874 = (($$748$i) + ($862)|0);
    $875 = ((($874)) + 4|0);
    HEAP32[$875>>2] = 40;
    $876 = HEAP32[(32156)>>2]|0;
    HEAP32[(31696)>>2] = $876;
    $877 = ((($859)) + 4|0);
    HEAP32[$877>>2] = 27;
    ;HEAP32[$860>>2]=HEAP32[(32116)>>2]|0;HEAP32[$860+4>>2]=HEAP32[(32116)+4>>2]|0;HEAP32[$860+8>>2]=HEAP32[(32116)+8>>2]|0;HEAP32[$860+12>>2]=HEAP32[(32116)+12>>2]|0;
    HEAP32[(32116)>>2] = $$748$i;
    HEAP32[(32120)>>2] = $$723947$i;
    HEAP32[(32128)>>2] = 0;
    HEAP32[(32124)>>2] = $860;
    $879 = $861;
    while(1) {
     $878 = ((($879)) + 4|0);
     HEAP32[$878>>2] = 7;
     $880 = ((($879)) + 8|0);
     $881 = ($880>>>0)<($844>>>0);
     if ($881) {
      $879 = $878;
     } else {
      break;
     }
    }
    $882 = ($859|0)==($585|0);
    if (!($882)) {
     $883 = $859;
     $884 = $585;
     $885 = (($883) - ($884))|0;
     $886 = HEAP32[$877>>2]|0;
     $887 = $886 & -2;
     HEAP32[$877>>2] = $887;
     $888 = $885 | 1;
     $889 = ((($585)) + 4|0);
     HEAP32[$889>>2] = $888;
     HEAP32[$859>>2] = $885;
     $890 = $885 >>> 3;
     $891 = ($885>>>0)<(256);
     if ($891) {
      $892 = $890 << 1;
      $893 = (31708 + ($892<<2)|0);
      $894 = HEAP32[7917]|0;
      $895 = 1 << $890;
      $896 = $894 & $895;
      $897 = ($896|0)==(0);
      if ($897) {
       $898 = $894 | $895;
       HEAP32[7917] = $898;
       $$pre$i$i = ((($893)) + 8|0);
       $$0206$i$i = $893;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $899 = ((($893)) + 8|0);
       $900 = HEAP32[$899>>2]|0;
       $$0206$i$i = $900;$$pre$phi$i$iZ2D = $899;
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $585;
      $901 = ((($$0206$i$i)) + 12|0);
      HEAP32[$901>>2] = $585;
      $902 = ((($585)) + 8|0);
      HEAP32[$902>>2] = $$0206$i$i;
      $903 = ((($585)) + 12|0);
      HEAP32[$903>>2] = $893;
      break;
     }
     $904 = $885 >>> 8;
     $905 = ($904|0)==(0);
     if ($905) {
      $$0207$i$i = 0;
     } else {
      $906 = ($885>>>0)>(16777215);
      if ($906) {
       $$0207$i$i = 31;
      } else {
       $907 = (($904) + 1048320)|0;
       $908 = $907 >>> 16;
       $909 = $908 & 8;
       $910 = $904 << $909;
       $911 = (($910) + 520192)|0;
       $912 = $911 >>> 16;
       $913 = $912 & 4;
       $914 = $913 | $909;
       $915 = $910 << $913;
       $916 = (($915) + 245760)|0;
       $917 = $916 >>> 16;
       $918 = $917 & 2;
       $919 = $914 | $918;
       $920 = (14 - ($919))|0;
       $921 = $915 << $918;
       $922 = $921 >>> 15;
       $923 = (($920) + ($922))|0;
       $924 = $923 << 1;
       $925 = (($923) + 7)|0;
       $926 = $885 >>> $925;
       $927 = $926 & 1;
       $928 = $927 | $924;
       $$0207$i$i = $928;
      }
     }
     $929 = (31972 + ($$0207$i$i<<2)|0);
     $930 = ((($585)) + 28|0);
     HEAP32[$930>>2] = $$0207$i$i;
     $931 = ((($585)) + 20|0);
     HEAP32[$931>>2] = 0;
     HEAP32[$857>>2] = 0;
     $932 = HEAP32[(31672)>>2]|0;
     $933 = 1 << $$0207$i$i;
     $934 = $932 & $933;
     $935 = ($934|0)==(0);
     if ($935) {
      $936 = $932 | $933;
      HEAP32[(31672)>>2] = $936;
      HEAP32[$929>>2] = $585;
      $937 = ((($585)) + 24|0);
      HEAP32[$937>>2] = $929;
      $938 = ((($585)) + 12|0);
      HEAP32[$938>>2] = $585;
      $939 = ((($585)) + 8|0);
      HEAP32[$939>>2] = $585;
      break;
     }
     $940 = HEAP32[$929>>2]|0;
     $941 = ((($940)) + 4|0);
     $942 = HEAP32[$941>>2]|0;
     $943 = $942 & -8;
     $944 = ($943|0)==($885|0);
     L325: do {
      if ($944) {
       $$0202$lcssa$i$i = $940;
      } else {
       $945 = ($$0207$i$i|0)==(31);
       $946 = $$0207$i$i >>> 1;
       $947 = (25 - ($946))|0;
       $948 = $945 ? 0 : $947;
       $949 = $885 << $948;
       $$02014$i$i = $949;$$02023$i$i = $940;
       while(1) {
        $956 = $$02014$i$i >>> 31;
        $957 = (((($$02023$i$i)) + 16|0) + ($956<<2)|0);
        $952 = HEAP32[$957>>2]|0;
        $958 = ($952|0)==(0|0);
        if ($958) {
         break;
        }
        $950 = $$02014$i$i << 1;
        $951 = ((($952)) + 4|0);
        $953 = HEAP32[$951>>2]|0;
        $954 = $953 & -8;
        $955 = ($954|0)==($885|0);
        if ($955) {
         $$0202$lcssa$i$i = $952;
         break L325;
        } else {
         $$02014$i$i = $950;$$02023$i$i = $952;
        }
       }
       HEAP32[$957>>2] = $585;
       $959 = ((($585)) + 24|0);
       HEAP32[$959>>2] = $$02023$i$i;
       $960 = ((($585)) + 12|0);
       HEAP32[$960>>2] = $585;
       $961 = ((($585)) + 8|0);
       HEAP32[$961>>2] = $585;
       break L215;
      }
     } while(0);
     $962 = ((($$0202$lcssa$i$i)) + 8|0);
     $963 = HEAP32[$962>>2]|0;
     $964 = ((($963)) + 12|0);
     HEAP32[$964>>2] = $585;
     HEAP32[$962>>2] = $585;
     $965 = ((($585)) + 8|0);
     HEAP32[$965>>2] = $963;
     $966 = ((($585)) + 12|0);
     HEAP32[$966>>2] = $$0202$lcssa$i$i;
     $967 = ((($585)) + 24|0);
     HEAP32[$967>>2] = 0;
    }
   }
  } while(0);
  $969 = HEAP32[(31680)>>2]|0;
  $970 = ($969>>>0)>($$0192>>>0);
  if ($970) {
   $971 = (($969) - ($$0192))|0;
   HEAP32[(31680)>>2] = $971;
   $972 = HEAP32[(31692)>>2]|0;
   $973 = (($972) + ($$0192)|0);
   HEAP32[(31692)>>2] = $973;
   $974 = $971 | 1;
   $975 = ((($973)) + 4|0);
   HEAP32[$975>>2] = $974;
   $976 = $$0192 | 3;
   $977 = ((($972)) + 4|0);
   HEAP32[$977>>2] = $976;
   $978 = ((($972)) + 8|0);
   $$0 = $978;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $979 = (___errno_location()|0);
 HEAP32[$979>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0194$i = 0, $$0194$in$i = 0, $$0346381 = 0, $$0347$lcssa = 0, $$0347380 = 0, $$0359 = 0, $$0366 = 0, $$1 = 0, $$1345 = 0, $$1350 = 0, $$1350$be = 0, $$1350$ph = 0, $$1353 = 0, $$1353$be = 0, $$1353$ph = 0, $$1361 = 0, $$1361$be = 0, $$1361$ph = 0, $$1365 = 0, $$1365$be = 0;
 var $$1365$ph = 0, $$2 = 0, $$3 = 0, $$3363 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink395 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0;
 var $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0;
 var $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond371 = 0, $cond372 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(31684)>>2]|0;
 $4 = ((($0)) + -4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $5 & -8;
 $7 = (($2) + ($6)|0);
 $8 = $5 & 1;
 $9 = ($8|0)==(0);
 do {
  if ($9) {
   $10 = HEAP32[$2>>2]|0;
   $11 = $5 & 3;
   $12 = ($11|0)==(0);
   if ($12) {
    return;
   }
   $13 = (0 - ($10))|0;
   $14 = (($2) + ($13)|0);
   $15 = (($10) + ($6))|0;
   $16 = ($14>>>0)<($3>>>0);
   if ($16) {
    return;
   }
   $17 = HEAP32[(31688)>>2]|0;
   $18 = ($17|0)==($14|0);
   if ($18) {
    $79 = ((($7)) + 4|0);
    $80 = HEAP32[$79>>2]|0;
    $81 = $80 & 3;
    $82 = ($81|0)==(3);
    if (!($82)) {
     $$1 = $14;$$1345 = $15;$87 = $14;
     break;
    }
    $83 = (($14) + ($15)|0);
    $84 = ((($14)) + 4|0);
    $85 = $15 | 1;
    $86 = $80 & -2;
    HEAP32[(31676)>>2] = $15;
    HEAP32[$79>>2] = $86;
    HEAP32[$84>>2] = $85;
    HEAP32[$83>>2] = $15;
    return;
   }
   $19 = $10 >>> 3;
   $20 = ($10>>>0)<(256);
   if ($20) {
    $21 = ((($14)) + 8|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ((($14)) + 12|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ($24|0)==($22|0);
    if ($25) {
     $26 = 1 << $19;
     $27 = $26 ^ -1;
     $28 = HEAP32[7917]|0;
     $29 = $28 & $27;
     HEAP32[7917] = $29;
     $$1 = $14;$$1345 = $15;$87 = $14;
     break;
    } else {
     $30 = ((($22)) + 12|0);
     HEAP32[$30>>2] = $24;
     $31 = ((($24)) + 8|0);
     HEAP32[$31>>2] = $22;
     $$1 = $14;$$1345 = $15;$87 = $14;
     break;
    }
   }
   $32 = ((($14)) + 24|0);
   $33 = HEAP32[$32>>2]|0;
   $34 = ((($14)) + 12|0);
   $35 = HEAP32[$34>>2]|0;
   $36 = ($35|0)==($14|0);
   do {
    if ($36) {
     $41 = ((($14)) + 16|0);
     $42 = ((($41)) + 4|0);
     $43 = HEAP32[$42>>2]|0;
     $44 = ($43|0)==(0|0);
     if ($44) {
      $45 = HEAP32[$41>>2]|0;
      $46 = ($45|0)==(0|0);
      if ($46) {
       $$3 = 0;
       break;
      } else {
       $$1350$ph = $45;$$1353$ph = $41;
      }
     } else {
      $$1350$ph = $43;$$1353$ph = $42;
     }
     $$1350 = $$1350$ph;$$1353 = $$1353$ph;
     while(1) {
      $47 = ((($$1350)) + 20|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0|0);
      if ($49) {
       $50 = ((($$1350)) + 16|0);
       $51 = HEAP32[$50>>2]|0;
       $52 = ($51|0)==(0|0);
       if ($52) {
        break;
       } else {
        $$1350$be = $51;$$1353$be = $50;
       }
      } else {
       $$1350$be = $48;$$1353$be = $47;
      }
      $$1350 = $$1350$be;$$1353 = $$1353$be;
     }
     HEAP32[$$1353>>2] = 0;
     $$3 = $$1350;
    } else {
     $37 = ((($14)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ((($38)) + 12|0);
     HEAP32[$39>>2] = $35;
     $40 = ((($35)) + 8|0);
     HEAP32[$40>>2] = $38;
     $$3 = $35;
    }
   } while(0);
   $53 = ($33|0)==(0|0);
   if ($53) {
    $$1 = $14;$$1345 = $15;$87 = $14;
   } else {
    $54 = ((($14)) + 28|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = (31972 + ($55<<2)|0);
    $57 = HEAP32[$56>>2]|0;
    $58 = ($57|0)==($14|0);
    if ($58) {
     HEAP32[$56>>2] = $$3;
     $cond371 = ($$3|0)==(0|0);
     if ($cond371) {
      $59 = 1 << $55;
      $60 = $59 ^ -1;
      $61 = HEAP32[(31672)>>2]|0;
      $62 = $61 & $60;
      HEAP32[(31672)>>2] = $62;
      $$1 = $14;$$1345 = $15;$87 = $14;
      break;
     }
    } else {
     $63 = ((($33)) + 16|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)==($14|0);
     $66 = ((($33)) + 20|0);
     $$sink = $65 ? $63 : $66;
     HEAP32[$$sink>>2] = $$3;
     $67 = ($$3|0)==(0|0);
     if ($67) {
      $$1 = $14;$$1345 = $15;$87 = $14;
      break;
     }
    }
    $68 = ((($$3)) + 24|0);
    HEAP32[$68>>2] = $33;
    $69 = ((($14)) + 16|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(0|0);
    if (!($71)) {
     $72 = ((($$3)) + 16|0);
     HEAP32[$72>>2] = $70;
     $73 = ((($70)) + 24|0);
     HEAP32[$73>>2] = $$3;
    }
    $74 = ((($69)) + 4|0);
    $75 = HEAP32[$74>>2]|0;
    $76 = ($75|0)==(0|0);
    if ($76) {
     $$1 = $14;$$1345 = $15;$87 = $14;
    } else {
     $77 = ((($$3)) + 20|0);
     HEAP32[$77>>2] = $75;
     $78 = ((($75)) + 24|0);
     HEAP32[$78>>2] = $$3;
     $$1 = $14;$$1345 = $15;$87 = $14;
    }
   }
  } else {
   $$1 = $2;$$1345 = $6;$87 = $2;
  }
 } while(0);
 $88 = ($87>>>0)<($7>>>0);
 if (!($88)) {
  return;
 }
 $89 = ((($7)) + 4|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = $90 & 1;
 $92 = ($91|0)==(0);
 if ($92) {
  return;
 }
 $93 = $90 & 2;
 $94 = ($93|0)==(0);
 if ($94) {
  $95 = HEAP32[(31692)>>2]|0;
  $96 = ($95|0)==($7|0);
  if ($96) {
   $97 = HEAP32[(31680)>>2]|0;
   $98 = (($97) + ($$1345))|0;
   HEAP32[(31680)>>2] = $98;
   HEAP32[(31692)>>2] = $$1;
   $99 = $98 | 1;
   $100 = ((($$1)) + 4|0);
   HEAP32[$100>>2] = $99;
   $101 = HEAP32[(31688)>>2]|0;
   $102 = ($$1|0)==($101|0);
   if (!($102)) {
    return;
   }
   HEAP32[(31688)>>2] = 0;
   HEAP32[(31676)>>2] = 0;
   return;
  }
  $103 = HEAP32[(31688)>>2]|0;
  $104 = ($103|0)==($7|0);
  if ($104) {
   $105 = HEAP32[(31676)>>2]|0;
   $106 = (($105) + ($$1345))|0;
   HEAP32[(31676)>>2] = $106;
   HEAP32[(31688)>>2] = $87;
   $107 = $106 | 1;
   $108 = ((($$1)) + 4|0);
   HEAP32[$108>>2] = $107;
   $109 = (($87) + ($106)|0);
   HEAP32[$109>>2] = $106;
   return;
  }
  $110 = $90 & -8;
  $111 = (($110) + ($$1345))|0;
  $112 = $90 >>> 3;
  $113 = ($90>>>0)<(256);
  do {
   if ($113) {
    $114 = ((($7)) + 8|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($7)) + 12|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ($117|0)==($115|0);
    if ($118) {
     $119 = 1 << $112;
     $120 = $119 ^ -1;
     $121 = HEAP32[7917]|0;
     $122 = $121 & $120;
     HEAP32[7917] = $122;
     break;
    } else {
     $123 = ((($115)) + 12|0);
     HEAP32[$123>>2] = $117;
     $124 = ((($117)) + 8|0);
     HEAP32[$124>>2] = $115;
     break;
    }
   } else {
    $125 = ((($7)) + 24|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ((($7)) + 12|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==($7|0);
    do {
     if ($129) {
      $134 = ((($7)) + 16|0);
      $135 = ((($134)) + 4|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ($136|0)==(0|0);
      if ($137) {
       $138 = HEAP32[$134>>2]|0;
       $139 = ($138|0)==(0|0);
       if ($139) {
        $$3363 = 0;
        break;
       } else {
        $$1361$ph = $138;$$1365$ph = $134;
       }
      } else {
       $$1361$ph = $136;$$1365$ph = $135;
      }
      $$1361 = $$1361$ph;$$1365 = $$1365$ph;
      while(1) {
       $140 = ((($$1361)) + 20|0);
       $141 = HEAP32[$140>>2]|0;
       $142 = ($141|0)==(0|0);
       if ($142) {
        $143 = ((($$1361)) + 16|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = ($144|0)==(0|0);
        if ($145) {
         break;
        } else {
         $$1361$be = $144;$$1365$be = $143;
        }
       } else {
        $$1361$be = $141;$$1365$be = $140;
       }
       $$1361 = $$1361$be;$$1365 = $$1365$be;
      }
      HEAP32[$$1365>>2] = 0;
      $$3363 = $$1361;
     } else {
      $130 = ((($7)) + 8|0);
      $131 = HEAP32[$130>>2]|0;
      $132 = ((($131)) + 12|0);
      HEAP32[$132>>2] = $128;
      $133 = ((($128)) + 8|0);
      HEAP32[$133>>2] = $131;
      $$3363 = $128;
     }
    } while(0);
    $146 = ($126|0)==(0|0);
    if (!($146)) {
     $147 = ((($7)) + 28|0);
     $148 = HEAP32[$147>>2]|0;
     $149 = (31972 + ($148<<2)|0);
     $150 = HEAP32[$149>>2]|0;
     $151 = ($150|0)==($7|0);
     if ($151) {
      HEAP32[$149>>2] = $$3363;
      $cond372 = ($$3363|0)==(0|0);
      if ($cond372) {
       $152 = 1 << $148;
       $153 = $152 ^ -1;
       $154 = HEAP32[(31672)>>2]|0;
       $155 = $154 & $153;
       HEAP32[(31672)>>2] = $155;
       break;
      }
     } else {
      $156 = ((($126)) + 16|0);
      $157 = HEAP32[$156>>2]|0;
      $158 = ($157|0)==($7|0);
      $159 = ((($126)) + 20|0);
      $$sink395 = $158 ? $156 : $159;
      HEAP32[$$sink395>>2] = $$3363;
      $160 = ($$3363|0)==(0|0);
      if ($160) {
       break;
      }
     }
     $161 = ((($$3363)) + 24|0);
     HEAP32[$161>>2] = $126;
     $162 = ((($7)) + 16|0);
     $163 = HEAP32[$162>>2]|0;
     $164 = ($163|0)==(0|0);
     if (!($164)) {
      $165 = ((($$3363)) + 16|0);
      HEAP32[$165>>2] = $163;
      $166 = ((($163)) + 24|0);
      HEAP32[$166>>2] = $$3363;
     }
     $167 = ((($162)) + 4|0);
     $168 = HEAP32[$167>>2]|0;
     $169 = ($168|0)==(0|0);
     if (!($169)) {
      $170 = ((($$3363)) + 20|0);
      HEAP32[$170>>2] = $168;
      $171 = ((($168)) + 24|0);
      HEAP32[$171>>2] = $$3363;
     }
    }
   }
  } while(0);
  $172 = $111 | 1;
  $173 = ((($$1)) + 4|0);
  HEAP32[$173>>2] = $172;
  $174 = (($87) + ($111)|0);
  HEAP32[$174>>2] = $111;
  $175 = HEAP32[(31688)>>2]|0;
  $176 = ($$1|0)==($175|0);
  if ($176) {
   HEAP32[(31676)>>2] = $111;
   return;
  } else {
   $$2 = $111;
  }
 } else {
  $177 = $90 & -2;
  HEAP32[$89>>2] = $177;
  $178 = $$1345 | 1;
  $179 = ((($$1)) + 4|0);
  HEAP32[$179>>2] = $178;
  $180 = (($87) + ($$1345)|0);
  HEAP32[$180>>2] = $$1345;
  $$2 = $$1345;
 }
 $181 = $$2 >>> 3;
 $182 = ($$2>>>0)<(256);
 if ($182) {
  $183 = $181 << 1;
  $184 = (31708 + ($183<<2)|0);
  $185 = HEAP32[7917]|0;
  $186 = 1 << $181;
  $187 = $185 & $186;
  $188 = ($187|0)==(0);
  if ($188) {
   $189 = $185 | $186;
   HEAP32[7917] = $189;
   $$pre = ((($184)) + 8|0);
   $$0366 = $184;$$pre$phiZ2D = $$pre;
  } else {
   $190 = ((($184)) + 8|0);
   $191 = HEAP32[$190>>2]|0;
   $$0366 = $191;$$pre$phiZ2D = $190;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $192 = ((($$0366)) + 12|0);
  HEAP32[$192>>2] = $$1;
  $193 = ((($$1)) + 8|0);
  HEAP32[$193>>2] = $$0366;
  $194 = ((($$1)) + 12|0);
  HEAP32[$194>>2] = $184;
  return;
 }
 $195 = $$2 >>> 8;
 $196 = ($195|0)==(0);
 if ($196) {
  $$0359 = 0;
 } else {
  $197 = ($$2>>>0)>(16777215);
  if ($197) {
   $$0359 = 31;
  } else {
   $198 = (($195) + 1048320)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 8;
   $201 = $195 << $200;
   $202 = (($201) + 520192)|0;
   $203 = $202 >>> 16;
   $204 = $203 & 4;
   $205 = $204 | $200;
   $206 = $201 << $204;
   $207 = (($206) + 245760)|0;
   $208 = $207 >>> 16;
   $209 = $208 & 2;
   $210 = $205 | $209;
   $211 = (14 - ($210))|0;
   $212 = $206 << $209;
   $213 = $212 >>> 15;
   $214 = (($211) + ($213))|0;
   $215 = $214 << 1;
   $216 = (($214) + 7)|0;
   $217 = $$2 >>> $216;
   $218 = $217 & 1;
   $219 = $218 | $215;
   $$0359 = $219;
  }
 }
 $220 = (31972 + ($$0359<<2)|0);
 $221 = ((($$1)) + 28|0);
 HEAP32[$221>>2] = $$0359;
 $222 = ((($$1)) + 16|0);
 $223 = ((($$1)) + 20|0);
 HEAP32[$223>>2] = 0;
 HEAP32[$222>>2] = 0;
 $224 = HEAP32[(31672)>>2]|0;
 $225 = 1 << $$0359;
 $226 = $224 & $225;
 $227 = ($226|0)==(0);
 L112: do {
  if ($227) {
   $228 = $224 | $225;
   HEAP32[(31672)>>2] = $228;
   HEAP32[$220>>2] = $$1;
   $229 = ((($$1)) + 24|0);
   HEAP32[$229>>2] = $220;
   $230 = ((($$1)) + 12|0);
   HEAP32[$230>>2] = $$1;
   $231 = ((($$1)) + 8|0);
   HEAP32[$231>>2] = $$1;
  } else {
   $232 = HEAP32[$220>>2]|0;
   $233 = ((($232)) + 4|0);
   $234 = HEAP32[$233>>2]|0;
   $235 = $234 & -8;
   $236 = ($235|0)==($$2|0);
   L115: do {
    if ($236) {
     $$0347$lcssa = $232;
    } else {
     $237 = ($$0359|0)==(31);
     $238 = $$0359 >>> 1;
     $239 = (25 - ($238))|0;
     $240 = $237 ? 0 : $239;
     $241 = $$2 << $240;
     $$0346381 = $241;$$0347380 = $232;
     while(1) {
      $248 = $$0346381 >>> 31;
      $249 = (((($$0347380)) + 16|0) + ($248<<2)|0);
      $244 = HEAP32[$249>>2]|0;
      $250 = ($244|0)==(0|0);
      if ($250) {
       break;
      }
      $242 = $$0346381 << 1;
      $243 = ((($244)) + 4|0);
      $245 = HEAP32[$243>>2]|0;
      $246 = $245 & -8;
      $247 = ($246|0)==($$2|0);
      if ($247) {
       $$0347$lcssa = $244;
       break L115;
      } else {
       $$0346381 = $242;$$0347380 = $244;
      }
     }
     HEAP32[$249>>2] = $$1;
     $251 = ((($$1)) + 24|0);
     HEAP32[$251>>2] = $$0347380;
     $252 = ((($$1)) + 12|0);
     HEAP32[$252>>2] = $$1;
     $253 = ((($$1)) + 8|0);
     HEAP32[$253>>2] = $$1;
     break L112;
    }
   } while(0);
   $254 = ((($$0347$lcssa)) + 8|0);
   $255 = HEAP32[$254>>2]|0;
   $256 = ((($255)) + 12|0);
   HEAP32[$256>>2] = $$1;
   HEAP32[$254>>2] = $$1;
   $257 = ((($$1)) + 8|0);
   HEAP32[$257>>2] = $255;
   $258 = ((($$1)) + 12|0);
   HEAP32[$258>>2] = $$0347$lcssa;
   $259 = ((($$1)) + 24|0);
   HEAP32[$259>>2] = 0;
  }
 } while(0);
 $260 = HEAP32[(31700)>>2]|0;
 $261 = (($260) + -1)|0;
 HEAP32[(31700)>>2] = $261;
 $262 = ($261|0)==(0);
 if (!($262)) {
  return;
 }
 $$0194$in$i = (32124);
 while(1) {
  $$0194$i = HEAP32[$$0194$in$i>>2]|0;
  $263 = ($$0194$i|0)==(0|0);
  $264 = ((($$0194$i)) + 8|0);
  if ($263) {
   break;
  } else {
   $$0194$in$i = $264;
  }
 }
 HEAP32[(31700)>>2] = -1;
 return;
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 (_memcpy(($14|0),($0|0),($24|0))|0);
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1245 = 0, $$1245$be = 0, $$1245$ph = 0, $$1248 = 0, $$1248$be = 0, $$1248$ph = 0, $$2 = 0, $$3 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $storemerge = 0, $storemerge1 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = $3 & 3;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ($1>>>0)<(256);
  if ($8) {
   $$2 = 0;
   return ($$2|0);
  }
  $9 = (($1) + 4)|0;
  $10 = ($4>>>0)<($9>>>0);
  if (!($10)) {
   $11 = (($4) - ($1))|0;
   $12 = HEAP32[(32148)>>2]|0;
   $13 = $12 << 1;
   $14 = ($11>>>0)>($13>>>0);
   if (!($14)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $15 = ($4>>>0)<($1>>>0);
 if (!($15)) {
  $16 = (($4) - ($1))|0;
  $17 = ($16>>>0)>(15);
  if (!($17)) {
   $$2 = $0;
   return ($$2|0);
  }
  $18 = (($0) + ($1)|0);
  $19 = $3 & 1;
  $20 = $19 | $1;
  $21 = $20 | 2;
  HEAP32[$2>>2] = $21;
  $22 = ((($18)) + 4|0);
  $23 = $16 | 3;
  HEAP32[$22>>2] = $23;
  $24 = ((($5)) + 4|0);
  $25 = HEAP32[$24>>2]|0;
  $26 = $25 | 1;
  HEAP32[$24>>2] = $26;
  _dispose_chunk($18,$16);
  $$2 = $0;
  return ($$2|0);
 }
 $27 = HEAP32[(31692)>>2]|0;
 $28 = ($27|0)==($5|0);
 if ($28) {
  $29 = HEAP32[(31680)>>2]|0;
  $30 = (($29) + ($4))|0;
  $31 = ($30>>>0)>($1>>>0);
  $32 = (($30) - ($1))|0;
  $33 = (($0) + ($1)|0);
  if (!($31)) {
   $$2 = 0;
   return ($$2|0);
  }
  $34 = $32 | 1;
  $35 = ((($33)) + 4|0);
  $36 = $3 & 1;
  $37 = $36 | $1;
  $38 = $37 | 2;
  HEAP32[$2>>2] = $38;
  HEAP32[$35>>2] = $34;
  HEAP32[(31692)>>2] = $33;
  HEAP32[(31680)>>2] = $32;
  $$2 = $0;
  return ($$2|0);
 }
 $39 = HEAP32[(31688)>>2]|0;
 $40 = ($39|0)==($5|0);
 if ($40) {
  $41 = HEAP32[(31676)>>2]|0;
  $42 = (($41) + ($4))|0;
  $43 = ($42>>>0)<($1>>>0);
  if ($43) {
   $$2 = 0;
   return ($$2|0);
  }
  $44 = (($42) - ($1))|0;
  $45 = ($44>>>0)>(15);
  if ($45) {
   $46 = (($0) + ($1)|0);
   $47 = (($0) + ($42)|0);
   $48 = $3 & 1;
   $49 = $48 | $1;
   $50 = $49 | 2;
   HEAP32[$2>>2] = $50;
   $51 = ((($46)) + 4|0);
   $52 = $44 | 1;
   HEAP32[$51>>2] = $52;
   HEAP32[$47>>2] = $44;
   $53 = ((($47)) + 4|0);
   $54 = HEAP32[$53>>2]|0;
   $55 = $54 & -2;
   HEAP32[$53>>2] = $55;
   $storemerge = $46;$storemerge1 = $44;
  } else {
   $56 = $3 & 1;
   $57 = $56 | $42;
   $58 = $57 | 2;
   HEAP32[$2>>2] = $58;
   $59 = (($0) + ($42)|0);
   $60 = ((($59)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 | 1;
   HEAP32[$60>>2] = $62;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(31676)>>2] = $storemerge1;
  HEAP32[(31688)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $63 = ((($5)) + 4|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = $64 & 2;
 $66 = ($65|0)==(0);
 if (!($66)) {
  $$2 = 0;
  return ($$2|0);
 }
 $67 = $64 & -8;
 $68 = (($67) + ($4))|0;
 $69 = ($68>>>0)<($1>>>0);
 if ($69) {
  $$2 = 0;
  return ($$2|0);
 }
 $70 = (($68) - ($1))|0;
 $71 = $64 >>> 3;
 $72 = ($64>>>0)<(256);
 do {
  if ($72) {
   $73 = ((($5)) + 8|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ((($5)) + 12|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==($74|0);
   if ($77) {
    $78 = 1 << $71;
    $79 = $78 ^ -1;
    $80 = HEAP32[7917]|0;
    $81 = $80 & $79;
    HEAP32[7917] = $81;
    break;
   } else {
    $82 = ((($74)) + 12|0);
    HEAP32[$82>>2] = $76;
    $83 = ((($76)) + 8|0);
    HEAP32[$83>>2] = $74;
    break;
   }
  } else {
   $84 = ((($5)) + 24|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($5)) + 12|0);
   $87 = HEAP32[$86>>2]|0;
   $88 = ($87|0)==($5|0);
   do {
    if ($88) {
     $93 = ((($5)) + 16|0);
     $94 = ((($93)) + 4|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(0|0);
     if ($96) {
      $97 = HEAP32[$93>>2]|0;
      $98 = ($97|0)==(0|0);
      if ($98) {
       $$3 = 0;
       break;
      } else {
       $$1245$ph = $97;$$1248$ph = $93;
      }
     } else {
      $$1245$ph = $95;$$1248$ph = $94;
     }
     $$1245 = $$1245$ph;$$1248 = $$1248$ph;
     while(1) {
      $99 = ((($$1245)) + 20|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0|0);
      if ($101) {
       $102 = ((($$1245)) + 16|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ($103|0)==(0|0);
       if ($104) {
        break;
       } else {
        $$1245$be = $103;$$1248$be = $102;
       }
      } else {
       $$1245$be = $100;$$1248$be = $99;
      }
      $$1245 = $$1245$be;$$1248 = $$1248$be;
     }
     HEAP32[$$1248>>2] = 0;
     $$3 = $$1245;
    } else {
     $89 = ((($5)) + 8|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($90)) + 12|0);
     HEAP32[$91>>2] = $87;
     $92 = ((($87)) + 8|0);
     HEAP32[$92>>2] = $90;
     $$3 = $87;
    }
   } while(0);
   $105 = ($85|0)==(0|0);
   if (!($105)) {
    $106 = ((($5)) + 28|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = (31972 + ($107<<2)|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)==($5|0);
    if ($110) {
     HEAP32[$108>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $111 = 1 << $107;
      $112 = $111 ^ -1;
      $113 = HEAP32[(31672)>>2]|0;
      $114 = $113 & $112;
      HEAP32[(31672)>>2] = $114;
      break;
     }
    } else {
     $115 = ((($85)) + 16|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==($5|0);
     $118 = ((($85)) + 20|0);
     $$sink = $117 ? $115 : $118;
     HEAP32[$$sink>>2] = $$3;
     $119 = ($$3|0)==(0|0);
     if ($119) {
      break;
     }
    }
    $120 = ((($$3)) + 24|0);
    HEAP32[$120>>2] = $85;
    $121 = ((($5)) + 16|0);
    $122 = HEAP32[$121>>2]|0;
    $123 = ($122|0)==(0|0);
    if (!($123)) {
     $124 = ((($$3)) + 16|0);
     HEAP32[$124>>2] = $122;
     $125 = ((($122)) + 24|0);
     HEAP32[$125>>2] = $$3;
    }
    $126 = ((($121)) + 4|0);
    $127 = HEAP32[$126>>2]|0;
    $128 = ($127|0)==(0|0);
    if (!($128)) {
     $129 = ((($$3)) + 20|0);
     HEAP32[$129>>2] = $127;
     $130 = ((($127)) + 24|0);
     HEAP32[$130>>2] = $$3;
    }
   }
  }
 } while(0);
 $131 = ($70>>>0)<(16);
 if ($131) {
  $132 = $3 & 1;
  $133 = $132 | $68;
  $134 = $133 | 2;
  HEAP32[$2>>2] = $134;
  $135 = (($0) + ($68)|0);
  $136 = ((($135)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  $138 = $137 | 1;
  HEAP32[$136>>2] = $138;
  $$2 = $0;
  return ($$2|0);
 } else {
  $139 = (($0) + ($1)|0);
  $140 = $3 & 1;
  $141 = $140 | $1;
  $142 = $141 | 2;
  HEAP32[$2>>2] = $142;
  $143 = ((($139)) + 4|0);
  $144 = $70 | 3;
  HEAP32[$143>>2] = $144;
  $145 = (($0) + ($68)|0);
  $146 = ((($145)) + 4|0);
  $147 = HEAP32[$146>>2]|0;
  $148 = $147 | 1;
  HEAP32[$146>>2] = $148;
  _dispose_chunk($139,$70);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$03649 = 0, $$0365$lcssa = 0, $$03658 = 0, $$0376 = 0, $$0383 = 0, $$1 = 0, $$1363 = 0, $$1371 = 0, $$1371$be = 0, $$1371$ph = 0, $$1374 = 0, $$1374$be = 0, $$1374$ph = 0, $$1378 = 0, $$1378$be = 0, $$1378$ph = 0, $$1382 = 0, $$1382$be = 0, $$1382$ph = 0, $$2 = 0;
 var $$3 = 0, $$3380 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$sink = 0, $$sink24 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(31688)>>2]|0;
   $14 = ($13|0)==($11|0);
   if ($14) {
    $75 = ((($2)) + 4|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = $76 & 3;
    $78 = ($77|0)==(3);
    if (!($78)) {
     $$1 = $11;$$1363 = $12;
     break;
    }
    $79 = ((($11)) + 4|0);
    $80 = $12 | 1;
    $81 = $76 & -2;
    HEAP32[(31676)>>2] = $12;
    HEAP32[$75>>2] = $81;
    HEAP32[$79>>2] = $80;
    HEAP32[$2>>2] = $12;
    return;
   }
   $15 = $7 >>> 3;
   $16 = ($7>>>0)<(256);
   if ($16) {
    $17 = ((($11)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($11)) + 12|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==($18|0);
    if ($21) {
     $22 = 1 << $15;
     $23 = $22 ^ -1;
     $24 = HEAP32[7917]|0;
     $25 = $24 & $23;
     HEAP32[7917] = $25;
     $$1 = $11;$$1363 = $12;
     break;
    } else {
     $26 = ((($18)) + 12|0);
     HEAP32[$26>>2] = $20;
     $27 = ((($20)) + 8|0);
     HEAP32[$27>>2] = $18;
     $$1 = $11;$$1363 = $12;
     break;
    }
   }
   $28 = ((($11)) + 24|0);
   $29 = HEAP32[$28>>2]|0;
   $30 = ((($11)) + 12|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==($11|0);
   do {
    if ($32) {
     $37 = ((($11)) + 16|0);
     $38 = ((($37)) + 4|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = ($39|0)==(0|0);
     if ($40) {
      $41 = HEAP32[$37>>2]|0;
      $42 = ($41|0)==(0|0);
      if ($42) {
       $$3 = 0;
       break;
      } else {
       $$1371$ph = $41;$$1374$ph = $37;
      }
     } else {
      $$1371$ph = $39;$$1374$ph = $38;
     }
     $$1371 = $$1371$ph;$$1374 = $$1374$ph;
     while(1) {
      $43 = ((($$1371)) + 20|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0|0);
      if ($45) {
       $46 = ((($$1371)) + 16|0);
       $47 = HEAP32[$46>>2]|0;
       $48 = ($47|0)==(0|0);
       if ($48) {
        break;
       } else {
        $$1371$be = $47;$$1374$be = $46;
       }
      } else {
       $$1371$be = $44;$$1374$be = $43;
      }
      $$1371 = $$1371$be;$$1374 = $$1374$be;
     }
     HEAP32[$$1374>>2] = 0;
     $$3 = $$1371;
    } else {
     $33 = ((($11)) + 8|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ((($34)) + 12|0);
     HEAP32[$35>>2] = $31;
     $36 = ((($31)) + 8|0);
     HEAP32[$36>>2] = $34;
     $$3 = $31;
    }
   } while(0);
   $49 = ($29|0)==(0|0);
   if ($49) {
    $$1 = $11;$$1363 = $12;
   } else {
    $50 = ((($11)) + 28|0);
    $51 = HEAP32[$50>>2]|0;
    $52 = (31972 + ($51<<2)|0);
    $53 = HEAP32[$52>>2]|0;
    $54 = ($53|0)==($11|0);
    if ($54) {
     HEAP32[$52>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $55 = 1 << $51;
      $56 = $55 ^ -1;
      $57 = HEAP32[(31672)>>2]|0;
      $58 = $57 & $56;
      HEAP32[(31672)>>2] = $58;
      $$1 = $11;$$1363 = $12;
      break;
     }
    } else {
     $59 = ((($29)) + 16|0);
     $60 = HEAP32[$59>>2]|0;
     $61 = ($60|0)==($11|0);
     $62 = ((($29)) + 20|0);
     $$sink = $61 ? $59 : $62;
     HEAP32[$$sink>>2] = $$3;
     $63 = ($$3|0)==(0|0);
     if ($63) {
      $$1 = $11;$$1363 = $12;
      break;
     }
    }
    $64 = ((($$3)) + 24|0);
    HEAP32[$64>>2] = $29;
    $65 = ((($11)) + 16|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)==(0|0);
    if (!($67)) {
     $68 = ((($$3)) + 16|0);
     HEAP32[$68>>2] = $66;
     $69 = ((($66)) + 24|0);
     HEAP32[$69>>2] = $$3;
    }
    $70 = ((($65)) + 4|0);
    $71 = HEAP32[$70>>2]|0;
    $72 = ($71|0)==(0|0);
    if ($72) {
     $$1 = $11;$$1363 = $12;
    } else {
     $73 = ((($$3)) + 20|0);
     HEAP32[$73>>2] = $71;
     $74 = ((($71)) + 24|0);
     HEAP32[$74>>2] = $$3;
     $$1 = $11;$$1363 = $12;
    }
   }
  } else {
   $$1 = $0;$$1363 = $1;
  }
 } while(0);
 $82 = ((($2)) + 4|0);
 $83 = HEAP32[$82>>2]|0;
 $84 = $83 & 2;
 $85 = ($84|0)==(0);
 if ($85) {
  $86 = HEAP32[(31692)>>2]|0;
  $87 = ($86|0)==($2|0);
  if ($87) {
   $88 = HEAP32[(31680)>>2]|0;
   $89 = (($88) + ($$1363))|0;
   HEAP32[(31680)>>2] = $89;
   HEAP32[(31692)>>2] = $$1;
   $90 = $89 | 1;
   $91 = ((($$1)) + 4|0);
   HEAP32[$91>>2] = $90;
   $92 = HEAP32[(31688)>>2]|0;
   $93 = ($$1|0)==($92|0);
   if (!($93)) {
    return;
   }
   HEAP32[(31688)>>2] = 0;
   HEAP32[(31676)>>2] = 0;
   return;
  }
  $94 = HEAP32[(31688)>>2]|0;
  $95 = ($94|0)==($2|0);
  if ($95) {
   $96 = HEAP32[(31676)>>2]|0;
   $97 = (($96) + ($$1363))|0;
   HEAP32[(31676)>>2] = $97;
   HEAP32[(31688)>>2] = $$1;
   $98 = $97 | 1;
   $99 = ((($$1)) + 4|0);
   HEAP32[$99>>2] = $98;
   $100 = (($$1) + ($97)|0);
   HEAP32[$100>>2] = $97;
   return;
  }
  $101 = $83 & -8;
  $102 = (($101) + ($$1363))|0;
  $103 = $83 >>> 3;
  $104 = ($83>>>0)<(256);
  do {
   if ($104) {
    $105 = ((($2)) + 8|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = ((($2)) + 12|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==($106|0);
    if ($109) {
     $110 = 1 << $103;
     $111 = $110 ^ -1;
     $112 = HEAP32[7917]|0;
     $113 = $112 & $111;
     HEAP32[7917] = $113;
     break;
    } else {
     $114 = ((($106)) + 12|0);
     HEAP32[$114>>2] = $108;
     $115 = ((($108)) + 8|0);
     HEAP32[$115>>2] = $106;
     break;
    }
   } else {
    $116 = ((($2)) + 24|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = ((($2)) + 12|0);
    $119 = HEAP32[$118>>2]|0;
    $120 = ($119|0)==($2|0);
    do {
     if ($120) {
      $125 = ((($2)) + 16|0);
      $126 = ((($125)) + 4|0);
      $127 = HEAP32[$126>>2]|0;
      $128 = ($127|0)==(0|0);
      if ($128) {
       $129 = HEAP32[$125>>2]|0;
       $130 = ($129|0)==(0|0);
       if ($130) {
        $$3380 = 0;
        break;
       } else {
        $$1378$ph = $129;$$1382$ph = $125;
       }
      } else {
       $$1378$ph = $127;$$1382$ph = $126;
      }
      $$1378 = $$1378$ph;$$1382 = $$1382$ph;
      while(1) {
       $131 = ((($$1378)) + 20|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = ($132|0)==(0|0);
       if ($133) {
        $134 = ((($$1378)) + 16|0);
        $135 = HEAP32[$134>>2]|0;
        $136 = ($135|0)==(0|0);
        if ($136) {
         break;
        } else {
         $$1378$be = $135;$$1382$be = $134;
        }
       } else {
        $$1378$be = $132;$$1382$be = $131;
       }
       $$1378 = $$1378$be;$$1382 = $$1382$be;
      }
      HEAP32[$$1382>>2] = 0;
      $$3380 = $$1378;
     } else {
      $121 = ((($2)) + 8|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ((($122)) + 12|0);
      HEAP32[$123>>2] = $119;
      $124 = ((($119)) + 8|0);
      HEAP32[$124>>2] = $122;
      $$3380 = $119;
     }
    } while(0);
    $137 = ($117|0)==(0|0);
    if (!($137)) {
     $138 = ((($2)) + 28|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = (31972 + ($139<<2)|0);
     $141 = HEAP32[$140>>2]|0;
     $142 = ($141|0)==($2|0);
     if ($142) {
      HEAP32[$140>>2] = $$3380;
      $cond4 = ($$3380|0)==(0|0);
      if ($cond4) {
       $143 = 1 << $139;
       $144 = $143 ^ -1;
       $145 = HEAP32[(31672)>>2]|0;
       $146 = $145 & $144;
       HEAP32[(31672)>>2] = $146;
       break;
      }
     } else {
      $147 = ((($117)) + 16|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)==($2|0);
      $150 = ((($117)) + 20|0);
      $$sink24 = $149 ? $147 : $150;
      HEAP32[$$sink24>>2] = $$3380;
      $151 = ($$3380|0)==(0|0);
      if ($151) {
       break;
      }
     }
     $152 = ((($$3380)) + 24|0);
     HEAP32[$152>>2] = $117;
     $153 = ((($2)) + 16|0);
     $154 = HEAP32[$153>>2]|0;
     $155 = ($154|0)==(0|0);
     if (!($155)) {
      $156 = ((($$3380)) + 16|0);
      HEAP32[$156>>2] = $154;
      $157 = ((($154)) + 24|0);
      HEAP32[$157>>2] = $$3380;
     }
     $158 = ((($153)) + 4|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)==(0|0);
     if (!($160)) {
      $161 = ((($$3380)) + 20|0);
      HEAP32[$161>>2] = $159;
      $162 = ((($159)) + 24|0);
      HEAP32[$162>>2] = $$3380;
     }
    }
   }
  } while(0);
  $163 = $102 | 1;
  $164 = ((($$1)) + 4|0);
  HEAP32[$164>>2] = $163;
  $165 = (($$1) + ($102)|0);
  HEAP32[$165>>2] = $102;
  $166 = HEAP32[(31688)>>2]|0;
  $167 = ($$1|0)==($166|0);
  if ($167) {
   HEAP32[(31676)>>2] = $102;
   return;
  } else {
   $$2 = $102;
  }
 } else {
  $168 = $83 & -2;
  HEAP32[$82>>2] = $168;
  $169 = $$1363 | 1;
  $170 = ((($$1)) + 4|0);
  HEAP32[$170>>2] = $169;
  $171 = (($$1) + ($$1363)|0);
  HEAP32[$171>>2] = $$1363;
  $$2 = $$1363;
 }
 $172 = $$2 >>> 3;
 $173 = ($$2>>>0)<(256);
 if ($173) {
  $174 = $172 << 1;
  $175 = (31708 + ($174<<2)|0);
  $176 = HEAP32[7917]|0;
  $177 = 1 << $172;
  $178 = $176 & $177;
  $179 = ($178|0)==(0);
  if ($179) {
   $180 = $176 | $177;
   HEAP32[7917] = $180;
   $$pre = ((($175)) + 8|0);
   $$0383 = $175;$$pre$phiZ2D = $$pre;
  } else {
   $181 = ((($175)) + 8|0);
   $182 = HEAP32[$181>>2]|0;
   $$0383 = $182;$$pre$phiZ2D = $181;
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $183 = ((($$0383)) + 12|0);
  HEAP32[$183>>2] = $$1;
  $184 = ((($$1)) + 8|0);
  HEAP32[$184>>2] = $$0383;
  $185 = ((($$1)) + 12|0);
  HEAP32[$185>>2] = $175;
  return;
 }
 $186 = $$2 >>> 8;
 $187 = ($186|0)==(0);
 if ($187) {
  $$0376 = 0;
 } else {
  $188 = ($$2>>>0)>(16777215);
  if ($188) {
   $$0376 = 31;
  } else {
   $189 = (($186) + 1048320)|0;
   $190 = $189 >>> 16;
   $191 = $190 & 8;
   $192 = $186 << $191;
   $193 = (($192) + 520192)|0;
   $194 = $193 >>> 16;
   $195 = $194 & 4;
   $196 = $195 | $191;
   $197 = $192 << $195;
   $198 = (($197) + 245760)|0;
   $199 = $198 >>> 16;
   $200 = $199 & 2;
   $201 = $196 | $200;
   $202 = (14 - ($201))|0;
   $203 = $197 << $200;
   $204 = $203 >>> 15;
   $205 = (($202) + ($204))|0;
   $206 = $205 << 1;
   $207 = (($205) + 7)|0;
   $208 = $$2 >>> $207;
   $209 = $208 & 1;
   $210 = $209 | $206;
   $$0376 = $210;
  }
 }
 $211 = (31972 + ($$0376<<2)|0);
 $212 = ((($$1)) + 28|0);
 HEAP32[$212>>2] = $$0376;
 $213 = ((($$1)) + 16|0);
 $214 = ((($$1)) + 20|0);
 HEAP32[$214>>2] = 0;
 HEAP32[$213>>2] = 0;
 $215 = HEAP32[(31672)>>2]|0;
 $216 = 1 << $$0376;
 $217 = $215 & $216;
 $218 = ($217|0)==(0);
 if ($218) {
  $219 = $215 | $216;
  HEAP32[(31672)>>2] = $219;
  HEAP32[$211>>2] = $$1;
  $220 = ((($$1)) + 24|0);
  HEAP32[$220>>2] = $211;
  $221 = ((($$1)) + 12|0);
  HEAP32[$221>>2] = $$1;
  $222 = ((($$1)) + 8|0);
  HEAP32[$222>>2] = $$1;
  return;
 }
 $223 = HEAP32[$211>>2]|0;
 $224 = ((($223)) + 4|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = $225 & -8;
 $227 = ($226|0)==($$2|0);
 L104: do {
  if ($227) {
   $$0365$lcssa = $223;
  } else {
   $228 = ($$0376|0)==(31);
   $229 = $$0376 >>> 1;
   $230 = (25 - ($229))|0;
   $231 = $228 ? 0 : $230;
   $232 = $$2 << $231;
   $$03649 = $232;$$03658 = $223;
   while(1) {
    $239 = $$03649 >>> 31;
    $240 = (((($$03658)) + 16|0) + ($239<<2)|0);
    $235 = HEAP32[$240>>2]|0;
    $241 = ($235|0)==(0|0);
    if ($241) {
     break;
    }
    $233 = $$03649 << 1;
    $234 = ((($235)) + 4|0);
    $236 = HEAP32[$234>>2]|0;
    $237 = $236 & -8;
    $238 = ($237|0)==($$2|0);
    if ($238) {
     $$0365$lcssa = $235;
     break L104;
    } else {
     $$03649 = $233;$$03658 = $235;
    }
   }
   HEAP32[$240>>2] = $$1;
   $242 = ((($$1)) + 24|0);
   HEAP32[$242>>2] = $$03658;
   $243 = ((($$1)) + 12|0);
   HEAP32[$243>>2] = $$1;
   $244 = ((($$1)) + 8|0);
   HEAP32[$244>>2] = $$1;
   return;
  }
 } while(0);
 $245 = ((($$0365$lcssa)) + 8|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = ((($246)) + 12|0);
 HEAP32[$247>>2] = $$1;
 HEAP32[$245>>2] = $$1;
 $248 = ((($$1)) + 8|0);
 HEAP32[$248>>2] = $246;
 $249 = ((($$1)) + 12|0);
 HEAP32[$249>>2] = $$0365$lcssa;
 $250 = ((($$1)) + 24|0);
 HEAP32[$250>>2] = 0;
 return;
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = (_dummy_361($2)|0);
 HEAP32[$vararg_buffer>>2] = $3;
 $4 = (___syscall6(6,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 7;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = $3;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21523;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $10;
  $11 = (___syscall54(54,($vararg_buffer|0))|0);
  $12 = ($11|0)==(0);
  if (!($12)) {
   $13 = ((($0)) + 75|0);
   HEAP8[$13>>0] = -1;
  }
 }
 $14 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($14|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = $3;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $6;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $7 = (___syscall140(140,($vararg_buffer|0))|0);
 $8 = (___syscall_ret($7)|0);
 $9 = ($8|0)<(0);
 if ($9) {
  HEAP32[$3>>2] = -1;
  $10 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $10 = $$pre;
 }
 STACKTOP = sp;return ($10|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (32172|0);
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$04756 = 0, $$04855 = 0, $$04954 = 0, $$051 = 0, $$1 = 0, $$150 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0;
 var $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 HEAP32[$vararg_buffer>>2] = $14;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $15;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $16 = (___syscall146(146,($vararg_buffer|0))|0);
 $17 = (___syscall_ret($16)|0);
 $18 = ($12|0)==($17|0);
 L1: do {
  if ($18) {
   label = 3;
  } else {
   $$04756 = 2;$$04855 = $12;$$04954 = $3;$26 = $17;
   while(1) {
    $27 = ($26|0)<(0);
    if ($27) {
     break;
    }
    $35 = (($$04855) - ($26))|0;
    $36 = ((($$04954)) + 4|0);
    $37 = HEAP32[$36>>2]|0;
    $38 = ($26>>>0)>($37>>>0);
    $39 = ((($$04954)) + 8|0);
    $$150 = $38 ? $39 : $$04954;
    $40 = $38 << 31 >> 31;
    $$1 = (($$04756) + ($40))|0;
    $41 = $38 ? $37 : 0;
    $$0 = (($26) - ($41))|0;
    $42 = HEAP32[$$150>>2]|0;
    $43 = (($42) + ($$0)|0);
    HEAP32[$$150>>2] = $43;
    $44 = ((($$150)) + 4|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = (($45) - ($$0))|0;
    HEAP32[$44>>2] = $46;
    $47 = HEAP32[$13>>2]|0;
    $48 = $$150;
    HEAP32[$vararg_buffer3>>2] = $47;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = $48;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = $$1;
    $49 = (___syscall146(146,($vararg_buffer3|0))|0);
    $50 = (___syscall_ret($49)|0);
    $51 = ($35|0)==($50|0);
    if ($51) {
     label = 3;
     break L1;
    } else {
     $$04756 = $$1;$$04855 = $35;$$04954 = $$150;$26 = $50;
    }
   }
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = 0;
   HEAP32[$4>>2] = 0;
   HEAP32[$7>>2] = 0;
   $29 = HEAP32[$0>>2]|0;
   $30 = $29 | 32;
   HEAP32[$0>>2] = $30;
   $31 = ($$04756|0)==(2);
   if ($31) {
    $$051 = 0;
   } else {
    $32 = ((($$04954)) + 4|0);
    $33 = HEAP32[$32>>2]|0;
    $34 = (($2) - ($33))|0;
    $$051 = $34;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 16|0);
  HEAP32[$24>>2] = $23;
  $25 = $20;
  HEAP32[$4>>2] = $25;
  HEAP32[$7>>2] = $25;
  $$051 = $2;
 }
 STACKTOP = sp;return ($$051|0);
}
function _dummy_361($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return ($0|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = ((($0)) + 60|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = $3;
 HEAP32[$vararg_buffer>>2] = $15;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $16;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = 2;
 $17 = (___syscall145(145,($vararg_buffer|0))|0);
 $18 = (___syscall_ret($17)|0);
 $19 = ($18|0)<(1);
 if ($19) {
  $20 = $18 & 48;
  $21 = $20 ^ 16;
  $22 = HEAP32[$0>>2]|0;
  $23 = $22 | $21;
  HEAP32[$0>>2] = $23;
  $$0 = $18;
 } else {
  $24 = HEAP32[$4>>2]|0;
  $25 = ($18>>>0)>($24>>>0);
  if ($25) {
   $26 = (($18) - ($24))|0;
   $27 = HEAP32[$11>>2]|0;
   $28 = ((($0)) + 4|0);
   HEAP32[$28>>2] = $27;
   $$cast = $27;
   $29 = (($$cast) + ($26)|0);
   $30 = ((($0)) + 8|0);
   HEAP32[$30>>2] = $29;
   $31 = HEAP32[$5>>2]|0;
   $32 = ($31|0)==(0);
   if ($32) {
    $$0 = $2;
   } else {
    $33 = ((($$cast)) + 1|0);
    HEAP32[$28>>2] = $33;
    $34 = HEAP8[$$cast>>0]|0;
    $35 = (($2) + -1)|0;
    $36 = (($1) + ($35)|0);
    HEAP8[$36>>0] = $34;
    $$0 = $2;
   }
  } else {
   $$0 = $18;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 5;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 5;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 5) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 124|0;
 $5 = sp;
 dest=$5; src=10420; stop=dest+124|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $spec$select = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $spec$select;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($spec$select)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($spec$select|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select41 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 127]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $spec$select = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $spec$select;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $spec$select41 = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $spec$select41;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$0 = 0, $$0228 = 0, $$0229334 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0, $$0240313 = 0, $$0240313371 = 0, $$0240333 = 0, $$0243 = 0, $$0243$ph = 0, $$0243$ph$be = 0, $$0247 = 0, $$0247$ph = 0, $$0249$lcssa = 0, $$0249321 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0;
 var $$0259 = 0, $$0262$lcssa = 0, $$0262328 = 0, $$0269$ph = 0, $$1 = 0, $$1230340 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241339 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0, $$1263 = 0, $$1270 = 0, $$2 = 0, $$2234 = 0, $$2239 = 0, $$2242320 = 0;
 var $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$3317 = 0, $$4258370 = 0, $$4266 = 0, $$5 = 0, $$6268 = 0, $$lcssa308 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre360 = 0, $$pre362 = 0, $$pre363 = 0, $$pre363$pre = 0, $$pre364 = 0;
 var $$pre368 = 0, $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0.0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0;
 var $arglist_next3 = 0, $brmerge = 0, $brmerge326 = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $or$cond = 0, $or$cond276 = 0, $or$cond278 = 0, $or$cond283 = 0, $spec$select = 0, $spec$select281 = 0, $spec$select284 = 0;
 var $spec$select291 = 0, $spec$select292 = 0, $spec$select293 = 0, $spec$select294 = 0, $spec$select295 = 0, $spec$select296 = 0, $spec$select297 = 0, $spec$select298 = 0, $spec$select299 = 0, $storemerge273$lcssa = 0, $storemerge273327 = 0, $storemerge274 = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $5 = sp + 16|0;
 $6 = sp;
 $7 = sp + 24|0;
 $8 = sp + 8|0;
 $9 = sp + 20|0;
 HEAP32[$5>>2] = $1;
 $10 = ($0|0)!=(0|0);
 $11 = ((($7)) + 40|0);
 $12 = $11;
 $13 = ((($7)) + 39|0);
 $14 = ((($8)) + 4|0);
 $$0243$ph = 0;$$0247$ph = 0;$$0269$ph = 0;
 L1: while(1) {
  $$0243 = $$0243$ph;$$0247 = $$0247$ph;
  while(1) {
   $15 = ($$0247|0)>(-1);
   do {
    if ($15) {
     $16 = (2147483647 - ($$0247))|0;
     $17 = ($$0243|0)>($16|0);
     if ($17) {
      $18 = (___errno_location()|0);
      HEAP32[$18>>2] = 75;
      $$1248 = -1;
      break;
     } else {
      $19 = (($$0243) + ($$0247))|0;
      $$1248 = $19;
      break;
     }
    } else {
     $$1248 = $$0247;
    }
   } while(0);
   $20 = HEAP32[$5>>2]|0;
   $21 = HEAP8[$20>>0]|0;
   $22 = ($21<<24>>24)==(0);
   if ($22) {
    label = 94;
    break L1;
   }
   $23 = $21;$25 = $20;
   L12: while(1) {
    switch ($23<<24>>24) {
    case 37:  {
     label = 10;
     break L12;
     break;
    }
    case 0:  {
     $$0249$lcssa = $25;
     break L12;
     break;
    }
    default: {
    }
    }
    $24 = ((($25)) + 1|0);
    HEAP32[$5>>2] = $24;
    $$pre = HEAP8[$24>>0]|0;
    $23 = $$pre;$25 = $24;
   }
   L15: do {
    if ((label|0) == 10) {
     label = 0;
     $$0249321 = $25;$27 = $25;
     while(1) {
      $26 = ((($27)) + 1|0);
      $28 = HEAP8[$26>>0]|0;
      $29 = ($28<<24>>24)==(37);
      if (!($29)) {
       $$0249$lcssa = $$0249321;
       break L15;
      }
      $30 = ((($$0249321)) + 1|0);
      $31 = ((($27)) + 2|0);
      HEAP32[$5>>2] = $31;
      $32 = HEAP8[$31>>0]|0;
      $33 = ($32<<24>>24)==(37);
      if ($33) {
       $$0249321 = $30;$27 = $31;
      } else {
       $$0249$lcssa = $30;
       break;
      }
     }
    }
   } while(0);
   $34 = $$0249$lcssa;
   $35 = $20;
   $36 = (($34) - ($35))|0;
   if ($10) {
    _out_293($0,$20,$36);
   }
   $37 = ($36|0)==(0);
   if ($37) {
    break;
   } else {
    $$0243 = $36;$$0247 = $$1248;
   }
  }
  $38 = HEAP32[$5>>2]|0;
  $39 = ((($38)) + 1|0);
  $40 = HEAP8[$39>>0]|0;
  $41 = $40 << 24 >> 24;
  $42 = (_isdigit($41)|0);
  $43 = ($42|0)==(0);
  $$pre360 = HEAP32[$5>>2]|0;
  if ($43) {
   $$0253 = -1;$$1270 = $$0269$ph;$$sink = 1;
  } else {
   $44 = ((($$pre360)) + 2|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = ($45<<24>>24)==(36);
   if ($46) {
    $47 = ((($$pre360)) + 1|0);
    $48 = HEAP8[$47>>0]|0;
    $49 = $48 << 24 >> 24;
    $50 = (($49) + -48)|0;
    $$0253 = $50;$$1270 = 1;$$sink = 3;
   } else {
    $$0253 = -1;$$1270 = $$0269$ph;$$sink = 1;
   }
  }
  $51 = (($$pre360) + ($$sink)|0);
  HEAP32[$5>>2] = $51;
  $52 = HEAP8[$51>>0]|0;
  $53 = $52 << 24 >> 24;
  $54 = (($53) + -32)|0;
  $55 = ($54>>>0)>(31);
  $56 = 1 << $54;
  $57 = $56 & 75913;
  $58 = ($57|0)==(0);
  $brmerge326 = $55 | $58;
  if ($brmerge326) {
   $$0262$lcssa = 0;$$lcssa308 = $52;$storemerge273$lcssa = $51;
  } else {
   $$0262328 = 0;$60 = $54;$storemerge273327 = $51;
   while(1) {
    $59 = 1 << $60;
    $61 = $59 | $$0262328;
    $62 = ((($storemerge273327)) + 1|0);
    HEAP32[$5>>2] = $62;
    $63 = HEAP8[$62>>0]|0;
    $64 = $63 << 24 >> 24;
    $65 = (($64) + -32)|0;
    $66 = ($65>>>0)>(31);
    $67 = 1 << $65;
    $68 = $67 & 75913;
    $69 = ($68|0)==(0);
    $brmerge = $66 | $69;
    if ($brmerge) {
     $$0262$lcssa = $61;$$lcssa308 = $63;$storemerge273$lcssa = $62;
     break;
    } else {
     $$0262328 = $61;$60 = $65;$storemerge273327 = $62;
    }
   }
  }
  $70 = ($$lcssa308<<24>>24)==(42);
  if ($70) {
   $71 = ((($storemerge273$lcssa)) + 1|0);
   $72 = HEAP8[$71>>0]|0;
   $73 = $72 << 24 >> 24;
   $74 = (_isdigit($73)|0);
   $75 = ($74|0)==(0);
   if ($75) {
    label = 27;
   } else {
    $76 = HEAP32[$5>>2]|0;
    $77 = ((($76)) + 2|0);
    $78 = HEAP8[$77>>0]|0;
    $79 = ($78<<24>>24)==(36);
    if ($79) {
     $80 = ((($76)) + 1|0);
     $81 = HEAP8[$80>>0]|0;
     $82 = $81 << 24 >> 24;
     $83 = (($82) + -48)|0;
     $84 = (($4) + ($83<<2)|0);
     HEAP32[$84>>2] = 10;
     $85 = HEAP8[$80>>0]|0;
     $86 = $85 << 24 >> 24;
     $87 = (($86) + -48)|0;
     $88 = (($3) + ($87<<3)|0);
     $89 = $88;
     $90 = $89;
     $91 = HEAP32[$90>>2]|0;
     $92 = (($89) + 4)|0;
     $93 = $92;
     $94 = HEAP32[$93>>2]|0;
     $95 = ((($76)) + 3|0);
     $$0259 = $91;$$2271 = 1;$storemerge274 = $95;
    } else {
     label = 27;
    }
   }
   if ((label|0) == 27) {
    label = 0;
    $96 = ($$1270|0)==(0);
    if (!($96)) {
     $$0 = -1;
     break;
    }
    if ($10) {
     $arglist_current = HEAP32[$2>>2]|0;
     $97 = $arglist_current;
     $98 = ((0) + 4|0);
     $expanded4 = $98;
     $expanded = (($expanded4) - 1)|0;
     $99 = (($97) + ($expanded))|0;
     $100 = ((0) + 4|0);
     $expanded8 = $100;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $101 = $99 & $expanded6;
     $102 = $101;
     $103 = HEAP32[$102>>2]|0;
     $arglist_next = ((($102)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $358 = $103;
    } else {
     $358 = 0;
    }
    $104 = HEAP32[$5>>2]|0;
    $105 = ((($104)) + 1|0);
    $$0259 = $358;$$2271 = 0;$storemerge274 = $105;
   }
   HEAP32[$5>>2] = $storemerge274;
   $106 = ($$0259|0)<(0);
   $107 = $$0262$lcssa | 8192;
   $108 = (0 - ($$0259))|0;
   $spec$select291 = $106 ? $107 : $$0262$lcssa;
   $spec$select292 = $106 ? $108 : $$0259;
   $$1260 = $spec$select292;$$1263 = $spec$select291;$$3272 = $$2271;$112 = $storemerge274;
  } else {
   $109 = (_getint_294($5)|0);
   $110 = ($109|0)<(0);
   if ($110) {
    $$0 = -1;
    break;
   }
   $$pre362 = HEAP32[$5>>2]|0;
   $$1260 = $109;$$1263 = $$0262$lcssa;$$3272 = $$1270;$112 = $$pre362;
  }
  $111 = HEAP8[$112>>0]|0;
  $113 = ($111<<24>>24)==(46);
  do {
   if ($113) {
    $114 = ((($112)) + 1|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = ($115<<24>>24)==(42);
    if (!($116)) {
     HEAP32[$5>>2] = $114;
     $152 = (_getint_294($5)|0);
     $$pre363$pre = HEAP32[$5>>2]|0;
     $$0254 = $152;$$pre363 = $$pre363$pre;
     break;
    }
    $117 = ((($112)) + 2|0);
    $118 = HEAP8[$117>>0]|0;
    $119 = $118 << 24 >> 24;
    $120 = (_isdigit($119)|0);
    $121 = ($120|0)==(0);
    if (!($121)) {
     $122 = HEAP32[$5>>2]|0;
     $123 = ((($122)) + 3|0);
     $124 = HEAP8[$123>>0]|0;
     $125 = ($124<<24>>24)==(36);
     if ($125) {
      $126 = ((($122)) + 2|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = (($128) + -48)|0;
      $130 = (($4) + ($129<<2)|0);
      HEAP32[$130>>2] = 10;
      $131 = HEAP8[$126>>0]|0;
      $132 = $131 << 24 >> 24;
      $133 = (($132) + -48)|0;
      $134 = (($3) + ($133<<3)|0);
      $135 = $134;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = (($135) + 4)|0;
      $139 = $138;
      $140 = HEAP32[$139>>2]|0;
      $141 = ((($122)) + 4|0);
      HEAP32[$5>>2] = $141;
      $$0254 = $137;$$pre363 = $141;
      break;
     }
    }
    $142 = ($$3272|0)==(0);
    if (!($142)) {
     $$0 = -1;
     break L1;
    }
    if ($10) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $143 = $arglist_current2;
     $144 = ((0) + 4|0);
     $expanded11 = $144;
     $expanded10 = (($expanded11) - 1)|0;
     $145 = (($143) + ($expanded10))|0;
     $146 = ((0) + 4|0);
     $expanded15 = $146;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $147 = $145 & $expanded13;
     $148 = $147;
     $149 = HEAP32[$148>>2]|0;
     $arglist_next3 = ((($148)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $359 = $149;
    } else {
     $359 = 0;
    }
    $150 = HEAP32[$5>>2]|0;
    $151 = ((($150)) + 2|0);
    HEAP32[$5>>2] = $151;
    $$0254 = $359;$$pre363 = $151;
   } else {
    $$0254 = -1;$$pre363 = $112;
   }
  } while(0);
  $$0252 = 0;$154 = $$pre363;
  while(1) {
   $153 = HEAP8[$154>>0]|0;
   $155 = $153 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($154)) + 1|0);
   HEAP32[$5>>2] = $158;
   $159 = HEAP8[$154>>0]|0;
   $160 = $159 << 24 >> 24;
   $161 = (($160) + -65)|0;
   $162 = ((28844 + (($$0252*58)|0)|0) + ($161)|0);
   $163 = HEAP8[$162>>0]|0;
   $164 = $163&255;
   $165 = (($164) + -1)|0;
   $166 = ($165>>>0)<(8);
   if ($166) {
    $$0252 = $164;$154 = $158;
   } else {
    break;
   }
  }
  $167 = ($163<<24>>24)==(0);
  if ($167) {
   $$0 = -1;
   break;
  }
  $168 = ($163<<24>>24)==(19);
  $169 = ($$0253|0)>(-1);
  do {
   if ($168) {
    if ($169) {
     $$0 = -1;
     break L1;
    } else {
     label = 54;
    }
   } else {
    if ($169) {
     $170 = (($4) + ($$0253<<2)|0);
     HEAP32[$170>>2] = $164;
     $171 = (($3) + ($$0253<<3)|0);
     $172 = $171;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = (($172) + 4)|0;
     $176 = $175;
     $177 = HEAP32[$176>>2]|0;
     $178 = $6;
     $179 = $178;
     HEAP32[$179>>2] = $174;
     $180 = (($178) + 4)|0;
     $181 = $180;
     HEAP32[$181>>2] = $177;
     label = 54;
     break;
    }
    if (!($10)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg_296($6,$164,$2);
    $$pre364 = HEAP32[$5>>2]|0;
    $183 = $$pre364;
    label = 55;
   }
  } while(0);
  if ((label|0) == 54) {
   label = 0;
   if ($10) {
    $183 = $158;
    label = 55;
   } else {
    $$0243$ph$be = 0;
   }
  }
  L77: do {
   if ((label|0) == 55) {
    label = 0;
    $182 = ((($183)) + -1|0);
    $184 = HEAP8[$182>>0]|0;
    $185 = $184 << 24 >> 24;
    $186 = ($$0252|0)!=(0);
    $187 = $185 & 15;
    $188 = ($187|0)==(3);
    $or$cond276 = $186 & $188;
    $189 = $185 & -33;
    $$0235 = $or$cond276 ? $189 : $185;
    $190 = $$1263 & 8192;
    $191 = ($190|0)==(0);
    $192 = $$1263 & -65537;
    $spec$select = $191 ? $$1263 : $192;
    L79: do {
     switch ($$0235|0) {
     case 110:  {
      $trunc = $$0252&255;
      switch ($trunc<<24>>24) {
      case 0:  {
       $199 = HEAP32[$6>>2]|0;
       HEAP32[$199>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 1:  {
       $200 = HEAP32[$6>>2]|0;
       HEAP32[$200>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 2:  {
       $201 = ($$1248|0)<(0);
       $202 = $201 << 31 >> 31;
       $203 = HEAP32[$6>>2]|0;
       $204 = $203;
       $205 = $204;
       HEAP32[$205>>2] = $$1248;
       $206 = (($204) + 4)|0;
       $207 = $206;
       HEAP32[$207>>2] = $202;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 3:  {
       $208 = $$1248&65535;
       $209 = HEAP32[$6>>2]|0;
       HEAP16[$209>>1] = $208;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 4:  {
       $210 = $$1248&255;
       $211 = HEAP32[$6>>2]|0;
       HEAP8[$211>>0] = $210;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 6:  {
       $212 = HEAP32[$6>>2]|0;
       HEAP32[$212>>2] = $$1248;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      case 7:  {
       $213 = ($$1248|0)<(0);
       $214 = $213 << 31 >> 31;
       $215 = HEAP32[$6>>2]|0;
       $216 = $215;
       $217 = $216;
       HEAP32[$217>>2] = $$1248;
       $218 = (($216) + 4)|0;
       $219 = $218;
       HEAP32[$219>>2] = $214;
       $$0243$ph$be = 0;
       break L77;
       break;
      }
      default: {
       $$0243$ph$be = 0;
       break L77;
      }
      }
      break;
     }
     case 112:  {
      $220 = ($$0254>>>0)>(8);
      $221 = $220 ? $$0254 : 8;
      $222 = $spec$select | 8;
      $$1236 = 120;$$1255 = $221;$$3265 = $222;
      label = 67;
      break;
     }
     case 88: case 120:  {
      $$1236 = $$0235;$$1255 = $$0254;$$3265 = $spec$select;
      label = 67;
      break;
     }
     case 111:  {
      $238 = $6;
      $239 = $238;
      $240 = HEAP32[$239>>2]|0;
      $241 = (($238) + 4)|0;
      $242 = $241;
      $243 = HEAP32[$242>>2]|0;
      $244 = (_fmt_o($240,$243,$11)|0);
      $245 = $spec$select & 8;
      $246 = ($245|0)==(0);
      $247 = $244;
      $248 = (($12) - ($247))|0;
      $249 = ($$0254|0)>($248|0);
      $250 = (($248) + 1)|0;
      $251 = $246 | $249;
      $spec$select295 = $251 ? $$0254 : $250;
      $$0228 = $244;$$1233 = 0;$$1238 = 29308;$$2256 = $spec$select295;$$4266 = $spec$select;$276 = $240;$278 = $243;
      label = 73;
      break;
     }
     case 105: case 100:  {
      $252 = $6;
      $253 = $252;
      $254 = HEAP32[$253>>2]|0;
      $255 = (($252) + 4)|0;
      $256 = $255;
      $257 = HEAP32[$256>>2]|0;
      $258 = ($257|0)<(0);
      if ($258) {
       $259 = (_i64Subtract(0,0,($254|0),($257|0))|0);
       $260 = tempRet0;
       $261 = $6;
       $262 = $261;
       HEAP32[$262>>2] = $259;
       $263 = (($261) + 4)|0;
       $264 = $263;
       HEAP32[$264>>2] = $260;
       $$0232 = 1;$$0237 = 29308;$271 = $259;$272 = $260;
       label = 72;
       break L79;
      } else {
       $265 = $spec$select & 2048;
       $266 = ($265|0)==(0);
       $267 = $spec$select & 1;
       $268 = ($267|0)==(0);
       $$ = $268 ? 29308 : (29310);
       $spec$select296 = $266 ? $$ : (29309);
       $269 = $spec$select & 2049;
       $270 = ($269|0)!=(0);
       $spec$select297 = $270&1;
       $$0232 = $spec$select297;$$0237 = $spec$select296;$271 = $254;$272 = $257;
       label = 72;
       break L79;
      }
      break;
     }
     case 117:  {
      $193 = $6;
      $194 = $193;
      $195 = HEAP32[$194>>2]|0;
      $196 = (($193) + 4)|0;
      $197 = $196;
      $198 = HEAP32[$197>>2]|0;
      $$0232 = 0;$$0237 = 29308;$271 = $195;$272 = $198;
      label = 72;
      break;
     }
     case 99:  {
      $288 = $6;
      $289 = $288;
      $290 = HEAP32[$289>>2]|0;
      $291 = (($288) + 4)|0;
      $292 = $291;
      $293 = HEAP32[$292>>2]|0;
      $294 = $290&255;
      HEAP8[$13>>0] = $294;
      $$2 = $13;$$2234 = 0;$$2239 = 29308;$$5 = 1;$$6268 = $192;$$pre$phiZ2D = $12;
      break;
     }
     case 109:  {
      $295 = (___errno_location()|0);
      $296 = HEAP32[$295>>2]|0;
      $297 = (_strerror($296)|0);
      $$1 = $297;
      label = 77;
      break;
     }
     case 115:  {
      $298 = HEAP32[$6>>2]|0;
      $299 = ($298|0)==(0|0);
      $300 = $299 ? 29318 : $298;
      $$1 = $300;
      label = 77;
      break;
     }
     case 67:  {
      $307 = $6;
      $308 = $307;
      $309 = HEAP32[$308>>2]|0;
      $310 = (($307) + 4)|0;
      $311 = $310;
      $312 = HEAP32[$311>>2]|0;
      HEAP32[$8>>2] = $309;
      HEAP32[$14>>2] = 0;
      HEAP32[$6>>2] = $8;
      $$4258370 = -1;
      label = 81;
      break;
     }
     case 83:  {
      $313 = ($$0254|0)==(0);
      if ($313) {
       _pad_299($0,32,$$1260,0,$spec$select);
       $$0240313371 = 0;
       label = 91;
      } else {
       $$4258370 = $$0254;
       label = 81;
      }
      break;
     }
     case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
      $336 = +HEAPF64[$6>>3];
      $337 = (_fmt_fp($0,$336,$$1260,$$0254,$spec$select,$$0235)|0);
      $$0243$ph$be = $337;
      break L77;
      break;
     }
     default: {
      $$2 = $20;$$2234 = 0;$$2239 = 29308;$$5 = $$0254;$$6268 = $spec$select;$$pre$phiZ2D = $12;
     }
     }
    } while(0);
    L103: do {
     if ((label|0) == 67) {
      label = 0;
      $223 = $6;
      $224 = $223;
      $225 = HEAP32[$224>>2]|0;
      $226 = (($223) + 4)|0;
      $227 = $226;
      $228 = HEAP32[$227>>2]|0;
      $229 = $$1236 & 32;
      $230 = (_fmt_x($225,$228,$11,$229)|0);
      $231 = ($225|0)==(0);
      $232 = ($228|0)==(0);
      $233 = $231 & $232;
      $234 = $$3265 & 8;
      $235 = ($234|0)==(0);
      $or$cond278 = $235 | $233;
      $236 = $$1236 >>> 4;
      $237 = (29308 + ($236)|0);
      $spec$select293 = $or$cond278 ? 29308 : $237;
      $spec$select294 = $or$cond278 ? 0 : 2;
      $$0228 = $230;$$1233 = $spec$select294;$$1238 = $spec$select293;$$2256 = $$1255;$$4266 = $$3265;$276 = $225;$278 = $228;
      label = 73;
     }
     else if ((label|0) == 72) {
      label = 0;
      $273 = (_fmt_u($271,$272,$11)|0);
      $$0228 = $273;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $spec$select;$276 = $271;$278 = $272;
      label = 73;
     }
     else if ((label|0) == 77) {
      label = 0;
      $301 = (_memchr($$1,0,$$0254)|0);
      $302 = ($301|0)==(0|0);
      $303 = $301;
      $304 = $$1;
      $305 = (($303) - ($304))|0;
      $306 = (($$1) + ($$0254)|0);
      $$3257 = $302 ? $$0254 : $305;
      $$1250 = $302 ? $306 : $301;
      $$pre368 = $$1250;
      $$2 = $$1;$$2234 = 0;$$2239 = 29308;$$5 = $$3257;$$6268 = $192;$$pre$phiZ2D = $$pre368;
     }
     else if ((label|0) == 81) {
      label = 0;
      $314 = HEAP32[$6>>2]|0;
      $$0229334 = $314;$$0240333 = 0;
      while(1) {
       $315 = HEAP32[$$0229334>>2]|0;
       $316 = ($315|0)==(0);
       if ($316) {
        $$0240313 = $$0240333;
        break;
       }
       $317 = (_wctomb($9,$315)|0);
       $318 = ($317|0)<(0);
       $319 = (($$4258370) - ($$0240333))|0;
       $320 = ($317>>>0)>($319>>>0);
       $or$cond283 = $318 | $320;
       if ($or$cond283) {
        label = 85;
        break;
       }
       $321 = ((($$0229334)) + 4|0);
       $322 = (($317) + ($$0240333))|0;
       $323 = ($$4258370>>>0)>($322>>>0);
       if ($323) {
        $$0229334 = $321;$$0240333 = $322;
       } else {
        $$0240313 = $322;
        break;
       }
      }
      if ((label|0) == 85) {
       label = 0;
       if ($318) {
        $$0 = -1;
        break L1;
       } else {
        $$0240313 = $$0240333;
       }
      }
      _pad_299($0,32,$$1260,$$0240313,$spec$select);
      $324 = ($$0240313|0)==(0);
      if ($324) {
       $$0240313371 = 0;
       label = 91;
      } else {
       $325 = HEAP32[$6>>2]|0;
       $$1230340 = $325;$$1241339 = 0;
       while(1) {
        $326 = HEAP32[$$1230340>>2]|0;
        $327 = ($326|0)==(0);
        if ($327) {
         $$0240313371 = $$0240313;
         label = 91;
         break L103;
        }
        $328 = (_wctomb($9,$326)|0);
        $329 = (($328) + ($$1241339))|0;
        $330 = ($329|0)>($$0240313|0);
        if ($330) {
         $$0240313371 = $$0240313;
         label = 91;
         break L103;
        }
        $331 = ((($$1230340)) + 4|0);
        _out_293($0,$9,$328);
        $332 = ($329>>>0)<($$0240313>>>0);
        if ($332) {
         $$1230340 = $331;$$1241339 = $329;
        } else {
         $$0240313371 = $$0240313;
         label = 91;
         break;
        }
       }
      }
     }
    } while(0);
    if ((label|0) == 73) {
     label = 0;
     $274 = ($$2256|0)>(-1);
     $275 = $$4266 & -65537;
     $spec$select281 = $274 ? $275 : $$4266;
     $277 = ($276|0)!=(0);
     $279 = ($278|0)!=(0);
     $280 = $277 | $279;
     $281 = ($$2256|0)!=(0);
     $or$cond = $281 | $280;
     $282 = $$0228;
     $283 = (($12) - ($282))|0;
     $284 = $280 ^ 1;
     $285 = $284&1;
     $286 = (($283) + ($285))|0;
     $287 = ($$2256|0)>($286|0);
     $$2256$ = $287 ? $$2256 : $286;
     $spec$select298 = $or$cond ? $$2256$ : 0;
     $spec$select299 = $or$cond ? $$0228 : $11;
     $$2 = $spec$select299;$$2234 = $$1233;$$2239 = $$1238;$$5 = $spec$select298;$$6268 = $spec$select281;$$pre$phiZ2D = $12;
    }
    else if ((label|0) == 91) {
     label = 0;
     $333 = $spec$select ^ 8192;
     _pad_299($0,32,$$1260,$$0240313371,$333);
     $334 = ($$1260|0)>($$0240313371|0);
     $335 = $334 ? $$1260 : $$0240313371;
     $$0243$ph$be = $335;
     break;
    }
    $338 = $$2;
    $339 = (($$pre$phiZ2D) - ($338))|0;
    $340 = ($$5|0)<($339|0);
    $spec$select284 = $340 ? $339 : $$5;
    $341 = (($spec$select284) + ($$2234))|0;
    $342 = ($$1260|0)<($341|0);
    $$2261 = $342 ? $341 : $$1260;
    _pad_299($0,32,$$2261,$341,$$6268);
    _out_293($0,$$2239,$$2234);
    $343 = $$6268 ^ 65536;
    _pad_299($0,48,$$2261,$341,$343);
    _pad_299($0,48,$spec$select284,$339,0);
    _out_293($0,$$2,$339);
    $344 = $$6268 ^ 8192;
    _pad_299($0,32,$$2261,$341,$344);
    $$0243$ph$be = $$2261;
   }
  } while(0);
  $$0243$ph = $$0243$ph$be;$$0247$ph = $$1248;$$0269$ph = $$3272;
 }
 L125: do {
  if ((label|0) == 94) {
   $345 = ($0|0)==(0|0);
   if ($345) {
    $346 = ($$0269$ph|0)==(0);
    if ($346) {
     $$0 = 0;
    } else {
     $$2242320 = 1;
     while(1) {
      $347 = (($4) + ($$2242320<<2)|0);
      $348 = HEAP32[$347>>2]|0;
      $349 = ($348|0)==(0);
      if ($349) {
       break;
      }
      $350 = (($3) + ($$2242320<<3)|0);
      _pop_arg_296($350,$348,$2);
      $351 = (($$2242320) + 1)|0;
      $352 = ($351>>>0)<(10);
      if ($352) {
       $$2242320 = $351;
      } else {
       $$0 = 1;
       break L125;
      }
     }
     $$3317 = $$2242320;
     while(1) {
      $355 = (($4) + ($$3317<<2)|0);
      $356 = HEAP32[$355>>2]|0;
      $357 = ($356|0)==(0);
      $353 = (($$3317) + 1)|0;
      if (!($357)) {
       $$0 = -1;
       break L125;
      }
      $354 = ($353>>>0)<(10);
      if ($354) {
       $$3317 = $353;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function _out_293($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = $3 & 32;
 $5 = ($4|0)==(0);
 if ($5) {
  (___fwritex($1,$2,$0)|0);
 }
 return;
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _getint_294($0) {
 $0 = $0|0;
 var $$0$lcssa = 0, $$04 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_isdigit($3)|0);
 $5 = ($4|0)==(0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$04 = 0;
  while(1) {
   $6 = ($$04*10)|0;
   $7 = HEAP32[$0>>2]|0;
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = (($6) + -48)|0;
   $11 = (($10) + ($9))|0;
   $12 = ((($7)) + 1|0);
   HEAP32[$0>>2] = $12;
   $13 = HEAP8[$12>>0]|0;
   $14 = $13 << 24 >> 24;
   $15 = (_isdigit($14)|0);
   $16 = ($15|0)==(0);
   if ($16) {
    $$0$lcssa = $11;
    break;
   } else {
    $$04 = $11;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _pop_arg_296($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_x($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$05$lcssa = 0, $$056 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)==(0);
 $5 = ($1|0)==(0);
 $6 = $4 & $5;
 if ($6) {
  $$05$lcssa = $2;
 } else {
  $$056 = $2;$15 = $1;$8 = $0;
  while(1) {
   $7 = $8 & 15;
   $9 = (29356 + ($7)|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10&255;
   $12 = $11 | $3;
   $13 = $12&255;
   $14 = ((($$056)) + -1|0);
   HEAP8[$14>>0] = $13;
   $16 = (_bitshift64Lshr(($8|0),($15|0),4)|0);
   $17 = tempRet0;
   $18 = ($16|0)==(0);
   $19 = ($17|0)==(0);
   $20 = $18 & $19;
   if ($20) {
    $$05$lcssa = $14;
    break;
   } else {
    $$056 = $14;$15 = $17;$8 = $16;
   }
  }
 }
 return ($$05$lcssa|0);
}
function _fmt_o($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$06 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0);
 $4 = ($1|0)==(0);
 $5 = $3 & $4;
 if ($5) {
  $$0$lcssa = $2;
 } else {
  $$06 = $2;$11 = $1;$7 = $0;
  while(1) {
   $6 = $7&255;
   $8 = $6 & 7;
   $9 = $8 | 48;
   $10 = ((($$06)) + -1|0);
   HEAP8[$10>>0] = $9;
   $12 = (_bitshift64Lshr(($7|0),($11|0),3)|0);
   $13 = tempRet0;
   $14 = ($12|0)==(0);
   $15 = ($13|0)==(0);
   $16 = $14 & $15;
   if ($16) {
    $$0$lcssa = $10;
    break;
   } else {
    $$06 = $10;$11 = $13;$7 = $12;
   }
  }
 }
 return ($$0$lcssa|0);
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = (___muldi3(($10|0),($11|0),10,0)|0);
   $13 = tempRet0;
   $14 = (_i64Subtract(($8|0),($9|0),($12|0),($13|0))|0);
   $15 = tempRet0;
   $16 = $14&255;
   $17 = $16 | 48;
   $18 = ((($$0914)) + -1|0);
   HEAP8[$18>>0] = $17;
   $19 = ($9>>>0)>(9);
   $20 = ($8>>>0)>(4294967295);
   $21 = ($9|0)==(9);
   $22 = $21 & $20;
   $23 = $19 | $22;
   if ($23) {
    $$0914 = $18;$8 = $10;$9 = $11;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $10;$$09$lcssa = $18;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $24 = ($$010$lcssa$off0|0)==(0);
 if ($24) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $25 = (($$012>>>0) / 10)&-1;
   $26 = ($25*10)|0;
   $27 = (($$012) - ($26))|0;
   $28 = $27 | 48;
   $29 = $28&255;
   $30 = ((($$111)) + -1|0);
   HEAP8[$30>>0] = $29;
   $31 = ($$012>>>0)<(10);
   if ($31) {
    $$1$lcssa = $30;
    break;
   } else {
    $$012 = $25;$$111 = $30;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_912()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (___strerror_l($0,$3)|0);
 return ($4|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$137$lcssa66 = 0, $$13745 = 0, $$140 = 0, $$23839 = 0, $$in = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   label = 16;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $38 = ($$036$lcssa64|0)==(0);
    if ($38) {
     label = 16;
     break;
    } else {
     $39 = $$035$lcssa65;
     break;
    }
   }
   $20 = Math_imul($3, 16843009)|0;
   $21 = ($$036$lcssa64>>>0)>(3);
   L13: do {
    if ($21) {
     $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
     while(1) {
      $22 = HEAP32[$$046>>2]|0;
      $23 = $22 ^ $20;
      $24 = (($23) + -16843009)|0;
      $25 = $23 & -2139062144;
      $26 = $25 ^ -2139062144;
      $27 = $26 & $24;
      $28 = ($27|0)==(0);
      if (!($28)) {
       $$137$lcssa66 = $$13745;$$in = $$046;
       break L13;
      }
      $29 = ((($$046)) + 4|0);
      $30 = (($$13745) + -4)|0;
      $31 = ($30>>>0)>(3);
      if ($31) {
       $$046 = $29;$$13745 = $30;
      } else {
       $$0$lcssa = $29;$$137$lcssa = $30;
       label = 11;
       break;
      }
     }
    } else {
     $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
     label = 11;
    }
   } while(0);
   if ((label|0) == 11) {
    $32 = ($$137$lcssa|0)==(0);
    if ($32) {
     label = 16;
     break;
    } else {
     $$137$lcssa66 = $$137$lcssa;$$in = $$0$lcssa;
    }
   }
   $$140 = $$in;$$23839 = $$137$lcssa66;
   while(1) {
    $33 = HEAP8[$$140>>0]|0;
    $34 = ($33<<24>>24)==($18<<24>>24);
    if ($34) {
     $39 = $$140;
     break L8;
    }
    $35 = ((($$140)) + 1|0);
    $36 = (($$23839) + -1)|0;
    $37 = ($36|0)==(0);
    if ($37) {
     label = 16;
     break;
    } else {
     $$140 = $35;$$23839 = $36;
    }
   }
  }
 } while(0);
 if ((label|0) == 16) {
  $39 = 0;
 }
 return ($39|0);
}
function _pad_299($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 if ($or$cond) {
  $9 = (($2) - ($3))|0;
  $10 = $1 << 24 >> 24;
  $11 = ($9>>>0)<(256);
  $12 = $11 ? $9 : 256;
  (_memset(($5|0),($10|0),($12|0))|0);
  $13 = ($9>>>0)>(255);
  if ($13) {
   $14 = (($2) - ($3))|0;
   $$011 = $9;
   while(1) {
    _out_293($0,$5,256);
    $15 = (($$011) + -256)|0;
    $16 = ($15>>>0)>(255);
    if ($16) {
     $$011 = $15;
    } else {
     break;
    }
   }
   $17 = $14 & 255;
   $$0$lcssa = $17;
  } else {
   $$0$lcssa = $9;
  }
  _out_293($0,$5,$$0$lcssa);
 }
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _fmt_fp($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = +$1;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$ = 0, $$0 = 0, $$0463$lcssa = 0, $$0463588 = 0, $$0464599 = 0, $$0471 = 0.0, $$0479 = 0, $$0487657 = 0, $$0488 = 0, $$0488669 = 0, $$0488671 = 0, $$0497670 = 0, $$0498 = 0, $$0511586 = 0.0, $$0512 = 0, $$0513 = 0, $$0516652 = 0, $$0522 = 0, $$0523 = 0, $$0525 = 0;
 var $$0527 = 0, $$0529 = 0, $$0529$in646 = 0, $$0532651 = 0, $$1465 = 0, $$1467 = 0.0, $$1469 = 0.0, $$1472 = 0.0, $$1480 = 0, $$1482$lcssa = 0, $$1482683 = 0, $$1489656 = 0, $$1499 = 0, $$1510587 = 0, $$1514$lcssa = 0, $$1514614 = 0, $$1517 = 0, $$1526 = 0, $$1528 = 0, $$1530621 = 0;
 var $$1533$lcssa = 0, $$1533645 = 0, $$1604 = 0, $$2 = 0, $$2473 = 0.0, $$2476 = 0, $$2483 = 0, $$2490$lcssa = 0, $$2490638 = 0, $$2500$lcssa = 0, $$2500682 = 0, $$2515 = 0, $$2518634 = 0, $$2531 = 0, $$2534633 = 0, $$3 = 0.0, $$3477 = 0, $$3484$lcssa = 0, $$3484663 = 0, $$3501$lcssa = 0;
 var $$3501676 = 0, $$3535620 = 0, $$4 = 0.0, $$4478$lcssa = 0, $$4478594 = 0, $$4492 = 0, $$4502$lcssa = 0, $$4502662 = 0, $$4520 = 0, $$5$lcssa = 0, $$5486$lcssa = 0, $$5486639 = 0, $$5493603 = 0, $$5503 = 0, $$5521 = 0, $$560 = 0, $$5609 = 0, $$6 = 0, $$6494593 = 0, $$7495608 = 0;
 var $$8 = 0, $$8506 = 0, $$9 = 0, $$9507$lcssa = 0, $$9507625 = 0, $$lcssa583 = 0, $$lobit = 0, $$neg = 0, $$neg571 = 0, $$not = 0, $$pn = 0, $$pr = 0, $$pr564 = 0, $$pre = 0, $$pre$phi713Z2D = 0, $$pre$phi714Z2D = 0, $$pre716 = 0, $$sink755 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0.0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0.0, $13 = 0, $130 = 0.0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0.0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0.0;
 var $247 = 0.0, $248 = 0, $249 = 0.0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0.0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0.0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0;
 var $410 = 0, $411 = 0, $412 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0;
 var $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $not$ = 0, $or$cond = 0, $or$cond3$not = 0, $or$cond543 = 0, $or$cond546 = 0, $or$cond556 = 0, $or$cond559 = 0, $or$cond6 = 0, $scevgep707 = 0, $scevgep707708 = 0, $spec$select = 0, $spec$select539 = 0, $spec$select540 = 0, $spec$select540720 = 0, $spec$select540721 = 0;
 var $spec$select541 = 0, $spec$select544 = 0.0, $spec$select547 = 0, $spec$select548 = 0, $spec$select549 = 0, $spec$select551 = 0, $spec$select554 = 0, $spec$select557 = 0, $spec$select561 = 0.0, $spec$select562 = 0, $spec$select563 = 0, $spec$select565 = 0, $spec$select566 = 0, $spec$select567 = 0.0, $spec$select568 = 0.0, $spec$select569 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 560|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(560|0);
 $6 = sp + 8|0;
 $7 = sp;
 $8 = sp + 524|0;
 $9 = $8;
 $10 = sp + 512|0;
 HEAP32[$7>>2] = 0;
 $11 = ((($10)) + 12|0);
 $12 = (___DOUBLE_BITS($1)|0);
 $13 = tempRet0;
 $14 = ($13|0)<(0);
 if ($14) {
  $15 = - $1;
  $16 = (___DOUBLE_BITS($15)|0);
  $17 = tempRet0;
  $$0471 = $15;$$0522 = 1;$$0523 = 29325;$25 = $17;$412 = $16;
 } else {
  $18 = $4 & 2048;
  $19 = ($18|0)==(0);
  $20 = $4 & 1;
  $21 = ($20|0)==(0);
  $$ = $21 ? (29326) : (29331);
  $spec$select565 = $19 ? $$ : (29328);
  $22 = $4 & 2049;
  $23 = ($22|0)!=(0);
  $spec$select566 = $23&1;
  $$0471 = $1;$$0522 = $spec$select566;$$0523 = $spec$select565;$25 = $13;$412 = $12;
 }
 $24 = $25 & 2146435072;
 $26 = (0)==(0);
 $27 = ($24|0)==(2146435072);
 $28 = $26 & $27;
 do {
  if ($28) {
   $29 = $5 & 32;
   $30 = ($29|0)!=(0);
   $31 = $30 ? 29344 : 29348;
   $32 = ($$0471 != $$0471) | (0.0 != 0.0);
   $33 = $30 ? 31279 : 29352;
   $$0512 = $32 ? $33 : $31;
   $34 = (($$0522) + 3)|0;
   $35 = $4 & -65537;
   _pad_299($0,32,$2,$34,$35);
   _out_293($0,$$0523,$$0522);
   _out_293($0,$$0512,3);
   $36 = $4 ^ 8192;
   _pad_299($0,32,$2,$34,$36);
   $$sink755 = $34;
  } else {
   $37 = (+_frexpl($$0471,$7));
   $38 = $37 * 2.0;
   $39 = $38 != 0.0;
   if ($39) {
    $40 = HEAP32[$7>>2]|0;
    $41 = (($40) + -1)|0;
    HEAP32[$7>>2] = $41;
   }
   $42 = $5 | 32;
   $43 = ($42|0)==(97);
   if ($43) {
    $44 = $5 & 32;
    $45 = ($44|0)==(0);
    $46 = ((($$0523)) + 9|0);
    $spec$select = $45 ? $$0523 : $46;
    $47 = $$0522 | 2;
    $48 = ($3>>>0)>(11);
    $49 = (12 - ($3))|0;
    $50 = ($49|0)==(0);
    $51 = $48 | $50;
    do {
     if ($51) {
      $$1472 = $38;
     } else {
      $$0511586 = 8.0;$$1510587 = $49;
      while(1) {
       $52 = (($$1510587) + -1)|0;
       $53 = $$0511586 * 16.0;
       $54 = ($52|0)==(0);
       if ($54) {
        break;
       } else {
        $$0511586 = $53;$$1510587 = $52;
       }
      }
      $55 = HEAP8[$spec$select>>0]|0;
      $56 = ($55<<24>>24)==(45);
      if ($56) {
       $57 = - $38;
       $58 = $57 - $53;
       $59 = $53 + $58;
       $60 = - $59;
       $$1472 = $60;
       break;
      } else {
       $61 = $38 + $53;
       $62 = $61 - $53;
       $$1472 = $62;
       break;
      }
     }
    } while(0);
    $63 = HEAP32[$7>>2]|0;
    $64 = ($63|0)<(0);
    $65 = (0 - ($63))|0;
    $66 = $64 ? $65 : $63;
    $67 = ($66|0)<(0);
    $68 = $67 << 31 >> 31;
    $69 = (_fmt_u($66,$68,$11)|0);
    $70 = ($69|0)==($11|0);
    if ($70) {
     $71 = ((($10)) + 11|0);
     HEAP8[$71>>0] = 48;
     $$0513 = $71;
    } else {
     $$0513 = $69;
    }
    $72 = $63 >> 31;
    $73 = $72 & 2;
    $74 = (($73) + 43)|0;
    $75 = $74&255;
    $76 = ((($$0513)) + -1|0);
    HEAP8[$76>>0] = $75;
    $77 = (($5) + 15)|0;
    $78 = $77&255;
    $79 = ((($$0513)) + -2|0);
    HEAP8[$79>>0] = $78;
    $80 = ($3|0)<(1);
    $81 = $4 & 8;
    $82 = ($81|0)==(0);
    $$0525 = $8;$$2473 = $$1472;
    while(1) {
     $83 = (~~(($$2473)));
     $84 = (29356 + ($83)|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85&255;
     $87 = $44 | $86;
     $88 = $87&255;
     $89 = ((($$0525)) + 1|0);
     HEAP8[$$0525>>0] = $88;
     $90 = (+($83|0));
     $91 = $$2473 - $90;
     $92 = $91 * 16.0;
     $93 = $89;
     $94 = (($93) - ($9))|0;
     $95 = ($94|0)==(1);
     if ($95) {
      $96 = $92 == 0.0;
      $or$cond3$not = $80 & $96;
      $or$cond = $82 & $or$cond3$not;
      if ($or$cond) {
       $$1526 = $89;
      } else {
       $97 = ((($$0525)) + 2|0);
       HEAP8[$89>>0] = 46;
       $$1526 = $97;
      }
     } else {
      $$1526 = $89;
     }
     $98 = $92 != 0.0;
     if ($98) {
      $$0525 = $$1526;$$2473 = $92;
     } else {
      break;
     }
    }
    $99 = ($3|0)==(0);
    $$pre716 = $$1526;
    if ($99) {
     label = 25;
    } else {
     $100 = (-2 - ($9))|0;
     $101 = (($100) + ($$pre716))|0;
     $102 = ($101|0)<($3|0);
     if ($102) {
      $103 = $11;
      $104 = $79;
      $105 = (($3) + 2)|0;
      $106 = (($105) + ($103))|0;
      $107 = (($106) - ($104))|0;
      $$0527 = $107;$$pre$phi713Z2D = $103;$$pre$phi714Z2D = $104;
     } else {
      label = 25;
     }
    }
    if ((label|0) == 25) {
     $108 = $11;
     $109 = $79;
     $110 = (($108) - ($9))|0;
     $111 = (($110) - ($109))|0;
     $112 = (($111) + ($$pre716))|0;
     $$0527 = $112;$$pre$phi713Z2D = $108;$$pre$phi714Z2D = $109;
    }
    $113 = (($$0527) + ($47))|0;
    _pad_299($0,32,$2,$113,$4);
    _out_293($0,$spec$select,$47);
    $114 = $4 ^ 65536;
    _pad_299($0,48,$2,$113,$114);
    $115 = (($$pre716) - ($9))|0;
    _out_293($0,$8,$115);
    $116 = (($$pre$phi713Z2D) - ($$pre$phi714Z2D))|0;
    $117 = (($115) + ($116))|0;
    $118 = (($$0527) - ($117))|0;
    _pad_299($0,48,$118,0,0);
    _out_293($0,$79,$116);
    $119 = $4 ^ 8192;
    _pad_299($0,32,$2,$113,$119);
    $$sink755 = $113;
    break;
   }
   $120 = ($3|0)<(0);
   $spec$select539 = $120 ? 6 : $3;
   if ($39) {
    $121 = $38 * 268435456.0;
    $122 = HEAP32[$7>>2]|0;
    $123 = (($122) + -28)|0;
    HEAP32[$7>>2] = $123;
    $$3 = $121;$$pr = $123;
   } else {
    $$pre = HEAP32[$7>>2]|0;
    $$3 = $38;$$pr = $$pre;
   }
   $124 = ($$pr|0)<(0);
   $125 = ((($6)) + 288|0);
   $$0498 = $124 ? $6 : $125;
   $$1499 = $$0498;$$4 = $$3;
   while(1) {
    $126 = (~~(($$4))>>>0);
    HEAP32[$$1499>>2] = $126;
    $127 = ((($$1499)) + 4|0);
    $128 = (+($126>>>0));
    $129 = $$4 - $128;
    $130 = $129 * 1.0E+9;
    $131 = $130 != 0.0;
    if ($131) {
     $$1499 = $127;$$4 = $130;
    } else {
     break;
    }
   }
   $132 = ($$pr|0)>(0);
   if ($132) {
    $$1482683 = $$0498;$$2500682 = $127;$133 = $$pr;
    while(1) {
     $134 = ($133|0)<(29);
     $135 = $134 ? $133 : 29;
     $$0488669 = ((($$2500682)) + -4|0);
     $136 = ($$0488669>>>0)<($$1482683>>>0);
     if ($136) {
      $$2483 = $$1482683;
     } else {
      $$0488671 = $$0488669;$$0497670 = 0;
      while(1) {
       $137 = HEAP32[$$0488671>>2]|0;
       $138 = (_bitshift64Shl(($137|0),0,($135|0))|0);
       $139 = tempRet0;
       $140 = (_i64Add(($138|0),($139|0),($$0497670|0),0)|0);
       $141 = tempRet0;
       $142 = (___udivdi3(($140|0),($141|0),1000000000,0)|0);
       $143 = tempRet0;
       $144 = (___muldi3(($142|0),($143|0),1000000000,0)|0);
       $145 = tempRet0;
       $146 = (_i64Subtract(($140|0),($141|0),($144|0),($145|0))|0);
       $147 = tempRet0;
       HEAP32[$$0488671>>2] = $146;
       $$0488 = ((($$0488671)) + -4|0);
       $148 = ($$0488>>>0)<($$1482683>>>0);
       if ($148) {
        break;
       } else {
        $$0488671 = $$0488;$$0497670 = $142;
       }
      }
      $149 = ($142|0)==(0);
      if ($149) {
       $$2483 = $$1482683;
      } else {
       $150 = ((($$1482683)) + -4|0);
       HEAP32[$150>>2] = $142;
       $$2483 = $150;
      }
     }
     $151 = ($$2500682>>>0)>($$2483>>>0);
     L57: do {
      if ($151) {
       $$3501676 = $$2500682;
       while(1) {
        $152 = ((($$3501676)) + -4|0);
        $154 = HEAP32[$152>>2]|0;
        $155 = ($154|0)==(0);
        if (!($155)) {
         $$3501$lcssa = $$3501676;
         break L57;
        }
        $153 = ($152>>>0)>($$2483>>>0);
        if ($153) {
         $$3501676 = $152;
        } else {
         $$3501$lcssa = $152;
         break;
        }
       }
      } else {
       $$3501$lcssa = $$2500682;
      }
     } while(0);
     $156 = HEAP32[$7>>2]|0;
     $157 = (($156) - ($135))|0;
     HEAP32[$7>>2] = $157;
     $158 = ($157|0)>(0);
     if ($158) {
      $$1482683 = $$2483;$$2500682 = $$3501$lcssa;$133 = $157;
     } else {
      $$1482$lcssa = $$2483;$$2500$lcssa = $$3501$lcssa;$$pr564 = $157;
      break;
     }
    }
   } else {
    $$1482$lcssa = $$0498;$$2500$lcssa = $127;$$pr564 = $$pr;
   }
   $159 = ($$pr564|0)<(0);
   if ($159) {
    $160 = (($spec$select539) + 25)|0;
    $161 = (($160|0) / 9)&-1;
    $162 = (($161) + 1)|0;
    $163 = ($42|0)==(102);
    $$3484663 = $$1482$lcssa;$$4502662 = $$2500$lcssa;$165 = $$pr564;
    while(1) {
     $164 = (0 - ($165))|0;
     $166 = ($164|0)<(9);
     $167 = $166 ? $164 : 9;
     $168 = ($$3484663>>>0)<($$4502662>>>0);
     if ($168) {
      $172 = 1 << $167;
      $173 = (($172) + -1)|0;
      $174 = 1000000000 >>> $167;
      $$0487657 = 0;$$1489656 = $$3484663;
      while(1) {
       $175 = HEAP32[$$1489656>>2]|0;
       $176 = $175 & $173;
       $177 = $175 >>> $167;
       $178 = (($177) + ($$0487657))|0;
       HEAP32[$$1489656>>2] = $178;
       $179 = Math_imul($176, $174)|0;
       $180 = ((($$1489656)) + 4|0);
       $181 = ($180>>>0)<($$4502662>>>0);
       if ($181) {
        $$0487657 = $179;$$1489656 = $180;
       } else {
        break;
       }
      }
      $182 = HEAP32[$$3484663>>2]|0;
      $183 = ($182|0)==(0);
      $184 = ((($$3484663)) + 4|0);
      $spec$select540 = $183 ? $184 : $$3484663;
      $185 = ($179|0)==(0);
      if ($185) {
       $$5503 = $$4502662;$spec$select540721 = $spec$select540;
      } else {
       $186 = ((($$4502662)) + 4|0);
       HEAP32[$$4502662>>2] = $179;
       $$5503 = $186;$spec$select540721 = $spec$select540;
      }
     } else {
      $169 = HEAP32[$$3484663>>2]|0;
      $170 = ($169|0)==(0);
      $171 = ((($$3484663)) + 4|0);
      $spec$select540720 = $170 ? $171 : $$3484663;
      $$5503 = $$4502662;$spec$select540721 = $spec$select540720;
     }
     $187 = $163 ? $$0498 : $spec$select540721;
     $188 = $$5503;
     $189 = $187;
     $190 = (($188) - ($189))|0;
     $191 = $190 >> 2;
     $192 = ($191|0)>($162|0);
     $193 = (($187) + ($162<<2)|0);
     $spec$select541 = $192 ? $193 : $$5503;
     $194 = HEAP32[$7>>2]|0;
     $195 = (($194) + ($167))|0;
     HEAP32[$7>>2] = $195;
     $196 = ($195|0)<(0);
     if ($196) {
      $$3484663 = $spec$select540721;$$4502662 = $spec$select541;$165 = $195;
     } else {
      $$3484$lcssa = $spec$select540721;$$4502$lcssa = $spec$select541;
      break;
     }
    }
   } else {
    $$3484$lcssa = $$1482$lcssa;$$4502$lcssa = $$2500$lcssa;
   }
   $197 = ($$3484$lcssa>>>0)<($$4502$lcssa>>>0);
   $198 = $$0498;
   if ($197) {
    $199 = $$3484$lcssa;
    $200 = (($198) - ($199))|0;
    $201 = $200 >> 2;
    $202 = ($201*9)|0;
    $203 = HEAP32[$$3484$lcssa>>2]|0;
    $204 = ($203>>>0)<(10);
    if ($204) {
     $$1517 = $202;
    } else {
     $$0516652 = $202;$$0532651 = 10;
     while(1) {
      $205 = ($$0532651*10)|0;
      $206 = (($$0516652) + 1)|0;
      $207 = ($203>>>0)<($205>>>0);
      if ($207) {
       $$1517 = $206;
       break;
      } else {
       $$0516652 = $206;$$0532651 = $205;
      }
     }
    }
   } else {
    $$1517 = 0;
   }
   $208 = ($42|0)==(102);
   $209 = $208 ? 0 : $$1517;
   $210 = (($spec$select539) - ($209))|0;
   $211 = ($42|0)==(103);
   $212 = ($spec$select539|0)!=(0);
   $213 = $212 & $211;
   $$neg = $213 << 31 >> 31;
   $214 = (($210) + ($$neg))|0;
   $215 = $$4502$lcssa;
   $216 = (($215) - ($198))|0;
   $217 = $216 >> 2;
   $218 = ($217*9)|0;
   $219 = (($218) + -9)|0;
   $220 = ($214|0)<($219|0);
   if ($220) {
    $221 = ((($$0498)) + 4|0);
    $222 = (($214) + 9216)|0;
    $223 = (($222|0) / 9)&-1;
    $224 = (($223) + -1024)|0;
    $225 = (($221) + ($224<<2)|0);
    $226 = ($223*9)|0;
    $227 = (($222) - ($226))|0;
    $228 = ($227|0)<(8);
    if ($228) {
     $$0529$in646 = $227;$$1533645 = 10;
     while(1) {
      $$0529 = (($$0529$in646) + 1)|0;
      $229 = ($$1533645*10)|0;
      $230 = ($$0529$in646|0)<(7);
      if ($230) {
       $$0529$in646 = $$0529;$$1533645 = $229;
      } else {
       $$1533$lcssa = $229;
       break;
      }
     }
    } else {
     $$1533$lcssa = 10;
    }
    $231 = HEAP32[$225>>2]|0;
    $232 = (($231>>>0) / ($$1533$lcssa>>>0))&-1;
    $233 = Math_imul($232, $$1533$lcssa)|0;
    $234 = (($231) - ($233))|0;
    $235 = ($234|0)==(0);
    $236 = ((($225)) + 4|0);
    $237 = ($236|0)==($$4502$lcssa|0);
    $or$cond543 = $237 & $235;
    if ($or$cond543) {
     $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
    } else {
     $238 = $232 & 1;
     $239 = ($238|0)==(0);
     $spec$select544 = $239 ? 9007199254740992.0 : 9007199254740994.0;
     $240 = $$1533$lcssa >>> 1;
     $241 = ($234>>>0)<($240>>>0);
     $242 = ($234|0)==($240|0);
     $or$cond546 = $237 & $242;
     $spec$select561 = $or$cond546 ? 1.0 : 1.5;
     $spec$select567 = $241 ? 0.5 : $spec$select561;
     $243 = ($$0522|0)==(0);
     if ($243) {
      $$1467 = $spec$select567;$$1469 = $spec$select544;
     } else {
      $244 = HEAP8[$$0523>>0]|0;
      $245 = ($244<<24>>24)==(45);
      $246 = - $spec$select544;
      $247 = - $spec$select567;
      $spec$select568 = $245 ? $246 : $spec$select544;
      $spec$select569 = $245 ? $247 : $spec$select567;
      $$1467 = $spec$select569;$$1469 = $spec$select568;
     }
     $248 = (($231) - ($234))|0;
     HEAP32[$225>>2] = $248;
     $249 = $$1469 + $$1467;
     $250 = $249 != $$1469;
     if ($250) {
      $251 = (($248) + ($$1533$lcssa))|0;
      HEAP32[$225>>2] = $251;
      $252 = ($251>>>0)>(999999999);
      if ($252) {
       $$2490638 = $225;$$5486639 = $$3484$lcssa;
       while(1) {
        $253 = ((($$2490638)) + -4|0);
        HEAP32[$$2490638>>2] = 0;
        $254 = ($253>>>0)<($$5486639>>>0);
        if ($254) {
         $255 = ((($$5486639)) + -4|0);
         HEAP32[$255>>2] = 0;
         $$6 = $255;
        } else {
         $$6 = $$5486639;
        }
        $256 = HEAP32[$253>>2]|0;
        $257 = (($256) + 1)|0;
        HEAP32[$253>>2] = $257;
        $258 = ($257>>>0)>(999999999);
        if ($258) {
         $$2490638 = $253;$$5486639 = $$6;
        } else {
         $$2490$lcssa = $253;$$5486$lcssa = $$6;
         break;
        }
       }
      } else {
       $$2490$lcssa = $225;$$5486$lcssa = $$3484$lcssa;
      }
      $259 = $$5486$lcssa;
      $260 = (($198) - ($259))|0;
      $261 = $260 >> 2;
      $262 = ($261*9)|0;
      $263 = HEAP32[$$5486$lcssa>>2]|0;
      $264 = ($263>>>0)<(10);
      if ($264) {
       $$4492 = $$2490$lcssa;$$4520 = $262;$$8 = $$5486$lcssa;
      } else {
       $$2518634 = $262;$$2534633 = 10;
       while(1) {
        $265 = ($$2534633*10)|0;
        $266 = (($$2518634) + 1)|0;
        $267 = ($263>>>0)<($265>>>0);
        if ($267) {
         $$4492 = $$2490$lcssa;$$4520 = $266;$$8 = $$5486$lcssa;
         break;
        } else {
         $$2518634 = $266;$$2534633 = $265;
        }
       }
      }
     } else {
      $$4492 = $225;$$4520 = $$1517;$$8 = $$3484$lcssa;
     }
    }
    $268 = ((($$4492)) + 4|0);
    $269 = ($$4502$lcssa>>>0)>($268>>>0);
    $spec$select547 = $269 ? $268 : $$4502$lcssa;
    $$5521 = $$4520;$$8506 = $spec$select547;$$9 = $$8;
   } else {
    $$5521 = $$1517;$$8506 = $$4502$lcssa;$$9 = $$3484$lcssa;
   }
   $270 = (0 - ($$5521))|0;
   $271 = ($$8506>>>0)>($$9>>>0);
   L109: do {
    if ($271) {
     $$9507625 = $$8506;
     while(1) {
      $272 = ((($$9507625)) + -4|0);
      $274 = HEAP32[$272>>2]|0;
      $275 = ($274|0)==(0);
      if (!($275)) {
       $$9507$lcssa = $$9507625;$$lcssa583 = 1;
       break L109;
      }
      $273 = ($272>>>0)>($$9>>>0);
      if ($273) {
       $$9507625 = $272;
      } else {
       $$9507$lcssa = $272;$$lcssa583 = 0;
       break;
      }
     }
    } else {
     $$9507$lcssa = $$8506;$$lcssa583 = 0;
    }
   } while(0);
   do {
    if ($211) {
     $not$ = $212 ^ 1;
     $276 = $not$&1;
     $spec$select548 = (($spec$select539) + ($276))|0;
     $277 = ($spec$select548|0)>($$5521|0);
     $278 = ($$5521|0)>(-5);
     $or$cond6 = $277 & $278;
     if ($or$cond6) {
      $279 = (($5) + -1)|0;
      $$neg571 = (($spec$select548) + -1)|0;
      $280 = (($$neg571) - ($$5521))|0;
      $$0479 = $279;$$2476 = $280;
     } else {
      $281 = (($5) + -2)|0;
      $282 = (($spec$select548) + -1)|0;
      $$0479 = $281;$$2476 = $282;
     }
     $283 = $4 & 8;
     $284 = ($283|0)==(0);
     if ($284) {
      if ($$lcssa583) {
       $285 = ((($$9507$lcssa)) + -4|0);
       $286 = HEAP32[$285>>2]|0;
       $287 = ($286|0)==(0);
       if ($287) {
        $$2531 = 9;
       } else {
        $288 = (($286>>>0) % 10)&-1;
        $289 = ($288|0)==(0);
        if ($289) {
         $$1530621 = 0;$$3535620 = 10;
         while(1) {
          $290 = ($$3535620*10)|0;
          $291 = (($$1530621) + 1)|0;
          $292 = (($286>>>0) % ($290>>>0))&-1;
          $293 = ($292|0)==(0);
          if ($293) {
           $$1530621 = $291;$$3535620 = $290;
          } else {
           $$2531 = $291;
           break;
          }
         }
        } else {
         $$2531 = 0;
        }
       }
      } else {
       $$2531 = 9;
      }
      $294 = $$0479 | 32;
      $295 = ($294|0)==(102);
      $296 = $$9507$lcssa;
      $297 = (($296) - ($198))|0;
      $298 = $297 >> 2;
      $299 = ($298*9)|0;
      $300 = (($299) + -9)|0;
      if ($295) {
       $301 = (($300) - ($$2531))|0;
       $302 = ($301|0)>(0);
       $spec$select549 = $302 ? $301 : 0;
       $303 = ($$2476|0)<($spec$select549|0);
       $spec$select562 = $303 ? $$2476 : $spec$select549;
       $$1480 = $$0479;$$3477 = $spec$select562;
       break;
      } else {
       $304 = (($300) + ($$5521))|0;
       $305 = (($304) - ($$2531))|0;
       $306 = ($305|0)>(0);
       $spec$select551 = $306 ? $305 : 0;
       $307 = ($$2476|0)<($spec$select551|0);
       $spec$select563 = $307 ? $$2476 : $spec$select551;
       $$1480 = $$0479;$$3477 = $spec$select563;
       break;
      }
     } else {
      $$1480 = $$0479;$$3477 = $$2476;
     }
    } else {
     $$1480 = $5;$$3477 = $spec$select539;
    }
   } while(0);
   $308 = ($$3477|0)!=(0);
   $309 = $4 >>> 3;
   $$lobit = $309 & 1;
   $310 = $308 ? 1 : $$lobit;
   $311 = $$1480 | 32;
   $312 = ($311|0)==(102);
   if ($312) {
    $313 = ($$5521|0)>(0);
    $314 = $313 ? $$5521 : 0;
    $$2515 = 0;$$pn = $314;
   } else {
    $315 = ($$5521|0)<(0);
    $316 = $315 ? $270 : $$5521;
    $317 = ($316|0)<(0);
    $318 = $317 << 31 >> 31;
    $319 = (_fmt_u($316,$318,$11)|0);
    $320 = $11;
    $321 = $319;
    $322 = (($320) - ($321))|0;
    $323 = ($322|0)<(2);
    if ($323) {
     $$1514614 = $319;
     while(1) {
      $324 = ((($$1514614)) + -1|0);
      HEAP8[$324>>0] = 48;
      $325 = $324;
      $326 = (($320) - ($325))|0;
      $327 = ($326|0)<(2);
      if ($327) {
       $$1514614 = $324;
      } else {
       $$1514$lcssa = $324;
       break;
      }
     }
    } else {
     $$1514$lcssa = $319;
    }
    $328 = $$5521 >> 31;
    $329 = $328 & 2;
    $330 = (($329) + 43)|0;
    $331 = $330&255;
    $332 = ((($$1514$lcssa)) + -1|0);
    HEAP8[$332>>0] = $331;
    $333 = $$1480&255;
    $334 = ((($$1514$lcssa)) + -2|0);
    HEAP8[$334>>0] = $333;
    $335 = $334;
    $336 = (($320) - ($335))|0;
    $$2515 = $334;$$pn = $336;
   }
   $337 = (($$0522) + 1)|0;
   $338 = (($337) + ($$3477))|0;
   $$1528 = (($338) + ($310))|0;
   $339 = (($$1528) + ($$pn))|0;
   _pad_299($0,32,$2,$339,$4);
   _out_293($0,$$0523,$$0522);
   $340 = $4 ^ 65536;
   _pad_299($0,48,$2,$339,$340);
   if ($312) {
    $341 = ($$9>>>0)>($$0498>>>0);
    $spec$select554 = $341 ? $$0498 : $$9;
    $342 = ((($8)) + 9|0);
    $343 = $342;
    $344 = ((($8)) + 8|0);
    $$5493603 = $spec$select554;
    while(1) {
     $345 = HEAP32[$$5493603>>2]|0;
     $346 = (_fmt_u($345,0,$342)|0);
     $347 = ($$5493603|0)==($spec$select554|0);
     if ($347) {
      $353 = ($346|0)==($342|0);
      if ($353) {
       HEAP8[$344>>0] = 48;
       $$1465 = $344;
      } else {
       $$1465 = $346;
      }
     } else {
      $348 = ($346>>>0)>($8>>>0);
      if ($348) {
       $349 = $346;
       $350 = (($349) - ($9))|0;
       _memset(($8|0),48,($350|0))|0;
       $$0464599 = $346;
       while(1) {
        $351 = ((($$0464599)) + -1|0);
        $352 = ($351>>>0)>($8>>>0);
        if ($352) {
         $$0464599 = $351;
        } else {
         $$1465 = $351;
         break;
        }
       }
      } else {
       $$1465 = $346;
      }
     }
     $354 = $$1465;
     $355 = (($343) - ($354))|0;
     _out_293($0,$$1465,$355);
     $356 = ((($$5493603)) + 4|0);
     $357 = ($356>>>0)>($$0498>>>0);
     if ($357) {
      break;
     } else {
      $$5493603 = $356;
     }
    }
    $$not = $308 ^ 1;
    $358 = $4 & 8;
    $359 = ($358|0)==(0);
    $or$cond556 = $359 & $$not;
    if (!($or$cond556)) {
     _out_293($0,29372,1);
    }
    $360 = ($356>>>0)<($$9507$lcssa>>>0);
    $361 = ($$3477|0)>(0);
    $362 = $360 & $361;
    if ($362) {
     $$4478594 = $$3477;$$6494593 = $356;
     while(1) {
      $363 = HEAP32[$$6494593>>2]|0;
      $364 = (_fmt_u($363,0,$342)|0);
      $365 = ($364>>>0)>($8>>>0);
      if ($365) {
       $366 = $364;
       $367 = (($366) - ($9))|0;
       _memset(($8|0),48,($367|0))|0;
       $$0463588 = $364;
       while(1) {
        $368 = ((($$0463588)) + -1|0);
        $369 = ($368>>>0)>($8>>>0);
        if ($369) {
         $$0463588 = $368;
        } else {
         $$0463$lcssa = $368;
         break;
        }
       }
      } else {
       $$0463$lcssa = $364;
      }
      $370 = ($$4478594|0)<(9);
      $371 = $370 ? $$4478594 : 9;
      _out_293($0,$$0463$lcssa,$371);
      $372 = ((($$6494593)) + 4|0);
      $373 = (($$4478594) + -9)|0;
      $374 = ($372>>>0)<($$9507$lcssa>>>0);
      $375 = ($$4478594|0)>(9);
      $376 = $374 & $375;
      if ($376) {
       $$4478594 = $373;$$6494593 = $372;
      } else {
       $$4478$lcssa = $373;
       break;
      }
     }
    } else {
     $$4478$lcssa = $$3477;
    }
    $377 = (($$4478$lcssa) + 9)|0;
    _pad_299($0,48,$377,9,0);
   } else {
    $378 = ((($$9)) + 4|0);
    $spec$select557 = $$lcssa583 ? $$9507$lcssa : $378;
    $379 = ($$9>>>0)<($spec$select557>>>0);
    $380 = ($$3477|0)>(-1);
    $381 = $379 & $380;
    if ($381) {
     $382 = ((($8)) + 9|0);
     $383 = $4 & 8;
     $384 = ($383|0)==(0);
     $385 = $382;
     $386 = (0 - ($9))|0;
     $387 = ((($8)) + 8|0);
     $$5609 = $$3477;$$7495608 = $$9;
     while(1) {
      $388 = HEAP32[$$7495608>>2]|0;
      $389 = (_fmt_u($388,0,$382)|0);
      $390 = ($389|0)==($382|0);
      if ($390) {
       HEAP8[$387>>0] = 48;
       $$0 = $387;
      } else {
       $$0 = $389;
      }
      $391 = ($$7495608|0)==($$9|0);
      do {
       if ($391) {
        $395 = ((($$0)) + 1|0);
        _out_293($0,$$0,1);
        $396 = ($$5609|0)<(1);
        $or$cond559 = $384 & $396;
        if ($or$cond559) {
         $$2 = $395;
         break;
        }
        _out_293($0,29372,1);
        $$2 = $395;
       } else {
        $392 = ($$0>>>0)>($8>>>0);
        if (!($392)) {
         $$2 = $$0;
         break;
        }
        $scevgep707 = (($$0) + ($386)|0);
        $scevgep707708 = $scevgep707;
        _memset(($8|0),48,($scevgep707708|0))|0;
        $$1604 = $$0;
        while(1) {
         $393 = ((($$1604)) + -1|0);
         $394 = ($393>>>0)>($8>>>0);
         if ($394) {
          $$1604 = $393;
         } else {
          $$2 = $393;
          break;
         }
        }
       }
      } while(0);
      $397 = $$2;
      $398 = (($385) - ($397))|0;
      $399 = ($$5609|0)>($398|0);
      $400 = $399 ? $398 : $$5609;
      _out_293($0,$$2,$400);
      $401 = (($$5609) - ($398))|0;
      $402 = ((($$7495608)) + 4|0);
      $403 = ($402>>>0)<($spec$select557>>>0);
      $404 = ($401|0)>(-1);
      $405 = $403 & $404;
      if ($405) {
       $$5609 = $401;$$7495608 = $402;
      } else {
       $$5$lcssa = $401;
       break;
      }
     }
    } else {
     $$5$lcssa = $$3477;
    }
    $406 = (($$5$lcssa) + 18)|0;
    _pad_299($0,48,$406,18,0);
    $407 = $11;
    $408 = $$2515;
    $409 = (($407) - ($408))|0;
    _out_293($0,$$2515,$409);
   }
   $410 = $4 ^ 8192;
   _pad_299($0,32,$2,$339,$410);
   $$sink755 = $339;
  }
 } while(0);
 $411 = ($$sink755|0)<($2|0);
 $$560 = $411 ? $2 : $$sink755;
 STACKTOP = sp;return ($$560|0);
}
function ___DOUBLE_BITS($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = (___pthread_self_703()|0);
   $7 = ((($6)) + 188|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = $1 & -128;
    $12 = ($11|0)==(57216);
    if ($12) {
     $14 = $1&255;
     HEAP8[$0>>0] = $14;
     $$0 = 1;
     break;
    } else {
     $13 = (___errno_location()|0);
     HEAP32[$13>>2] = 84;
     $$0 = -1;
     break;
    }
   }
   $15 = ($1>>>0)<(2048);
   if ($15) {
    $16 = $1 >>> 6;
    $17 = $16 | 192;
    $18 = $17&255;
    $19 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $18;
    $20 = $1 & 63;
    $21 = $20 | 128;
    $22 = $21&255;
    HEAP8[$19>>0] = $22;
    $$0 = 2;
    break;
   }
   $23 = ($1>>>0)<(55296);
   $24 = $1 & -8192;
   $25 = ($24|0)==(57344);
   $or$cond = $23 | $25;
   if ($or$cond) {
    $26 = $1 >>> 12;
    $27 = $26 | 224;
    $28 = $27&255;
    $29 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $28;
    $30 = $1 >>> 6;
    $31 = $30 & 63;
    $32 = $31 | 128;
    $33 = $32&255;
    $34 = ((($0)) + 2|0);
    HEAP8[$29>>0] = $33;
    $35 = $1 & 63;
    $36 = $35 | 128;
    $37 = $36&255;
    HEAP8[$34>>0] = $37;
    $$0 = 3;
    break;
   }
   $38 = (($1) + -65536)|0;
   $39 = ($38>>>0)<(1048576);
   if ($39) {
    $40 = $1 >>> 18;
    $41 = $40 | 240;
    $42 = $41&255;
    $43 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $42;
    $44 = $1 >>> 12;
    $45 = $44 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    $48 = ((($0)) + 2|0);
    HEAP8[$43>>0] = $47;
    $49 = $1 >>> 6;
    $50 = $49 & 63;
    $51 = $50 | 128;
    $52 = $51&255;
    $53 = ((($0)) + 3|0);
    HEAP8[$48>>0] = $52;
    $54 = $1 & 63;
    $55 = $54 | 128;
    $56 = $55&255;
    HEAP8[$53>>0] = $56;
    $$0 = 4;
    break;
   } else {
    $57 = (___errno_location()|0);
    HEAP32[$57>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___pthread_self_703() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _pthread_self() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return (10544|0);
}
function ___pthread_self_912() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___strerror_l($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$012$lcssa = 0, $$01214 = 0, $$016 = 0, $$113 = 0, $$115 = 0, $$115$ph = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$016 = 0;
 while(1) {
  $2 = (29374 + ($$016)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 4;
   break;
  }
  $6 = (($$016) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$115$ph = 87;
   label = 5;
   break;
  } else {
   $$016 = $6;
  }
 }
 if ((label|0) == 4) {
  $8 = ($$016|0)==(0);
  if ($8) {
   $$012$lcssa = 29462;
  } else {
   $$115$ph = $$016;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $$01214 = 29462;$$115 = $$115$ph;
  while(1) {
   $$113 = $$01214;
   while(1) {
    $9 = HEAP8[$$113>>0]|0;
    $10 = ($9<<24>>24)==(0);
    $11 = ((($$113)) + 1|0);
    if ($10) {
     break;
    } else {
     $$113 = $11;
    }
   }
   $12 = (($$115) + -1)|0;
   $13 = ($12|0)==(0);
   if ($13) {
    $$012$lcssa = $11;
    break;
   } else {
    $$01214 = $11;$$115 = $12;
   }
  }
 }
 $14 = ((($1)) + 20|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = (___lctrans($$012$lcssa,$15)|0);
 return ($16|0);
}
function ___lctrans($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___lctrans_impl($0,$1)|0);
 return ($2|0);
}
function ___lctrans_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = HEAP32[$1>>2]|0;
  $4 = ((($1)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (___mo_lookup($3,$5,$0)|0);
  $$0 = $6;
 }
 $7 = ($$0|0)==(0|0);
 $8 = $7 ? $0 : $$0;
 return ($8|0);
}
function ___mo_lookup($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$090 = 0, $$094 = 0, $$191 = 0, $$195 = 0, $$4 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond102 = 0, $or$cond104 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = (($3) + 1794895138)|0;
 $5 = ((($0)) + 8|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (_swapc($6,$4)|0);
 $8 = ((($0)) + 12|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = (_swapc($9,$4)|0);
 $11 = ((($0)) + 16|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = (_swapc($12,$4)|0);
 $14 = $1 >>> 2;
 $15 = ($7>>>0)<($14>>>0);
 L1: do {
  if ($15) {
   $16 = $7 << 2;
   $17 = (($1) - ($16))|0;
   $18 = ($10>>>0)<($17>>>0);
   $19 = ($13>>>0)<($17>>>0);
   $or$cond = $18 & $19;
   if ($or$cond) {
    $20 = $13 | $10;
    $21 = $20 & 3;
    $22 = ($21|0)==(0);
    if ($22) {
     $23 = $10 >>> 2;
     $24 = $13 >>> 2;
     $$090 = 0;$$094 = $7;
     while(1) {
      $25 = $$094 >>> 1;
      $26 = (($$090) + ($25))|0;
      $27 = $26 << 1;
      $28 = (($27) + ($23))|0;
      $29 = (($0) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = (_swapc($30,$4)|0);
      $32 = (($28) + 1)|0;
      $33 = (($0) + ($32<<2)|0);
      $34 = HEAP32[$33>>2]|0;
      $35 = (_swapc($34,$4)|0);
      $36 = ($35>>>0)<($1>>>0);
      $37 = (($1) - ($35))|0;
      $38 = ($31>>>0)<($37>>>0);
      $or$cond102 = $36 & $38;
      if (!($or$cond102)) {
       $$4 = 0;
       break L1;
      }
      $39 = (($35) + ($31))|0;
      $40 = (($0) + ($39)|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = ($41<<24>>24)==(0);
      if (!($42)) {
       $$4 = 0;
       break L1;
      }
      $43 = (($0) + ($35)|0);
      $44 = (_strcmp($2,$43)|0);
      $45 = ($44|0)==(0);
      if ($45) {
       break;
      }
      $62 = ($$094|0)==(1);
      $63 = ($44|0)<(0);
      if ($62) {
       $$4 = 0;
       break L1;
      }
      $$191 = $63 ? $$090 : $26;
      $64 = (($$094) - ($25))|0;
      $$195 = $63 ? $25 : $64;
      $$090 = $$191;$$094 = $$195;
     }
     $46 = (($27) + ($24))|0;
     $47 = (($0) + ($46<<2)|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (_swapc($48,$4)|0);
     $50 = (($46) + 1)|0;
     $51 = (($0) + ($50<<2)|0);
     $52 = HEAP32[$51>>2]|0;
     $53 = (_swapc($52,$4)|0);
     $54 = ($53>>>0)<($1>>>0);
     $55 = (($1) - ($53))|0;
     $56 = ($49>>>0)<($55>>>0);
     $or$cond104 = $54 & $56;
     if ($or$cond104) {
      $57 = (($0) + ($53)|0);
      $58 = (($53) + ($49))|0;
      $59 = (($0) + ($58)|0);
      $60 = HEAP8[$59>>0]|0;
      $61 = ($60<<24>>24)==(0);
      $spec$select = $61 ? $57 : 0;
      $$4 = $spec$select;
     } else {
      $$4 = 0;
     }
    } else {
     $$4 = 0;
    }
   } else {
    $$4 = 0;
   }
  } else {
   $$4 = 0;
  }
 } while(0);
 return ($$4|0);
}
function _swapc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 $3 = (_llvm_bswap_i32(($0|0))|0);
 $spec$select = $2 ? $0 : $3;
 return ($spec$select|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$03846 = 0, $$042 = 0, $$1 = 0, $$139 = 0, $$141 = 0, $$143 = 0, $$pre = 0, $$pre48 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$1 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 127]($2,$0,$1)|0);
    $$1 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)<(0);
   $21 = ($1|0)==(0);
   $or$cond = $20 | $21;
   L10: do {
    if ($or$cond) {
     $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
    } else {
     $$03846 = $1;
     while(1) {
      $22 = (($$03846) + -1)|0;
      $24 = (($0) + ($22)|0);
      $25 = HEAP8[$24>>0]|0;
      $26 = ($25<<24>>24)==(10);
      if ($26) {
       break;
      }
      $23 = ($22|0)==(0);
      if ($23) {
       $$139 = 0;$$141 = $0;$$143 = $1;$32 = $14;
       break L10;
      } else {
       $$03846 = $22;
      }
     }
     $27 = ((($2)) + 36|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = (FUNCTION_TABLE_iiii[$28 & 127]($2,$0,$$03846)|0);
     $30 = ($29>>>0)<($$03846>>>0);
     if ($30) {
      $$1 = $29;
      break L5;
     }
     $31 = (($0) + ($$03846)|0);
     $$042 = (($1) - ($$03846))|0;
     $$pre48 = HEAP32[$9>>2]|0;
     $$139 = $$03846;$$141 = $31;$$143 = $$042;$32 = $$pre48;
    }
   } while(0);
   (_memcpy(($32|0),($$141|0),($$143|0))|0);
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$143)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$139) + ($$143))|0;
   $$1 = $35;
  }
 } while(0);
 return ($$1|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $spec$select = $8 ? $2 : $7;
 $$cast = $6;
 (_memcpy(($$cast|0),($1|0),($spec$select|0))|0);
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($spec$select)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$030 = 0, $$037 = 0, $$1 = 0, $$128 = 0, $$22934 = 0, $$235 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$030 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1 = $$0$lcssa;$$128 = $$025$lcssa;
   label = 10;
  } else {
   $$1 = $1;$$128 = $0;
   label = 10;
  }
 } while(0);
 if ((label|0) == 10) {
  $31 = HEAP8[$$1>>0]|0;
  HEAP8[$$128>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$030 = $$128;
  } else {
   $$22934 = $$128;$$235 = $$1;
   while(1) {
    $33 = ((($$235)) + 1|0);
    $34 = ((($$22934)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$030 = $34;
     break;
    } else {
     $$22934 = $34;$$235 = $33;
    }
   }
  }
 }
 return ($$030|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $4 = (_strlen($0)|0);
   $5 = (($0) + ($4)|0);
   $$0 = $5;
  } else {
   $6 = $0;
   $7 = $6 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$030$lcssa = $0;
   } else {
    $9 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($9<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01823 = 0, $$01925 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$$lcssa = 0;
   } else {
    $$01823 = $0;$$01925$in = $2;$$024 = $1;$9 = $4;
    while(1) {
     $$01925 = (($$01925$in) + -1)|0;
     $6 = HEAP8[$$024>>0]|0;
     $7 = ($6<<24>>24)!=(0);
     $8 = ($$01925|0)!=(0);
     $or$cond = $8 & $7;
     $10 = ($9<<24>>24)==($6<<24>>24);
     $or$cond21 = $10 & $or$cond;
     if (!($or$cond21)) {
      $$0$lcssa = $$024;$$lcssa = $9;
      break L3;
     }
     $11 = ((($$01823)) + 1|0);
     $12 = ((($$024)) + 1|0);
     $13 = HEAP8[$11>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0$lcssa = $12;$$lcssa = 0;
      break;
     } else {
      $$01823 = $11;$$01925$in = $$01925;$$024 = $12;$9 = $13;
     }
    }
   }
  } while(0);
  $15 = $$lcssa&255;
  $16 = HEAP8[$$0$lcssa>>0]|0;
  $17 = $16&255;
  $18 = (($15) - ($17))|0;
  $$020 = $18;
 }
 return ($$020|0);
}
function ___getopt_msg($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = HEAP32[2490]|0;
 $5 = (___lctrans_cur($1)|0);
 _flockfile($4);
 $6 = (_fputs($0,$4)|0);
 $7 = ($6|0)>(-1);
 if ($7) {
  $8 = (_strlen($5)|0);
  $9 = (_fwrite($5,$8,1,$4)|0);
  $10 = ($9|0)==(0);
  if (!($10)) {
   $11 = (_fwrite($2,1,$3,$4)|0);
   $12 = ($11|0)==($3|0);
   if ($12) {
    (_putc(10,$4)|0);
   }
  }
 }
 _funlockfile($4);
 return;
}
function ___lctrans_cur($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_569()|0);
 $2 = ((($1)) + 188|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($3)) + 20|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = (___lctrans_impl($0,$5)|0);
 return ($6|0);
}
function _flockfile($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_ftrylockfile($0)|0);
 $2 = ($1|0)==(0);
 if (!($2)) {
  $3 = ((($0)) + 76|0);
  $4 = ((($0)) + 80|0);
  while(1) {
   $5 = HEAP32[$3>>2]|0;
   $6 = ($5|0)==(0);
   if (!($6)) {
    ___wait(($3|0),($4|0),($5|0),1);
   }
   $7 = (_ftrylockfile($0)|0);
   $8 = ($7|0)==(0);
   if ($8) {
    break;
   }
  }
 }
 return;
}
function _fputs($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (_fwrite($0,1,$2,$1)|0);
 $4 = ($3|0)!=($2|0);
 $5 = $4 << 31 >> 31;
 return ($5|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $spec$select = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $10 = (___lockfile($3)|0);
  $phitmp = ($10|0)==(0);
  $11 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $12 = $11;
  } else {
   ___unlockfile($3);
   $12 = $11;
  }
 } else {
  $9 = (___fwritex($0,$4,$3)|0);
  $12 = $9;
 }
 $13 = ($12|0)==($4|0);
 if ($13) {
  $15 = $spec$select;
 } else {
  $14 = (($12>>>0) / ($1>>>0))&-1;
  $15 = $14;
 }
 return ($15|0);
}
function _putc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _funlockfile($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(1);
 if ($3) {
  ___unlist_locked_file($0);
  HEAP32[$1>>2] = 0;
  ___unlockfile($0);
 } else {
  $4 = (($2) + -1)|0;
  HEAP32[$1>>2] = $4;
 }
 return;
}
function ___unlist_locked_file($0) {
 $0 = $0|0;
 var $$pre = 0, $$sink = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if (!($3)) {
  $4 = ((($0)) + 116|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0|0);
  $7 = $5;
  $$pre = ((($0)) + 112|0);
  if (!($6)) {
   $8 = HEAP32[$$pre>>2]|0;
   $9 = ((($5)) + 112|0);
   HEAP32[$9>>2] = $8;
  }
  $10 = HEAP32[$$pre>>2]|0;
  $11 = ($10|0)==(0|0);
  if ($11) {
   $13 = (___pthread_self_345()|0);
   $14 = ((($13)) + 232|0);
   $$sink = $14;
  } else {
   $12 = ((($10)) + 116|0);
   $$sink = $12;
  }
  HEAP32[$$sink>>2] = $7;
 }
 return;
}
function ___pthread_self_345() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 127]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _ftrylockfile($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___pthread_self_345()|0);
 $2 = ((($1)) + 52|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 76|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==($3|0);
 if ($6) {
  $7 = ((($0)) + 68|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(2147483647);
  if ($9) {
   $$0 = -1;
  } else {
   $10 = (($8) + 1)|0;
   HEAP32[$7>>2] = $10;
   $$0 = 0;
  }
 } else {
  $11 = HEAP32[$4>>2]|0;
  $12 = ($11|0)<(0);
  if ($12) {
   HEAP32[$4>>2] = 0;
  }
  $13 = HEAP32[$4>>2]|0;
  $14 = ($13|0)==(0);
  if ($14) {
   _a_cas($4,$3);
   $15 = ((($0)) + 68|0);
   HEAP32[$15>>2] = 1;
   $16 = ((($0)) + 112|0);
   HEAP32[$16>>2] = 0;
   $17 = ((($1)) + 232|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = ((($0)) + 116|0);
   HEAP32[$19>>2] = $18;
   $20 = ($18|0)==(0|0);
   if (!($20)) {
    $21 = ((($18)) + 112|0);
    HEAP32[$21>>2] = $0;
   }
   HEAP32[$17>>2] = $0;
   $$0 = 0;
  } else {
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function _a_cas($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  HEAP32[$0>>2] = $1;
 }
 return;
}
function ___pthread_self_569() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _getopt($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$049 = 0, $$050 = 0, $$051 = 0, $$1 = 0, $$pre$phiZ2D = 0, $$pre52 = 0, $$pre53 = 0, $$pre54 = 0, $$pre56 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp + 4|0;
 $4 = sp;
 $5 = HEAP32[2456]|0;
 $6 = ($5|0)==(0);
 $7 = (0)!=(0);
 $or$cond = $6 | $7;
 if ($or$cond) {
  HEAP32[8041] = 0;
  HEAP32[2456] = 1;
  $8 = 1;
 } else {
  $8 = $5;
 }
 $9 = ($8|0)<($0|0);
 L4: do {
  if ($9) {
   $10 = (($1) + ($8<<2)|0);
   $11 = HEAP32[$10>>2]|0;
   $12 = ($11|0)==(0|0);
   $13 = $11;
   if ($12) {
    $$0 = -1;
   } else {
    $14 = HEAP8[$11>>0]|0;
    $15 = ($14<<24>>24)==(45);
    if (!($15)) {
     $16 = HEAP8[$2>>0]|0;
     $17 = ($16<<24>>24)==(45);
     if (!($17)) {
      $$0 = -1;
      break;
     }
     $18 = (($8) + 1)|0;
     HEAP32[2456] = $18;
     HEAP32[8042] = $13;
     $$0 = 1;
     break;
    }
    $19 = ((($11)) + 1|0);
    $20 = HEAP8[$19>>0]|0;
    switch ($20<<24>>24) {
    case 0:  {
     $$0 = -1;
     break L4;
     break;
    }
    case 45:  {
     $21 = ((($11)) + 2|0);
     $22 = HEAP8[$21>>0]|0;
     $23 = ($22<<24>>24)==(0);
     if ($23) {
      $24 = (($8) + 1)|0;
      HEAP32[2456] = $24;
      $$0 = -1;
      break L4;
     }
     break;
    }
    default: {
    }
    }
    $25 = HEAP32[8041]|0;
    $26 = ($25|0)==(0);
    if ($26) {
     HEAP32[8041] = 1;
     $$pre$phiZ2D = $19;
    } else {
     $$pre56 = (($11) + ($25)|0);
     $$pre$phiZ2D = $$pre56;
    }
    $27 = (_mbtowc($3,$$pre$phiZ2D,4)|0);
    $28 = ($27|0)<(0);
    if ($28) {
     HEAP32[$3>>2] = 65533;
     $$050 = 1;
    } else {
     $$050 = $27;
    }
    $29 = HEAP32[2456]|0;
    $30 = (($1) + ($29<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = HEAP32[8041]|0;
    $33 = (($31) + ($32)|0);
    $34 = (($32) + ($$050))|0;
    HEAP32[8041] = $34;
    $35 = (($31) + ($34)|0);
    $36 = HEAP8[$35>>0]|0;
    $37 = ($36<<24>>24)==(0);
    if ($37) {
     $38 = (($29) + 1)|0;
     HEAP32[2456] = $38;
     HEAP32[8041] = 0;
    }
    $39 = HEAP8[$2>>0]|0;
    switch ($39<<24>>24) {
    case 43: case 45:  {
     $40 = ((($2)) + 1|0);
     $$049 = $40;
     break;
    }
    default: {
     $$049 = $2;
    }
    }
    HEAP32[$4>>2] = 0;
    $$051 = 0;
    while(1) {
     $41 = (($$049) + ($$051)|0);
     $42 = (_mbtowc($4,$41,4)|0);
     $43 = ($42|0)>(1);
     $$ = $43 ? $42 : 1;
     $$1 = (($$) + ($$051))|0;
     $44 = ($42|0)==(0);
     $$pre52 = HEAP32[$4>>2]|0;
     $$pre53 = HEAP32[$3>>2]|0;
     $45 = ($$pre52|0)==($$pre53|0);
     if ($44) {
      label = 24;
      break;
     }
     if ($45) {
      $73 = $$pre52;
      break;
     } else {
      $$051 = $$1;
     }
    }
    if ((label|0) == 24) {
     if ($45) {
      $73 = $$pre53;
     } else {
      $46 = HEAP8[$$049>>0]|0;
      $47 = ($46<<24>>24)!=(58);
      $48 = (1)!=(0);
      $or$cond3 = $47 & $48;
      if (!($or$cond3)) {
       $$0 = 63;
       break;
      }
      $49 = HEAP32[$1>>2]|0;
      ___getopt_msg($49,31618,$33,$$050);
      $$0 = 63;
      break;
     }
    }
    $50 = (($$049) + ($$1)|0);
    $51 = HEAP8[$50>>0]|0;
    $52 = ($51<<24>>24)==(58);
    if ($52) {
     $53 = (($$1) + 1)|0;
     $54 = (($$049) + ($53)|0);
     $55 = HEAP8[$54>>0]|0;
     $56 = ($55<<24>>24)==(58);
     do {
      if ($56) {
       HEAP32[8042] = 0;
       $$pre54 = HEAP8[$54>>0]|0;
       $64 = ($$pre54<<24>>24)!=(58);
       $65 = HEAP32[8041]|0;
       $66 = ($65|0)!=(0);
       $or$cond5 = $64 | $66;
       if ($or$cond5) {
        $72 = $65;
       } else {
        $$0 = $73;
        break L4;
       }
      } else {
       $57 = HEAP32[2456]|0;
       $58 = ($57|0)<($0|0);
       if ($58) {
        $59 = HEAP32[8041]|0;
        $72 = $59;
        break;
       }
       $60 = HEAP8[$$049>>0]|0;
       $61 = ($60<<24>>24)==(58);
       if ($61) {
        $$0 = 58;
        break L4;
       }
       $62 = (1)==(0);
       if ($62) {
        $$0 = 63;
        break L4;
       }
       $63 = HEAP32[$1>>2]|0;
       ___getopt_msg($63,31586,$33,$$050);
       $$0 = 63;
       break L4;
      }
     } while(0);
     $67 = HEAP32[2456]|0;
     $68 = (($67) + 1)|0;
     HEAP32[2456] = $68;
     $69 = (($1) + ($67<<2)|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = (($70) + ($72)|0);
     HEAP32[8042] = $71;
     HEAP32[8041] = 0;
     $$0 = $73;
    } else {
     $$0 = $73;
    }
   }
  } else {
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _mbtowc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1|0)==(0|0);
 L1: do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ($2|0)==(0);
   do {
    if (!($5)) {
     $6 = ($0|0)==(0|0);
     $spec$select = $6 ? $3 : $0;
     $7 = HEAP8[$1>>0]|0;
     $8 = ($7<<24>>24)>(-1);
     if ($8) {
      $9 = $7&255;
      HEAP32[$spec$select>>2] = $9;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break L1;
     }
     $12 = (___pthread_self_688()|0);
     $13 = ((($12)) + 188|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)==(0|0);
     $17 = HEAP8[$1>>0]|0;
     if ($16) {
      $18 = $17 << 24 >> 24;
      $19 = $18 & 57343;
      HEAP32[$spec$select>>2] = $19;
      $$0 = 1;
      break L1;
     }
     $20 = $17&255;
     $21 = (($20) + -194)|0;
     $22 = ($21>>>0)>(50);
     if (!($22)) {
      $23 = ((($1)) + 1|0);
      $24 = (10216 + ($21<<2)|0);
      $25 = HEAP32[$24>>2]|0;
      $26 = ($2>>>0)<(4);
      if ($26) {
       $27 = ($2*6)|0;
       $28 = (($27) + -6)|0;
       $29 = -2147483648 >>> $28;
       $30 = $25 & $29;
       $31 = ($30|0)==(0);
       if (!($31)) {
        break;
       }
      }
      $32 = HEAP8[$23>>0]|0;
      $33 = $32&255;
      $34 = $33 >>> 3;
      $35 = (($34) + -16)|0;
      $36 = $25 >> 26;
      $37 = (($34) + ($36))|0;
      $38 = $35 | $37;
      $39 = ($38>>>0)>(7);
      if (!($39)) {
       $40 = $25 << 6;
       $41 = (($33) + -128)|0;
       $42 = $41 | $40;
       $43 = ($42|0)<(0);
       if (!($43)) {
        HEAP32[$spec$select>>2] = $42;
        $$0 = 2;
        break L1;
       }
       $44 = ((($1)) + 2|0);
       $45 = HEAP8[$44>>0]|0;
       $46 = $45&255;
       $47 = (($46) + -128)|0;
       $48 = ($47>>>0)>(63);
       if (!($48)) {
        $49 = $42 << 6;
        $50 = $47 | $49;
        $51 = ($50|0)<(0);
        if (!($51)) {
         HEAP32[$spec$select>>2] = $50;
         $$0 = 3;
         break L1;
        }
        $52 = ((($1)) + 3|0);
        $53 = HEAP8[$52>>0]|0;
        $54 = $53&255;
        $55 = (($54) + -128)|0;
        $56 = ($55>>>0)>(63);
        if (!($56)) {
         $57 = $50 << 6;
         $58 = $55 | $57;
         HEAP32[$spec$select>>2] = $58;
         $$0 = 4;
         break L1;
        }
       }
      }
     }
    }
   } while(0);
   $59 = (___errno_location()|0);
   HEAP32[$59>>2] = 84;
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___pthread_self_688() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_pthread_self()|0);
 return ($0|0);
}
function _strrchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($2) + 1)|0;
 $4 = (___memrchr($0,$1,$3)|0);
 return ($4|0);
}
function ___memrchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$in = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$0 = 0;
  } else {
   $4 = $1&255;
   $$in = $2;
   while(1) {
    $5 = (($$in) + -1)|0;
    $7 = (($0) + ($5)|0);
    $8 = HEAP8[$7>>0]|0;
    $9 = ($8<<24>>24)==($4<<24>>24);
    if ($9) {
     break;
    }
    $6 = ($5|0)==(0);
    if ($6) {
     $$0 = 0;
     break L1;
    } else {
     $$in = $5;
    }
   }
   $10 = (($0) + ($5)|0);
   $$0 = $10;
  }
 } while(0);
 return ($$0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (_strchr(31266,$3)|0);
 $5 = ($4|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (___fmodeflags($1)|0);
  $8 = $0;
  $9 = $7 | 32768;
  HEAP32[$vararg_buffer>>2] = $8;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $9;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $10 = (___syscall5(5,($vararg_buffer|0))|0);
  $11 = (___syscall_ret($10)|0);
  $12 = ($11|0)<(0);
  if ($12) {
   $$0 = 0;
  } else {
   $13 = $7 & 524288;
   $14 = ($13|0)==(0);
   if (!($14)) {
    HEAP32[$vararg_buffer3>>2] = $11;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 2;
    $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
    HEAP32[$vararg_ptr7>>2] = 1;
    (___syscall221(221,($vararg_buffer3|0))|0);
   }
   $15 = (___fdopen($11,$1)|0);
   $16 = ($15|0)==(0|0);
   if ($16) {
    HEAP32[$vararg_buffer8>>2] = $11;
    (___syscall6(6,($vararg_buffer8|0))|0);
    $$0 = 0;
   } else {
    $$0 = $15;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $spec$select = 0, $spec$select13 = 0, $spec$select14 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $4 = ($3<<24>>24)!=(114);
 $$ = $4&1;
 $$0 = $2 ? $$ : 2;
 $5 = (_strchr($0,120)|0);
 $6 = ($5|0)==(0|0);
 $7 = $$0 | 128;
 $spec$select = $6 ? $$0 : $7;
 $8 = (_strchr($0,101)|0);
 $9 = ($8|0)==(0|0);
 $10 = $spec$select | 524288;
 $$2 = $9 ? $spec$select : $10;
 $11 = ($3<<24>>24)==(114);
 $12 = $$2 | 64;
 $spec$select13 = $11 ? $$2 : $12;
 $13 = ($3<<24>>24)==(119);
 $14 = $spec$select13 | 512;
 $$4 = $13 ? $14 : $spec$select13;
 $15 = ($3<<24>>24)==(97);
 $16 = $$4 | 1024;
 $spec$select14 = $15 ? $16 : $$4;
 return ($spec$select14|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 56|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $5 = (_strchr(31266,$4)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___errno_location()|0);
  HEAP32[$7>>2] = 22;
  $$0 = 0;
 } else {
  $8 = (_malloc(1156)|0);
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = 0;
  } else {
   (_memset(($8|0),0,124)|0);
   $10 = (_strchr($1,43)|0);
   $11 = ($10|0)==(0|0);
   if ($11) {
    $12 = HEAP8[$1>>0]|0;
    $13 = ($12<<24>>24)==(114);
    $14 = $13 ? 8 : 4;
    HEAP32[$8>>2] = $14;
   }
   $15 = (_strchr($1,101)|0);
   $16 = ($15|0)==(0|0);
   if (!($16)) {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
   }
   $17 = HEAP8[$1>>0]|0;
   $18 = ($17<<24>>24)==(97);
   if ($18) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $19 = (___syscall221(221,($vararg_buffer3|0))|0);
    $20 = $19 & 1024;
    $21 = ($20|0)==(0);
    if ($21) {
     $22 = $19 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $22;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $23 = HEAP32[$8>>2]|0;
    $24 = $23 | 128;
    HEAP32[$8>>2] = $24;
    $31 = $24;
   } else {
    $$pre = HEAP32[$8>>2]|0;
    $31 = $$pre;
   }
   $25 = ((($8)) + 60|0);
   HEAP32[$25>>2] = $0;
   $26 = ((($8)) + 132|0);
   $27 = ((($8)) + 44|0);
   HEAP32[$27>>2] = $26;
   $28 = ((($8)) + 48|0);
   HEAP32[$28>>2] = 1024;
   $29 = ((($8)) + 75|0);
   HEAP8[$29>>0] = -1;
   $30 = $31 & 8;
   $32 = ($30|0)==(0);
   if ($32) {
    $33 = $2;
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21523;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $33;
    $34 = (___syscall54(54,($vararg_buffer12|0))|0);
    $35 = ($34|0)==(0);
    if ($35) {
     HEAP8[$29>>0] = 10;
    }
   }
   $36 = ((($8)) + 32|0);
   HEAP32[$36>>2] = 8;
   $37 = ((($8)) + 36|0);
   HEAP32[$37>>2] = 7;
   $38 = ((($8)) + 40|0);
   HEAP32[$38>>2] = 6;
   $39 = ((($8)) + 12|0);
   HEAP32[$39>>2] = 4;
   $40 = HEAP32[(32180)>>2]|0;
   $41 = ($40|0)==(0);
   if ($41) {
    $42 = ((($8)) + 76|0);
    HEAP32[$42>>2] = -1;
   }
   $43 = (___ofl_add($8)|0);
   $$0 = $43;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___ofl_add($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___ofl_lock()|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 56|0);
 HEAP32[$3>>2] = $2;
 $4 = HEAP32[$1>>2]|0;
 $5 = ($4|0)==(0|0);
 if (!($5)) {
  $6 = ((($4)) + 52|0);
  HEAP32[$6>>2] = $0;
 }
 HEAP32[$1>>2] = $0;
 ___ofl_unlock();
 return ($0|0);
}
function ___ofl_lock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___lock((32240|0));
 return (32248|0);
}
function ___ofl_unlock() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 ___unlock((32240|0));
 return;
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $29 = $4;
 } else {
  $29 = 0;
 }
 ___unlist_locked_file($0);
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 1;
 $7 = ($6|0)!=(0);
 if (!($7)) {
  $8 = (___ofl_lock()|0);
  $9 = ((($0)) + 52|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)==(0|0);
  $12 = $10;
  $$pre = ((($0)) + 56|0);
  if (!($11)) {
   $13 = HEAP32[$$pre>>2]|0;
   $14 = ((($10)) + 56|0);
   HEAP32[$14>>2] = $13;
  }
  $15 = HEAP32[$$pre>>2]|0;
  $16 = ($15|0)==(0|0);
  $17 = $15;
  if (!($16)) {
   $18 = ((($15)) + 52|0);
   HEAP32[$18>>2] = $12;
  }
  $19 = HEAP32[$8>>2]|0;
  $20 = ($19|0)==($0|0);
  if ($20) {
   HEAP32[$8>>2] = $17;
  }
  ___ofl_unlock();
 }
 $21 = (_fflush($0)|0);
 $22 = ((($0)) + 12|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = (FUNCTION_TABLE_ii[$23 & 63]($0)|0);
 $25 = $24 | $21;
 $26 = ((($0)) + 92|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)==(0|0);
 if (!($28)) {
  _free($27);
 }
 if ($7) {
  $30 = ($29|0)==(0);
  if (!($30)) {
   ___unlockfile($0);
  }
 } else {
  _free($0);
 }
 return ($25|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[2489]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $29 = 0;
   } else {
    $10 = HEAP32[2489]|0;
    $11 = (_fflush($10)|0);
    $29 = $11;
   }
   $12 = (___ofl_lock()|0);
   $$02325 = HEAP32[$12>>2]|0;
   $13 = ($$02325|0)==(0|0);
   if ($13) {
    $$024$lcssa = $29;
   } else {
    $$02327 = $$02325;$$02426 = $29;
    while(1) {
     $14 = ((($$02327)) + 76|0);
     $15 = HEAP32[$14>>2]|0;
     $16 = ($15|0)>(-1);
     if ($16) {
      $17 = (___lockfile($$02327)|0);
      $25 = $17;
     } else {
      $25 = 0;
     }
     $18 = ((($$02327)) + 20|0);
     $19 = HEAP32[$18>>2]|0;
     $20 = ((($$02327)) + 28|0);
     $21 = HEAP32[$20>>2]|0;
     $22 = ($19>>>0)>($21>>>0);
     if ($22) {
      $23 = (___fflush_unlocked($$02327)|0);
      $24 = $23 | $$02426;
      $$1 = $24;
     } else {
      $$1 = $$02426;
     }
     $26 = ($25|0)==(0);
     if (!($26)) {
      ___unlockfile($$02327);
     }
     $27 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$27>>2]|0;
     $28 = ($$023|0)==(0|0);
     if ($28) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___ofl_unlock();
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 127]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = $11;
   $16 = $13;
   $17 = (($15) - ($16))|0;
   $18 = ((($0)) + 40|0);
   $19 = HEAP32[$18>>2]|0;
   (FUNCTION_TABLE_iiii[$19 & 127]($0,$17,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $narrow = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $narrow = $1 | $3;
 $4 = $narrow&1;
 return ($4|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = $6;
  $12 = (($11) + ($1)|0);
  $13 = ((($0)) + 100|0);
  HEAP32[$13>>2] = $12;
 } else {
  $14 = ((($0)) + 100|0);
  HEAP32[$14>>2] = $4;
 }
 return;
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($11) {
    $12 = $$pre;
    $42 = $12;
    label = 9;
   } else {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($$pre) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $$pre;
    if ($20) {
     $42 = $21;
     label = 9;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $24 = ((($0)) + 100|0);
     HEAP32[$24>>2] = $23;
     $26 = $21;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($0)) + 100|0);
    HEAP32[$25>>2] = $$pre;
    $26 = $42;
   }
   $27 = ($26|0)==(0|0);
   $$phi$trans$insert28 = ((($0)) + 4|0);
   if ($27) {
    $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
    $37 = $$pre29;
   } else {
    $28 = HEAP32[$$phi$trans$insert28>>2]|0;
    $29 = $26;
    $30 = ((($0)) + 108|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($29) + 1)|0;
    $33 = (($32) - ($28))|0;
    $34 = (($33) + ($31))|0;
    HEAP32[$30>>2] = $34;
    $35 = $28;
    $37 = $35;
   }
   $36 = ((($37)) + -1|0);
   $38 = HEAP8[$36>>0]|0;
   $39 = $38&255;
   $40 = ($7|0)==($39|0);
   if ($40) {
    $$0 = $7;
   } else {
    $41 = $7&255;
    HEAP8[$36>>0] = $41;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154215 = 0, $$0157 = 0, $$0159 = 0, $$1155184 = 0, $$1158 = 0, $$1160 = 0, $$1160170 = 0, $$1165 = 0, $$1165168 = 0, $$1165169 = 0, $$2156202 = 0, $$3162208 = 0, $$4163$lcssa = 0, $$6$lcssa = 0, $$7190 = 0, $$8 = 0, $$pre$phi237Z2D = 0, $$pre$phi239Z2D = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0;
 var $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0;
 var $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0;
 var $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0;
 var $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0;
 var $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond179 = 0, $or$cond5 = 0, $or$cond7 = 0, $spec$select166 = 0, $spec$select167 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $6 = (___errno_location()|0);
   HEAP32[$6>>2] = 22;
   $291 = 0;$292 = 0;
  } else {
   $7 = ((($0)) + 4|0);
   $8 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$7>>2]|0;
    $10 = HEAP32[$8>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$7>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $19 = ($16|0)==(45);
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$7>>2]|0;
     $22 = HEAP32[$8>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$7>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$7>>2]|0;
     $33 = HEAP32[$8>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$7>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160170 = $40;$$1165168 = 8;
       label = 47;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$7>>2]|0;
     $43 = HEAP32[$8>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$7>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((31284) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$8>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       $55 = HEAP32[$7>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$7>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $291 = 0;$292 = 0;
       break L1;
      }
      if ($54) {
       $291 = 0;$292 = 0;
       break L1;
      }
      $58 = HEAP32[$7>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$7>>2] = $59;
      $291 = 0;$292 = 0;
      break L1;
     } else {
      $$1160170 = $50;$$1165168 = 16;
      label = 47;
     }
    } else {
     $spec$select166 = $28 ? 10 : $1;
     $60 = ((31284) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($spec$select166>>>0)>($62>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $spec$select166;
      label = 32;
     } else {
      $64 = HEAP32[$8>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$7>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$7>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $291 = 0;$292 = 0;
      break L1;
     }
    }
   } while(0);
   L43: do {
    if ((label|0) == 32) {
     $69 = ($$1165|0)==(10);
     if ($69) {
      $70 = (($$1160) + -48)|0;
      $71 = ($70>>>0)<(10);
      if ($71) {
       $$0154215 = 0;$74 = $70;
       while(1) {
        $72 = ($$0154215*10)|0;
        $73 = (($72) + ($74))|0;
        $75 = HEAP32[$7>>2]|0;
        $76 = HEAP32[$8>>2]|0;
        $77 = ($75>>>0)<($76>>>0);
        if ($77) {
         $78 = ((($75)) + 1|0);
         HEAP32[$7>>2] = $78;
         $79 = HEAP8[$75>>0]|0;
         $80 = $79&255;
         $83 = $80;
        } else {
         $81 = (___shgetc($0)|0);
         $83 = $81;
        }
        $82 = (($83) + -48)|0;
        $84 = ($82>>>0)<(10);
        $85 = ($73>>>0)<(429496729);
        $86 = $84 & $85;
        if ($86) {
         $$0154215 = $73;$74 = $82;
        } else {
         break;
        }
       }
       $87 = ($82>>>0)<(10);
       if ($87) {
        $$3162208 = $83;$88 = $73;$89 = 0;$92 = $82;
        while(1) {
         $90 = (___muldi3(($88|0),($89|0),10,0)|0);
         $91 = tempRet0;
         $93 = ($92|0)<(0);
         $94 = $93 << 31 >> 31;
         $95 = $92 ^ -1;
         $96 = $94 ^ -1;
         $97 = ($91>>>0)>($96>>>0);
         $98 = ($90>>>0)>($95>>>0);
         $99 = ($91|0)==($96|0);
         $100 = $99 & $98;
         $101 = $97 | $100;
         if ($101) {
          $$1165169 = 10;$$8 = $$3162208;$293 = $88;$294 = $89;
          label = 76;
          break L43;
         }
         $102 = (_i64Add(($90|0),($91|0),($92|0),($94|0))|0);
         $103 = tempRet0;
         $104 = HEAP32[$7>>2]|0;
         $105 = HEAP32[$8>>2]|0;
         $106 = ($104>>>0)<($105>>>0);
         if ($106) {
          $107 = ((($104)) + 1|0);
          HEAP32[$7>>2] = $107;
          $108 = HEAP8[$104>>0]|0;
          $109 = $108&255;
          $112 = $109;
         } else {
          $110 = (___shgetc($0)|0);
          $112 = $110;
         }
         $111 = (($112) + -48)|0;
         $113 = ($111>>>0)<(10);
         $114 = ($103>>>0)<(429496729);
         $115 = ($102>>>0)<(2576980378);
         $116 = ($103|0)==(429496729);
         $117 = $116 & $115;
         $118 = $114 | $117;
         $or$cond7 = $113 & $118;
         if ($or$cond7) {
          $$3162208 = $112;$88 = $102;$89 = $103;$92 = $111;
         } else {
          break;
         }
        }
        $119 = ($111>>>0)>(9);
        if ($119) {
         $$1158 = $$0157;$264 = $103;$266 = $102;
        } else {
         $$1165169 = 10;$$8 = $112;$293 = $102;$294 = $103;
         label = 76;
        }
       } else {
        $$1158 = $$0157;$264 = 0;$266 = $73;
       }
      } else {
       $$1158 = $$0157;$264 = 0;$266 = 0;
      }
     } else {
      $$1160170 = $$1160;$$1165168 = $$1165;
      label = 47;
     }
    }
   } while(0);
   L63: do {
    if ((label|0) == 47) {
     $120 = (($$1165168) + -1)|0;
     $121 = $120 & $$1165168;
     $122 = ($121|0)==(0);
     if ($122) {
      $123 = ($$1165168*23)|0;
      $124 = $123 >>> 5;
      $125 = $124 & 7;
      $126 = (31540 + ($125)|0);
      $127 = HEAP8[$126>>0]|0;
      $128 = $127 << 24 >> 24;
      $129 = ((31284) + ($$1160170)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130&255;
      $132 = ($$1165168>>>0)>($131>>>0);
      if ($132) {
       $$1155184 = 0;$135 = $131;
       while(1) {
        $133 = $$1155184 << $128;
        $134 = $135 | $133;
        $136 = HEAP32[$7>>2]|0;
        $137 = HEAP32[$8>>2]|0;
        $138 = ($136>>>0)<($137>>>0);
        if ($138) {
         $139 = ((($136)) + 1|0);
         HEAP32[$7>>2] = $139;
         $140 = HEAP8[$136>>0]|0;
         $141 = $140&255;
         $144 = $141;
        } else {
         $142 = (___shgetc($0)|0);
         $144 = $142;
        }
        $143 = ((31284) + ($144)|0);
        $145 = HEAP8[$143>>0]|0;
        $146 = $145&255;
        $147 = ($$1165168>>>0)>($146>>>0);
        $148 = ($134>>>0)<(134217728);
        $149 = $148 & $147;
        if ($149) {
         $$1155184 = $134;$135 = $146;
        } else {
         break;
        }
       }
       $$4163$lcssa = $144;$$pre$phi237Z2D = $146;$154 = 0;$156 = $134;$295 = $145;
      } else {
       $$4163$lcssa = $$1160170;$$pre$phi237Z2D = $131;$154 = 0;$156 = 0;$295 = $130;
      }
      $150 = (_bitshift64Lshr(-1,-1,($128|0))|0);
      $151 = tempRet0;
      $152 = ($$1165168>>>0)<=($$pre$phi237Z2D>>>0);
      $153 = ($151>>>0)<($154>>>0);
      $155 = ($150>>>0)<($156>>>0);
      $157 = ($151|0)==($154|0);
      $158 = $157 & $155;
      $159 = $153 | $158;
      $or$cond179 = $152 | $159;
      if ($or$cond179) {
       $$1165169 = $$1165168;$$8 = $$4163$lcssa;$293 = $156;$294 = $154;
       label = 76;
       break;
      }
      $160 = $156;$161 = $154;$165 = $295;
      while(1) {
       $162 = (_bitshift64Shl(($160|0),($161|0),($128|0))|0);
       $163 = tempRet0;
       $164 = $165&255;
       $166 = $162 | $164;
       $167 = HEAP32[$7>>2]|0;
       $168 = HEAP32[$8>>2]|0;
       $169 = ($167>>>0)<($168>>>0);
       if ($169) {
        $170 = ((($167)) + 1|0);
        HEAP32[$7>>2] = $170;
        $171 = HEAP8[$167>>0]|0;
        $172 = $171&255;
        $175 = $172;
       } else {
        $173 = (___shgetc($0)|0);
        $175 = $173;
       }
       $174 = ((31284) + ($175)|0);
       $176 = HEAP8[$174>>0]|0;
       $177 = $176&255;
       $178 = ($$1165168>>>0)<=($177>>>0);
       $179 = ($163>>>0)>($151>>>0);
       $180 = ($166>>>0)>($150>>>0);
       $181 = ($163|0)==($151|0);
       $182 = $181 & $180;
       $183 = $179 | $182;
       $or$cond = $178 | $183;
       if ($or$cond) {
        $$1165169 = $$1165168;$$8 = $175;$293 = $166;$294 = $163;
        label = 76;
        break L63;
       } else {
        $160 = $166;$161 = $163;$165 = $176;
       }
      }
     }
     $184 = ((31284) + ($$1160170)|0);
     $185 = HEAP8[$184>>0]|0;
     $186 = $185&255;
     $187 = ($$1165168>>>0)>($186>>>0);
     if ($187) {
      $$2156202 = 0;$190 = $186;
      while(1) {
       $188 = Math_imul($$2156202, $$1165168)|0;
       $189 = (($190) + ($188))|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = HEAP32[$8>>2]|0;
       $193 = ($191>>>0)<($192>>>0);
       if ($193) {
        $194 = ((($191)) + 1|0);
        HEAP32[$7>>2] = $194;
        $195 = HEAP8[$191>>0]|0;
        $196 = $195&255;
        $199 = $196;
       } else {
        $197 = (___shgetc($0)|0);
        $199 = $197;
       }
       $198 = ((31284) + ($199)|0);
       $200 = HEAP8[$198>>0]|0;
       $201 = $200&255;
       $202 = ($$1165168>>>0)>($201>>>0);
       $203 = ($189>>>0)<(119304647);
       $204 = $203 & $202;
       if ($204) {
        $$2156202 = $189;$190 = $201;
       } else {
        break;
       }
      }
      $$6$lcssa = $199;$$pre$phi239Z2D = $201;$296 = $200;$297 = $189;$298 = 0;
     } else {
      $$6$lcssa = $$1160170;$$pre$phi239Z2D = $186;$296 = $185;$297 = 0;$298 = 0;
     }
     $205 = ($$1165168>>>0)>($$pre$phi239Z2D>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = tempRet0;
      $$7190 = $$6$lcssa;$208 = $298;$210 = $297;$218 = $296;
      while(1) {
       $209 = ($208>>>0)>($207>>>0);
       $211 = ($210>>>0)>($206>>>0);
       $212 = ($208|0)==($207|0);
       $213 = $212 & $211;
       $214 = $209 | $213;
       if ($214) {
        $$1165169 = $$1165168;$$8 = $$7190;$293 = $210;$294 = $208;
        label = 76;
        break L63;
       }
       $215 = (___muldi3(($210|0),($208|0),($$1165168|0),0)|0);
       $216 = tempRet0;
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165169 = $$1165168;$$8 = $$7190;$293 = $210;$294 = $208;
        label = 76;
        break L63;
       }
       $225 = (_i64Add(($215|0),($216|0),($217|0),0)|0);
       $226 = tempRet0;
       $227 = HEAP32[$7>>2]|0;
       $228 = HEAP32[$8>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$7>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $235 = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $235 = $233;
       }
       $234 = ((31284) + ($235)|0);
       $236 = HEAP8[$234>>0]|0;
       $237 = $236&255;
       $238 = ($$1165168>>>0)>($237>>>0);
       if ($238) {
        $$7190 = $235;$208 = $226;$210 = $225;$218 = $236;
       } else {
        $$1165169 = $$1165168;$$8 = $235;$293 = $225;$294 = $226;
        label = 76;
        break;
       }
      }
     } else {
      $$1165169 = $$1165168;$$8 = $$6$lcssa;$293 = $297;$294 = $298;
      label = 76;
     }
    }
   } while(0);
   if ((label|0) == 76) {
    $239 = ((31284) + ($$8)|0);
    $240 = HEAP8[$239>>0]|0;
    $241 = $240&255;
    $242 = ($$1165169>>>0)>($241>>>0);
    if ($242) {
     while(1) {
      $243 = HEAP32[$7>>2]|0;
      $244 = HEAP32[$8>>2]|0;
      $245 = ($243>>>0)<($244>>>0);
      if ($245) {
       $246 = ((($243)) + 1|0);
       HEAP32[$7>>2] = $246;
       $247 = HEAP8[$243>>0]|0;
       $248 = $247&255;
       $251 = $248;
      } else {
       $249 = (___shgetc($0)|0);
       $251 = $249;
      }
      $250 = ((31284) + ($251)|0);
      $252 = HEAP8[$250>>0]|0;
      $253 = $252&255;
      $254 = ($$1165169>>>0)>($253>>>0);
      if (!($254)) {
       break;
      }
     }
     $255 = (___errno_location()|0);
     HEAP32[$255>>2] = 34;
     $256 = $3 & 1;
     $257 = ($256|0)==(0);
     $258 = (0)==(0);
     $259 = $257 & $258;
     $spec$select167 = $259 ? $$0157 : 0;
     $$1158 = $spec$select167;$264 = $4;$266 = $3;
    } else {
     $$1158 = $$0157;$264 = $294;$266 = $293;
    }
   }
   $260 = HEAP32[$8>>2]|0;
   $261 = ($260|0)==(0|0);
   if (!($261)) {
    $262 = HEAP32[$7>>2]|0;
    $263 = ((($262)) + -1|0);
    HEAP32[$7>>2] = $263;
   }
   $265 = ($264>>>0)<($4>>>0);
   $267 = ($266>>>0)<($3>>>0);
   $268 = ($264|0)==($4|0);
   $269 = $268 & $267;
   $270 = $265 | $269;
   if (!($270)) {
    $271 = $3 & 1;
    $272 = ($271|0)!=(0);
    $273 = (0)!=(0);
    $274 = $272 | $273;
    $275 = ($$1158|0)!=(0);
    $or$cond12 = $274 | $275;
    if (!($or$cond12)) {
     $276 = (___errno_location()|0);
     HEAP32[$276>>2] = 34;
     $277 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $278 = tempRet0;
     $291 = $278;$292 = $277;
     break;
    }
    $279 = ($264>>>0)>($4>>>0);
    $280 = ($266>>>0)>($3>>>0);
    $281 = ($264|0)==($4|0);
    $282 = $281 & $280;
    $283 = $279 | $282;
    if ($283) {
     $284 = (___errno_location()|0);
     HEAP32[$284>>2] = 34;
     $291 = $4;$292 = $3;
     break;
    }
   }
   $285 = ($$1158|0)<(0);
   $286 = $285 << 31 >> 31;
   $287 = $266 ^ $$1158;
   $288 = $264 ^ $286;
   $289 = (_i64Subtract(($287|0),($288|0),($$1158|0),($286|0))|0);
   $290 = tempRet0;
   $291 = $290;$292 = $289;
  }
 } while(0);
 tempRet0 = ($291);
 return ($292|0);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0102 = 0, $$0103 = 0, $$0104122 = 0, $$0110 = 0, $$0111 = 0.0, $$1$lcssa = 0, $$1105118 = 0, $$1123 = 0, $$2 = 0, $$2106120 = 0, $$3107 = 0, $$3121 = 0, $$4 = 0, $$4108 = 0, $$5 = 0, $$6 = 0, $$in = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond124 = 0, $or$cond5 = 0, $or$cond7 = 0, $trunc = 0, $trunc$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 switch ($1|0) {
 case 0:  {
  $$0102 = -149;$$0103 = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0102 = -1074;$$0103 = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0102 = -1074;$$0103 = 53;
  label = 4;
  break;
 }
 default: {
  $$0111 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $3 = ((($0)) + 4|0);
   $4 = ((($0)) + 100|0);
   while(1) {
    $5 = HEAP32[$3>>2]|0;
    $6 = HEAP32[$4>>2]|0;
    $7 = ($5>>>0)<($6>>>0);
    if ($7) {
     $8 = ((($5)) + 1|0);
     HEAP32[$3>>2] = $8;
     $9 = HEAP8[$5>>0]|0;
     $10 = $9&255;
     $12 = $10;
    } else {
     $11 = (___shgetc($0)|0);
     $12 = $11;
    }
    $13 = (_isspace($12)|0);
    $14 = ($13|0)==(0);
    if ($14) {
     break;
    }
   }
   L13: do {
    switch ($12|0) {
    case 43: case 45:  {
     $15 = ($12|0)==(45);
     $16 = $15&1;
     $17 = $16 << 1;
     $18 = (1 - ($17))|0;
     $19 = HEAP32[$3>>2]|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = ($19>>>0)<($20>>>0);
     if ($21) {
      $22 = ((($19)) + 1|0);
      HEAP32[$3>>2] = $22;
      $23 = HEAP8[$19>>0]|0;
      $24 = $23&255;
      $$0 = $24;$$0110 = $18;
      break L13;
     } else {
      $25 = (___shgetc($0)|0);
      $$0 = $25;$$0110 = $18;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $12;$$0110 = 1;
    }
    }
   } while(0);
   $$0104122 = 0;$$1123 = $$0;
   while(1) {
    $26 = $$1123 | 32;
    $27 = (31270 + ($$0104122)|0);
    $28 = HEAP8[$27>>0]|0;
    $29 = $28 << 24 >> 24;
    $30 = ($26|0)==($29|0);
    if (!($30)) {
     $$1$lcssa = $$1123;$trunc = $$0104122;
     break;
    }
    $31 = ($$0104122>>>0)<(7);
    do {
     if ($31) {
      $32 = HEAP32[$3>>2]|0;
      $33 = HEAP32[$4>>2]|0;
      $34 = ($32>>>0)<($33>>>0);
      if ($34) {
       $35 = ((($32)) + 1|0);
       HEAP32[$3>>2] = $35;
       $36 = HEAP8[$32>>0]|0;
       $37 = $36&255;
       $$2 = $37;
       break;
      } else {
       $38 = (___shgetc($0)|0);
       $$2 = $38;
       break;
      }
     } else {
      $$2 = $$1123;
     }
    } while(0);
    $39 = (($$0104122) + 1)|0;
    $40 = ($39>>>0)<(8);
    if ($40) {
     $$0104122 = $39;$$1123 = $$2;
    } else {
     $$1$lcssa = $$2;$trunc = 8;
     break;
    }
   }
   $trunc$clear = $trunc & 2147483647;
   L29: do {
    switch ($trunc$clear|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $41 = ($trunc>>>0)>(3);
     $42 = ($2|0)!=(0);
     $or$cond5 = $42 & $41;
     if ($or$cond5) {
      $43 = ($trunc|0)==(8);
      if ($43) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $57 = ($trunc|0)==(0);
     L34: do {
      if ($57) {
       $$2106120 = 0;$$3121 = $$1$lcssa;
       while(1) {
        $58 = $$3121 | 32;
        $59 = (31279 + ($$2106120)|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = $60 << 24 >> 24;
        $62 = ($58|0)==($61|0);
        if (!($62)) {
         $$3107 = $$2106120;$$5 = $$3121;
         break L34;
        }
        $63 = ($$2106120>>>0)<(2);
        do {
         if ($63) {
          $64 = HEAP32[$3>>2]|0;
          $65 = HEAP32[$4>>2]|0;
          $66 = ($64>>>0)<($65>>>0);
          if ($66) {
           $67 = ((($64)) + 1|0);
           HEAP32[$3>>2] = $67;
           $68 = HEAP8[$64>>0]|0;
           $69 = $68&255;
           $$4 = $69;
           break;
          } else {
           $70 = (___shgetc($0)|0);
           $$4 = $70;
           break;
          }
         } else {
          $$4 = $$3121;
         }
        } while(0);
        $71 = (($$2106120) + 1)|0;
        $72 = ($71>>>0)<(3);
        if ($72) {
         $$2106120 = $71;$$3121 = $$4;
        } else {
         $$3107 = 3;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3107 = $trunc;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3107|0) {
     case 3:  {
      $73 = HEAP32[$3>>2]|0;
      $74 = HEAP32[$4>>2]|0;
      $75 = ($73>>>0)<($74>>>0);
      if ($75) {
       $76 = ((($73)) + 1|0);
       HEAP32[$3>>2] = $76;
       $77 = HEAP8[$73>>0]|0;
       $78 = $77&255;
       $80 = $78;
      } else {
       $79 = (___shgetc($0)|0);
       $80 = $79;
      }
      $81 = ($80|0)==(40);
      if (!($81)) {
       $82 = HEAP32[$4>>2]|0;
       $83 = ($82|0)==(0|0);
       if ($83) {
        $$0111 = nan;
        break L4;
       }
       $84 = HEAP32[$3>>2]|0;
       $85 = ((($84)) + -1|0);
       HEAP32[$3>>2] = $85;
       $$0111 = nan;
       break L4;
      }
      $$4108 = 1;
      while(1) {
       $86 = HEAP32[$3>>2]|0;
       $87 = HEAP32[$4>>2]|0;
       $88 = ($86>>>0)<($87>>>0);
       if ($88) {
        $89 = ((($86)) + 1|0);
        HEAP32[$3>>2] = $89;
        $90 = HEAP8[$86>>0]|0;
        $91 = $90&255;
        $94 = $91;
       } else {
        $92 = (___shgetc($0)|0);
        $94 = $92;
       }
       $93 = (($94) + -48)|0;
       $95 = ($93>>>0)<(10);
       $96 = (($94) + -65)|0;
       $97 = ($96>>>0)<(26);
       $or$cond = $95 | $97;
       if (!($or$cond)) {
        $98 = (($94) + -97)|0;
        $99 = ($98>>>0)<(26);
        $100 = ($94|0)==(95);
        $or$cond7 = $100 | $99;
        if (!($or$cond7)) {
         break;
        }
       }
       $112 = (($$4108) + 1)|0;
       $$4108 = $112;
      }
      $101 = ($94|0)==(41);
      if ($101) {
       $$0111 = nan;
       break L4;
      }
      $102 = HEAP32[$4>>2]|0;
      $103 = ($102|0)==(0|0);
      if (!($103)) {
       $104 = HEAP32[$3>>2]|0;
       $105 = ((($104)) + -1|0);
       HEAP32[$3>>2] = $105;
      }
      if (!($42)) {
       $106 = (___errno_location()|0);
       HEAP32[$106>>2] = 22;
       ___shlim($0,0);
       $$0111 = 0.0;
       break L4;
      }
      $107 = ($$4108|0)==(0);
      if ($107) {
       $$0111 = nan;
       break L4;
      }
      $$in = $$4108;
      while(1) {
       $108 = (($$in) + -1)|0;
       if (!($103)) {
        $109 = HEAP32[$3>>2]|0;
        $110 = ((($109)) + -1|0);
        HEAP32[$3>>2] = $110;
       }
       $111 = ($108|0)==(0);
       if ($111) {
        $$0111 = nan;
        break L4;
       } else {
        $$in = $108;
       }
      }
      break;
     }
     case 0:  {
      $118 = ($$5|0)==(48);
      if ($118) {
       $119 = HEAP32[$3>>2]|0;
       $120 = HEAP32[$4>>2]|0;
       $121 = ($119>>>0)<($120>>>0);
       if ($121) {
        $122 = ((($119)) + 1|0);
        HEAP32[$3>>2] = $122;
        $123 = HEAP8[$119>>0]|0;
        $124 = $123&255;
        $127 = $124;
       } else {
        $125 = (___shgetc($0)|0);
        $127 = $125;
       }
       $126 = $127 | 32;
       $128 = ($126|0)==(120);
       if ($128) {
        $129 = (+_hexfloat($0,$$0103,$$0102,$$0110,$2));
        $$0111 = $129;
        break L4;
       }
       $130 = HEAP32[$4>>2]|0;
       $131 = ($130|0)==(0|0);
       if ($131) {
        $$6 = 48;
       } else {
        $132 = HEAP32[$3>>2]|0;
        $133 = ((($132)) + -1|0);
        HEAP32[$3>>2] = $133;
        $$6 = 48;
       }
      } else {
       $$6 = $$5;
      }
      $134 = (+_decfloat($0,$$6,$$0103,$$0102,$$0110,$2));
      $$0111 = $134;
      break L4;
      break;
     }
     default: {
      $113 = HEAP32[$4>>2]|0;
      $114 = ($113|0)==(0|0);
      if (!($114)) {
       $115 = HEAP32[$3>>2]|0;
       $116 = ((($115)) + -1|0);
       HEAP32[$3>>2] = $116;
      }
      $117 = (___errno_location()|0);
      HEAP32[$117>>2] = 22;
      ___shlim($0,0);
      $$0111 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $44 = HEAP32[$4>>2]|0;
    $45 = ($44|0)==(0|0);
    if (!($45)) {
     $46 = HEAP32[$3>>2]|0;
     $47 = ((($46)) + -1|0);
     HEAP32[$3>>2] = $47;
    }
    $48 = ($2|0)!=(0);
    $49 = ($trunc>>>0)>(3);
    $or$cond124 = $48 & $49;
    if ($or$cond124) {
     $$1105118 = $trunc;
     while(1) {
      if (!($45)) {
       $50 = HEAP32[$3>>2]|0;
       $51 = ((($50)) + -1|0);
       HEAP32[$3>>2] = $51;
      }
      $52 = (($$1105118) + -1)|0;
      $53 = ($52>>>0)>(3);
      if ($53) {
       $$1105118 = $52;
      } else {
       break;
      }
     }
    }
   }
   $54 = (+($$0110|0));
   $55 = $54 * inf;
   $56 = $55;
   $$0111 = $56;
  }
 } while(0);
 return (+$$0111);
}
function _hexfloat($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $$0$be = 0, $$0$ph = 0, $$0133 = 0, $$0143 = 0, $$0151 = 0, $$0154 = 0.0, $$0155 = 0.0, $$0158 = 0.0, $$0163 = 0, $$0169 = 0.0, $$0170 = 0, $$0170173 = 0, $$0170174 = 0, $$1149 = 0, $$1149$ph = 0, $$1152 = 0, $$1156 = 0.0, $$1159 = 0.0, $$1164 = 0;
 var $$2150 = 0, $$2153 = 0, $$2157 = 0.0, $$2160 = 0.0, $$2165 = 0, $$3 = 0, $$3$be = 0, $$3$lcssa = 0, $$3$ph = 0, $$3146 = 0, $$3146$ph = 0, $$3161$lcssa = 0.0, $$3161181 = 0.0, $$3166$lcssa = 0, $$3166185 = 0, $$4147 = 0, $$4162 = 0.0, $$4167$lcssa = 0, $$4167180 = 0, $$5 = 0.0;
 var $$5168 = 0, $$6 = 0, $$pn = 0.0, $$pre = 0, $$pre$phi204Z2D = 0.0, $$pre203 = 0.0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0.0, $152 = 0.0, $153 = 0.0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0.0, $164 = 0.0, $165 = 0.0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0.0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0.0, $204 = 0.0, $205 = 0.0, $206 = 0.0, $207 = 0.0, $208 = 0.0, $209 = 0, $21 = 0, $210 = 0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0.0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0.0, $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0;
 var $not$ = 0, $or$cond = 0, $or$cond172 = 0, $or$cond4 = 0, $or$cond6 = 0, $spec$select175 = 0.0, $spec$select176 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ((($0)) + 100|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ($6>>>0)<($8>>>0);
 if ($9) {
  $10 = ((($6)) + 1|0);
  HEAP32[$5>>2] = $10;
  $11 = HEAP8[$6>>0]|0;
  $12 = $11&255;
  $$0$ph = $12;
 } else {
  $13 = (___shgetc($0)|0);
  $$0$ph = $13;
 }
 $$0 = $$0$ph;$$0143 = 0;
 L5: while(1) {
  switch ($$0|0) {
  case 46:  {
   label = 10;
   break L5;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$1149$ph = 0;$$3$ph = $$0;$$3146$ph = $$0143;$212 = 0;$213 = 0;
   break L5;
  }
  }
  $14 = HEAP32[$5>>2]|0;
  $15 = HEAP32[$7>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$5>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $$0$be = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $$0$be = $20;
  }
  $$0 = $$0$be;$$0143 = 1;
 }
 if ((label|0) == 10) {
  $21 = HEAP32[$5>>2]|0;
  $22 = HEAP32[$7>>2]|0;
  $23 = ($21>>>0)<($22>>>0);
  if ($23) {
   $24 = ((($21)) + 1|0);
   HEAP32[$5>>2] = $24;
   $25 = HEAP8[$21>>0]|0;
   $26 = $25&255;
   $28 = $26;
  } else {
   $27 = (___shgetc($0)|0);
   $28 = $27;
  }
  $29 = ($28|0)==(48);
  if ($29) {
   $37 = 0;$38 = 0;
   while(1) {
    $30 = HEAP32[$5>>2]|0;
    $31 = HEAP32[$7>>2]|0;
    $32 = ($30>>>0)<($31>>>0);
    if ($32) {
     $33 = ((($30)) + 1|0);
     HEAP32[$5>>2] = $33;
     $34 = HEAP8[$30>>0]|0;
     $35 = $34&255;
     $41 = $35;
    } else {
     $36 = (___shgetc($0)|0);
     $41 = $36;
    }
    $39 = (_i64Add(($37|0),($38|0),-1,-1)|0);
    $40 = tempRet0;
    $42 = ($41|0)==(48);
    if ($42) {
     $37 = $39;$38 = $40;
    } else {
     $$1149$ph = 1;$$3$ph = $41;$$3146$ph = 1;$212 = $39;$213 = $40;
     break;
    }
   }
  } else {
   $$1149$ph = 1;$$3$ph = $28;$$3146$ph = $$0143;$212 = 0;$213 = 0;
  }
 }
 $$0151 = 0;$$0155 = 1.0;$$0158 = 0.0;$$0163 = 0;$$1149 = $$1149$ph;$$3 = $$3$ph;$$3146 = $$3146$ph;$51 = 0;$53 = 0;$96 = $212;$98 = $213;
 while(1) {
  $43 = (($$3) + -48)|0;
  $44 = ($43>>>0)<(10);
  $$pre = $$3 | 32;
  if ($44) {
   label = 24;
  } else {
   $45 = (($$pre) + -97)|0;
   $46 = ($45>>>0)<(6);
   $47 = ($$3|0)==(46);
   $or$cond6 = $47 | $46;
   if (!($or$cond6)) {
    $$3$lcssa = $$3;
    break;
   }
   if ($47) {
    $48 = ($$1149|0)==(0);
    if ($48) {
     $$2150 = 1;$$2153 = $$0151;$$2157 = $$0155;$$2160 = $$0158;$$2165 = $$0163;$$4147 = $$3146;$214 = $53;$215 = $51;$216 = $53;$217 = $51;
    } else {
     $$3$lcssa = 46;
     break;
    }
   } else {
    label = 24;
   }
  }
  if ((label|0) == 24) {
   label = 0;
   $49 = ($$3|0)>(57);
   $50 = (($$pre) + -87)|0;
   $$0133 = $49 ? $50 : $43;
   $52 = ($51|0)<(0);
   $54 = ($53>>>0)<(8);
   $55 = ($51|0)==(0);
   $56 = $55 & $54;
   $57 = $52 | $56;
   do {
    if ($57) {
     $58 = $$0163 << 4;
     $59 = (($$0133) + ($58))|0;
     $$1152 = $$0151;$$1156 = $$0155;$$1159 = $$0158;$$1164 = $59;
    } else {
     $60 = ($51|0)<(0);
     $61 = ($53>>>0)<(14);
     $62 = ($51|0)==(0);
     $63 = $62 & $61;
     $64 = $60 | $63;
     if ($64) {
      $65 = (+($$0133|0));
      $66 = $$0155 * 0.0625;
      $67 = $66 * $65;
      $68 = $$0158 + $67;
      $$1152 = $$0151;$$1156 = $66;$$1159 = $68;$$1164 = $$0163;
      break;
     } else {
      $69 = ($$0133|0)==(0);
      $70 = ($$0151|0)!=(0);
      $or$cond = $70 | $69;
      $71 = $$0155 * 0.5;
      $72 = $$0158 + $71;
      $spec$select175 = $or$cond ? $$0158 : $72;
      $spec$select176 = $or$cond ? $$0151 : 1;
      $$1152 = $spec$select176;$$1156 = $$0155;$$1159 = $spec$select175;$$1164 = $$0163;
      break;
     }
    }
   } while(0);
   $73 = (_i64Add(($53|0),($51|0),1,0)|0);
   $74 = tempRet0;
   $$2150 = $$1149;$$2153 = $$1152;$$2157 = $$1156;$$2160 = $$1159;$$2165 = $$1164;$$4147 = 1;$214 = $96;$215 = $98;$216 = $73;$217 = $74;
  }
  $75 = HEAP32[$5>>2]|0;
  $76 = HEAP32[$7>>2]|0;
  $77 = ($75>>>0)<($76>>>0);
  if ($77) {
   $78 = ((($75)) + 1|0);
   HEAP32[$5>>2] = $78;
   $79 = HEAP8[$75>>0]|0;
   $80 = $79&255;
   $$3$be = $80;
  } else {
   $81 = (___shgetc($0)|0);
   $$3$be = $81;
  }
  $$0151 = $$2153;$$0155 = $$2157;$$0158 = $$2160;$$0163 = $$2165;$$1149 = $$2150;$$3 = $$3$be;$$3146 = $$4147;$51 = $217;$53 = $216;$96 = $214;$98 = $215;
 }
 $82 = ($$3146|0)==(0);
 do {
  if ($82) {
   $83 = HEAP32[$7>>2]|0;
   $84 = ($83|0)==(0|0);
   if (!($84)) {
    $85 = HEAP32[$5>>2]|0;
    $86 = ((($85)) + -1|0);
    HEAP32[$5>>2] = $86;
   }
   $87 = ($4|0)==(0);
   if ($87) {
    ___shlim($0,0);
   } else {
    if (!($84)) {
     $88 = HEAP32[$5>>2]|0;
     $89 = ((($88)) + -1|0);
     HEAP32[$5>>2] = $89;
     $90 = ($$1149|0)==(0);
     $brmerge = $90 | $84;
     if (!($brmerge)) {
      $91 = HEAP32[$5>>2]|0;
      $92 = ((($91)) + -1|0);
      HEAP32[$5>>2] = $92;
     }
    }
   }
   $93 = (+($3|0));
   $94 = $93 * 0.0;
   $$0169 = $94;
  } else {
   $95 = ($$1149|0)==(0);
   $97 = $95 ? $53 : $96;
   $99 = $95 ? $51 : $98;
   $100 = ($51|0)<(0);
   $101 = ($53>>>0)<(8);
   $102 = ($51|0)==(0);
   $103 = $102 & $101;
   $104 = $100 | $103;
   if ($104) {
    $$3166185 = $$0163;$106 = $53;$107 = $51;
    while(1) {
     $105 = $$3166185 << 4;
     $108 = (_i64Add(($106|0),($107|0),1,0)|0);
     $109 = tempRet0;
     $110 = ($107|0)<(0);
     $111 = ($106>>>0)<(7);
     $112 = ($107|0)==(0);
     $113 = $112 & $111;
     $114 = $110 | $113;
     if ($114) {
      $$3166185 = $105;$106 = $108;$107 = $109;
     } else {
      $$3166$lcssa = $105;
      break;
     }
    }
   } else {
    $$3166$lcssa = $$0163;
   }
   $115 = $$3$lcssa | 32;
   $116 = ($115|0)==(112);
   if ($116) {
    $117 = (_scanexp($0,$4)|0);
    $118 = tempRet0;
    $119 = ($117|0)==(0);
    $120 = ($118|0)==(-2147483648);
    $121 = $119 & $120;
    if ($121) {
     $122 = ($4|0)==(0);
     if ($122) {
      ___shlim($0,0);
      $$0169 = 0.0;
      break;
     }
     $123 = HEAP32[$7>>2]|0;
     $124 = ($123|0)==(0|0);
     if ($124) {
      $135 = 0;$136 = 0;
     } else {
      $125 = HEAP32[$5>>2]|0;
      $126 = ((($125)) + -1|0);
      HEAP32[$5>>2] = $126;
      $135 = 0;$136 = 0;
     }
    } else {
     $135 = $117;$136 = $118;
    }
   } else {
    $127 = HEAP32[$7>>2]|0;
    $128 = ($127|0)==(0|0);
    if ($128) {
     $135 = 0;$136 = 0;
    } else {
     $129 = HEAP32[$5>>2]|0;
     $130 = ((($129)) + -1|0);
     HEAP32[$5>>2] = $130;
     $135 = 0;$136 = 0;
    }
   }
   $131 = (_bitshift64Shl(($97|0),($99|0),2)|0);
   $132 = tempRet0;
   $133 = (_i64Add(($131|0),($132|0),-32,-1)|0);
   $134 = tempRet0;
   $137 = (_i64Add(($133|0),($134|0),($135|0),($136|0))|0);
   $138 = tempRet0;
   $139 = ($$3166$lcssa|0)==(0);
   if ($139) {
    $140 = (+($3|0));
    $141 = $140 * 0.0;
    $$0169 = $141;
    break;
   }
   $142 = (0 - ($2))|0;
   $143 = ($142|0)<(0);
   $144 = $143 << 31 >> 31;
   $145 = ($138|0)>($144|0);
   $146 = ($137>>>0)>($142>>>0);
   $147 = ($138|0)==($144|0);
   $148 = $147 & $146;
   $149 = $145 | $148;
   if ($149) {
    $150 = (___errno_location()|0);
    HEAP32[$150>>2] = 34;
    $151 = (+($3|0));
    $152 = $151 * 1.7976931348623157E+308;
    $153 = $152 * 1.7976931348623157E+308;
    $$0169 = $153;
    break;
   }
   $154 = (($2) + -106)|0;
   $155 = ($154|0)<(0);
   $156 = $155 << 31 >> 31;
   $157 = ($138|0)<($156|0);
   $158 = ($137>>>0)<($154>>>0);
   $159 = ($138|0)==($156|0);
   $160 = $159 & $158;
   $161 = $157 | $160;
   if ($161) {
    $162 = (___errno_location()|0);
    HEAP32[$162>>2] = 34;
    $163 = (+($3|0));
    $164 = $163 * 2.2250738585072014E-308;
    $165 = $164 * 2.2250738585072014E-308;
    $$0169 = $165;
    break;
   }
   $166 = ($$3166$lcssa|0)>(-1);
   if ($166) {
    $$3161181 = $$0158;$$4167180 = $$3166$lcssa;$171 = $137;$172 = $138;
    while(1) {
     $167 = !($$3161181 >= 0.5);
     $168 = $$4167180 << 1;
     $169 = $$3161181 + -1.0;
     $not$ = $167 ^ 1;
     $170 = $not$&1;
     $$5168 = $168 | $170;
     $$pn = $167 ? $$3161181 : $169;
     $$4162 = $$3161181 + $$pn;
     $173 = (_i64Add(($171|0),($172|0),-1,-1)|0);
     $174 = tempRet0;
     $175 = ($$5168|0)>(-1);
     if ($175) {
      $$3161181 = $$4162;$$4167180 = $$5168;$171 = $173;$172 = $174;
     } else {
      $$3161$lcssa = $$4162;$$4167$lcssa = $$5168;$182 = $173;$183 = $174;
      break;
     }
    }
   } else {
    $$3161$lcssa = $$0158;$$4167$lcssa = $$3166$lcssa;$182 = $137;$183 = $138;
   }
   $176 = ($1|0)<(0);
   $177 = $176 << 31 >> 31;
   $178 = ($2|0)<(0);
   $179 = $178 << 31 >> 31;
   $180 = (_i64Subtract(32,0,($2|0),($179|0))|0);
   $181 = tempRet0;
   $184 = (_i64Add(($180|0),($181|0),($182|0),($183|0))|0);
   $185 = tempRet0;
   $186 = ($185|0)<($177|0);
   $187 = ($184>>>0)<($1>>>0);
   $188 = ($185|0)==($177|0);
   $189 = $188 & $187;
   $190 = $186 | $189;
   if ($190) {
    $191 = ($184|0)>(0);
    if ($191) {
     $$0170 = $184;
     label = 65;
    } else {
     $$0170174 = 0;$195 = 84;
     label = 67;
    }
   } else {
    $$0170 = $1;
    label = 65;
   }
   if ((label|0) == 65) {
    $192 = ($$0170|0)<(53);
    $193 = (84 - ($$0170))|0;
    if ($192) {
     $$0170174 = $$0170;$195 = $193;
     label = 67;
    } else {
     $$pre203 = (+($3|0));
     $$0154 = 0.0;$$0170173 = $$0170;$$pre$phi204Z2D = $$pre203;
    }
   }
   if ((label|0) == 67) {
    $194 = (+($3|0));
    $196 = (+_scalbn(1.0,$195));
    $197 = (+_copysignl($196,$194));
    $$0154 = $197;$$0170173 = $$0170174;$$pre$phi204Z2D = $194;
   }
   $198 = ($$0170173|0)<(32);
   $199 = $$3161$lcssa != 0.0;
   $or$cond4 = $199 & $198;
   $200 = $$4167$lcssa & 1;
   $201 = ($200|0)==(0);
   $or$cond172 = $201 & $or$cond4;
   $202 = $or$cond172&1;
   $$6 = (($$4167$lcssa) + ($202))|0;
   $$5 = $or$cond172 ? 0.0 : $$3161$lcssa;
   $203 = (+($$6>>>0));
   $204 = $$pre$phi204Z2D * $203;
   $205 = $$0154 + $204;
   $206 = $$5 * $$pre$phi204Z2D;
   $207 = $206 + $205;
   $208 = $207 - $$0154;
   $209 = $208 != 0.0;
   if (!($209)) {
    $210 = (___errno_location()|0);
    HEAP32[$210>>2] = 34;
   }
   $211 = (+_scalbnl($208,$182));
   $$0169 = $211;
  }
 } while(0);
 return (+$$0169);
}
function _decfloat($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0324 = 0, $$0324$be = 0, $$0327480 = 0, $$0328 = 0, $$0329 = 0, $$0331476 = 0, $$0335486 = 0, $$0336$lcssa = 0, $$0336453 = 0, $$0336454 = 0, $$0336455 = 0, $$0336503 = 0, $$0340$lcssa = 0, $$0340457 = 0, $$0340458 = 0, $$0340459 = 0, $$0340502 = 0, $$0345$lcssa540 = 0, $$0345484 = 0, $$0355 = 0.0;
 var $$0356 = 0.0, $$0360474 = 0.0, $$0367 = 0, $$0376 = 0, $$0376$ph = 0, $$0381$lcssa539 = 0, $$0381483 = 0, $$0390 = 0, $$0393 = 0, $$0398$lcssa = 0, $$0398463 = 0, $$0398464 = 0, $$0398465 = 0, $$0398499 = 0, $$1 = 0.0, $$10473 = 0, $$11 = 0, $$1330 = 0, $$1357 = 0.0, $$1361 = 0.0;
 var $$1377 = 0, $$1377$ph = 0, $$1377$ph$ph = 0, $$1391$lcssa = 0, $$1391501 = 0, $$2 = 0, $$2338 = 0, $$2342 = 0, $$2362 = 0.0, $$2366$v = 0, $$2369 = 0, $$2369$ph = 0, $$2369$ph579 = 0, $$2392 = 0, $$2395 = 0, $$2400 = 0, $$3$lcssa = 0, $$3339493 = 0, $$3343 = 0, $$3348$ph = 0;
 var $$3348$ph580 = 0, $$3359 = 0.0, $$3363 = 0.0, $$3370 = 0, $$3379 = 0, $$3384$ph = 0, $$3384$ph578 = 0, $$3396$lcssa = 0, $$3396500 = 0, $$3504 = 0, $$4344485 = 0, $$4380 = 0, $$4397 = 0, $$4475 = 0, $$5 = 0, $$5$in = 0, $$5350 = 0, $$5350$ph = 0, $$5350$ph$ph = 0, $$5372 = 0;
 var $$5386$ph = 0, $$5386$ph576 = 0, $$5386$ph576$ph = 0, $$6351478 = 0, $$6387477 = 0, $$6479 = 0, $$7374$ph$ph = 0, $$neg447 = 0, $$neg448 = 0, $$pre = 0, $$promoted = 0, $$sink$off0 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0.0, $108 = 0.0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0.0;
 var $125 = 0.0, $126 = 0.0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0.0, $138 = 0.0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0.0, $164 = 0, $165 = 0.0, $166 = 0.0, $167 = 0, $168 = 0.0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0, $173 = 0, $174 = 0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0.0, $182 = 0.0, $183 = 0.0, $184 = 0, $185 = 0, $186 = 0, $187 = 0.0, $188 = 0.0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0;
 var $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0, $318 = 0.0, $319 = 0.0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0;
 var $325 = 0, $326 = 0.0, $327 = 0.0, $328 = 0, $329 = 0.0, $33 = 0, $330 = 0.0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0;
 var $343 = 0.0, $344 = 0.0, $345 = 0, $346 = 0.0, $347 = 0.0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0.0, $352 = 0.0, $353 = 0.0, $354 = 0.0, $355 = 0, $356 = 0, $357 = 0.0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0.0;
 var $361 = 0.0, $362 = 0, $363 = 0, $364 = 0, $365 = 0.0, $366 = 0, $367 = 0.0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0.0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0;
 var $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond = 0, $exitcond = 0, $narrow = 0, $not$ = 0, $or$cond = 0, $or$cond3 = 0, $or$cond414 = 0, $or$cond416 = 0, $or$cond417 = 0, $or$cond418 = 0, $or$cond421 = 0, $or$cond559 = 0, $or$cond9 = 0, $spec$select = 0, $spec$select410 = 0, $spec$select411 = 0, $spec$select419 = 0, $spec$select420 = 0, $spec$select439 = 0;
 var $spec$select440 = 0, $spec$select441 = 0, $spec$select442 = 0, $spec$select443 = 0, $spec$store$select = 0, $storemerge446 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $6 = sp;
 $7 = (($3) + ($2))|0;
 $8 = (0 - ($7))|0;
 $9 = ((($0)) + 4|0);
 $10 = ((($0)) + 100|0);
 $$0324 = $1;$$0393 = 0;
 L1: while(1) {
  switch ($$0324|0) {
  case 46:  {
   label = 7;
   break L1;
   break;
  }
  case 48:  {
   break;
  }
  default: {
   $$0390 = 0;$$2 = $$0324;$$2395 = $$0393;$375 = 0;$376 = 0;
   break L1;
  }
  }
  $11 = HEAP32[$9>>2]|0;
  $12 = HEAP32[$10>>2]|0;
  $13 = ($11>>>0)<($12>>>0);
  if ($13) {
   $14 = ((($11)) + 1|0);
   HEAP32[$9>>2] = $14;
   $15 = HEAP8[$11>>0]|0;
   $16 = $15&255;
   $$0324$be = $16;
  } else {
   $17 = (___shgetc($0)|0);
   $$0324$be = $17;
  }
  $$0324 = $$0324$be;$$0393 = 1;
 }
 if ((label|0) == 7) {
  $18 = HEAP32[$9>>2]|0;
  $19 = HEAP32[$10>>2]|0;
  $20 = ($18>>>0)<($19>>>0);
  if ($20) {
   $21 = ((($18)) + 1|0);
   HEAP32[$9>>2] = $21;
   $22 = HEAP8[$18>>0]|0;
   $23 = $22&255;
   $25 = $23;
  } else {
   $24 = (___shgetc($0)|0);
   $25 = $24;
  }
  $26 = ($25|0)==(48);
  if ($26) {
   $27 = 0;$28 = 0;
   while(1) {
    $29 = (_i64Add(($27|0),($28|0),-1,-1)|0);
    $30 = tempRet0;
    $31 = HEAP32[$9>>2]|0;
    $32 = HEAP32[$10>>2]|0;
    $33 = ($31>>>0)<($32>>>0);
    if ($33) {
     $34 = ((($31)) + 1|0);
     HEAP32[$9>>2] = $34;
     $35 = HEAP8[$31>>0]|0;
     $36 = $35&255;
     $38 = $36;
    } else {
     $37 = (___shgetc($0)|0);
     $38 = $37;
    }
    $39 = ($38|0)==(48);
    if ($39) {
     $27 = $29;$28 = $30;
    } else {
     $$0390 = 1;$$2 = $38;$$2395 = 1;$375 = $29;$376 = $30;
     break;
    }
   }
  } else {
   $$0390 = 1;$$2 = $25;$$2395 = $$0393;$375 = 0;$376 = 0;
  }
 }
 HEAP32[$6>>2] = 0;
 $40 = (($$2) + -48)|0;
 $41 = ($40>>>0)<(10);
 $42 = ($$2|0)==(46);
 $43 = $42 | $41;
 L22: do {
  if ($43) {
   $44 = ((($6)) + 496|0);
   $$0336503 = 0;$$0340502 = 0;$$0398499 = 0;$$1391501 = $$0390;$$3396500 = $$2395;$$3504 = $$2;$377 = $42;$378 = $40;$379 = $375;$380 = $376;$47 = 0;$48 = 0;
   L24: while(1) {
    do {
     if ($377) {
      $cond = ($$1391501|0)==(0);
      if ($cond) {
       $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = 1;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $47;$382 = $48;$383 = $47;$384 = $48;
      } else {
       break L24;
      }
     } else {
      $46 = ($$0340502|0)<(125);
      $49 = (_i64Add(($47|0),($48|0),1,0)|0);
      $50 = tempRet0;
      $51 = ($$3504|0)!=(48);
      if (!($46)) {
       if (!($51)) {
        $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = $$1391501;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
        break;
       }
       $61 = HEAP32[$44>>2]|0;
       $62 = $61 | 1;
       HEAP32[$44>>2] = $62;
       $$2338 = $$0336503;$$2342 = $$0340502;$$2392 = $$1391501;$$2400 = $$0398499;$$4397 = $$3396500;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
       break;
      }
      $spec$select = $51 ? $49 : $$0398499;
      $52 = ($$0336503|0)==(0);
      $53 = (($6) + ($$0340502<<2)|0);
      if ($52) {
       $storemerge446 = $378;
      } else {
       $54 = HEAP32[$53>>2]|0;
       $55 = ($54*10)|0;
       $56 = (($$3504) + -48)|0;
       $57 = (($56) + ($55))|0;
       $storemerge446 = $57;
      }
      HEAP32[$53>>2] = $storemerge446;
      $58 = (($$0336503) + 1)|0;
      $59 = ($58|0)==(9);
      $60 = $59&1;
      $spec$select410 = (($$0340502) + ($60))|0;
      $spec$select411 = $59 ? 0 : $58;
      $$2338 = $spec$select411;$$2342 = $spec$select410;$$2392 = $$1391501;$$2400 = $spec$select;$$4397 = 1;$381 = $379;$382 = $380;$383 = $49;$384 = $50;
     }
    } while(0);
    $63 = HEAP32[$9>>2]|0;
    $64 = HEAP32[$10>>2]|0;
    $65 = ($63>>>0)<($64>>>0);
    if ($65) {
     $66 = ((($63)) + 1|0);
     HEAP32[$9>>2] = $66;
     $67 = HEAP8[$63>>0]|0;
     $68 = $67&255;
     $71 = $68;
    } else {
     $69 = (___shgetc($0)|0);
     $71 = $69;
    }
    $70 = (($71) + -48)|0;
    $72 = ($70>>>0)<(10);
    $73 = ($71|0)==(46);
    $74 = $73 | $72;
    if ($74) {
     $$0336503 = $$2338;$$0340502 = $$2342;$$0398499 = $$2400;$$1391501 = $$2392;$$3396500 = $$4397;$$3504 = $71;$377 = $73;$378 = $70;$379 = $381;$380 = $382;$47 = $383;$48 = $384;
    } else {
     $$0336$lcssa = $$2338;$$0340$lcssa = $$2342;$$0398$lcssa = $$2400;$$1391$lcssa = $$2392;$$3$lcssa = $71;$$3396$lcssa = $$4397;$76 = $381;$77 = $383;$79 = $382;$80 = $384;
     label = 31;
     break L22;
    }
   }
   $45 = ($$3396500|0)!=(0);
   $$0336455 = $$0336503;$$0340459 = $$0340502;$$0398465 = $$0398499;$385 = $47;$386 = $48;$387 = $379;$388 = $380;$389 = $45;
   label = 39;
  } else {
   $$0336$lcssa = 0;$$0340$lcssa = 0;$$0398$lcssa = 0;$$1391$lcssa = $$0390;$$3$lcssa = $$2;$$3396$lcssa = $$2395;$76 = $375;$77 = 0;$79 = $376;$80 = 0;
   label = 31;
  }
 } while(0);
 do {
  if ((label|0) == 31) {
   $75 = ($$1391$lcssa|0)==(0);
   $78 = $75 ? $77 : $76;
   $81 = $75 ? $80 : $79;
   $82 = ($$3396$lcssa|0)!=(0);
   $83 = $$3$lcssa | 32;
   $84 = ($83|0)==(101);
   $or$cond414 = $82 & $84;
   if (!($or$cond414)) {
    $99 = ($$3$lcssa|0)>(-1);
    if ($99) {
     $$0336455 = $$0336$lcssa;$$0340459 = $$0340$lcssa;$$0398465 = $$0398$lcssa;$385 = $77;$386 = $80;$387 = $78;$388 = $81;$389 = $82;
     label = 39;
     break;
    } else {
     $$0336454 = $$0336$lcssa;$$0340458 = $$0340$lcssa;$$0398464 = $$0398$lcssa;$390 = $77;$391 = $80;$392 = $82;$393 = $78;$394 = $81;
     label = 41;
     break;
    }
   }
   $85 = (_scanexp($0,$5)|0);
   $86 = tempRet0;
   $87 = ($85|0)==(0);
   $88 = ($86|0)==(-2147483648);
   $89 = $87 & $88;
   if ($89) {
    $90 = ($5|0)==(0);
    if ($90) {
     ___shlim($0,0);
     $$1 = 0.0;
     break;
    }
    $91 = HEAP32[$10>>2]|0;
    $92 = ($91|0)==(0|0);
    if ($92) {
     $95 = 0;$96 = 0;
    } else {
     $93 = HEAP32[$9>>2]|0;
     $94 = ((($93)) + -1|0);
     HEAP32[$9>>2] = $94;
     $95 = 0;$96 = 0;
    }
   } else {
    $95 = $85;$96 = $86;
   }
   $97 = (_i64Add(($95|0),($96|0),($78|0),($81|0))|0);
   $98 = tempRet0;
   $$0336453 = $$0336$lcssa;$$0340457 = $$0340$lcssa;$$0398463 = $$0398$lcssa;$109 = $97;$111 = $77;$112 = $98;$114 = $80;
   label = 43;
  }
 } while(0);
 if ((label|0) == 39) {
  $100 = HEAP32[$10>>2]|0;
  $101 = ($100|0)==(0|0);
  if ($101) {
   $$0336454 = $$0336455;$$0340458 = $$0340459;$$0398464 = $$0398465;$390 = $385;$391 = $386;$392 = $389;$393 = $387;$394 = $388;
   label = 41;
  } else {
   $102 = HEAP32[$9>>2]|0;
   $103 = ((($102)) + -1|0);
   HEAP32[$9>>2] = $103;
   if ($389) {
    $$0336453 = $$0336455;$$0340457 = $$0340459;$$0398463 = $$0398465;$109 = $387;$111 = $385;$112 = $388;$114 = $386;
    label = 43;
   } else {
    label = 42;
   }
  }
 }
 if ((label|0) == 41) {
  if ($392) {
   $$0336453 = $$0336454;$$0340457 = $$0340458;$$0398463 = $$0398464;$109 = $393;$111 = $390;$112 = $394;$114 = $391;
   label = 43;
  } else {
   label = 42;
  }
 }
 do {
  if ((label|0) == 42) {
   $104 = (___errno_location()|0);
   HEAP32[$104>>2] = 22;
   ___shlim($0,0);
   $$1 = 0.0;
  }
  else if ((label|0) == 43) {
   $105 = HEAP32[$6>>2]|0;
   $106 = ($105|0)==(0);
   if ($106) {
    $107 = (+($4|0));
    $108 = $107 * 0.0;
    $$1 = $108;
    break;
   }
   $110 = ($109|0)==($111|0);
   $113 = ($112|0)==($114|0);
   $115 = $110 & $113;
   $116 = ($114|0)<(0);
   $117 = ($111>>>0)<(10);
   $118 = ($114|0)==(0);
   $119 = $118 & $117;
   $120 = $116 | $119;
   $or$cond = $120 & $115;
   if ($or$cond) {
    $121 = ($2|0)>(30);
    $122 = $105 >>> $2;
    $123 = ($122|0)==(0);
    $or$cond416 = $121 | $123;
    if ($or$cond416) {
     $124 = (+($4|0));
     $125 = (+($105>>>0));
     $126 = $124 * $125;
     $$1 = $126;
     break;
    }
   }
   $127 = (($3|0) / -2)&-1;
   $128 = ($127|0)<(0);
   $129 = $128 << 31 >> 31;
   $130 = ($112|0)>($129|0);
   $131 = ($109>>>0)>($127>>>0);
   $132 = ($112|0)==($129|0);
   $133 = $132 & $131;
   $134 = $130 | $133;
   if ($134) {
    $135 = (___errno_location()|0);
    HEAP32[$135>>2] = 34;
    $136 = (+($4|0));
    $137 = $136 * 1.7976931348623157E+308;
    $138 = $137 * 1.7976931348623157E+308;
    $$1 = $138;
    break;
   }
   $139 = (($3) + -106)|0;
   $140 = ($139|0)<(0);
   $141 = $140 << 31 >> 31;
   $142 = ($112|0)<($141|0);
   $143 = ($109>>>0)<($139>>>0);
   $144 = ($112|0)==($141|0);
   $145 = $144 & $143;
   $146 = $142 | $145;
   if ($146) {
    $147 = (___errno_location()|0);
    HEAP32[$147>>2] = 34;
    $148 = (+($4|0));
    $149 = $148 * 2.2250738585072014E-308;
    $150 = $149 * 2.2250738585072014E-308;
    $$1 = $150;
    break;
   }
   $151 = ($$0336453|0)==(0);
   if ($151) {
    $$3343 = $$0340457;
   } else {
    $152 = ($$0336453|0)<(9);
    if ($152) {
     $153 = (($6) + ($$0340457<<2)|0);
     $$promoted = HEAP32[$153>>2]|0;
     $$3339493 = $$0336453;$155 = $$promoted;
     while(1) {
      $154 = ($155*10)|0;
      $156 = (($$3339493) + 1)|0;
      $157 = ($$3339493|0)<(8);
      if ($157) {
       $$3339493 = $156;$155 = $154;
      } else {
       break;
      }
     }
     HEAP32[$153>>2] = $154;
    }
    $158 = (($$0340457) + 1)|0;
    $$3343 = $158;
   }
   $159 = ($$0398463|0)<(9);
   if ($159) {
    $160 = ($$0398463|0)<=($109|0);
    $161 = ($109|0)<(18);
    $or$cond3 = $160 & $161;
    if ($or$cond3) {
     $162 = ($109|0)==(9);
     if ($162) {
      $163 = (+($4|0));
      $164 = HEAP32[$6>>2]|0;
      $165 = (+($164>>>0));
      $166 = $163 * $165;
      $$1 = $166;
      break;
     }
     $167 = ($109|0)<(9);
     if ($167) {
      $168 = (+($4|0));
      $169 = HEAP32[$6>>2]|0;
      $170 = (+($169>>>0));
      $171 = $168 * $170;
      $172 = (8 - ($109))|0;
      $173 = (10788 + ($172<<2)|0);
      $174 = HEAP32[$173>>2]|0;
      $175 = (+($174|0));
      $176 = $171 / $175;
      $$1 = $176;
      break;
     }
     $$neg447 = Math_imul($109, -3)|0;
     $$neg448 = (($2) + 27)|0;
     $177 = (($$neg448) + ($$neg447))|0;
     $178 = ($177|0)>(30);
     $$pre = HEAP32[$6>>2]|0;
     $179 = $$pre >>> $177;
     $180 = ($179|0)==(0);
     $or$cond559 = $178 | $180;
     if ($or$cond559) {
      $181 = (+($4|0));
      $182 = (+($$pre>>>0));
      $183 = $181 * $182;
      $184 = (($109) + -10)|0;
      $185 = (10788 + ($184<<2)|0);
      $186 = HEAP32[$185>>2]|0;
      $187 = (+($186|0));
      $188 = $183 * $187;
      $$1 = $188;
      break;
     }
    }
   }
   $189 = (($109|0) % 9)&-1;
   $190 = ($189|0)==(0);
   if ($190) {
    $$2369$ph = $$3343;$$3348$ph = 0;$$3384$ph = $109;
   } else {
    $191 = ($109|0)>(-1);
    $192 = (($189) + 9)|0;
    $193 = $191 ? $189 : $192;
    $194 = (8 - ($193))|0;
    $195 = (10788 + ($194<<2)|0);
    $196 = HEAP32[$195>>2]|0;
    $197 = ($$3343|0)==(0);
    if ($197) {
     $$0345$lcssa540 = 0;$$0367 = 0;$$0381$lcssa539 = $109;
    } else {
     $198 = (1000000000 / ($196|0))&-1;
     $$0335486 = 0;$$0345484 = 0;$$0381483 = $109;$$4344485 = 0;
     while(1) {
      $199 = (($6) + ($$4344485<<2)|0);
      $200 = HEAP32[$199>>2]|0;
      $201 = (($200>>>0) / ($196>>>0))&-1;
      $202 = Math_imul($201, $196)|0;
      $203 = (($200) - ($202))|0;
      $204 = (($201) + ($$0335486))|0;
      HEAP32[$199>>2] = $204;
      $205 = Math_imul($198, $203)|0;
      $206 = ($$4344485|0)==($$0345484|0);
      $207 = ($204|0)==(0);
      $or$cond417 = $206 & $207;
      $208 = (($$0345484) + 1)|0;
      $209 = $208 & 127;
      $210 = (($$0381483) + -9)|0;
      $spec$select439 = $or$cond417 ? $210 : $$0381483;
      $spec$select440 = $or$cond417 ? $209 : $$0345484;
      $211 = (($$4344485) + 1)|0;
      $212 = ($211|0)==($$3343|0);
      if ($212) {
       break;
      } else {
       $$0335486 = $205;$$0345484 = $spec$select440;$$0381483 = $spec$select439;$$4344485 = $211;
      }
     }
     $213 = ($205|0)==(0);
     if ($213) {
      $$0345$lcssa540 = $spec$select440;$$0367 = $$3343;$$0381$lcssa539 = $spec$select439;
     } else {
      $214 = (($6) + ($$3343<<2)|0);
      $215 = (($$3343) + 1)|0;
      HEAP32[$214>>2] = $205;
      $$0345$lcssa540 = $spec$select440;$$0367 = $215;$$0381$lcssa539 = $spec$select439;
     }
    }
    $216 = (9 - ($193))|0;
    $217 = (($216) + ($$0381$lcssa539))|0;
    $$2369$ph = $$0367;$$3348$ph = $$0345$lcssa540;$$3384$ph = $217;
   }
   $$0376$ph = 0;$$2369$ph579 = $$2369$ph;$$3348$ph580 = $$3348$ph;$$3384$ph578 = $$3384$ph;
   L104: while(1) {
    $218 = ($$3384$ph578|0)<(18);
    $219 = ($$3384$ph578|0)==(18);
    $220 = (($6) + ($$3348$ph580<<2)|0);
    $$0376 = $$0376$ph;$$2369 = $$2369$ph579;
    while(1) {
     if (!($218)) {
      if (!($219)) {
       $$5386$ph = $$3384$ph578;
       break L104;
      }
      $221 = HEAP32[$220>>2]|0;
      $222 = ($221>>>0)<(9007199);
      if (!($222)) {
       $$5386$ph = 18;
       break L104;
      }
     }
     $223 = (($$2369) + 127)|0;
     $$0329 = 0;$$3370 = $$2369;$$5$in = $223;
     while(1) {
      $$5 = $$5$in & 127;
      $224 = (($6) + ($$5<<2)|0);
      $225 = HEAP32[$224>>2]|0;
      $226 = (_bitshift64Shl(($225|0),0,29)|0);
      $227 = tempRet0;
      $228 = (_i64Add(($226|0),($227|0),($$0329|0),0)|0);
      $229 = tempRet0;
      $230 = ($229>>>0)>(0);
      $231 = ($228>>>0)>(1000000000);
      $232 = ($229|0)==(0);
      $233 = $232 & $231;
      $234 = $230 | $233;
      if ($234) {
       $235 = (___udivdi3(($228|0),($229|0),1000000000,0)|0);
       $236 = tempRet0;
       $237 = (___muldi3(($235|0),($236|0),1000000000,0)|0);
       $238 = tempRet0;
       $239 = (_i64Subtract(($228|0),($229|0),($237|0),($238|0))|0);
       $240 = tempRet0;
       $$1330 = $235;$$sink$off0 = $239;
      } else {
       $$1330 = 0;$$sink$off0 = $228;
      }
      HEAP32[$224>>2] = $$sink$off0;
      $241 = (($$3370) + 127)|0;
      $242 = $241 & 127;
      $243 = ($$5|0)!=($242|0);
      $244 = ($$5|0)==($$3348$ph580|0);
      $or$cond418 = $243 | $244;
      $245 = ($$sink$off0|0)==(0);
      $spec$select419 = $245 ? $$5 : $$3370;
      $spec$select441 = $or$cond418 ? $$3370 : $spec$select419;
      $246 = (($$5) + -1)|0;
      if ($244) {
       break;
      } else {
       $$0329 = $$1330;$$3370 = $spec$select441;$$5$in = $246;
      }
     }
     $247 = (($$0376) + -29)|0;
     $248 = ($$1330|0)==(0);
     if ($248) {
      $$0376 = $247;$$2369 = $$3370;
     } else {
      break;
     }
    }
    $249 = (($$3384$ph578) + 9)|0;
    $250 = (($$3348$ph580) + 127)|0;
    $251 = $250 & 127;
    $252 = ($251|0)==($spec$select441|0);
    $253 = (($spec$select441) + 127)|0;
    $254 = $253 & 127;
    $255 = (($spec$select441) + 126)|0;
    $256 = $255 & 127;
    $257 = (($6) + ($256<<2)|0);
    if ($252) {
     $258 = (($6) + ($254<<2)|0);
     $259 = HEAP32[$258>>2]|0;
     $260 = HEAP32[$257>>2]|0;
     $261 = $260 | $259;
     HEAP32[$257>>2] = $261;
     $$5372 = $254;
    } else {
     $$5372 = $$3370;
    }
    $262 = (($6) + ($251<<2)|0);
    HEAP32[$262>>2] = $$1330;
    $$0376$ph = $247;$$2369$ph579 = $$5372;$$3348$ph580 = $251;$$3384$ph578 = $249;
   }
   $$1377$ph$ph = $$0376;$$5350$ph$ph = $$3348$ph580;$$5386$ph576$ph = $$5386$ph;$$7374$ph$ph = $$2369;
   L123: while(1) {
    $299 = (($$7374$ph$ph) + 1)|0;
    $296 = $299 & 127;
    $300 = (($$7374$ph$ph) + 127)|0;
    $301 = $300 & 127;
    $302 = (($6) + ($301<<2)|0);
    $$1377$ph = $$1377$ph$ph;$$5350$ph = $$5350$ph$ph;$$5386$ph576 = $$5386$ph576$ph;
    while(1) {
     $294 = ($$5386$ph576|0)==(18);
     $295 = ($$5386$ph576|0)>(27);
     $spec$select420 = $295 ? 9 : 1;
     $$1377 = $$1377$ph;$$5350 = $$5350$ph;
     while(1) {
      $$0331476 = 0;
      while(1) {
       $263 = (($$0331476) + ($$5350))|0;
       $264 = $263 & 127;
       $265 = ($264|0)==($$7374$ph$ph|0);
       if ($265) {
        label = 92;
        break;
       }
       $266 = (($6) + ($264<<2)|0);
       $267 = HEAP32[$266>>2]|0;
       $268 = (10820 + ($$0331476<<2)|0);
       $269 = HEAP32[$268>>2]|0;
       $270 = ($267>>>0)<($269>>>0);
       if ($270) {
        label = 92;
        break;
       }
       $271 = ($267>>>0)>($269>>>0);
       if ($271) {
        break;
       }
       $272 = (($$0331476) + 1)|0;
       $273 = ($272>>>0)<(2);
       if ($273) {
        $$0331476 = 1;
       } else {
        label = 92;
        break;
       }
      }
      if ((label|0) == 92) {
       label = 0;
       if ($294) {
        break L123;
       }
      }
      $274 = (($spec$select420) + ($$1377))|0;
      $275 = ($$5350|0)==($$7374$ph$ph|0);
      if ($275) {
       $$1377 = $274;$$5350 = $$7374$ph$ph;
      } else {
       break;
      }
     }
     $276 = 1 << $spec$select420;
     $277 = (($276) + -1)|0;
     $278 = 1000000000 >>> $spec$select420;
     $$0327480 = 0;$$6351478 = $$5350;$$6387477 = $$5386$ph576;$$6479 = $$5350;
     while(1) {
      $279 = (($6) + ($$6479<<2)|0);
      $280 = HEAP32[$279>>2]|0;
      $281 = $280 & $277;
      $282 = $280 >>> $spec$select420;
      $283 = (($282) + ($$0327480))|0;
      HEAP32[$279>>2] = $283;
      $284 = Math_imul($281, $278)|0;
      $285 = ($$6479|0)==($$6351478|0);
      $286 = ($283|0)==(0);
      $or$cond421 = $285 & $286;
      $287 = (($$6351478) + 1)|0;
      $288 = $287 & 127;
      $289 = (($$6387477) + -9)|0;
      $spec$select442 = $or$cond421 ? $289 : $$6387477;
      $spec$select443 = $or$cond421 ? $288 : $$6351478;
      $290 = (($$6479) + 1)|0;
      $291 = $290 & 127;
      $292 = ($291|0)==($$7374$ph$ph|0);
      if ($292) {
       break;
      } else {
       $$0327480 = $284;$$6351478 = $spec$select443;$$6387477 = $spec$select442;$$6479 = $291;
      }
     }
     $293 = ($284|0)==(0);
     if (!($293)) {
      $297 = ($296|0)==($spec$select443|0);
      if (!($297)) {
       break;
      }
      $303 = HEAP32[$302>>2]|0;
      $304 = $303 | 1;
      HEAP32[$302>>2] = $304;
     }
     $$1377$ph = $274;$$5350$ph = $spec$select443;$$5386$ph576 = $spec$select442;
    }
    $298 = (($6) + ($$7374$ph$ph<<2)|0);
    HEAP32[$298>>2] = $284;
    $$1377$ph$ph = $274;$$5350$ph$ph = $spec$select443;$$5386$ph576$ph = $spec$select442;$$7374$ph$ph = $296;
   }
   $$0360474 = 0.0;$$10473 = $$7374$ph$ph;$$4475 = 0;
   while(1) {
    $305 = (($$4475) + ($$5350))|0;
    $306 = $305 & 127;
    $307 = ($306|0)==($$10473|0);
    $308 = (($$10473) + 1)|0;
    $309 = $308 & 127;
    if ($307) {
     $310 = (($309) + -1)|0;
     $311 = (($6) + ($310<<2)|0);
     HEAP32[$311>>2] = 0;
     $$11 = $309;
    } else {
     $$11 = $$10473;
    }
    $312 = $$0360474 * 1.0E+9;
    $313 = (($6) + ($306<<2)|0);
    $314 = HEAP32[$313>>2]|0;
    $315 = (+($314>>>0));
    $316 = $312 + $315;
    $317 = (($$4475) + 1)|0;
    $exitcond = ($317|0)==(2);
    if ($exitcond) {
     break;
    } else {
     $$0360474 = $316;$$10473 = $$11;$$4475 = $317;
    }
   }
   $318 = (+($4|0));
   $319 = $316 * $318;
   $320 = (($$1377) + 53)|0;
   $321 = (($320) - ($3))|0;
   $322 = ($321|0)<($2|0);
   $323 = ($321|0)>(0);
   $spec$store$select = $323 ? $321 : 0;
   $$0328 = $322 ? $spec$store$select : $2;
   $324 = ($$0328|0)<(53);
   if ($324) {
    $325 = (105 - ($$0328))|0;
    $326 = (+_scalbn(1.0,$325));
    $327 = (+_copysignl($326,$319));
    $328 = (53 - ($$0328))|0;
    $329 = (+_scalbn(1.0,$328));
    $330 = (+_fmodl($319,$329));
    $331 = $319 - $330;
    $332 = $327 + $331;
    $$0355 = $327;$$0356 = $330;$$1361 = $332;
   } else {
    $$0355 = 0.0;$$0356 = 0.0;$$1361 = $319;
   }
   $333 = (($$5350) + 2)|0;
   $334 = $333 & 127;
   $335 = ($334|0)==($$11|0);
   if ($335) {
    $$3359 = $$0356;
   } else {
    $336 = (($6) + ($334<<2)|0);
    $337 = HEAP32[$336>>2]|0;
    $338 = ($337>>>0)<(500000000);
    do {
     if ($338) {
      $339 = ($337|0)==(0);
      if ($339) {
       $340 = (($$5350) + 3)|0;
       $341 = $340 & 127;
       $342 = ($341|0)==($$11|0);
       if ($342) {
        $$1357 = $$0356;
        break;
       }
      }
      $343 = $318 * 0.25;
      $344 = $343 + $$0356;
      $$1357 = $344;
     } else {
      $345 = ($337|0)==(500000000);
      if (!($345)) {
       $346 = $318 * 0.75;
       $347 = $346 + $$0356;
       $$1357 = $347;
       break;
      }
      $348 = (($$5350) + 3)|0;
      $349 = $348 & 127;
      $350 = ($349|0)==($$11|0);
      if ($350) {
       $351 = $318 * 0.5;
       $352 = $351 + $$0356;
       $$1357 = $352;
       break;
      } else {
       $353 = $318 * 0.75;
       $354 = $353 + $$0356;
       $$1357 = $354;
       break;
      }
     }
    } while(0);
    $355 = (53 - ($$0328))|0;
    $356 = ($355|0)>(1);
    if ($356) {
     $357 = (+_fmodl($$1357,1.0));
     $358 = $357 != 0.0;
     if ($358) {
      $$3359 = $$1357;
     } else {
      $359 = $$1357 + 1.0;
      $$3359 = $359;
     }
    } else {
     $$3359 = $$1357;
    }
   }
   $360 = $$1361 + $$3359;
   $361 = $360 - $$0355;
   $362 = $320 & 2147483647;
   $363 = (-2 - ($7))|0;
   $364 = ($362|0)>($363|0);
   do {
    if ($364) {
     $365 = (+Math_abs((+$361)));
     $366 = !($365 >= 9007199254740992.0);
     $367 = $361 * 0.5;
     $not$ = $366 ^ 1;
     $368 = $not$&1;
     $$3379 = (($$1377) + ($368))|0;
     $$2362 = $366 ? $361 : $367;
     $369 = (($$3379) + 50)|0;
     $370 = ($369|0)>($8|0);
     if (!($370)) {
      $371 = ($$0328|0)!=($321|0);
      $narrow = $371 | $366;
      $$2366$v = $322 & $narrow;
      $372 = $$3359 != 0.0;
      $or$cond9 = $372 & $$2366$v;
      if (!($or$cond9)) {
       $$3363 = $$2362;$$4380 = $$3379;
       break;
      }
     }
     $373 = (___errno_location()|0);
     HEAP32[$373>>2] = 34;
     $$3363 = $$2362;$$4380 = $$3379;
    } else {
     $$3363 = $361;$$4380 = $$1377;
    }
   } while(0);
   $374 = (+_scalbnl($$3363,$$4380));
   $$1 = $374;
  }
 } while(0);
 STACKTOP = sp;return (+$$1);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04858 = 0, $$049 = 0, $$157 = 0, $$251 = 0, $$pr = 0, $$pre = 0, $$pre$phi69Z2D = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 switch ($11|0) {
 case 43: case 45:  {
  $12 = ($11|0)==(45);
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $100 = 0;$99 = -2147483648;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    label = 14;
   }
  } else {
   $$0 = $13;$$049 = $22;$$pre$phi69Z2D = $21;
   label = 12;
  }
  break;
 }
 default: {
  $$pre = (($11) + -48)|0;
  $$0 = 0;$$049 = $11;$$pre$phi69Z2D = $$pre;
  label = 12;
 }
 }
 if ((label|0) == 12) {
  $29 = ($$pre$phi69Z2D>>>0)>(9);
  if ($29) {
   label = 14;
  } else {
   $$04858 = 0;$$157 = $$049;
   while(1) {
    $33 = ($$04858*10)|0;
    $34 = (($$157) + -48)|0;
    $35 = (($34) + ($33))|0;
    $36 = HEAP32[$2>>2]|0;
    $37 = HEAP32[$4>>2]|0;
    $38 = ($36>>>0)<($37>>>0);
    if ($38) {
     $39 = ((($36)) + 1|0);
     HEAP32[$2>>2] = $39;
     $40 = HEAP8[$36>>0]|0;
     $41 = $40&255;
     $44 = $41;
    } else {
     $42 = (___shgetc($0)|0);
     $44 = $42;
    }
    $43 = (($44) + -48)|0;
    $45 = ($43>>>0)<(10);
    $46 = ($35|0)<(214748364);
    $47 = $45 & $46;
    if ($47) {
     $$04858 = $35;$$157 = $44;
    } else {
     break;
    }
   }
   $48 = ($35|0)<(0);
   $49 = $48 << 31 >> 31;
   $50 = ($43>>>0)<(10);
   if ($50) {
    $$251 = $44;$51 = $35;$52 = $49;
    while(1) {
     $53 = (___muldi3(($51|0),($52|0),10,0)|0);
     $54 = tempRet0;
     $55 = ($$251|0)<(0);
     $56 = $55 << 31 >> 31;
     $57 = (_i64Add(($$251|0),($56|0),-48,-1)|0);
     $58 = tempRet0;
     $59 = (_i64Add(($57|0),($58|0),($53|0),($54|0))|0);
     $60 = tempRet0;
     $61 = HEAP32[$2>>2]|0;
     $62 = HEAP32[$4>>2]|0;
     $63 = ($61>>>0)<($62>>>0);
     if ($63) {
      $64 = ((($61)) + 1|0);
      HEAP32[$2>>2] = $64;
      $65 = HEAP8[$61>>0]|0;
      $66 = $65&255;
      $69 = $66;
     } else {
      $67 = (___shgetc($0)|0);
      $69 = $67;
     }
     $68 = (($69) + -48)|0;
     $70 = ($68>>>0)<(10);
     $71 = ($60|0)<(21474836);
     $72 = ($59>>>0)<(2061584302);
     $73 = ($60|0)==(21474836);
     $74 = $73 & $72;
     $75 = $71 | $74;
     $76 = $70 & $75;
     if ($76) {
      $$251 = $69;$51 = $59;$52 = $60;
     } else {
      break;
     }
    }
    $77 = ($68>>>0)<(10);
    if ($77) {
     while(1) {
      $78 = HEAP32[$2>>2]|0;
      $79 = HEAP32[$4>>2]|0;
      $80 = ($78>>>0)<($79>>>0);
      if ($80) {
       $81 = ((($78)) + 1|0);
       HEAP32[$2>>2] = $81;
       $82 = HEAP8[$78>>0]|0;
       $83 = $82&255;
       $86 = $83;
      } else {
       $84 = (___shgetc($0)|0);
       $86 = $84;
      }
      $85 = (($86) + -48)|0;
      $87 = ($85>>>0)<(10);
      if (!($87)) {
       $93 = $59;$94 = $60;
       break;
      }
     }
    } else {
     $93 = $59;$94 = $60;
    }
   } else {
    $93 = $35;$94 = $49;
   }
   $88 = HEAP32[$4>>2]|0;
   $89 = ($88|0)==(0|0);
   if (!($89)) {
    $90 = HEAP32[$2>>2]|0;
    $91 = ((($90)) + -1|0);
    HEAP32[$2>>2] = $91;
   }
   $92 = ($$0|0)==(0);
   $95 = (_i64Subtract(0,0,($93|0),($94|0))|0);
   $96 = tempRet0;
   $97 = $92 ? $93 : $95;
   $98 = $92 ? $94 : $96;
   $100 = $97;$99 = $98;
  }
 }
 if ((label|0) == 14) {
  $$pr = HEAP32[$4>>2]|0;
  $30 = ($$pr|0)==(0|0);
  if ($30) {
   $100 = 0;$99 = -2147483648;
  } else {
   $31 = HEAP32[$2>>2]|0;
   $32 = ((($31)) + -1|0);
   HEAP32[$2>>2] = $32;
   $100 = 0;$99 = -2147483648;
  }
 }
 tempRet0 = ($99);
 return ($100|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$020 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0.0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0.0, $7 = 0, $8 = 0;
 var $9 = 0, $spec$select = 0, $spec$select21 = 0.0, $spec$select22 = 0, $spec$select23 = 0.0, $spec$store$select = 0, $spec$store$select1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($1|0)>(2046);
  $6 = $3 * 8.9884656743115795E+307;
  $7 = (($1) + -2046)|0;
  $8 = ($7|0)<(1023);
  $spec$store$select = $8 ? $7 : 1023;
  $spec$select = $5 ? $spec$store$select : $4;
  $spec$select21 = $5 ? $6 : $3;
  $$0 = $spec$select21;$$020 = $spec$select;
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($1|0)<(-2044);
   $13 = $10 * 2.2250738585072014E-308;
   $14 = (($1) + 2044)|0;
   $15 = ($14|0)>(-1022);
   $spec$store$select1 = $15 ? $14 : -1022;
   $spec$select22 = $12 ? $spec$store$select1 : $11;
   $spec$select23 = $12 ? $13 : $10;
   $$0 = $spec$select23;$$020 = $spec$select22;
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$070 = 0.0, $$071$lcssa = 0, $$07194 = 0, $$073$lcssa = 0, $$073100 = 0, $$172 = 0, $$174 = 0, $$275$lcssa = 0, $$27585 = 0, $$376$lcssa = 0, $$37682 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0.0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0.0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0.0, $28 = 0.0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $spec$select = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = tempRet0;
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = (___DOUBLE_BITS_829($1)|0);
   $19 = tempRet0;
   $20 = $19 & 2147483647;
   $21 = ($20>>>0)>(2146435072);
   $22 = ($18>>>0)>(0);
   $23 = ($20|0)==(2146435072);
   $24 = $23 & $22;
   $25 = $21 | $24;
   $26 = ($8|0)==(2047);
   $or$cond = $26 | $25;
   if ($or$cond) {
    label = 3;
   } else {
    $29 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $30 = tempRet0;
    $31 = ($30>>>0)>($14>>>0);
    $32 = ($29>>>0)>($13>>>0);
    $33 = ($30|0)==($14|0);
    $34 = $33 & $32;
    $35 = $31 | $34;
    if (!($35)) {
     $36 = ($29|0)==($13|0);
     $37 = ($30|0)==($14|0);
     $38 = $36 & $37;
     $39 = $0 * 0.0;
     $spec$select = $38 ? $39 : $0;
     return (+$spec$select);
    }
    $40 = ($8|0)==(0);
    if ($40) {
     $41 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $42 = tempRet0;
     $43 = ($42|0)>(-1);
     $44 = ($41>>>0)>(4294967295);
     $45 = ($42|0)==(-1);
     $46 = $45 & $44;
     $47 = $43 | $46;
     if ($47) {
      $$073100 = 0;$49 = $41;$50 = $42;
      while(1) {
       $48 = (($$073100) + -1)|0;
       $51 = (_bitshift64Shl(($49|0),($50|0),1)|0);
       $52 = tempRet0;
       $53 = ($52|0)>(-1);
       $54 = ($51>>>0)>(4294967295);
       $55 = ($52|0)==(-1);
       $56 = $55 & $54;
       $57 = $53 | $56;
       if ($57) {
        $$073100 = $48;$49 = $51;$50 = $52;
       } else {
        $$073$lcssa = $48;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $58 = (1 - ($$073$lcssa))|0;
     $59 = (_bitshift64Shl(($2|0),($3|0),($58|0))|0);
     $60 = tempRet0;
     $$174 = $$073$lcssa;$87 = $59;$88 = $60;
    } else {
     $61 = $3 & 1048575;
     $62 = $61 | 1048576;
     $$174 = $8;$87 = $2;$88 = $62;
    }
    $63 = ($11|0)==(0);
    if ($63) {
     $64 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $65 = tempRet0;
     $66 = ($65|0)>(-1);
     $67 = ($64>>>0)>(4294967295);
     $68 = ($65|0)==(-1);
     $69 = $68 & $67;
     $70 = $66 | $69;
     if ($70) {
      $$07194 = 0;$72 = $64;$73 = $65;
      while(1) {
       $71 = (($$07194) + -1)|0;
       $74 = (_bitshift64Shl(($72|0),($73|0),1)|0);
       $75 = tempRet0;
       $76 = ($75|0)>(-1);
       $77 = ($74>>>0)>(4294967295);
       $78 = ($75|0)==(-1);
       $79 = $78 & $77;
       $80 = $76 | $79;
       if ($80) {
        $$07194 = $71;$72 = $74;$73 = $75;
       } else {
        $$071$lcssa = $71;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $81 = (1 - ($$071$lcssa))|0;
     $82 = (_bitshift64Shl(($4|0),($5|0),($81|0))|0);
     $83 = tempRet0;
     $$172 = $$071$lcssa;$89 = $82;$90 = $83;
    } else {
     $84 = $5 & 1048575;
     $85 = $84 | 1048576;
     $$172 = $11;$89 = $4;$90 = $85;
    }
    $86 = ($$174|0)>($$172|0);
    $91 = (_i64Subtract(($87|0),($88|0),($89|0),($90|0))|0);
    $92 = tempRet0;
    $93 = ($92|0)>(-1);
    $94 = ($91>>>0)>(4294967295);
    $95 = ($92|0)==(-1);
    $96 = $95 & $94;
    $97 = $93 | $96;
    L25: do {
     if ($86) {
      $$27585 = $$174;$100 = $92;$158 = $97;$159 = $87;$160 = $88;$98 = $91;
      while(1) {
       if ($158) {
        $99 = ($98|0)==(0);
        $101 = ($100|0)==(0);
        $102 = $99 & $101;
        if ($102) {
         break;
        } else {
         $104 = $98;$105 = $100;
        }
       } else {
        $104 = $159;$105 = $160;
       }
       $106 = (_bitshift64Shl(($104|0),($105|0),1)|0);
       $107 = tempRet0;
       $108 = (($$27585) + -1)|0;
       $109 = ($108|0)>($$172|0);
       $110 = (_i64Subtract(($106|0),($107|0),($89|0),($90|0))|0);
       $111 = tempRet0;
       $112 = ($111|0)>(-1);
       $113 = ($110>>>0)>(4294967295);
       $114 = ($111|0)==(-1);
       $115 = $114 & $113;
       $116 = $112 | $115;
       if ($109) {
        $$27585 = $108;$100 = $111;$158 = $116;$159 = $106;$160 = $107;$98 = $110;
       } else {
        $$275$lcssa = $108;$$lcssa = $116;$117 = $110;$119 = $111;$156 = $106;$157 = $107;
        break L25;
       }
      }
      $103 = $0 * 0.0;
      $$070 = $103;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $97;$117 = $91;$119 = $92;$156 = $87;$157 = $88;
     }
    } while(0);
    if ($$lcssa) {
     $118 = ($117|0)==(0);
     $120 = ($119|0)==(0);
     $121 = $118 & $120;
     if ($121) {
      $122 = $0 * 0.0;
      $$070 = $122;
      break;
     } else {
      $123 = $119;$125 = $117;
     }
    } else {
     $123 = $157;$125 = $156;
    }
    $124 = ($123>>>0)<(1048576);
    $126 = ($125>>>0)<(0);
    $127 = ($123|0)==(1048576);
    $128 = $127 & $126;
    $129 = $124 | $128;
    if ($129) {
     $$37682 = $$275$lcssa;$130 = $125;$131 = $123;
     while(1) {
      $132 = (_bitshift64Shl(($130|0),($131|0),1)|0);
      $133 = tempRet0;
      $134 = (($$37682) + -1)|0;
      $135 = ($133>>>0)<(1048576);
      $136 = ($132>>>0)<(0);
      $137 = ($133|0)==(1048576);
      $138 = $137 & $136;
      $139 = $135 | $138;
      if ($139) {
       $$37682 = $134;$130 = $132;$131 = $133;
      } else {
       $$376$lcssa = $134;$141 = $132;$142 = $133;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$141 = $125;$142 = $123;
    }
    $140 = ($$376$lcssa|0)>(0);
    if ($140) {
     $143 = (_i64Add(($141|0),($142|0),0,-1048576)|0);
     $144 = tempRet0;
     $145 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $146 = tempRet0;
     $147 = $143 | $145;
     $148 = $144 | $146;
     $153 = $148;$155 = $147;
    } else {
     $149 = (1 - ($$376$lcssa))|0;
     $150 = (_bitshift64Lshr(($141|0),($142|0),($149|0))|0);
     $151 = tempRet0;
     $153 = $151;$155 = $150;
    }
    $152 = $153 | $12;
    HEAP32[tempDoublePtr>>2] = $155;HEAP32[tempDoublePtr+4>>2] = $152;$154 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $154;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $27 = $0 * $1;
  $28 = $27 / $27;
  $$070 = $28;
 }
 return (+$$070);
}
function ___DOUBLE_BITS_829($0) {
 $0 = +$0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$1 = HEAP32[tempDoublePtr>>2]|0;
 $2 = HEAP32[tempDoublePtr+4>>2]|0;
 tempRet0 = ($2);
 return ($1|0);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = (___toread($0)|0);
 $3 = ($2|0)==(0);
 if ($3) {
  $4 = ((($0)) + 32|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = (FUNCTION_TABLE_iiii[$5 & 127]($0,$1,1)|0);
  $7 = ($6|0)==(1);
  if ($7) {
   $8 = HEAP8[$1>>0]|0;
   $9 = $8&255;
   $$0 = $9;
  } else {
   $$0 = -1;
  }
 } else {
  $$0 = -1;
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $sext = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 28|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 127]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 HEAP32[$9>>2] = 0;
 HEAP32[$7>>2] = 0;
 $15 = HEAP32[$0>>2]|0;
 $16 = $15 & 4;
 $17 = ($16|0)==(0);
 if ($17) {
  $19 = ((($0)) + 44|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ((($0)) + 48|0);
  $22 = HEAP32[$21>>2]|0;
  $23 = (($20) + ($22)|0);
  $24 = ((($0)) + 8|0);
  HEAP32[$24>>2] = $23;
  $25 = ((($0)) + 4|0);
  HEAP32[$25>>2] = $23;
  $26 = $15 << 27;
  $sext = $26 >> 31;
  $$0 = $sext;
 } else {
  $18 = $15 | 32;
  HEAP32[$0>>2] = $18;
  $$0 = -1;
 }
 return ($$0|0);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _getopt_long($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (___getopt_long($0,$1,$2,$3,$4,0)|0);
 return ($5|0);
}
function ___getopt_long($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0454960 = 0, $$1 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre56 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $exitcond = 0, $exitcond59 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = HEAP32[2456]|0;
 $7 = ($6|0)==(0);
 $8 = (0)!=(0);
 $or$cond = $7 | $8;
 if ($or$cond) {
  HEAP32[8041] = 0;
  HEAP32[2456] = 1;
  $9 = 1;
 } else {
  $9 = $6;
 }
 $10 = ($9|0)<($0|0);
 L4: do {
  if ($10) {
   $11 = (($1) + ($9<<2)|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = ($12|0)==(0|0);
   if ($13) {
    $$1 = -1;
   } else {
    $14 = HEAP8[$2>>0]|0;
    switch ($14<<24>>24) {
    case 45: case 43:  {
     $24 = (___getopt_long_core($0,$1,$2,$3,$4,$5)|0);
     $$1 = $24;
     break L4;
     break;
    }
    default: {
    }
    }
    $$0454960 = $9;$16 = $12;
    while(1) {
     $15 = HEAP8[$16>>0]|0;
     $17 = ($15<<24>>24)==(45);
     if ($17) {
      $18 = ((($16)) + 1|0);
      $19 = HEAP8[$18>>0]|0;
      $20 = ($19<<24>>24)==(0);
      if (!($20)) {
       break;
      }
     }
     $21 = (($$0454960) + 1)|0;
     $22 = ($21|0)<($0|0);
     if (!($22)) {
      $$1 = -1;
      break L4;
     }
     $$phi$trans$insert = (($1) + ($21<<2)|0);
     $$pre = HEAP32[$$phi$trans$insert>>2]|0;
     $23 = ($$pre|0)==(0|0);
     if ($23) {
      $$1 = -1;
      break L4;
     } else {
      $$0454960 = $21;$16 = $$pre;
     }
    }
    HEAP32[2456] = $$0454960;
    $25 = (___getopt_long_core($0,$1,$2,$3,$4,$5)|0);
    $26 = ($$0454960|0)>($9|0);
    if ($26) {
     $27 = HEAP32[2456]|0;
     $28 = (($27) - ($$0454960))|0;
     $29 = ($28|0)>(0);
     if ($29) {
      $30 = (($27) + -1)|0;
      _permute($1,$9,$30);
      $exitcond59 = ($28|0)==(1);
      if (!($exitcond59)) {
       $33 = 1;
       while(1) {
        $$pre56 = HEAP32[2456]|0;
        $31 = (($$pre56) + -1)|0;
        _permute($1,$9,$31);
        $32 = (($33) + 1)|0;
        $exitcond = ($32|0)==($28|0);
        if ($exitcond) {
         break;
        } else {
         $33 = $32;
        }
       }
      }
     }
     $34 = (($28) + ($9))|0;
     HEAP32[2456] = $34;
     $$1 = $25;
    } else {
     $$1 = $25;
    }
   }
  } else {
   $$1 = -1;
  }
 } while(0);
 return ($$1|0);
}
function ___getopt_long_core($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$083105 = 0, $$086111 = 0, $$089110 = 0, $$092108 = 0, $$18798 = 0, $$19097 = 0, $$194 = 0, $$2$lcssa = 0, $$2104 = 0, $$288 = 0, $$291 = 0, $$291127 = 0, $$lcssa = 0, $$not = 0, $$not102 = 0, $$phi$trans$insert = 0, $$pr = 0, $$pr$lcssa = 0, $$pr101 = 0, $$pre = 0;
 var $$pre124 = 0, $$pre125 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $9 = 0, $narrow = 0, $or$cond = 0, $or$cond100 = 0, $or$cond100103 = 0, $or$cond3 = 0, $phitmp = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAP32[8042] = 0;
 $6 = ($3|0)==(0|0);
 L1: do {
  if ($6) {
   label = 35;
  } else {
   $7 = HEAP32[2456]|0;
   $8 = (($1) + ($7<<2)|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = HEAP8[$9>>0]|0;
   $11 = ($10<<24>>24)==(45);
   if ($11) {
    $12 = ($5|0)==(0);
    $$phi$trans$insert = ((($9)) + 1|0);
    $$pre = HEAP8[$$phi$trans$insert>>0]|0;
    if ($12) {
     $phitmp = ($$pre<<24>>24)==(45);
     if (!($phitmp)) {
      label = 35;
      break;
     }
     $14 = ((($9)) + 2|0);
     $15 = HEAP8[$14>>0]|0;
     $16 = ($15<<24>>24)==(0);
     if ($16) {
      label = 35;
      break;
     } else {
      $27 = 45;
     }
    } else {
     $13 = ($$pre<<24>>24)==(0);
     if ($13) {
      label = 35;
      break;
     } else {
      $27 = $$pre;
     }
    }
    $17 = HEAP8[$2>>0]|0;
    $18 = ($17<<24>>24)==(43);
    $19 = ($17<<24>>24)==(45);
    $narrow = $18 | $19;
    $20 = $narrow&1;
    $21 = (($2) + ($20)|0);
    $22 = HEAP8[$21>>0]|0;
    $23 = ($22<<24>>24)==(58);
    $24 = HEAP32[$3>>2]|0;
    $25 = ($24|0)==(0|0);
    if ($25) {
     $$291127 = 0;
    } else {
     $26 = ((($9)) + 1|0);
     $28 = ($27<<24>>24)==(45);
     $29 = ((($9)) + 2|0);
     $spec$select = $28 ? $29 : $26;
     $$pr101 = HEAP8[$spec$select>>0]|0;
     $$086111 = 0;$$089110 = 0;$$092108 = 0;$31 = $24;
     L11: while(1) {
      $30 = HEAP8[$31>>0]|0;
      $32 = ($30<<24>>24)==(0);
      $$not102 = $32 ^ 1;
      $33 = ($30<<24>>24)==($$pr101<<24>>24);
      $or$cond100103 = $33 & $$not102;
      if ($or$cond100103) {
       $$083105 = $31;$$2104 = $spec$select;
       while(1) {
        $34 = ((($$083105)) + 1|0);
        $35 = ((($$2104)) + 1|0);
        $36 = HEAP8[$34>>0]|0;
        $37 = ($36<<24>>24)==(0);
        $$pr = HEAP8[$35>>0]|0;
        $$not = $37 ^ 1;
        $38 = ($36<<24>>24)==($$pr<<24>>24);
        $or$cond100 = $38 & $$not;
        if ($or$cond100) {
         $$083105 = $34;$$2104 = $35;
        } else {
         $$2$lcssa = $35;$$lcssa = $37;$$pr$lcssa = $$pr;
         break;
        }
       }
      } else {
       $$2$lcssa = $spec$select;$$lcssa = $32;$$pr$lcssa = $$pr101;
      }
      switch ($$pr$lcssa<<24>>24) {
      case 61: case 0:  {
       $39 = (($$089110) + 1)|0;
       if ($$lcssa) {
        $$288 = $$092108;$$291 = 1;
        break L11;
       } else {
        $$18798 = $$092108;$$19097 = $39;
       }
       break;
      }
      default: {
       $$18798 = $$086111;$$19097 = $$089110;
      }
      }
      $40 = (($$092108) + 1)|0;
      $41 = (($3) + ($40<<4)|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = ($42|0)==(0|0);
      if ($43) {
       $$288 = $$18798;$$291 = $$19097;
       break;
      } else {
       $$086111 = $$18798;$$089110 = $$19097;$$092108 = $40;$31 = $42;
      }
     }
     $44 = ($$291|0)==(1);
     if ($44) {
      $45 = (($7) + 1)|0;
      HEAP32[2456] = $45;
      $46 = (($3) + ($$288<<4)|0);
      $47 = (((($3) + ($$288<<4)|0)) + 12|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = HEAP8[$$2$lcssa>>0]|0;
      $50 = ($49<<24>>24)==(61);
      $51 = (((($3) + ($$288<<4)|0)) + 4|0);
      $52 = HEAP32[$51>>2]|0;
      do {
       if ($50) {
        $53 = ($52|0)==(0);
        if (!($53)) {
         $59 = ((($$2$lcssa)) + 1|0);
         HEAP32[8042] = $59;
         break;
        }
        $54 = $23 ^ 1;
        $55 = (1)!=(0);
        $or$cond = $55 & $54;
        if (!($or$cond)) {
         $$194 = 63;
         break L1;
        }
        $56 = HEAP32[$1>>2]|0;
        $57 = HEAP32[$46>>2]|0;
        $58 = (_strlen($57)|0);
        ___getopt_msg($56,31549,$57,$58);
        $$194 = 63;
        break L1;
       } else {
        $60 = ($52|0)==(1);
        if ($60) {
         $61 = (($1) + ($45<<2)|0);
         $62 = HEAP32[$61>>2]|0;
         HEAP32[8042] = $62;
         $63 = ($62|0)==(0|0);
         if (!($63)) {
          $68 = (($7) + 2)|0;
          HEAP32[2456] = $68;
          break;
         }
         if ($23) {
          $$194 = 58;
          break L1;
         }
         $64 = (1)==(0);
         if ($64) {
          $$194 = 63;
          break L1;
         }
         $65 = HEAP32[$1>>2]|0;
         $66 = HEAP32[$46>>2]|0;
         $67 = (_strlen($66)|0);
         ___getopt_msg($65,31586,$66,$67);
         $$194 = 63;
         break L1;
        }
       }
      } while(0);
      $69 = ($4|0)==(0|0);
      if ($69) {
       $73 = $48;
      } else {
       HEAP32[$4>>2] = $$288;
       $$pre125 = HEAP32[$47>>2]|0;
       $73 = $$pre125;
      }
      $70 = (((($3) + ($$288<<4)|0)) + 8|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = ($71|0)==(0|0);
      if ($72) {
       $$194 = $73;
       break;
      }
      HEAP32[$71>>2] = $73;
      $$194 = 0;
      break;
     } else {
      $$291127 = $$291;
     }
    }
    $74 = ($27<<24>>24)==(45);
    if ($74) {
     $75 = $23 ^ 1;
     $76 = (1)!=(0);
     $or$cond3 = $76 & $75;
     $77 = ((($9)) + 2|0);
     if ($or$cond3) {
      $78 = ($$291127|0)==(0);
      $79 = $78 ? 31618 : 31642;
      $80 = HEAP32[$1>>2]|0;
      $81 = (_strlen($77)|0);
      ___getopt_msg($80,$79,$77,$81);
      $$pre124 = HEAP32[2456]|0;
      $83 = $$pre124;
     } else {
      $83 = $7;
     }
     $82 = (($83) + 1)|0;
     HEAP32[2456] = $82;
     $$194 = 63;
    } else {
     label = 35;
    }
   } else {
    label = 35;
   }
  }
 } while(0);
 if ((label|0) == 35) {
  $84 = (_getopt($0,$1,$2)|0);
  $$194 = $84;
 }
 return ($$194|0);
}
function _permute($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$018 = 0, $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (($0) + ($2<<2)|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)>($1|0);
 if ($5) {
  $$018 = $2;
  while(1) {
   $6 = (($$018) + -1)|0;
   $7 = (($0) + ($6<<2)|0);
   $8 = HEAP32[$7>>2]|0;
   $9 = (($0) + ($$018<<2)|0);
   HEAP32[$9>>2] = $8;
   $10 = ($6|0)>($1|0);
   if ($10) {
    $$018 = $6;
   } else {
    break;
   }
  }
 }
 $11 = (($0) + ($1<<2)|0);
 HEAP32[$11>>2] = $4;
 return;
}
function _qsort($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$067$lcssa = 0, $$06772 = 0, $$068$lcssa = 0, $$06871 = 0, $$1 = 0, $$169 = 0, $$169$be = 0, $$2 = 0, $$2$be = 0, $$be = 0, $$pre$pre = 0, $$pre76 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $15$phi = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $4 = sp + 8|0;
 $5 = sp;
 $6 = Math_imul($2, $1)|0;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = 1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = ($6|0)==(0);
 L1: do {
  if (!($11)) {
   $12 = (0 - ($2))|0;
   $13 = ((($4)) + 4|0);
   HEAP32[$13>>2] = $2;
   HEAP32[$4>>2] = $2;
   $$0 = 2;$15 = $2;$17 = $2;
   while(1) {
    $14 = (($15) + ($2))|0;
    $16 = (($14) + ($17))|0;
    $18 = (($4) + ($$0<<2)|0);
    HEAP32[$18>>2] = $16;
    $19 = ($16>>>0)<($6>>>0);
    $20 = (($$0) + 1)|0;
    if ($19) {
     $15$phi = $17;$$0 = $20;$17 = $16;$15 = $15$phi;
    } else {
     break;
    }
   }
   $21 = (($0) + ($6)|0);
   $22 = (($21) + ($12)|0);
   $23 = ($22>>>0)>($0>>>0);
   if ($23) {
    $24 = $22;
    $$06772 = 1;$$06871 = $0;$26 = 1;
    while(1) {
     $25 = $26 & 3;
     $27 = ($25|0)==(3);
     do {
      if ($27) {
       _sift($$06871,$2,$3,$$06772,$4);
       _shr($5,2);
       $28 = (($$06772) + 2)|0;
       $$1 = $28;
      } else {
       $29 = (($$06772) + -1)|0;
       $30 = (($4) + ($29<<2)|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = $$06871;
       $33 = (($24) - ($32))|0;
       $34 = ($31>>>0)<($33>>>0);
       if ($34) {
        _sift($$06871,$2,$3,$$06772,$4);
       } else {
        _trinkle($$06871,$2,$3,$5,$$06772,0,$4);
       }
       $35 = ($$06772|0)==(1);
       if ($35) {
        _shl($5,1);
        $$1 = 0;
        break;
       } else {
        _shl($5,$29);
        $$1 = 1;
        break;
       }
      }
     } while(0);
     $36 = HEAP32[$5>>2]|0;
     $37 = $36 | 1;
     HEAP32[$5>>2] = $37;
     $38 = (($$06871) + ($2)|0);
     $39 = ($38>>>0)<($22>>>0);
     if ($39) {
      $$06772 = $$1;$$06871 = $38;$26 = $37;
     } else {
      $$067$lcssa = $$1;$$068$lcssa = $38;$61 = $37;
      break;
     }
    }
   } else {
    $$067$lcssa = 1;$$068$lcssa = $0;$61 = 1;
   }
   _trinkle($$068$lcssa,$2,$3,$5,$$067$lcssa,0,$4);
   $40 = ((($5)) + 4|0);
   $$169 = $$068$lcssa;$$2 = $$067$lcssa;$42 = $61;
   while(1) {
    $41 = ($$2|0)==(1);
    $43 = ($42|0)==(1);
    $or$cond = $41 & $43;
    if ($or$cond) {
     $44 = HEAP32[$40>>2]|0;
     $45 = ($44|0)==(0);
     if ($45) {
      break L1;
     } else {
      label = 19;
     }
    } else {
     $46 = ($$2|0)<(2);
     if ($46) {
      label = 19;
     } else {
      _shl($5,2);
      $49 = (($$2) + -2)|0;
      $50 = HEAP32[$5>>2]|0;
      $51 = $50 ^ 7;
      HEAP32[$5>>2] = $51;
      _shr($5,1);
      $52 = (($4) + ($49<<2)|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = (0 - ($53))|0;
      $55 = (($$169) + ($54)|0);
      $56 = (($55) + ($12)|0);
      $57 = (($$2) + -1)|0;
      _trinkle($56,$2,$3,$5,$57,1,$4);
      _shl($5,1);
      $58 = HEAP32[$5>>2]|0;
      $59 = $58 | 1;
      HEAP32[$5>>2] = $59;
      $60 = (($$169) + ($12)|0);
      _trinkle($60,$2,$3,$5,$49,1,$4);
      $$169$be = $60;$$2$be = $49;$$be = $59;
     }
    }
    if ((label|0) == 19) {
     label = 0;
     $47 = (_pntz($5)|0);
     _shr($5,$47);
     $48 = (($47) + ($$2))|0;
     $$pre$pre = HEAP32[$5>>2]|0;
     $$pre76 = (($$169) + ($12)|0);
     $$169$be = $$pre76;$$2$be = $48;$$be = $$pre$pre;
    }
    $$169 = $$169$be;$$2 = $$2$be;$42 = $$be;
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _sift($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$02934 = 0, $$03133 = 0, $$035 = 0, $$1 = 0, $$130 = 0, $$132 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $5 = sp;
 HEAP32[$5>>2] = $0;
 $6 = ($3|0)>(1);
 L1: do {
  if ($6) {
   $7 = (0 - ($1))|0;
   $$02934 = $0;$$03133 = $3;$$035 = 1;$14 = $0;
   while(1) {
    $8 = (($$02934) + ($7)|0);
    $9 = (($$03133) + -2)|0;
    $10 = (($4) + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (0 - ($11))|0;
    $13 = (($8) + ($12)|0);
    $15 = (FUNCTION_TABLE_iii[$2 & 63]($14,$13)|0);
    $16 = ($15|0)>(-1);
    if ($16) {
     $17 = (FUNCTION_TABLE_iii[$2 & 63]($14,$8)|0);
     $18 = ($17|0)>(-1);
     if ($18) {
      $$0$lcssa = $$035;
      break L1;
     }
    }
    $19 = (FUNCTION_TABLE_iii[$2 & 63]($13,$8)|0);
    $20 = ($19|0)>(-1);
    $21 = (($5) + ($$035<<2)|0);
    if ($20) {
     HEAP32[$21>>2] = $13;
     $22 = (($$03133) + -1)|0;
     $$130 = $13;$$132 = $22;
    } else {
     HEAP32[$21>>2] = $8;
     $$130 = $8;$$132 = $9;
    }
    $$1 = (($$035) + 1)|0;
    $23 = ($$132|0)>(1);
    if (!($23)) {
     $$0$lcssa = $$1;
     break L1;
    }
    $$pre = HEAP32[$5>>2]|0;
    $$02934 = $$130;$$03133 = $$132;$$035 = $$1;$14 = $$pre;
   }
  } else {
   $$0$lcssa = 1;
  }
 } while(0);
 _cycle($1,$5,$$0$lcssa);
 STACKTOP = sp;return;
}
function _shr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$3>>2]|0;
  HEAP32[$0>>2] = $5;
  HEAP32[$3>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$0>>2]|0;
  $$pre11 = HEAP32[$3>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 >>> $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 << $8;
 $11 = $9 | $6;
 HEAP32[$0>>2] = $11;
 $12 = $10 >>> $$0;
 HEAP32[$3>>2] = $12;
 return;
}
function _trinkle($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0$lcssa = 0, $$045$lcssa = 0, $$04551 = 0, $$0455780 = 0, $$046$lcssa = 0, $$04653 = 0, $$0465681 = 0, $$047$lcssa = 0, $$0475582 = 0, $$049 = 0, $$05879 = 0, $$05879$phi = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $7 = sp + 232|0;
 $8 = sp;
 $9 = HEAP32[$3>>2]|0;
 HEAP32[$7>>2] = $9;
 $10 = ((($3)) + 4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($7)) + 4|0);
 HEAP32[$12>>2] = $11;
 HEAP32[$8>>2] = $0;
 $13 = ($9|0)!=(1);
 $14 = ($11|0)!=(0);
 $15 = $13 | $14;
 L1: do {
  if ($15) {
   $16 = (0 - ($1))|0;
   $17 = (($6) + ($4<<2)|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = (0 - ($18))|0;
   $20 = (($0) + ($19)|0);
   $21 = (FUNCTION_TABLE_iii[$2 & 63]($20,$0)|0);
   $22 = ($21|0)<(1);
   if ($22) {
    $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
    label = 9;
   } else {
    $phitmp = ($5|0)==(0);
    $$0455780 = 1;$$0465681 = $4;$$0475582 = $phitmp;$$05879 = $0;$28 = $20;
    while(1) {
     $23 = ($$0465681|0)>(1);
     $or$cond = $$0475582 & $23;
     if ($or$cond) {
      $24 = (($$05879) + ($16)|0);
      $25 = (($$0465681) + -2)|0;
      $26 = (($6) + ($25<<2)|0);
      $27 = HEAP32[$26>>2]|0;
      $29 = (FUNCTION_TABLE_iii[$2 & 63]($24,$28)|0);
      $30 = ($29|0)>(-1);
      if ($30) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
      $31 = (0 - ($27))|0;
      $32 = (($24) + ($31)|0);
      $33 = (FUNCTION_TABLE_iii[$2 & 63]($32,$28)|0);
      $34 = ($33|0)>(-1);
      if ($34) {
       $$04551 = $$0455780;$$04653 = $$0465681;$$049 = $$05879;
       label = 10;
       break L1;
      }
     }
     $35 = (($$0455780) + 1)|0;
     $36 = (($8) + ($$0455780<<2)|0);
     HEAP32[$36>>2] = $28;
     $37 = (_pntz($7)|0);
     _shr($7,$37);
     $38 = (($37) + ($$0465681))|0;
     $39 = HEAP32[$7>>2]|0;
     $40 = ($39|0)!=(1);
     $41 = HEAP32[$12>>2]|0;
     $42 = ($41|0)!=(0);
     $43 = $40 | $42;
     if (!($43)) {
      $$04551 = $35;$$04653 = $38;$$049 = $28;
      label = 10;
      break L1;
     }
     $$pre = HEAP32[$8>>2]|0;
     $44 = (($6) + ($38<<2)|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (0 - ($45))|0;
     $47 = (($28) + ($46)|0);
     $48 = (FUNCTION_TABLE_iii[$2 & 63]($47,$$pre)|0);
     $49 = ($48|0)<(1);
     if ($49) {
      $$0$lcssa = $28;$$045$lcssa = $35;$$046$lcssa = $38;$$047$lcssa = 0;
      label = 9;
      break;
     } else {
      $$05879$phi = $28;$$0455780 = $35;$$0465681 = $38;$$0475582 = 1;$28 = $47;$$05879 = $$05879$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
   label = 9;
  }
 } while(0);
 if ((label|0) == 9) {
  $50 = ($$047$lcssa|0)==(0);
  if ($50) {
   $$04551 = $$045$lcssa;$$04653 = $$046$lcssa;$$049 = $$0$lcssa;
   label = 10;
  }
 }
 if ((label|0) == 10) {
  _cycle($1,$8,$$04551);
  _sift($$049,$1,$2,$$04653,$6);
 }
 STACKTOP = sp;return;
}
function _shl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $$pre11 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1>>>0)>(31);
 $3 = ((($0)) + 4|0);
 if ($2) {
  $4 = (($1) + -32)|0;
  $5 = HEAP32[$0>>2]|0;
  HEAP32[$3>>2] = $5;
  HEAP32[$0>>2] = 0;
  $$0 = $4;$10 = 0;$7 = $5;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $$pre11 = HEAP32[$0>>2]|0;
  $$0 = $1;$10 = $$pre11;$7 = $$pre;
 }
 $6 = $7 << $$0;
 $8 = (32 - ($$0))|0;
 $9 = $10 >>> $8;
 $11 = $9 | $6;
 HEAP32[$3>>2] = $11;
 $12 = $10 << $$0;
 HEAP32[$0>>2] = $12;
 return;
}
function _pntz($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (($1) + -1)|0;
 $3 = (_a_ctz_l_680($2)|0);
 $4 = ($3|0)==(0);
 if ($4) {
  $5 = ((($0)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  $7 = (_a_ctz_l_680($6)|0);
  $8 = (($7) + 32)|0;
  $9 = ($7|0)==(0);
  $spec$select = $9 ? 0 : $8;
  return ($spec$select|0);
 } else {
  return ($3|0);
 }
 return (0)|0;
}
function _a_ctz_l_680($0) {
 $0 = $0|0;
 var $$068 = 0, $$07 = 0, $$09 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  $$07 = 32;
 } else {
  $2 = $0 & 1;
  $3 = ($2|0)==(0);
  if ($3) {
   $$068 = $0;$$09 = 0;
   while(1) {
    $4 = (($$09) + 1)|0;
    $5 = $$068 >>> 1;
    $6 = $$068 & 2;
    $7 = ($6|0)==(0);
    if ($7) {
     $$068 = $5;$$09 = $4;
    } else {
     $$07 = $4;
     break;
    }
   }
  } else {
   $$07 = 0;
  }
 }
 return ($$07|0);
}
function _cycle($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02527 = 0, $$026 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $3 = sp;
 $4 = ($2|0)<(2);
 L1: do {
  if (!($4)) {
   $5 = (($1) + ($2<<2)|0);
   HEAP32[$5>>2] = $3;
   $6 = ($0|0)==(0);
   if (!($6)) {
    $$02527 = $0;$10 = $3;
    while(1) {
     $7 = ($$02527>>>0)<(256);
     $8 = $7 ? $$02527 : 256;
     $9 = HEAP32[$1>>2]|0;
     (_memcpy(($10|0),($9|0),($8|0))|0);
     $$026 = 0;
     while(1) {
      $11 = (($1) + ($$026<<2)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (($$026) + 1)|0;
      $14 = (($1) + ($13<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      (_memcpy(($12|0),($15|0),($8|0))|0);
      $16 = HEAP32[$11>>2]|0;
      $17 = (($16) + ($8)|0);
      HEAP32[$11>>2] = $17;
      $exitcond = ($13|0)==($2|0);
      if ($exitcond) {
       break;
      } else {
       $$026 = $13;
      }
     }
     $18 = (($$02527) - ($8))|0;
     $19 = ($18|0)==(0);
     if ($19) {
      break L1;
     }
     $$pre = HEAP32[$5>>2]|0;
     $$02527 = $18;$10 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _unlink($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = $0;
 HEAP32[$vararg_buffer>>2] = $1;
 $2 = (___syscall10(10,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _strtoul($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox($0,$1,$2,-1,0)|0);
 $4 = tempRet0;
 return ($3|0);
}
function _strtox($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($5)) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)<(0|0);
 $9 = ((($0)) + 2147483647|0);
 $$sink = $8 ? (-1) : $9;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $$sink;
 $11 = ((($5)) + 76|0);
 HEAP32[$11>>2] = -1;
 ___shlim($5,0);
 $12 = (___intscan($5,$2,1,$3,$4)|0);
 $13 = tempRet0;
 $14 = ($1|0)==(0|0);
 if (!($14)) {
  $15 = ((($5)) + 108|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = HEAP32[$10>>2]|0;
  $19 = (($17) + ($16))|0;
  $20 = (($19) - ($18))|0;
  $21 = (($0) + ($20)|0);
  HEAP32[$1>>2] = $21;
 }
 tempRet0 = ($13);
 STACKTOP = sp;return ($12|0);
}
function _strncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($0,$1,$2)|0);
 return ($0|0);
}
function ___stpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03754 = 0, $$038$lcssa = 0, $$03867 = 0, $$039$lcssa = 0, $$03966 = 0, $$042$lcssa = 0, $$04265 = 0, $$055 = 0, $$1$lcssa = 0, $$140 = 0, $$143 = 0, $$153 = 0, $$2 = 0, $$24147 = 0, $$24446 = 0, $$345 = 0, $$348 = 0, $$4 = 0;
 var $$lcssa = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond64 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = $3 ^ $4;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $8 = $3 & 3;
   $9 = ($8|0)!=(0);
   $10 = ($2|0)!=(0);
   $or$cond64 = $10 & $9;
   if ($or$cond64) {
    $$03867 = $2;$$03966 = $1;$$04265 = $0;
    while(1) {
     $11 = HEAP8[$$03966>>0]|0;
     HEAP8[$$04265>>0] = $11;
     $12 = ($11<<24>>24)==(0);
     if ($12) {
      $$345 = $$04265;$$4 = $$03867;
      break L1;
     }
     $13 = (($$03867) + -1)|0;
     $14 = ((($$03966)) + 1|0);
     $15 = ((($$04265)) + 1|0);
     $16 = $14;
     $17 = $16 & 3;
     $18 = ($17|0)!=(0);
     $19 = ($13|0)!=(0);
     $or$cond = $19 & $18;
     if ($or$cond) {
      $$03867 = $13;$$03966 = $14;$$04265 = $15;
     } else {
      $$038$lcssa = $13;$$039$lcssa = $14;$$042$lcssa = $15;$$lcssa = $19;
      break;
     }
    }
   } else {
    $$038$lcssa = $2;$$039$lcssa = $1;$$042$lcssa = $0;$$lcssa = $10;
   }
   if ($$lcssa) {
    $$pr = HEAP8[$$039$lcssa>>0]|0;
    $20 = ($$pr<<24>>24)==(0);
    if ($20) {
     $$345 = $$042$lcssa;$$4 = $$038$lcssa;
    } else {
     $21 = ($$038$lcssa>>>0)>(3);
     L11: do {
      if ($21) {
       $$03754 = $$042$lcssa;$$055 = $$039$lcssa;$$153 = $$038$lcssa;
       while(1) {
        $22 = HEAP32[$$055>>2]|0;
        $23 = (($22) + -16843009)|0;
        $24 = $22 & -2139062144;
        $25 = $24 ^ -2139062144;
        $26 = $25 & $23;
        $27 = ($26|0)==(0);
        if (!($27)) {
         $$0$lcssa = $$055;$$037$lcssa = $$03754;$$1$lcssa = $$153;
         break L11;
        }
        HEAP32[$$03754>>2] = $22;
        $28 = (($$153) + -4)|0;
        $29 = ((($$055)) + 4|0);
        $30 = ((($$03754)) + 4|0);
        $31 = ($28>>>0)>(3);
        if ($31) {
         $$03754 = $30;$$055 = $29;$$153 = $28;
        } else {
         $$0$lcssa = $29;$$037$lcssa = $30;$$1$lcssa = $28;
         break;
        }
       }
      } else {
       $$0$lcssa = $$039$lcssa;$$037$lcssa = $$042$lcssa;$$1$lcssa = $$038$lcssa;
      }
     } while(0);
     $$140 = $$0$lcssa;$$143 = $$037$lcssa;$$2 = $$1$lcssa;
     label = 13;
    }
   } else {
    $$345 = $$042$lcssa;$$4 = 0;
   }
  } else {
   $$140 = $1;$$143 = $0;$$2 = $2;
   label = 13;
  }
 } while(0);
 L17: do {
  if ((label|0) == 13) {
   $32 = ($$2|0)==(0);
   if ($32) {
    $$345 = $$143;$$4 = 0;
   } else {
    $$24147 = $$140;$$24446 = $$143;$$348 = $$2;
    while(1) {
     $33 = HEAP8[$$24147>>0]|0;
     HEAP8[$$24446>>0] = $33;
     $34 = ($33<<24>>24)==(0);
     if ($34) {
      $$345 = $$24446;$$4 = $$348;
      break L17;
     }
     $35 = (($$348) + -1)|0;
     $36 = ((($$24147)) + 1|0);
     $37 = ((($$24446)) + 1|0);
     $38 = ($35|0)==(0);
     if ($38) {
      $$345 = $37;$$4 = 0;
      break;
     } else {
      $$24147 = $36;$$24446 = $37;$$348 = $35;
     }
    }
   }
  }
 } while(0);
 (_memset(($$345|0),0,($$4|0))|0);
 return ($$345|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = $0&255;
   $21 = $0 & 255;
   $22 = ((($1)) + 75|0);
   $23 = HEAP8[$22>>0]|0;
   $24 = $23 << 24 >> 24;
   $25 = ($21|0)==($24|0);
   if ($25) {
    label = 10;
   } else {
    $26 = ((($1)) + 20|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ((($1)) + 16|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($27>>>0)<($29>>>0);
    if ($30) {
     $31 = ((($27)) + 1|0);
     HEAP32[$26>>2] = $31;
     HEAP8[$27>>0] = $20;
     $33 = $21;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = $0&255;
   $8 = $0 & 255;
   $9 = ((($1)) + 75|0);
   $10 = HEAP8[$9>>0]|0;
   $11 = $10 << 24 >> 24;
   $12 = ($8|0)==($11|0);
   if (!($12)) {
    $13 = ((($1)) + 20|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ((($1)) + 16|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ($14>>>0)<($16>>>0);
    if ($17) {
     $18 = ((($14)) + 1|0);
     HEAP32[$13>>2] = $18;
     HEAP8[$14>>0] = $7;
     $$0 = $8;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$054 = 0, $$056 = 0, $$15759 = 0, $$160 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $spec$select = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ($1|0)==(0);
 $spec$select = $5 ? 0 : $2;
 $6 = ((($3)) + 76|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)>(-1);
 if ($8) {
  $9 = (___lockfile($3)|0);
  $36 = $9;
 } else {
  $36 = 0;
 }
 $10 = ((($3)) + 74|0);
 $11 = HEAP8[$10>>0]|0;
 $12 = $11 << 24 >> 24;
 $13 = (($12) + 255)|0;
 $14 = $13 | $12;
 $15 = $14&255;
 HEAP8[$10>>0] = $15;
 $16 = ((($3)) + 8|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ((($3)) + 4|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (($17) - ($19))|0;
 $21 = ($20|0)>(0);
 if ($21) {
  $22 = $19;
  $23 = ($20>>>0)<($4>>>0);
  $$ = $23 ? $20 : $4;
  (_memcpy(($0|0),($22|0),($$|0))|0);
  $24 = HEAP32[$18>>2]|0;
  $25 = (($24) + ($$)|0);
  HEAP32[$18>>2] = $25;
  $26 = (($0) + ($$)|0);
  $27 = (($4) - ($$))|0;
  $$054 = $27;$$056 = $26;
 } else {
  $$054 = $4;$$056 = $0;
 }
 $28 = ($$054|0)==(0);
 L7: do {
  if ($28) {
   label = 13;
  } else {
   $29 = ((($3)) + 32|0);
   $$15759 = $$056;$$160 = $$054;
   while(1) {
    $30 = (___toread($3)|0);
    $31 = ($30|0)==(0);
    if (!($31)) {
     break;
    }
    $32 = HEAP32[$29>>2]|0;
    $33 = (FUNCTION_TABLE_iiii[$32 & 127]($3,$$15759,$$160)|0);
    $34 = (($33) + 1)|0;
    $35 = ($34>>>0)<(2);
    if ($35) {
     break;
    }
    $40 = (($$160) - ($33))|0;
    $41 = (($$15759) + ($33)|0);
    $42 = ($40|0)==(0);
    if ($42) {
     label = 13;
     break L7;
    } else {
     $$15759 = $41;$$160 = $40;
    }
   }
   $37 = ($36|0)==(0);
   if (!($37)) {
    ___unlockfile($3);
   }
   $38 = (($4) - ($$160))|0;
   $39 = (($38>>>0) / ($1>>>0))&-1;
   $$0 = $39;
  }
 } while(0);
 if ((label|0) == 13) {
  $43 = ($36|0)==(0);
  if ($43) {
   $$0 = $spec$select;
  } else {
   ___unlockfile($3);
   $$0 = $spec$select;
  }
 }
 return ($$0|0);
}
function _rename($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $4 = (___syscall38(38,($vararg_buffer|0))|0);
 $5 = (___syscall_ret($4)|0);
 STACKTOP = sp;return ($5|0);
}
function _puts($0) {
 $0 = $0|0;
 var $$lobit = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[2457]|0;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)>(-1);
 if ($4) {
  $5 = (___lockfile($1)|0);
  $18 = $5;
 } else {
  $18 = 0;
 }
 $6 = (_fputs($0,$1)|0);
 $7 = ($6|0)<(0);
 do {
  if ($7) {
   $20 = -1;
  } else {
   $8 = ((($1)) + 75|0);
   $9 = HEAP8[$8>>0]|0;
   $10 = ($9<<24>>24)==(10);
   if (!($10)) {
    $11 = ((($1)) + 20|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($1)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($12>>>0)<($14>>>0);
    if ($15) {
     $16 = ((($12)) + 1|0);
     HEAP32[$11>>2] = $16;
     HEAP8[$12>>0] = 10;
     $20 = 0;
     break;
    }
   }
   $17 = (___overflow($1,10)|0);
   $$lobit = $17 >> 31;
   $20 = $$lobit;
  }
 } while(0);
 $19 = ($18|0)==(0);
 if (!($19)) {
  ___unlockfile($1);
 }
 return ($20|0);
}
function _strtol($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox($0,$1,$2,-2147483648,0)|0);
 $4 = tempRet0;
 return ($3|0);
}
function _atoi($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01015 = 0, $$011 = 0, $$1 = 0, $$112 = 0, $$214 = 0, $$neg13 = 0, $$pre = 0, $$pre$phiZ2D = 0, $$pre16 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 $6 = HEAP8[$$011>>0]|0;
 $7 = $6 << 24 >> 24;
 switch ($7|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1 = 0;$$112 = $$011;$$pre$phiZ2D = $7;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$pre16 = $$pre << 24 >> 24;
  $$1 = $$0;$$112 = $5;$$pre$phiZ2D = $$pre16;
 }
 $8 = (_isdigit($$pre$phiZ2D)|0);
 $9 = ($8|0)==(0);
 if ($9) {
  $$010$lcssa = 0;
 } else {
  $$01015 = 0;$$214 = $$112;
  while(1) {
   $10 = ($$01015*10)|0;
   $11 = ((($$214)) + 1|0);
   $12 = HEAP8[$$214>>0]|0;
   $13 = $12 << 24 >> 24;
   $$neg13 = (($10) + 48)|0;
   $14 = (($$neg13) - ($13))|0;
   $15 = HEAP8[$11>>0]|0;
   $16 = $15 << 24 >> 24;
   $17 = (_isdigit($16)|0);
   $18 = ($17|0)==(0);
   if ($18) {
    $$010$lcssa = $14;
    break;
   } else {
    $$01015 = $14;$$214 = $11;
   }
  }
 }
 $19 = ($$1|0)==(0);
 $20 = (0 - ($$010$lcssa))|0;
 $21 = $19 ? $20 : $$010$lcssa;
 return ($21|0);
}
function _atof($0) {
 $0 = $0|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_strtod($0,0));
 return (+$1);
}
function _strtod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox_671($0,$1,1));
 return (+$2);
}
function _strtox_671($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $3 = sp;
 dest=$3; stop=dest+124|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = (-1);
 $6 = ((($3)) + 44|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($3)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($3,0);
 $8 = (+___floatscan($3,$2,1));
 $9 = ((($3)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13) + ($10))|0;
 $15 = ($1|0)==(0|0);
 if (!($15)) {
  $16 = ($14|0)==(0);
  $17 = (($0) + ($14)|0);
  $18 = $16 ? $0 : $17;
  HEAP32[$1>>2] = $18;
 }
 STACKTOP = sp;return (+$8);
}
function runPostSets() {
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _llvm_cttz_i32(x) { // Currently doesn't take isZeroUndef()
    x = x | 0;
    return x ? (31 - (Math_clz32((x ^ (x - 1))) | 0) | 0) : 32;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _saveSetjmp(env, label, table, size) {
    // Not particularly fast: slow table lookup of setjmpId to label. But setjmp
    // prevents relooping anyhow, so slowness is to be expected. And typical case
    // is 1 setjmp per invocation, or less.
    env = env|0;
    label = label|0;
    table = table|0;
    size = size|0;
    var i = 0;
    setjmpId = (setjmpId+1)|0;
    HEAP32[((env)>>2)]=setjmpId;
    while ((i|0) < (size|0)) {
      if (((HEAP32[(((table)+((i<<3)))>>2)])|0) == 0) {
        HEAP32[(((table)+((i<<3)))>>2)]=setjmpId;
        HEAP32[(((table)+((i<<3)+4))>>2)]=label;
        // prepare next slot
        HEAP32[(((table)+((i<<3)+8))>>2)]=0;
        tempRet0 = size;
        return table | 0;
      }
      i = i+1|0;
    }
    // grow the table
    size = (size*2)|0;
    table = _realloc(table|0, 8*(size+1|0)|0) | 0;
    table = _saveSetjmp(env|0, label|0, table|0, size|0) | 0;
    tempRet0 = size;
    return table | 0;
}
function _testSetjmp(id, table, size) {
    id = id|0;
    table = table|0;
    size = size|0;
    var i = 0, curr = 0;
    while ((i|0) < (size|0)) {
      curr = ((HEAP32[(((table)+((i<<3)))>>2)])|0);
      if ((curr|0) == 0) break;
      if ((curr|0) == (id|0)) {
        return ((HEAP32[(((table)+((i<<3)+4))>>2)])|0);
      }
      i = i+1|0;
    }
    return 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    var aligned_dest_end = 0;
    var block_aligned_dest_end = 0;
    var dest_end = 0;
    // Test against a benchmarked cutoff limit for when HEAPU8.set() becomes faster to use.
    if ((num|0) >=
      8192
    ) {
      return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    }

    ret = dest|0;
    dest_end = (dest + num)|0;
    if ((dest&3) == (src&3)) {
      // The initial unaligned < 4-byte front.
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      aligned_dest_end = (dest_end & -4)|0;
      block_aligned_dest_end = (aligned_dest_end - 64)|0;
      while ((dest|0) <= (block_aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        HEAP32[(((dest)+(4))>>2)]=((HEAP32[(((src)+(4))>>2)])|0);
        HEAP32[(((dest)+(8))>>2)]=((HEAP32[(((src)+(8))>>2)])|0);
        HEAP32[(((dest)+(12))>>2)]=((HEAP32[(((src)+(12))>>2)])|0);
        HEAP32[(((dest)+(16))>>2)]=((HEAP32[(((src)+(16))>>2)])|0);
        HEAP32[(((dest)+(20))>>2)]=((HEAP32[(((src)+(20))>>2)])|0);
        HEAP32[(((dest)+(24))>>2)]=((HEAP32[(((src)+(24))>>2)])|0);
        HEAP32[(((dest)+(28))>>2)]=((HEAP32[(((src)+(28))>>2)])|0);
        HEAP32[(((dest)+(32))>>2)]=((HEAP32[(((src)+(32))>>2)])|0);
        HEAP32[(((dest)+(36))>>2)]=((HEAP32[(((src)+(36))>>2)])|0);
        HEAP32[(((dest)+(40))>>2)]=((HEAP32[(((src)+(40))>>2)])|0);
        HEAP32[(((dest)+(44))>>2)]=((HEAP32[(((src)+(44))>>2)])|0);
        HEAP32[(((dest)+(48))>>2)]=((HEAP32[(((src)+(48))>>2)])|0);
        HEAP32[(((dest)+(52))>>2)]=((HEAP32[(((src)+(52))>>2)])|0);
        HEAP32[(((dest)+(56))>>2)]=((HEAP32[(((src)+(56))>>2)])|0);
        HEAP32[(((dest)+(60))>>2)]=((HEAP32[(((src)+(60))>>2)])|0);
        dest = (dest+64)|0;
        src = (src+64)|0;
      }
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    } else {
      // In the unaligned copy case, unroll a bit as well.
      aligned_dest_end = (dest_end - 4)|0;
      while ((dest|0) < (aligned_dest_end|0) ) {
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        HEAP8[(((dest)+(1))>>0)]=((HEAP8[(((src)+(1))>>0)])|0);
        HEAP8[(((dest)+(2))>>0)]=((HEAP8[(((src)+(2))>>0)])|0);
        HEAP8[(((dest)+(3))>>0)]=((HEAP8[(((src)+(3))>>0)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
      }
    }
    // The remaining unaligned < 4 byte tail.
    while ((dest|0) < (dest_end|0)) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
    }
    return ret|0;
}
function _memmove(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
      // Unlikely case: Copy backwards in a safe manner
      ret = dest;
      src = (src + num)|0;
      dest = (dest + num)|0;
      while ((num|0) > 0) {
        dest = (dest - 1)|0;
        src = (src - 1)|0;
        num = (num - 1)|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      }
      dest = ret;
    } else {
      _memcpy(dest, src, num) | 0;
    }
    return dest | 0;
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var end = 0, aligned_end = 0, block_aligned_end = 0, value4 = 0;
    end = (ptr + num)|0;

    value = value & 0xff;
    if ((num|0) >= 67 /* 64 bytes for an unrolled loop + 3 bytes for unaligned head*/) {
      while ((ptr&3) != 0) {
        HEAP8[((ptr)>>0)]=value;
        ptr = (ptr+1)|0;
      }

      aligned_end = (end & -4)|0;
      block_aligned_end = (aligned_end - 64)|0;
      value4 = value | (value << 8) | (value << 16) | (value << 24);

      while((ptr|0) <= (block_aligned_end|0)) {
        HEAP32[((ptr)>>2)]=value4;
        HEAP32[(((ptr)+(4))>>2)]=value4;
        HEAP32[(((ptr)+(8))>>2)]=value4;
        HEAP32[(((ptr)+(12))>>2)]=value4;
        HEAP32[(((ptr)+(16))>>2)]=value4;
        HEAP32[(((ptr)+(20))>>2)]=value4;
        HEAP32[(((ptr)+(24))>>2)]=value4;
        HEAP32[(((ptr)+(28))>>2)]=value4;
        HEAP32[(((ptr)+(32))>>2)]=value4;
        HEAP32[(((ptr)+(36))>>2)]=value4;
        HEAP32[(((ptr)+(40))>>2)]=value4;
        HEAP32[(((ptr)+(44))>>2)]=value4;
        HEAP32[(((ptr)+(48))>>2)]=value4;
        HEAP32[(((ptr)+(52))>>2)]=value4;
        HEAP32[(((ptr)+(56))>>2)]=value4;
        HEAP32[(((ptr)+(60))>>2)]=value4;
        ptr = (ptr + 64)|0;
      }

      while ((ptr|0) < (aligned_end|0) ) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    // The remaining bytes.
    while ((ptr|0) < (end|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (end-num)|0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        ___setErrNo(12);
        return -1;
      }
    }
    return oldDynamicTop|0;
}

  
function dynCall_idi(index,a1,a2) {
  index = index|0;
  a1=+a1; a2=a2|0;
  return FUNCTION_TABLE_idi[index&0](+a1,a2|0)|0;
}


function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&63](a1|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&63](a1|0,a2|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&127](a1|0,a2|0,a3|0)|0;
}


function dynCall_iiiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  return FUNCTION_TABLE_iiiii[index&63](a1|0,a2|0,a3|0,a4|0)|0;
}


function dynCall_iiiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0; a5=a5|0; a6=a6|0; a7=a7|0; a8=a8|0; a9=a9|0;
  return FUNCTION_TABLE_iiiiiiiiii[index&31](a1|0,a2|0,a3|0,a4|0,a5|0,a6|0,a7|0,a8|0,a9|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&63](a1|0);
}


function dynCall_vid(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=+a2;
  FUNCTION_TABLE_vid[index&63](a1|0,+a2);
}


function dynCall_vii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  FUNCTION_TABLE_vii[index&127](a1|0,a2|0);
}


function dynCall_viii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  FUNCTION_TABLE_viii[index&127](a1|0,a2|0,a3|0);
}


function dynCall_viiii(index,a1,a2,a3,a4) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0; a4=a4|0;
  FUNCTION_TABLE_viiii[index&63](a1|0,a2|0,a3|0,a4|0);
}

function b0(p0,p1) {
 p0 = +p0;p1 = p1|0; nullFunc_idi(0);return 0;
}
function b1(p0) {
 p0 = p0|0; nullFunc_ii(1);return 0;
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(2);return 0;
}
function b3(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(3);return 0;
}
function b4(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_iiiii(4);return 0;
}
function b5(p0,p1,p2,p3,p4,p5,p6,p7,p8) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0;p4 = p4|0;p5 = p5|0;p6 = p6|0;p7 = p7|0;p8 = p8|0; nullFunc_iiiiiiiiii(5);return 0;
}
function b6(p0) {
 p0 = p0|0; nullFunc_vi(6);
}
function b7(p0,p1) {
 p0 = p0|0;p1 = +p1; nullFunc_vid(7);
}
function b8(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_vii(8);
}
function _emscripten_longjmp__wrapper(p0,p1) {
 p0 = p0|0;p1 = p1|0; _emscripten_longjmp(p0|0,p1|0);
}
function b9(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_viii(9);
}
function b10(p0,p1,p2,p3) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0;p3 = p3|0; nullFunc_viiii(10);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_idi = [b0];
var FUNCTION_TABLE_ii = [b1,b1,b1,b1,___stdio_close,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_png_create_info_struct,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,_png_set_interlace_handling,b1,b1,_malloc,b1,b1,b1,b1,b1,b1,b1,b1,b1,_liq_aligned_malloc,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_iii = [b2,_deflate_stored,_deflate_fast,_deflate_slow,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_read_chunk_callback,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,_png_get_rowbytes,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_compare_popularity,_comparevariance,_vp_compare_distance,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,_png_user_version_check,_png_malloc_warn];
var FUNCTION_TABLE_iiii = [b3,b3,b3,b3,b3,___stdout_write,___stdio_seek,___stdio_write,___stdio_read,_sn_write,b3,b3,b3,b3,b3,b3,b3,_png_set_option,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,_png_get_valid,_png_get_gAMA,_fprintf,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,_png_zalloc,b3,b3,b3,_zcalloc,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_iiiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,_png_create_read_struct,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4,b4,b4,_fwrite,b4,b4,b4,b4,_png_create_write_struct,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_iiiiiiiiii = [b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,b5,_png_get_IHDR,b5,b5,b5,b5
,b5,b5,b5];
var FUNCTION_TABLE_vi = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_png_set_expand,b6,_png_set_strip_16,_png_set_gray_to_rgb
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_user_flush_data,b6,b6,b6,b6,b6,_liq_aligned_free,_free,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_png_default_flush
,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_vid = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_adjust_histogram_callback,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_vii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_rwpng_warning_stderr_handler,_rwpng_warning_silent_handler,b8,_rwpng_error_handler,b8,b8,b8,b8,b8,b8,b8,b8,_png_read_info,b8,b8,b8,b8,b8
,b8,b8,b8,b8,_png_read_update_info,b8,b8,b8,_png_read_image,_png_read_end,b8,b8,b8,_png_destroy_write_struct,_png_set_compression_level,_png_set_compression_mem_level,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,_emscripten_longjmp__wrapper,b8,b8,b8,_png_zfree,_png_free,b8,b8,_zcfree,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_viii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_log_callback,b9,b9,b9,b9,b9,_png_destroy_read_struct,b9,b9,_png_set_read_user_chunk_fn,b9,_png_set_read_fn,_user_read_data,b9,b9,b9,_png_set_filler,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_user_write_data,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_png_read_filter_row_sub,_png_read_filter_row_up,_png_read_filter_row_avg,_png_read_filter_row_paeth_multibyte_pixel,_png_read_filter_row_paeth_1byte_pixel,_png_default_write_data,b9
,b9,b9,b9,b9,b9,b9,b9,b9,_png_default_read_data,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_png_set_keep_unknown_chunks,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,_png_set_mem_fn,_png_set_error_fn,b10,b10,b10];

  return { ___errno_location: ___errno_location, ___muldi3: ___muldi3, ___udivdi3: ___udivdi3, _bitshift64Lshr: _bitshift64Lshr, _bitshift64Shl: _bitshift64Shl, _fflush: _fflush, _free: _free, _i64Add: _i64Add, _i64Subtract: _i64Subtract, _llvm_bswap_i32: _llvm_bswap_i32, _main: _main, _malloc: _malloc, _memcpy: _memcpy, _memmove: _memmove, _memset: _memset, _realloc: _realloc, _saveSetjmp: _saveSetjmp, _sbrk: _sbrk, _testSetjmp: _testSetjmp, dynCall_idi: dynCall_idi, dynCall_ii: dynCall_ii, dynCall_iii: dynCall_iii, dynCall_iiii: dynCall_iiii, dynCall_iiiii: dynCall_iiiii, dynCall_iiiiiiiiii: dynCall_iiiiiiiiii, dynCall_vi: dynCall_vi, dynCall_vid: dynCall_vid, dynCall_vii: dynCall_vii, dynCall_viii: dynCall_viii, dynCall_viiii: dynCall_viiii, establishStackSpace: establishStackSpace, getTempRet0: getTempRet0, runPostSets: runPostSets, setTempRet0: setTempRet0, setThrew: setThrew, stackAlloc: stackAlloc, stackRestore: stackRestore, stackSave: stackSave };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____errno_location.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____muldi3.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real____udivdi3.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Lshr.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__bitshift64Shl.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__fflush.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__free.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Add.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__i64Subtract.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__llvm_bswap_i32.apply(null, arguments);
};

var real__main = asm["_main"]; asm["_main"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__main.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__malloc.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__memmove.apply(null, arguments);
};

var real__realloc = asm["_realloc"]; asm["_realloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__realloc.apply(null, arguments);
};

var real__saveSetjmp = asm["_saveSetjmp"]; asm["_saveSetjmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__saveSetjmp.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__sbrk.apply(null, arguments);
};

var real__testSetjmp = asm["_testSetjmp"]; asm["_testSetjmp"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real__testSetjmp.apply(null, arguments);
};

var real_establishStackSpace = asm["establishStackSpace"]; asm["establishStackSpace"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_establishStackSpace.apply(null, arguments);
};

var real_getTempRet0 = asm["getTempRet0"]; asm["getTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_getTempRet0.apply(null, arguments);
};

var real_setTempRet0 = asm["setTempRet0"]; asm["setTempRet0"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setTempRet0.apply(null, arguments);
};

var real_setThrew = asm["setThrew"]; asm["setThrew"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_setThrew.apply(null, arguments);
};

var real_stackAlloc = asm["stackAlloc"]; asm["stackAlloc"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackAlloc.apply(null, arguments);
};

var real_stackRestore = asm["stackRestore"]; asm["stackRestore"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackRestore.apply(null, arguments);
};

var real_stackSave = asm["stackSave"]; asm["stackSave"] = function() {
  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
  return real_stackSave.apply(null, arguments);
};
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _free = Module["_free"] = asm["_free"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _main = Module["_main"] = asm["_main"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _memset = Module["_memset"] = asm["_memset"];
var _realloc = Module["_realloc"] = asm["_realloc"];
var _saveSetjmp = Module["_saveSetjmp"] = asm["_saveSetjmp"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _testSetjmp = Module["_testSetjmp"] = asm["_testSetjmp"];
var establishStackSpace = Module["establishStackSpace"] = asm["establishStackSpace"];
var getTempRet0 = Module["getTempRet0"] = asm["getTempRet0"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var setTempRet0 = Module["setTempRet0"] = asm["setTempRet0"];
var setThrew = Module["setThrew"] = asm["setThrew"];
var stackAlloc = Module["stackAlloc"] = asm["stackAlloc"];
var stackRestore = Module["stackRestore"] = asm["stackRestore"];
var stackSave = Module["stackSave"] = asm["stackSave"];
var dynCall_idi = Module["dynCall_idi"] = asm["dynCall_idi"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iiiii = Module["dynCall_iiiii"] = asm["dynCall_iiiii"];
var dynCall_iiiiiiiiii = Module["dynCall_iiiiiiiiii"] = asm["dynCall_iiiiiiiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vid = Module["dynCall_vid"] = asm["dynCall_vid"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;



// === Auto-generated postamble setup entry stuff ===

Module['asm'] = asm;

if (!Module["intArrayFromString"]) Module["intArrayFromString"] = function() { abort("'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayToString"]) Module["intArrayToString"] = function() { abort("'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["ccall"]) Module["ccall"] = function() { abort("'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["cwrap"]) Module["cwrap"] = function() { abort("'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["setValue"]) Module["setValue"] = function() { abort("'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getValue"]) Module["getValue"] = function() { abort("'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocate"]) Module["allocate"] = function() { abort("'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getMemory"]) Module["getMemory"] = function() { abort("'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["Pointer_stringify"]) Module["Pointer_stringify"] = function() { abort("'Pointer_stringify' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["AsciiToString"]) Module["AsciiToString"] = function() { abort("'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToAscii"]) Module["stringToAscii"] = function() { abort("'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ArrayToString"]) Module["UTF8ArrayToString"] = function() { abort("'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF8ToString"]) Module["UTF8ToString"] = function() { abort("'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8Array"]) Module["stringToUTF8Array"] = function() { abort("'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF8"]) Module["stringToUTF8"] = function() { abort("'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF8"]) Module["lengthBytesUTF8"] = function() { abort("'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF16ToString"]) Module["UTF16ToString"] = function() { abort("'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF16"]) Module["stringToUTF16"] = function() { abort("'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF16"]) Module["lengthBytesUTF16"] = function() { abort("'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["UTF32ToString"]) Module["UTF32ToString"] = function() { abort("'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stringToUTF32"]) Module["stringToUTF32"] = function() { abort("'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["lengthBytesUTF32"]) Module["lengthBytesUTF32"] = function() { abort("'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["allocateUTF8"]) Module["allocateUTF8"] = function() { abort("'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackTrace"]) Module["stackTrace"] = function() { abort("'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreRun"]) Module["addOnPreRun"] = function() { abort("'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnInit"]) Module["addOnInit"] = function() { abort("'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPreMain"]) Module["addOnPreMain"] = function() { abort("'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnExit"]) Module["addOnExit"] = function() { abort("'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addOnPostRun"]) Module["addOnPostRun"] = function() { abort("'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeStringToMemory"]) Module["writeStringToMemory"] = function() { abort("'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeArrayToMemory"]) Module["writeArrayToMemory"] = function() { abort("'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["writeAsciiToMemory"]) Module["writeAsciiToMemory"] = function() { abort("'writeAsciiToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addRunDependency"]) Module["addRunDependency"] = function() { abort("'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["removeRunDependency"]) Module["removeRunDependency"] = function() { abort("'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS"]) Module["FS"] = function() { abort("'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["FS_createFolder"]) Module["FS_createFolder"] = function() { abort("'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPath"]) Module["FS_createPath"] = function() { abort("'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDataFile"]) Module["FS_createDataFile"] = function() { abort("'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createPreloadedFile"]) Module["FS_createPreloadedFile"] = function() { abort("'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLazyFile"]) Module["FS_createLazyFile"] = function() { abort("'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createLink"]) Module["FS_createLink"] = function() { abort("'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_createDevice"]) Module["FS_createDevice"] = function() { abort("'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["FS_unlink"]) Module["FS_unlink"] = function() { abort("'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you") };
if (!Module["GL"]) Module["GL"] = function() { abort("'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["staticAlloc"]) Module["staticAlloc"] = function() { abort("'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynamicAlloc"]) Module["dynamicAlloc"] = function() { abort("'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["warnOnce"]) Module["warnOnce"] = function() { abort("'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadDynamicLibrary"]) Module["loadDynamicLibrary"] = function() { abort("'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["loadWebAssemblyModule"]) Module["loadWebAssemblyModule"] = function() { abort("'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getLEB"]) Module["getLEB"] = function() { abort("'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFunctionTables"]) Module["getFunctionTables"] = function() { abort("'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["alignFunctionTables"]) Module["alignFunctionTables"] = function() { abort("'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["registerFunctions"]) Module["registerFunctions"] = function() { abort("'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["addFunction"]) Module["addFunction"] = function() { abort("'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["removeFunction"]) Module["removeFunction"] = function() { abort("'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getFuncWrapper"]) Module["getFuncWrapper"] = function() { abort("'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["prettyPrint"]) Module["prettyPrint"] = function() { abort("'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["makeBigInt"]) Module["makeBigInt"] = function() { abort("'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["dynCall"]) Module["dynCall"] = function() { abort("'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["getCompilerSetting"]) Module["getCompilerSetting"] = function() { abort("'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackSave"]) Module["stackSave"] = function() { abort("'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackRestore"]) Module["stackRestore"] = function() { abort("'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["stackAlloc"]) Module["stackAlloc"] = function() { abort("'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["intArrayFromBase64"]) Module["intArrayFromBase64"] = function() { abort("'intArrayFromBase64' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };
if (!Module["tryParseAsDataURI"]) Module["tryParseAsDataURI"] = function() { abort("'tryParseAsDataURI' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") };if (!Module["ALLOC_NORMAL"]) Object.defineProperty(Module, "ALLOC_NORMAL", { get: function() { abort("'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STACK"]) Object.defineProperty(Module, "ALLOC_STACK", { get: function() { abort("'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_STATIC"]) Object.defineProperty(Module, "ALLOC_STATIC", { get: function() { abort("'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_DYNAMIC"]) Object.defineProperty(Module, "ALLOC_DYNAMIC", { get: function() { abort("'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });
if (!Module["ALLOC_NONE"]) Object.defineProperty(Module, "ALLOC_NONE", { get: function() { abort("'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)") } });

if (memoryInitializer) {
  if (!isDataURI(memoryInitializer)) {
    if (typeof Module['locateFile'] === 'function') {
      memoryInitializer = Module['locateFile'](memoryInitializer);
    } else if (Module['memoryInitializerPrefixURL']) {
      memoryInitializer = Module['memoryInitializerPrefixURL'] + memoryInitializer;
    }
  }
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, GLOBAL_BASE);
  } else {
    addRunDependency('memory initializer');
    var applyMemoryInitializer = function(data) {
      if (data.byteLength) data = new Uint8Array(data);
      for (var i = 0; i < data.length; i++) {
        assert(HEAPU8[GLOBAL_BASE + i] === 0, "area for memory initializer should not have been touched before it's loaded");
      }
      HEAPU8.set(data, GLOBAL_BASE);
      // Delete the typed array that contains the large blob of the memory initializer request response so that
      // we won't keep unnecessary memory lying around. However, keep the XHR object itself alive so that e.g.
      // its .status field can still be accessed later.
      if (Module['memoryInitializerRequest']) delete Module['memoryInitializerRequest'].response;
      removeRunDependency('memory initializer');
    }
    function doBrowserLoad() {
      Module['readAsync'](memoryInitializer, applyMemoryInitializer, function() {
        throw 'could not load memory initializer ' + memoryInitializer;
      });
    }
    var memoryInitializerBytes = tryParseAsDataURI(memoryInitializer);
    if (memoryInitializerBytes) {
      applyMemoryInitializer(memoryInitializerBytes.buffer);
    } else
    if (Module['memoryInitializerRequest']) {
      // a network request has already been created, just use that
      function useRequest() {
        var request = Module['memoryInitializerRequest'];
        var response = request.response;
        if (request.status !== 200 && request.status !== 0) {
          var data = tryParseAsDataURI(Module['memoryInitializerRequestURL']);
          if (data) {
            response = data.buffer;
          } else {
            // If you see this warning, the issue may be that you are using locateFile or memoryInitializerPrefixURL, and defining them in JS. That
            // means that the HTML file doesn't know about them, and when it tries to create the mem init request early, does it to the wrong place.
            // Look in your browser's devtools network console to see what's going on.
            console.warn('a problem seems to have happened with Module.memoryInitializerRequest, status: ' + request.status + ', retrying ' + memoryInitializer);
            doBrowserLoad();
            return;
          }
        }
        applyMemoryInitializer(response);
      }
      if (Module['memoryInitializerRequest'].response) {
        setTimeout(useRequest, 0); // it's already here; but, apply it asynchronously
      } else {
        Module['memoryInitializerRequest'].addEventListener('load', useRequest); // wait for it
      }
    } else {
      // fetch it from the network ourselves
      doBrowserLoad();
    }
  }
}



/**
 * @constructor
 * @extends {Error}
 * @this {ExitStatus}
 */
function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  var argv = stackAlloc((argc + 1) * 4);
  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);
  for (var i = 1; i < argc; i++) {
    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);
  }
  HEAP32[(argv >> 2) + argc] = 0;


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
      exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      var toLog = e;
      if (e && typeof e === 'object' && e.stack) {
        toLog = [e, e.stack];
      }
      Module.printErr('exception thrown: ' + toLog);
      Module['quit'](1, e);
    }
  } finally {
    calledMain = true;
  }
}




/** @type {function(Array=)} */
function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = run;

function checkUnflushedContent() {
  // Compiler settings do not allow exiting the runtime, so flushing
  // the streams is not possible. but in ASSERTIONS mode we check
  // if there was something to flush, and if so tell the user they
  // should request that the runtime be exitable.
  // Normally we would not even include flush() at all, but in ASSERTIONS
  // builds we do so just for this check, and here we see if there is any
  // content to flush, that is, we check if there would have been
  // something a non-ASSERTIONS build would have not seen.
  // How we flush the streams depends on whether we are in NO_FILESYSTEM
  // mode (which has its own special function for this; otherwise, all
  // the code is inside libc)
  var print = Module['print'];
  var printErr = Module['printErr'];
  var has = false;
  Module['print'] = Module['printErr'] = function(x) {
    has = true;
  }
  try { // it doesn't matter if it fails
    var flush = Module['_fflush'];
    if (flush) flush(0);
    // also flush in the JS FS layer
    var hasFS = true;
    if (hasFS) {
      ['stdout', 'stderr'].forEach(function(name) {
        var info = FS.analyzePath('/dev/' + name);
        if (!info) return;
        var stream = info.object;
        var rdev = stream.rdev;
        var tty = TTY.ttys[rdev];
        if (tty && tty.output && tty.output.length) {
          has = true;
        }
      });
    }
  } catch(e) {}
  Module['print'] = print;
  Module['printErr'] = printErr;
  if (has) {
    warnOnce('stdio streams had content in them that was not flushed. you should set NO_EXIT_RUNTIME to 0 (see the FAQ), or make sure to emit a newline when you printf etc.');
  }
}

function exit(status, implicit) {
  checkUnflushedContent();

  // if this is just main exit-ing implicitly, and the status is 0, then we
  // don't need to do anything here and can just leave. if the status is
  // non-zero, though, then we need to report it.
  // (we may have warned about this earlier, if a situation justifies doing so)
  if (implicit && Module['noExitRuntime'] && status === 0) {
    return;
  }

  if (Module['noExitRuntime']) {
    // if exit() was called, we may warn the user if the runtime isn't actually being shut down
    if (!implicit) {
      Module.printErr('exit(' + status + ') called, but NO_EXIT_RUNTIME is set, so halting execution but not exiting the runtime or preventing further async execution (build with NO_EXIT_RUNTIME=0, if you want a true shutdown)');
    }
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  }
  Module['quit'](status, new ExitStatus(status));
}
Module['exit'] = exit;

var abortDecorators = [];

function abort(what) {
  if (Module['onAbort']) {
    Module['onAbort'](what);
  }

  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';
  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

Module["noExitRuntime"] = true;

run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



	var file = null;

	/* Test if processed image has been mounted at input-new.png */
	try {
		/* read processed image data in file var */
		file = FS.readFile("/input-new.png");
	} catch (e) {
		/* Cleaning up input png from MEMFS */
		FS.unlink("/input.png");
		return new Error("No output: " + stderr);
	}

	/* Cleanup files from */
	FS.unlink("/input-new.png");
	FS.unlink("/input.png");

	return {
		"data": file
	};
}

pngquant.call(this);

